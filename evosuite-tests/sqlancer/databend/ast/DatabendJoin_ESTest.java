/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 14:01:43 GMT 2025
 */

package sqlancer.databend.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.common.ast.JoinBase;
import sqlancer.common.ast.newast.TableReferenceNode;
import sqlancer.databend.DatabendProvider;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendJoin;
import sqlancer.databend.ast.DatabendTableReference;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendJoin_ESTest extends DatabendJoin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("UCT", linkedList0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendTableReference databendTableReference1 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createLeftOuterJoin(databendTableReference0, databendTableReference1, databendTableReference0);
      assertEquals(JoinBase.JoinType.LEFT, databendJoin0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("UCT", linkedList0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      JoinBase.JoinType joinBase_JoinType0 = JoinBase.JoinType.FULL;
      DatabendJoin databendJoin0 = new DatabendJoin(databendTableReference0, databendTableReference0, joinBase_JoinType0, databendTableReference0);
      DatabendTableReference databendTableReference1 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin1 = DatabendJoin.createRightOuterJoin(databendTableReference0, databendTableReference1, databendJoin0);
      assertNotSame(databendJoin0, databendJoin1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabendJoin databendJoin0 = DatabendJoin.createRightOuterJoin((DatabendTableReference) null, (DatabendTableReference) null, (DatabendExpression) null);
      DatabendJoin databendJoin1 = DatabendJoin.createLeftOuterJoin((DatabendTableReference) null, (DatabendTableReference) null, databendJoin0);
      DatabendExpression databendExpression0 = databendJoin1.getOnCondition();
      assertNotSame(databendJoin1, databendExpression0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendTableReference databendTableReference1 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createInnerJoin(databendTableReference1, databendTableReference0, databendTableReference1);
      TableReferenceNode<DatabendExpression, DatabendSchema.DatabendTable> tableReferenceNode0 = databendJoin0.getRightTable();
      assertNotNull(tableReferenceNode0);
      assertNotSame(databendTableReference1, tableReferenceNode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabendTableReference databendTableReference0 = new DatabendTableReference((DatabendSchema.DatabendTable) null);
      DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.LEFT;
      DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin(databendTableReference0, databendTableReference0, databendJoin_OuterType0);
      TableReferenceNode<DatabendExpression, DatabendSchema.DatabendTable> tableReferenceNode0 = databendJoin0.getRightTable();
      assertSame(databendTableReference0, tableReferenceNode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabendTableReference databendTableReference0 = new DatabendTableReference((DatabendSchema.DatabendTable) null);
      DatabendJoin databendJoin0 = DatabendJoin.createRightOuterJoin(databendTableReference0, databendTableReference0, databendTableReference0);
      DatabendTableReference[] databendTableReferenceArray0 = new DatabendTableReference[8];
      DatabendJoin.OuterType databendJoin_OuterType0 = databendJoin0.getOuterType();
      DatabendJoin databendJoin1 = DatabendJoin.createNaturalJoin(databendTableReferenceArray0[3], databendTableReference0, databendJoin_OuterType0);
      TableReferenceNode<DatabendExpression, DatabendSchema.DatabendTable> tableReferenceNode0 = databendJoin1.getLeftTable();
      assertNull(tableReferenceNode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabendTableReference[] databendTableReferenceArray0 = new DatabendTableReference[2];
      Randomly.subset(databendTableReferenceArray0);
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      DatabendTableReference[] databendTableReferenceArray1 = new DatabendTableReference[6];
      DatabendSchema.DatabendColumn[] databendSchema_DatabendColumnArray0 = new DatabendSchema.DatabendColumn[2];
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      List<DatabendSchema.DatabendColumn> list0 = Randomly.nonEmptySubset(databendSchema_DatabendColumnArray0);
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("}<<-'ZVs", list0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      databendTableReferenceArray1[0] = databendTableReference0;
      databendTableReferenceArray1[1] = databendTableReferenceArray1[0];
      databendTableReferenceArray1[3] = databendTableReferenceArray1[1];
      databendTableReferenceArray1[5] = databendTableReference0;
      List<DatabendTableReference> list1 = Randomly.nonEmptySubset(databendTableReferenceArray1);
      // Undeclared exception!
      try { 
        DatabendJoin.getJoins(list1, databendProvider_DatabendGlobalState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.gen.DatabendNewExpressionGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabendTableReference[] databendTableReferenceArray0 = new DatabendTableReference[2];
      Randomly.subset(databendTableReferenceArray0);
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      DatabendTableReference[] databendTableReferenceArray1 = new DatabendTableReference[6];
      DatabendSchema.DatabendColumn[] databendSchema_DatabendColumnArray0 = new DatabendSchema.DatabendColumn[2];
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      List<DatabendSchema.DatabendColumn> list0 = Randomly.nonEmptySubset(databendSchema_DatabendColumnArray0);
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("}<<-'ZVs", list0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      databendTableReferenceArray1[3] = databendTableReference0;
      List<DatabendTableReference> list1 = Randomly.nonEmptySubset(databendTableReferenceArray1);
      // Undeclared exception!
      try { 
        DatabendJoin.getJoins(list1, databendProvider_DatabendGlobalState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendJoin", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabendJoin databendJoin0 = DatabendJoin.createInnerJoin((DatabendTableReference) null, (DatabendTableReference) null, (DatabendExpression) null);
      TableReferenceNode<DatabendExpression, DatabendSchema.DatabendTable> tableReferenceNode0 = databendJoin0.getRightTable();
      assertNull(tableReferenceNode0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.RIGHT;
      DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin((DatabendTableReference) null, (DatabendTableReference) null, databendJoin_OuterType0);
      DatabendJoin.OuterType databendJoin_OuterType1 = databendJoin0.getOuterType();
      assertSame(databendJoin_OuterType0, databendJoin_OuterType1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabendJoin databendJoin0 = DatabendJoin.createInnerJoin((DatabendTableReference) null, (DatabendTableReference) null, (DatabendExpression) null);
      DatabendExpression databendExpression0 = databendJoin0.getOnCondition();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabendTableReference[] databendTableReferenceArray0 = new DatabendTableReference[8];
      Randomly.subset(databendTableReferenceArray0);
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      List<DatabendTableReference> list0 = Randomly.nonEmptySubset(databendTableReferenceArray0);
      List<DatabendJoin> list1 = DatabendJoin.getJoins(list0, databendProvider_DatabendGlobalState0);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabendTableReference[] databendTableReferenceArray0 = new DatabendTableReference[8];
      List<DatabendTableReference> list0 = Randomly.subset(databendTableReferenceArray0);
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      List<DatabendJoin> list1 = DatabendJoin.getJoins(list0, databendProvider_DatabendGlobalState0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.getRandom();
      DatabendSchema.DatabendColumn[] databendSchema_DatabendColumnArray0 = new DatabendSchema.DatabendColumn[5];
      List<DatabendSchema.DatabendColumn> list0 = Randomly.nonEmptySubset(databendSchema_DatabendColumnArray0);
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("Africa/Addis_Ababa", list0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin(databendTableReference0, databendTableReference0, databendJoin_OuterType0);
      TableReferenceNode<DatabendExpression, DatabendSchema.DatabendTable> tableReferenceNode0 = databendJoin0.getLeftTable();
      assertSame(databendTableReference0, tableReferenceNode0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("UCT", linkedList0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      JoinBase.JoinType joinBase_JoinType0 = JoinBase.JoinType.FULL;
      DatabendJoin databendJoin0 = new DatabendJoin(databendTableReference0, databendTableReference0, joinBase_JoinType0, databendTableReference0);
      JoinBase.JoinType joinBase_JoinType1 = databendJoin0.getJoinType();
      assertSame(joinBase_JoinType0, joinBase_JoinType1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createInnerJoin(databendTableReference0, databendTableReference0, databendTableReference0);
      databendJoin0.setOnClause((DatabendExpression) databendTableReference0);
      assertEquals(JoinBase.JoinType.INNER, databendJoin0.getType());
  }
}
