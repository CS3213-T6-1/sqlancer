/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 13:12:41 GMT 2025
 */

package sqlancer.sqlite3.gen;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import sqlancer.common.query.SQLQueryAdapter;
import sqlancer.sqlite3.SQLite3GlobalState;
import sqlancer.sqlite3.gen.SQLite3PragmaGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLite3PragmaGenerator_ESTest extends SQLite3PragmaGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLite3PragmaGenerator.insertPragma((SQLite3GlobalState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.sqlite3.gen.SQLite3PragmaGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom(11);
      SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      assertEquals("PRAGMA cache_spill;", sQLQueryAdapter0.getQueryString());
      
      SQLQueryAdapter sQLQueryAdapter1 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA cache_spill;", sQLQueryAdapter1.getQueryString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom((-2766));
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA locking_mode;PRAGMA mmap_size;", sQLQueryAdapter0.getLogString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      Random.setNextRandom(15);
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      assertEquals("PRAGMA cell_size_check;", sQLQueryAdapter0.getQueryString());
      
      SQLQueryAdapter sQLQueryAdapter1 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA checkpoint_fullfsync;", sQLQueryAdapter1.getQueryString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom(96);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA optimize;", sQLQueryAdapter0.getLogString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      Random.setNextRandom((-83));
      SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      assertEquals("PRAGMA defer_foreign_keys;", sQLQueryAdapter0.getQueryString());
      
      SQLQueryAdapter sQLQueryAdapter1 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA foreign_keys;", sQLQueryAdapter1.getLogString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom(28);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA integrity_check;", sQLQueryAdapter0.getQueryString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      Random.setNextRandom((-1188));
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA cache_spill;", sQLQueryAdapter0.getLogString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      Random.setNextRandom(93);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA journal_mode;", sQLQueryAdapter0.getQueryString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom(100000);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA threads;", sQLQueryAdapter0.getLogString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom((-2770));
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA recursive_triggers;PRAGMA reverse_unordered_selects;", sQLQueryAdapter0.getQueryString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      Random.setNextRandom((-611));
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA short_column_names;", sQLQueryAdapter0.getQueryString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      assertEquals("PRAGMA auto_vacuum;", sQLQueryAdapter0.getLogString());
      
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter1 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA application_id;PRAGMA automatic_index;PRAGMA busy_timeout;PRAGMA cache_size;", sQLQueryAdapter1.getQueryString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom(3118);
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA default_cache_size;PRAGMA defer_foreign_keys;", sQLQueryAdapter0.getLogString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom(Integer.MAX_VALUE);
      SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      assertEquals("PRAGMA application_id;", sQLQueryAdapter0.getLogString());
      
      SQLQueryAdapter sQLQueryAdapter1 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA cell_size_check;", sQLQueryAdapter1.getLogString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom(31);
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA journal_size_limit;", sQLQueryAdapter0.getQueryString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom((-2825));
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA legacy_file_format;", sQLQueryAdapter0.getQueryString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      Random.setNextRandom(25);
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA ignore_check_constraints;", sQLQueryAdapter0.getLogString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom((-2593));
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA soft_heap_limit;", sQLQueryAdapter0.getLogString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom(2911);
      SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      assertEquals("PRAGMA wal_autocheckpoint;", sQLQueryAdapter0.getQueryString());
      
      SQLQueryAdapter sQLQueryAdapter1 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA wal_checkpoint(FULL);", sQLQueryAdapter1.getLogString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      sQLite3PragmaGenerator0.createPragma("cache_spill", (Supplier<Object>) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom(2911);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA wal_autocheckpoint;", sQLQueryAdapter0.getQueryString());
      
      SQLQueryAdapter sQLQueryAdapter1 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      assertEquals("PRAGMA wal_checkpoint(FULL);", sQLQueryAdapter1.getLogString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom((-2593));
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA stats;", sQLQueryAdapter0.getLogString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      Random.setNextRandom((-2770));
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      assertEquals("PRAGMA reverse_unordered_selects;", sQLQueryAdapter0.getLogString());
      
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter1 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA recursive_triggers;PRAGMA secure_delete;PRAGMA secure_delete;PRAGMA shrink_memory;", sQLQueryAdapter1.getLogString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      Random.setNextRandom(25);
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
      // Undeclared exception!
      try { 
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.sqlite3.gen.SQLite3PragmaGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
      SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
      assertEquals("PRAGMA application_id;PRAGMA application_id;PRAGMA auto_vacuum;", sQLQueryAdapter0.getQueryString());
  }
}
