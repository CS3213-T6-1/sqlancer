/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Apr 07 13:44:09 GMT 2025
 */

package sqlancer.sqlite3.ast;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class SQLite3CollateOperation_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "sqlancer.sqlite3.ast.SQLite3CollateOperation"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "C:\\Users\\yewjo\\OneDrive\\Desktop\\NUS\\y4s2\\cs3213\\project\\sqlancer"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\yewjo\\AppData\\Local\\Temp\\"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SQLite3CollateOperation_ESTest_scaffolding.class.getClassLoader() ,
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$3",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$2",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$1",
      "sqlancer.sqlite3.schema.SQLite3Schema$SQLite3Column",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$11",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$12",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$10",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3NullConstant",
      "sqlancer.sqlite3.ast.SQLite3UnaryOperation",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$6",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$5",
      "sqlancer.sqlite3.ast.SQLite3AffinityHelper$ConstantTuple",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$4",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$3",
      "sqlancer.common.visitor.UnaryOperation",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$9",
      "sqlancer.common.schema.AbstractTable",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$8",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$7",
      "sqlancer.sqlite3.ast.SQLite3UnaryOperation$UnaryOperator$1",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$2",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$10",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$1",
      "sqlancer.common.schema.AbstractSchema",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3IntConstant",
      "sqlancer.sqlite3.schema.SQLite3Schema$SQLite3Column$SQLite3CollateSequence",
      "sqlancer.sqlite3.schema.SQLite3DataType",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3BinaryConstant",
      "sqlancer.sqlite3.ast.SQLite3UnaryOperation$UnaryOperator$4",
      "sqlancer.sqlite3.ast.SQLite3UnaryOperation$UnaryOperator$3",
      "sqlancer.sqlite3.ast.SQLite3Expression",
      "sqlancer.sqlite3.ast.SQLite3UnaryOperation$UnaryOperator$2",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$9",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$8",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$7",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$6",
      "sqlancer.Randomly",
      "sqlancer.sqlite3.ast.SQLite3CollateOperation",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3RealConstant",
      "sqlancer.sqlite3.ast.SQLite3AffinityHelper",
      "sqlancer.sqlite3.schema.SQLite3Schema",
      "sqlancer.common.visitor.BinaryOperation",
      "sqlancer.sqlite3.ast.SQLite3BetweenOperation",
      "sqlancer.common.schema.AbstractTableColumn",
      "sqlancer.sqlite3.ast.SQLite3ColumnName",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$1",
      "sqlancer.common.ast.newast.Expression",
      "sqlancer.sqlite3.ast.SQLite3UnaryOperation$UnaryOperator",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$5",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$4",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$3",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator$2",
      "sqlancer.sqlite3.ast.SQLite3Constant",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$12",
      "sqlancer.sqlite3.ast.SQLite3TypeAffinity",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$13",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$10",
      "sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$11",
      "sqlancer.sqlite3.ast.SQLite3Function",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$9",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$8",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$7",
      "sqlancer.IgnoreMeException",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$6",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$5",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator$4",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3TextConstant"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SQLite3CollateOperation_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "sqlancer.sqlite3.ast.SQLite3CollateOperation",
      "sqlancer.sqlite3.ast.SQLite3Constant",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3TextConstant",
      "sqlancer.sqlite3.ast.SQLite3Cast",
      "sqlancer.SQLCastUtils",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3IntConstant",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3RealConstant",
      "sqlancer.sqlite3.ast.SQLite3Case",
      "sqlancer.sqlite3.ast.SQLite3Case$SQLite3CaseWithBaseExpression",
      "sqlancer.sqlite3.ast.SQLite3Function",
      "sqlancer.sqlite3.ast.SQLite3BetweenOperation",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation",
      "sqlancer.Randomly$StringGenerationStrategy$4",
      "sqlancer.Randomly$StringGenerationStrategy",
      "sqlancer.Randomly",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3BinaryConstant",
      "sqlancer.sqlite3.ast.SQLite3Case$CasePair",
      "sqlancer.sqlite3.ast.SQLite3Constant$SQLite3NullConstant",
      "sqlancer.sqlite3.ast.SQLite3AffinityHelper",
      "sqlancer.sqlite3.ast.SQLite3AffinityHelper$ConstantTuple",
      "sqlancer.sqlite3.ast.SQLite3TypeLiteral",
      "sqlancer.sqlite3.ast.SQLite3TableReference",
      "sqlancer.sqlite3.ast.SQLite3ExpressionCast",
      "sqlancer.sqlite3.ast.SQLite3Distinct",
      "sqlancer.sqlite3.ast.SQLite3UnaryOperation",
      "sqlancer.common.ast.SelectBase",
      "sqlancer.sqlite3.ast.SQLite3Select",
      "sqlancer.sqlite3.ast.SQLite3Select$SelectType",
      "sqlancer.common.schema.AbstractTableColumn",
      "sqlancer.sqlite3.schema.SQLite3Schema$SQLite3Column",
      "sqlancer.sqlite3.ast.SQLite3ColumnName",
      "sqlancer.sqlite3.ast.SQLite3WindowFunctionExpression$SQLite3WindowFunctionFrameSpecTerm",
      "sqlancer.sqlite3.ast.SQLite3WindowFunctionExpression$SQLite3WindowFunctionFrameSpecBetween",
      "sqlancer.ProviderAdapter",
      "sqlancer.SQLProviderAdapter",
      "sqlancer.sqlite3.SQLite3Provider",
      "sqlancer.sqlite3.ast.SQLite3Subquery",
      "sqlancer.common.schema.AbstractTable",
      "sqlancer.common.schema.AbstractRelationalTable",
      "sqlancer.sqlite3.schema.SQLite3Schema$SQLite3Table",
      "sqlancer.common.ast.JoinBase",
      "sqlancer.sqlite3.ast.SQLite3Join",
      "sqlancer.sqlite3.ast.SQLite3SetClause",
      "sqlancer.sqlite3.ast.SQLite3RowValueExpression",
      "sqlancer.sqlite3.ast.SQLite3WindowFunctionExpression",
      "sqlancer.common.visitor.UnaryOperation$OperatorKind",
      "sqlancer.sqlite3.ast.SQLite3PostfixText",
      "sqlancer.sqlite3.ast.SQLite3MatchOperation",
      "sqlancer.sqlite3.ast.SQLite3InOperation",
      "sqlancer.sqlite3.ast.SQLite3OrderingTerm",
      "sqlancer.sqlite3.ast.SQLite3PostfixUnaryOperation",
      "sqlancer.sqlite3.ast.SQLite3Aggregate",
      "sqlancer.sqlite3.ast.SQLite3Case$SQLite3CaseWithoutBaseExpression",
      "sqlancer.sqlite3.ast.SQLite3WindowFunction",
      "sqlancer.common.visitor.NodeVisitor",
      "sqlancer.common.visitor.ToStringVisitor",
      "sqlancer.sqlite3.SQLite3ToStringVisitor",
      "sqlancer.sqlite3.ast.SQLite3ExpressionFunction",
      "sqlancer.GlobalState",
      "sqlancer.SQLGlobalState",
      "sqlancer.sqlite3.SQLite3GlobalState",
      "sqlancer.MainOptions",
      "sqlancer.sqlite3.SQLite3CollateHelper",
      "sqlancer.sqlite3.ast.SQLite3Exist",
      "sqlancer.sqlite3.ast.SQLite3Text",
      "sqlancer.IgnoreMeException",
      "sqlancer.sqlite3.gen.SQLite3ExpressionGenerator",
      "sqlancer.LikeImplementationHelper",
      "sqlancer.common.query.Query",
      "sqlancer.common.query.SQLQueryAdapter",
      "sqlancer.common.query.ExpectedErrors",
      "sqlancer.common.query.SQLQueryResultCheckAdapter",
      "sqlancer.DatabendDorisPrestoConstant",
      "sqlancer.doris.ast.DorisConstant",
      "sqlancer.doris.ast.DorisConstant$DorisNullConstant",
      "sqlancer.cockroachdb.CockroachDBSchema$CockroachDBCompositeDataType",
      "sqlancer.cockroachdb.CockroachDBSchema$CockroachDBColumn",
      "sqlancer.cockroachdb.ast.CockroachDBColumnReference",
      "sqlancer.databend.ast.DatabendConstant",
      "sqlancer.databend.ast.DatabendConstant$DatabendTemporalConstant",
      "sqlancer.databend.ast.DatabendConstant$DatabendDateConstant",
      "sqlancer.common.ast.newast.NewUnaryPrefixOperatorNode",
      "sqlancer.databend.ast.DatabendUnaryPrefixOperation",
      "sqlancer.common.ast.newast.NewBinaryOperatorNode",
      "sqlancer.databend.ast.DatabendBinaryComparisonOperation",
      "sqlancer.oceanbase.OceanBaseSchema$OceanBaseColumn",
      "sqlancer.common.schema.TableIndex",
      "sqlancer.oceanbase.OceanBaseSchema$OceanBaseIndex",
      "sqlancer.oceanbase.OceanBaseSchema$OceanBaseTable",
      "sqlancer.sqlite3.ast.SQLite3TypeAffinity",
      "sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation$BinaryComparisonOperator",
      "sqlancer.sqlite3.ast.SQLite3BinaryOperation$BinaryOperator",
      "sqlancer.sqlite3.ast.SQLite3UnaryOperation$UnaryOperator"
    );
  }
}
