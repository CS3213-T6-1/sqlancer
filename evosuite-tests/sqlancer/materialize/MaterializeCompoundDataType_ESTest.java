/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 13:36:19 GMT 2025
 */

package sqlancer.materialize;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.common.schema.AbstractCompoundDataType;
import sqlancer.materialize.MaterializeCompoundDataType;
import sqlancer.materialize.MaterializeSchema;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MaterializeCompoundDataType_ESTest extends MaterializeCompoundDataType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType.create((MaterializeSchema.MaterializeDataType) null);
      materializeCompoundDataType0.getDataType();
      assertFalse(materializeCompoundDataType0.hasElementType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
      MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType.create(materializeSchema_MaterializeDataType0);
      materializeCompoundDataType0.getSize();
      assertFalse(materializeCompoundDataType0.hasElementType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
      MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType.create(materializeSchema_MaterializeDataType0, (-146));
      materializeCompoundDataType0.getSize();
      assertFalse(materializeCompoundDataType0.hasElementType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
      MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType.create(materializeSchema_MaterializeDataType0);
      // Undeclared exception!
      try { 
        materializeCompoundDataType0.getElemType();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
      MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType.create(materializeSchema_MaterializeDataType0);
      AbstractCompoundDataType<MaterializeSchema.MaterializeDataType> abstractCompoundDataType0 = materializeCompoundDataType0.getElementType();
      assertNull(abstractCompoundDataType0);
      assertFalse(materializeCompoundDataType0.hasElementType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
      MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType.create(materializeSchema_MaterializeDataType0);
      materializeCompoundDataType0.getDataType();
      assertFalse(materializeCompoundDataType0.hasElementType());
  }
}
