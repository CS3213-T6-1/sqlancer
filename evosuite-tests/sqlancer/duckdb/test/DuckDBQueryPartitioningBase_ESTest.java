/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 13:16:08 GMT 2025
 */

package sqlancer.duckdb.test;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.common.gen.ExpressionGenerator;
import sqlancer.duckdb.DuckDBProvider;
import sqlancer.duckdb.DuckDBSchema;
import sqlancer.duckdb.ast.DuckDBExpression;
import sqlancer.duckdb.gen.DuckDBExpressionGenerator;
import sqlancer.duckdb.test.DuckDBQueryPartitioningBase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DuckDBQueryPartitioningBase_ESTest extends DuckDBQueryPartitioningBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DuckDBProvider.DuckDBGlobalState duckDBProvider_DuckDBGlobalState0 = new DuckDBProvider.DuckDBGlobalState();
      DuckDBQueryPartitioningBase duckDBQueryPartitioningBase0 = new DuckDBQueryPartitioningBase(duckDBProvider_DuckDBGlobalState0);
      DuckDBExpressionGenerator duckDBExpressionGenerator0 = new DuckDBExpressionGenerator(duckDBProvider_DuckDBGlobalState0);
      duckDBQueryPartitioningBase0.gen = duckDBExpressionGenerator0;
      ExpressionGenerator<DuckDBExpression> expressionGenerator0 = duckDBQueryPartitioningBase0.getGen();
      assertNotNull(expressionGenerator0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DuckDBProvider.DuckDBGlobalState duckDBProvider_DuckDBGlobalState0 = new DuckDBProvider.DuckDBGlobalState();
      DuckDBQueryPartitioningBase duckDBQueryPartitioningBase0 = new DuckDBQueryPartitioningBase(duckDBProvider_DuckDBGlobalState0);
      LinkedList<DuckDBSchema.DuckDBTable> linkedList0 = new LinkedList<DuckDBSchema.DuckDBTable>();
      DuckDBSchema.DuckDBTables duckDBSchema_DuckDBTables0 = new DuckDBSchema.DuckDBTables(linkedList0);
      duckDBQueryPartitioningBase0.targetTables = duckDBSchema_DuckDBTables0;
      // Undeclared exception!
      try { 
        duckDBQueryPartitioningBase0.generateFetchColumns();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // [] 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DuckDBQueryPartitioningBase duckDBQueryPartitioningBase0 = new DuckDBQueryPartitioningBase((DuckDBProvider.DuckDBGlobalState) null);
      // Undeclared exception!
      try { 
        duckDBQueryPartitioningBase0.check();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.duckdb.test.DuckDBQueryPartitioningBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DuckDBProvider.DuckDBGlobalState duckDBProvider_DuckDBGlobalState0 = new DuckDBProvider.DuckDBGlobalState();
      DuckDBQueryPartitioningBase duckDBQueryPartitioningBase0 = new DuckDBQueryPartitioningBase(duckDBProvider_DuckDBGlobalState0);
      // Undeclared exception!
      try { 
        duckDBQueryPartitioningBase0.generateFetchColumns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.duckdb.test.DuckDBQueryPartitioningBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DuckDBProvider.DuckDBGlobalState duckDBProvider_DuckDBGlobalState0 = new DuckDBProvider.DuckDBGlobalState();
      DuckDBQueryPartitioningBase duckDBQueryPartitioningBase0 = new DuckDBQueryPartitioningBase(duckDBProvider_DuckDBGlobalState0);
      // Undeclared exception!
      try { 
        duckDBQueryPartitioningBase0.check();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DuckDBProvider.DuckDBGlobalState duckDBProvider_DuckDBGlobalState0 = new DuckDBProvider.DuckDBGlobalState();
      DuckDBQueryPartitioningBase duckDBQueryPartitioningBase0 = new DuckDBQueryPartitioningBase(duckDBProvider_DuckDBGlobalState0);
      ExpressionGenerator<DuckDBExpression> expressionGenerator0 = duckDBQueryPartitioningBase0.getGen();
      assertNull(expressionGenerator0);
  }
}
