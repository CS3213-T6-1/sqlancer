/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 14:03:36 GMT 2025
 */

package sqlancer.duckdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.common.ast.JoinBase;
import sqlancer.duckdb.DuckDBSchema;
import sqlancer.duckdb.ast.DuckDBExpression;
import sqlancer.duckdb.ast.DuckDBSelect;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DuckDBSelect_ESTest extends DuckDBSelect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DuckDBSelect duckDBSelect0 = new DuckDBSelect();
      JoinBase<DuckDBExpression>[] joinBaseArray0 = (JoinBase<DuckDBExpression>[]) Array.newInstance(JoinBase.class, 2);
      DuckDBSchema.DuckDBCompositeDataType.getRandomWithoutNull();
      List<JoinBase<DuckDBExpression>> list0 = Randomly.subset(joinBaseArray0);
      duckDBSelect0.setJoinClauses(list0);
      List<JoinBase<DuckDBExpression>> list1 = duckDBSelect0.getJoinClauses();
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DuckDBSelect duckDBSelect0 = new DuckDBSelect();
      // Undeclared exception!
      try { 
        duckDBSelect0.setJoinClauses((List<JoinBase<DuckDBExpression>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.duckdb.ast.DuckDBSelect", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DuckDBSelect duckDBSelect0 = new DuckDBSelect();
      duckDBSelect0.setJoinList((List<DuckDBExpression>) null);
      // Undeclared exception!
      try { 
        duckDBSelect0.getJoinClauses();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.duckdb.ast.DuckDBSelect", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DuckDBSelect duckDBSelect0 = new DuckDBSelect();
      DuckDBExpression[] duckDBExpressionArray0 = new DuckDBExpression[4];
      duckDBExpressionArray0[1] = (DuckDBExpression) duckDBSelect0;
      List<DuckDBExpression> list0 = Randomly.nonEmptySubset(duckDBExpressionArray0);
      duckDBSelect0.setJoinList(list0);
      // Undeclared exception!
      try { 
        duckDBSelect0.getJoinClauses();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sqlancer.duckdb.ast.DuckDBSelect cannot be cast to sqlancer.common.ast.JoinBase
         //
         verifyException("sqlancer.duckdb.ast.DuckDBSelect", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DuckDBSelect duckDBSelect0 = new DuckDBSelect();
      boolean boolean0 = duckDBSelect0.isDistinct();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DuckDBSelect duckDBSelect0 = new DuckDBSelect();
      List<JoinBase<DuckDBExpression>> list0 = duckDBSelect0.getJoinClauses();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DuckDBSelect duckDBSelect0 = new DuckDBSelect();
      duckDBSelect0.setDistinct(true);
      boolean boolean0 = duckDBSelect0.isDistinct();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DuckDBSelect duckDBSelect0 = new DuckDBSelect();
      // Undeclared exception!
      try { 
        duckDBSelect0.asString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }
}
