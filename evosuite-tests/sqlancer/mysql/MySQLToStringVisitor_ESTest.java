/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 13:32:02 GMT 2025
 */

package sqlancer.mysql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.common.ast.JoinBase;
import sqlancer.common.ast.SelectBase;
import sqlancer.mysql.MySQLSchema;
import sqlancer.mysql.MySQLToStringVisitor;
import sqlancer.mysql.ast.MySQLAggregate;
import sqlancer.mysql.ast.MySQLBetweenOperation;
import sqlancer.mysql.ast.MySQLBinaryComparisonOperation;
import sqlancer.mysql.ast.MySQLBinaryLogicalOperation;
import sqlancer.mysql.ast.MySQLBinaryOperation;
import sqlancer.mysql.ast.MySQLCastOperation;
import sqlancer.mysql.ast.MySQLCollate;
import sqlancer.mysql.ast.MySQLColumnReference;
import sqlancer.mysql.ast.MySQLComputableFunction;
import sqlancer.mysql.ast.MySQLConstant;
import sqlancer.mysql.ast.MySQLExists;
import sqlancer.mysql.ast.MySQLExpression;
import sqlancer.mysql.ast.MySQLInOperation;
import sqlancer.mysql.ast.MySQLJoin;
import sqlancer.mysql.ast.MySQLOrderByTerm;
import sqlancer.mysql.ast.MySQLSelect;
import sqlancer.mysql.ast.MySQLStringExpression;
import sqlancer.mysql.ast.MySQLTableReference;
import sqlancer.mysql.ast.MySQLText;
import sqlancer.mysql.ast.MySQLUnaryPostfixOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MySQLToStringVisitor_ESTest extends MySQLToStringVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L);
      mySQLToStringVisitor0.visitSpecific((MySQLExpression) mySQLConstant0);
      assertEquals("0", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLText mySQLText0 = new MySQLText("Qu#7FW51yq");
      mySQLToStringVisitor0.visit(mySQLText0);
      assertEquals("Qu#7FW51yq", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[6];
      mySQLExpressionArray0[0] = (MySQLExpression) mySQLSelect0;
      List<MySQLExpression> list0 = Randomly.nonEmptySubset(mySQLExpressionArray0);
      mySQLSelect0.setFetchColumns(list0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLSelect0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.VARCHAR;
      MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn((String) null, mySQLSchema_MySQLDataType0, true, 1);
      MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
      MySQLColumnReference mySQLColumnReference0 = MySQLColumnReference.create(mySQLSchema_MySQLColumn0, mySQLConstant0);
      mySQLToStringVisitor0.visit(mySQLColumnReference0);
      assertEquals("null", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSchema.MySQLColumn[] mySQLSchema_MySQLColumnArray0 = new MySQLSchema.MySQLColumn[5];
      List<MySQLSchema.MySQLColumn> list0 = Randomly.subset(mySQLSchema_MySQLColumnArray0);
      MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.MERGE;
      MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable("d`V&{W=MnhCHl`]G#", list0, (List<MySQLSchema.MySQLIndex>) null, mySQLSchema_MySQLTable_MySQLEngine0);
      MySQLTableReference mySQLTableReference0 = new MySQLTableReference(mySQLSchema_MySQLTable0);
      mySQLToStringVisitor0.visit(mySQLTableReference0);
      assertEquals("d`V&{W=MnhCHl`]G#", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
      MySQLStringExpression mySQLStringExpression0 = new MySQLStringExpression(" FROM ", mySQLConstant_MySQLNullConstant0);
      mySQLToStringVisitor0.visit(mySQLStringExpression0);
      assertEquals(" FROM ", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      LinkedList<MySQLSchema.MySQLColumn> linkedList0 = new LinkedList<MySQLSchema.MySQLColumn>();
      MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.ARCHIVE;
      MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable("sqlancer.common.ast.TernaryNode", linkedList0, (List<MySQLSchema.MySQLIndex>) null, mySQLSchema_MySQLTable_MySQLEngine0);
      JoinBase.JoinType joinBase_JoinType0 = JoinBase.JoinType.CROSS;
      MySQLJoin mySQLJoin0 = new MySQLJoin(mySQLSchema_MySQLTable0, (MySQLExpression) null, joinBase_JoinType0);
      mySQLToStringVisitor0.visit(mySQLJoin0);
      assertEquals(" CROSS JOIN sqlancer.common.ast.TernaryNode", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant mySQLConstant0 = MySQLConstant.createUnsignedIntConstant(1401L);
      JoinBase.JoinType joinBase_JoinType0 = JoinBase.JoinType.RIGHT;
      MySQLJoin mySQLJoin0 = new MySQLJoin((MySQLSchema.MySQLTable) null, mySQLConstant0, joinBase_JoinType0);
      MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLJoin0, (List<MySQLExpression>) null, true);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLInOperation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L);
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[5];
      mySQLExpressionArray0[2] = (MySQLExpression) mySQLConstant0;
      List<MySQLExpression> list0 = Randomly.subset(mySQLExpressionArray0);
      MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLExpressionArray0[2], list0, true);
      mySQLToStringVisitor0.visit(mySQLInOperation0);
      assertEquals("(0) IN ()", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
      MySQLExists mySQLExists0 = new MySQLExists(mySQLConstant_MySQLNullConstant0);
      mySQLToStringVisitor0.visit(mySQLExists0);
      assertEquals(" EXISTS (NULL)", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
      MySQLCollate mySQLCollate0 = new MySQLCollate(mySQLConstant0, "T>*GN");
      mySQLToStringVisitor0.visit(mySQLCollate0);
      assertEquals("(0 COLLATE 'T>*GN')", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, "FLOAT8");
      MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
      MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLConstant_MySQLIntConstant0, mySQLCastOperation_CastType0);
      mySQLToStringVisitor0.visit(mySQLCastOperation0);
      assertEquals("CAST(FLOAT8 AS UNSIGNED)", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, "$o2X<{>U");
      MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.XOR;
      MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLConstant_MySQLIntConstant0, mySQLConstant_MySQLIntConstant0, mySQLBinaryOperation_MySQLBinaryOperator0);
      mySQLToStringVisitor0.visit(mySQLBinaryOperation0);
      assertEquals("($o2X<{>U) ^ ($o2X<{>U)", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant mySQLConstant0 = MySQLConstant.createUnsignedIntConstant(21L);
      MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.OR;
      MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(mySQLConstant0, mySQLConstant0, mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
      mySQLToStringVisitor0.visit(mySQLBinaryLogicalOperation0);
      assertEquals(MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.OR, mySQLBinaryLogicalOperation0.getOp());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
      MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
      MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
      mySQLToStringVisitor0.visit(mySQLBinaryComparisonOperation0);
      assertEquals("(NULL) > (NULL)", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.FLOAT;
      MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn("", mySQLSchema_MySQLDataType0, true, (-537));
      MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
      MySQLColumnReference mySQLColumnReference0 = MySQLColumnReference.create(mySQLSchema_MySQLColumn0, mySQLConstant0);
      MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.ASC;
      MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLColumnReference0, mySQLOrderByTerm_MySQLOrder0);
      MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLOrderByTerm0, mySQLConstant0, mySQLColumnReference0);
      mySQLToStringVisitor0.visit(mySQLBetweenOperation0);
      assertEquals("( ASC) BETWEEN (NULL) AND ()", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
      MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_NULL;
      MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant_MySQLNullConstant0, mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
      mySQLToStringVisitor0.visit(mySQLUnaryPostfixOperation0);
      String string0 = mySQLToStringVisitor0.get();
      assertEquals("(NULL) IS NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitSpecific((MySQLExpression) mySQLSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitSpecific((MySQLExpression) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitSelectOption((SelectBase<MySQLExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      SelectBase<MySQLExpression> selectBase0 = new SelectBase<MySQLExpression>();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitSelectOption(selectBase0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sqlancer.common.ast.SelectBase cannot be cast to sqlancer.mysql.ast.MySQLSelect
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitOrderByClause((SelectBase<MySQLExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitJoinClauses((SelectBase<MySQLExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitGroupByClause((SelectBase<MySQLExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitFromClause((SelectBase<MySQLExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      SelectBase<MySQLExpression> selectBase0 = new SelectBase<MySQLExpression>();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitFromClause(selectBase0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitColumns((SelectBase<MySQLExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      SelectBase<MySQLExpression> selectBase0 = new SelectBase<MySQLExpression>();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitColumns(selectBase0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLUnaryPostfixOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.visitor.ToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_NULL;
      MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation((MySQLExpression) null, mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLUnaryPostfixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLSelect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLOrderByTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.DESC;
      MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLSelect0, mySQLOrderByTerm_MySQLOrder0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLOrderByTerm0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.DESC;
      MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm((MySQLExpression) null, mySQLOrderByTerm_MySQLOrder0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLOrderByTerm0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLJoin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.visitor.ToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLInOperation mySQLInOperation0 = new MySQLInOperation((MySQLExpression) null, (List<MySQLExpression>) null, true);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLInOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLExists) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLExists mySQLExists0 = new MySQLExists((MySQLExpression) null, (MySQLConstant) null);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLExists0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLComputableFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.IF;
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[1];
      mySQLExpressionArray0[0] = (MySQLExpression) mySQLSelect0;
      MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLComputableFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLCollate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLCollate mySQLCollate0 = new MySQLCollate(mySQLSelect0, "");
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLCollate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
      MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLSelect0, mySQLCastOperation_CastType0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLCastOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
      MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation((MySQLExpression) null, mySQLCastOperation_CastType0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLCastOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLBinaryOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.AND;
      MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation((MySQLExpression) null, (MySQLExpression) null, mySQLBinaryOperation_MySQLBinaryOperator0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLBinaryOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLBinaryLogicalOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.visitor.ToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[19];
      List<MySQLExpression> list0 = Randomly.nonEmptySubset(mySQLExpressionArray0);
      MySQLConstant mySQLConstant0 = MySQLConstant.createUnsignedIntConstant(0L);
      MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, list0, true);
      MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.OR;
      MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(mySQLInOperation0, mySQLConstant0, mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLBinaryLogicalOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLBinaryComparisonOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
      MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation((MySQLExpression) null, (MySQLExpression) null, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLBinaryComparisonOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLBetweenOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLSelect0, mySQLSelect0, mySQLSelect0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLBetweenOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
      MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.MIN;
      MySQLAggregate mySQLAggregate0 = new MySQLAggregate(linkedList0, mySQLAggregate_MySQLAggregateFunction0);
      mySQLToStringVisitor0.visit(mySQLAggregate0);
      linkedList0.add((MySQLExpression) mySQLAggregate0);
      MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction1 = MySQLAggregate.MySQLAggregateFunction.COUNT;
      mySQLToStringVisitor0.visit(mySQLAggregate0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLAggregate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[1];
      mySQLExpressionArray0[0] = (MySQLExpression) mySQLSelect0;
      List<MySQLExpression> list0 = Randomly.nonEmptySubset(mySQLExpressionArray0);
      MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.COUNT_DISTINCT;
      MySQLAggregate mySQLAggregate0 = new MySQLAggregate(list0, mySQLAggregate_MySQLAggregateFunction0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLAggregate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.BIT_COUNT;
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[0];
      MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
      mySQLToStringVisitor0.visit(mySQLComputableFunction0);
      assertEquals("BIT_COUNT()", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      SelectBase<MySQLExpression> selectBase0 = new SelectBase<MySQLExpression>();
      mySQLToStringVisitor0.visitJoinClauses(selectBase0);
      assertFalse(selectBase0.isDistinct());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      mySQLToStringVisitor0.visitSelectOption(mySQLSelect0);
      assertEquals("ALL ", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
      mySQLToStringVisitor0.visit((MySQLConstant) mySQLConstant_MySQLNullConstant0);
      assertEquals("NULL", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLColumnReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
      MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.ASC;
      MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLConstant_MySQLNullConstant0, mySQLOrderByTerm_MySQLOrder0);
      mySQLToStringVisitor0.visit(mySQLOrderByTerm0);
      assertEquals("NULL ASC", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L);
      MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.DESC;
      MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLConstant0, mySQLOrderByTerm_MySQLOrder0);
      mySQLToStringVisitor0.visit(mySQLOrderByTerm0);
      assertEquals("0 DESC", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.GREATEST;
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[6];
      MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L);
      mySQLExpressionArray0[0] = (MySQLExpression) mySQLConstant0;
      MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLComputableFunction0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      mySQLToStringVisitor0.visitOrderByClause(mySQLSelect0);
      assertEquals("", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      mySQLToStringVisitor0.visitGroupByClause(mySQLSelect0);
      assertEquals("", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[4];
      List<MySQLExpression> list0 = Randomly.nonEmptySubset(mySQLExpressionArray0);
      mySQLSelect0.setJoinList(list0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitJoinClauses(mySQLSelect0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
      MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, false);
      linkedList0.add((MySQLExpression) mySQLConstant_MySQLIntConstant0);
      linkedList0.add((MySQLExpression) mySQLConstant_MySQLIntConstant0);
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      mySQLSelect0.setFromList(linkedList0);
      mySQLToStringVisitor0.visitFromClause(mySQLSelect0);
      assertEquals(" FROM 0, 0", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[19];
      List<MySQLExpression> list0 = Randomly.nonEmptySubset(mySQLExpressionArray0);
      SelectBase<MySQLExpression> selectBase0 = new SelectBase<MySQLExpression>();
      selectBase0.setFromList(list0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitFromClause(selectBase0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[9];
      mySQLExpressionArray0[1] = (MySQLExpression) mySQLConstant_MySQLNullConstant0;
      Randomly.nonEmptySubset(mySQLExpressionArray0);
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      List<MySQLExpression> list0 = Randomly.nonEmptySubset(mySQLExpressionArray0);
      mySQLSelect0.setFetchColumns(list0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLSelect0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[4];
      MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
      mySQLExpressionArray0[1] = (MySQLExpression) mySQLConstant_MySQLNullConstant0;
      List<MySQLExpression> list0 = Randomly.nonEmptySubset(mySQLExpressionArray0);
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      mySQLSelect0.setFetchColumns(list0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLSelect.SelectType mySQLSelect_SelectType0 = MySQLSelect.SelectType.DISTINCTROW;
      mySQLSelect0.setFromOptions(mySQLSelect_SelectType0);
      mySQLToStringVisitor0.visitSelectOption(mySQLSelect0);
      assertEquals("DISTINCTROW ", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLSelect.SelectType mySQLSelect_SelectType0 = MySQLSelect.SelectType.DISTINCT;
      mySQLSelect0.setFromOptions(mySQLSelect_SelectType0);
      mySQLToStringVisitor0.visitSelectOption(mySQLSelect0);
      assertEquals("DISTINCT ", mySQLToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLText mySQLText0 = new MySQLText("RZ");
      mySQLSelect0.setHint(mySQLText0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.XOR;
      MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLSelect0, mySQLSelect0, mySQLBinaryOperation_MySQLBinaryOperator0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLBinaryOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
      MySQLExists mySQLExists0 = new MySQLExists(mySQLSelect0, mySQLConstant0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLExists0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLExpression mySQLExpression0 = mySQLToStringVisitor0.getJoinTableReference((JoinBase<MySQLExpression>) null);
      assertNull(mySQLExpression0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLTableReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLCastOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      String string0 = mySQLToStringVisitor0.get();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
      MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLSelect0, linkedList0, false);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLInOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLText) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLExpression mySQLExpression0 = mySQLToStringVisitor0.getJoinOnClause((JoinBase<MySQLExpression>) null);
      assertNull(mySQLExpression0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
      MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLSelect0, mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLUnaryPostfixOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.EQUALS;
      MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(mySQLSelect0, mySQLSelect0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLBinaryComparisonOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLCollate mySQLCollate0 = new MySQLCollate((MySQLExpression) null, "STDDEV_SAMP");
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLCollate0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
      MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant0, (MySQLExpression) null, (MySQLExpression) null);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLBetweenOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit((MySQLStringExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.XOR;
      MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(mySQLSelect0, mySQLSelect0, mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLBinaryLogicalOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[4];
      MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
      MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-511L), "sqlancer.duckdb.ast.DuckDBColumnReference");
      MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0);
      mySQLBetweenOperation0.getExpectedValue();
      mySQLExpressionArray0[2] = (MySQLExpression) mySQLConstant_MySQLIntConstant0;
      List<MySQLExpression> list0 = Randomly.nonEmptySubset(mySQLExpressionArray0);
      MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.COUNT_DISTINCT;
      MySQLAggregate mySQLAggregate0 = new MySQLAggregate(list0, mySQLAggregate_MySQLAggregateFunction0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLAggregate0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLSelect mySQLSelect0 = new MySQLSelect();
      JoinBase.JoinType joinBase_JoinType0 = JoinBase.JoinType.JoinType;
      MySQLJoin mySQLJoin0 = new MySQLJoin((MySQLSchema.MySQLTable) null, mySQLSelect0, joinBase_JoinType0);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visit(mySQLJoin0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // JoinType
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
      MySQLColumnReference mySQLColumnReference0 = MySQLColumnReference.create((MySQLSchema.MySQLColumn) null, (MySQLConstant) null);
      // Undeclared exception!
      try { 
        mySQLToStringVisitor0.visitSpecific((MySQLExpression) mySQLColumnReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
      }
  }
}
