/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 13:14:26 GMT 2025
 */

package sqlancer.mysql.gen;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sqlancer.mysql.MySQLGlobalState;
import sqlancer.mysql.MySQLSchema;
import sqlancer.mysql.gen.MySQLInsertGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MySQLInsertGenerator_ESTest extends MySQLInsertGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
      // Undeclared exception!
      try { 
        MySQLInsertGenerator.insertRow(mySQLGlobalState0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
      MySQLInsertGenerator mySQLInsertGenerator0 = new MySQLInsertGenerator(mySQLGlobalState0, (MySQLSchema.MySQLTable) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
      LinkedList<MySQLSchema.MySQLColumn> linkedList0 = new LinkedList<MySQLSchema.MySQLColumn>();
      MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = mock(MySQLSchema.MySQLColumn.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(mySQLSchema_MySQLColumn0).getName();
      linkedList0.add(mySQLSchema_MySQLColumn0);
      LinkedList<MySQLSchema.MySQLIndex> linkedList1 = new LinkedList<MySQLSchema.MySQLIndex>();
      MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.ARCHIVE;
      MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable((String) null, linkedList0, linkedList1, mySQLSchema_MySQLTable_MySQLEngine0);
      // Undeclared exception!
      try { 
        MySQLInsertGenerator.insertRow(mySQLGlobalState0, mySQLSchema_MySQLTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLGlobalState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        MySQLInsertGenerator.insertRow((MySQLGlobalState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.gen.MySQLInsertGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
      LinkedList<MySQLSchema.MySQLColumn> linkedList0 = new LinkedList<MySQLSchema.MySQLColumn>();
      LinkedList<MySQLSchema.MySQLIndex> linkedList1 = new LinkedList<MySQLSchema.MySQLIndex>();
      MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.ARCHIVE;
      MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable((String) null, linkedList0, linkedList1, mySQLSchema_MySQLTable_MySQLEngine0);
      // Undeclared exception!
      try { 
        MySQLInsertGenerator.insertRow(mySQLGlobalState0, mySQLSchema_MySQLTable0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // [] 1
         //
      }
  }
}
