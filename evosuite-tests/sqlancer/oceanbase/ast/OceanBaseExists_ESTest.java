/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 14:07:36 GMT 2025
 */

package sqlancer.oceanbase.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.oceanbase.OceanBaseSchema;
import sqlancer.oceanbase.ast.OceanBaseBinaryComparisonOperation;
import sqlancer.oceanbase.ast.OceanBaseBinaryLogicalOperation;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.ast.OceanBaseExists;
import sqlancer.oceanbase.ast.OceanBaseExpression;
import sqlancer.oceanbase.ast.OceanBaseSelect;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OceanBaseExists_ESTest extends OceanBaseExists_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant((-1.0));
      OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.EQUALS;
      OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
      OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
      OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(oceanBaseBinaryComparisonOperation0, oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
      OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryLogicalOperation0.getExpectedValue();
      OceanBaseExists oceanBaseExists0 = new OceanBaseExists((OceanBaseExpression) null, oceanBaseConstant0);
      OceanBaseExpression oceanBaseExpression0 = oceanBaseExists0.getExpr();
      assertNull(oceanBaseExpression0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
      OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseConstant_OceanBaseNullConstant0);
      OceanBaseConstant oceanBaseConstant0 = oceanBaseExists0.getExpectedValue();
      assertFalse(oceanBaseConstant0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createBoolean(true);
      OceanBaseConstant oceanBaseConstant1 = OceanBaseConstant.createStringConstant("0");
      OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseConstant1, oceanBaseConstant0);
      OceanBaseConstant oceanBaseConstant2 = oceanBaseExists0.getExpectedValue();
      assertFalse(oceanBaseConstant2.isString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(3836.3454025917);
      OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseConstant_OceanBaseDoubleConstant0);
      OceanBaseConstant oceanBaseConstant0 = oceanBaseExists0.getExpectedValue();
      assertSame(oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseConstant0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OceanBaseExists oceanBaseExists0 = null;
      try {
        oceanBaseExists0 = new OceanBaseExists((OceanBaseExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.oceanbase.ast.OceanBaseExists", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
      OceanBaseExists oceanBaseExists0 = null;
      try {
        oceanBaseExists0 = new OceanBaseExists(oceanBaseSelect0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant("");
      OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseConstant_OceanBaseTextConstant0);
      OceanBaseConstant oceanBaseConstant0 = oceanBaseExists0.getExpectedValue();
      assertEquals(OceanBaseSchema.OceanBaseDataType.VARCHAR, oceanBaseConstant0.getType());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
      OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseSelect0, (OceanBaseConstant) null);
      OceanBaseConstant oceanBaseConstant0 = oceanBaseExists0.getExpectedValue();
      assertNull(oceanBaseConstant0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
      OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseSelect0, (OceanBaseConstant) null);
      OceanBaseSelect oceanBaseSelect1 = (OceanBaseSelect)oceanBaseExists0.getExpr();
      assertEquals(OceanBaseSelect.SelectType.ALL, oceanBaseSelect1.getFromOptions());
  }
}
