/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:32:26 GMT 2025
 */

package sqlancer.evosuite.cockroachdb;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.cockroachdb.ast.CockroachDBAggregate;
import sqlancer.cockroachdb.ast.CockroachDBBetweenOperation;
import sqlancer.cockroachdb.ast.CockroachDBCaseOperation;
import sqlancer.cockroachdb.ast.CockroachDBCollate;
import sqlancer.cockroachdb.ast.CockroachDBColumnReference;
import sqlancer.cockroachdb.ast.CockroachDBConstant;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBFunction;
import sqlancer.cockroachdb.ast.CockroachDBFunctionCall;
import sqlancer.cockroachdb.ast.CockroachDBInOperation;
import sqlancer.cockroachdb.ast.CockroachDBJoin;
import sqlancer.cockroachdb.ast.CockroachDBMultiValuedComparison;
import sqlancer.cockroachdb.ast.CockroachDBNotOperation;
import sqlancer.cockroachdb.ast.CockroachDBOrderingTerm;
import sqlancer.cockroachdb.ast.CockroachDBRegexOperation;
import sqlancer.cockroachdb.ast.CockroachDBSelect;
import sqlancer.cockroachdb.ast.CockroachDBTableReference;
import sqlancer.cockroachdb.CockroachDBProvider;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.CockroachDBToStringVisitor;
import sqlancer.cockroachdb.gen.CockroachDBExpressionGenerator;
import sqlancer.common.schema.TableIndex;
import sqlancer.Randomly;

public class CockroachDBToStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    // @Test
    // public void test00() throws Throwable {
    // CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
    // CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 =
    // CockroachDBSchema.CockroachDBCompositeDataType
    // .getVarBit(5);
    // CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new
    // CockroachDBSchema.CockroachDBColumn(
    // "#@q pUVmV6j9", cockroachDBSchema_CockroachDBCompositeDataType0, true, false);
    // CockroachDBColumnReference cockroachDBColumnReference0 = new CockroachDBColumnReference(
    // cockroachDBSchema_CockroachDBColumn0);
    // CockroachDBExpression[] cockroachDBExpressionArray0 = new CockroachDBExpression[6];
    // cockroachDBExpressionArray0[0] = (CockroachDBExpression) cockroachDBColumnReference0;
    // List<CockroachDBExpression> list0 = Randomly.subset(6, cockroachDBExpressionArray0);
    // List<CockroachDBExpression> list1 = Randomly.subset(6, cockroachDBExpressionArray0);
    // CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list1,
    // cockroachDBExpressionArray0[0]);
    // // Undeclared exception!
    // try {
    // cockroachDBToStringVisitor0.visit(cockroachDBCaseOperation0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.cockroachdb.CockroachDBVisitor", e);
    // }
    // }

    @Test
    public void test01() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createIntervalConstant(0L, (-956L), 1062L,
                (-956L), (-2439L), (-956L));
        cockroachDBToStringVisitor0.visitSpecific(cockroachDBExpression0);
    }

    @Test
    public void test02() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                cockroachDBProvider_CockroachDBGlobalState0);
        CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType
                .getInt(0);
        List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator0
                .generateExpressions(cockroachDBSchema_CockroachDBCompositeDataType0, 0);
        CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createArrayConstant(list0);
        CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.RIGHT;
        CockroachDBJoin cockroachDBJoin0 = new CockroachDBJoin(cockroachDBExpression0, cockroachDBExpression0,
                cockroachDBExpression0, cockroachDBJoin_JoinType0);
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0,
                cockroachDBJoin0);
        CockroachDBInOperation cockroachDBInOperation0 = new CockroachDBInOperation(cockroachDBCaseOperation0, list0);
        cockroachDBToStringVisitor0.visit(cockroachDBInOperation0);
    }

    @Test
    public void test03() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                cockroachDBProvider_CockroachDBGlobalState0);
        CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType
                .getInt(0);
        List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator0
                .generateExpressions(cockroachDBSchema_CockroachDBCompositeDataType0, 0);
        CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.CHAR_LENGTH2;
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, list0);
        cockroachDBToStringVisitor0.visit(cockroachDBFunctionCall0);
        assertEquals("CHAR_LENGTH()", cockroachDBToStringVisitor0.get());
    }

//    @Test
//    public void test04() throws Throwable {
//        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
//        CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createTimetz(0L);
//        CockroachDBRegexOperation.CockroachDBRegexOperator cockroachDBRegexOperation_CockroachDBRegexOperator0 = CockroachDBRegexOperation.CockroachDBRegexOperator.NOT_LIKE;
//        CockroachDBRegexOperation cockroachDBRegexOperation0 = new CockroachDBRegexOperation(cockroachDBExpression0,
//                cockroachDBExpression0, cockroachDBRegexOperation_CockroachDBRegexOperator0);
//        CockroachDBCollate cockroachDBCollate0 = new CockroachDBCollate(cockroachDBRegexOperation0, "");
//        CockroachDBOrderingTerm cockroachDBOrderingTerm0 = new CockroachDBOrderingTerm(cockroachDBCollate0, true);
//        CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.TO_ENGLISH;
//        CockroachDBExpression[] cockroachDBExpressionArray0 = new CockroachDBExpression[9];
//        List<CockroachDBExpression> list0 = Randomly.subset(cockroachDBExpressionArray0);
//        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, list0);
//        CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN_SYMMETRIC;
//        CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(
//                cockroachDBOrderingTerm0, cockroachDBOrderingTerm0, cockroachDBFunctionCall0,
//                cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
//        cockroachDBToStringVisitor0.visit(cockroachDBBetweenOperation0);
//        assertEquals(CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN_SYMMETRIC,
//                cockroachDBBetweenOperation0.getType());
//    }

    @Test
    public void test05() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBSchema.CockroachDBColumn[] cockroachDBSchema_CockroachDBColumnArray0 = new CockroachDBSchema.CockroachDBColumn[4];
        List<CockroachDBSchema.CockroachDBColumn> list0 = Randomly.subset(0, cockroachDBSchema_CockroachDBColumnArray0);
        CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable(
                (String) null, list0, (List<TableIndex>) null, false);
        CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(
                cockroachDBSchema_CockroachDBTable0);
        cockroachDBToStringVisitor0.visit(cockroachDBTableReference0);
        assertEquals("null", cockroachDBToStringVisitor0.getString());
    }

    @Test
    public void test06() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
        CockroachDBConstant.CockroachDBArrayConstant cockroachDBConstant_CockroachDBArrayConstant0 = new CockroachDBConstant.CockroachDBArrayConstant(
                linkedList0);
        CockroachDBMultiValuedComparison.MultiValuedComparisonType cockroachDBMultiValuedComparison_MultiValuedComparisonType0 = CockroachDBMultiValuedComparison.MultiValuedComparisonType.ALL;
        CockroachDBMultiValuedComparison.MultiValuedComparisonOperator cockroachDBMultiValuedComparison_MultiValuedComparisonOperator0 = CockroachDBMultiValuedComparison.MultiValuedComparisonOperator.EQUALS;
        CockroachDBMultiValuedComparison cockroachDBMultiValuedComparison0 = new CockroachDBMultiValuedComparison(
                cockroachDBConstant_CockroachDBArrayConstant0, linkedList0,
                cockroachDBMultiValuedComparison_MultiValuedComparisonType0,
                cockroachDBMultiValuedComparison_MultiValuedComparisonOperator0);
        cockroachDBToStringVisitor0.visit(cockroachDBMultiValuedComparison0);
        assertEquals(CockroachDBMultiValuedComparison.MultiValuedComparisonOperator.EQUALS,
                cockroachDBMultiValuedComparison0.getOp());
    }

    @Test
    public void test07() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
        List<CockroachDBExpression> list0 = cockroachDBSelect0.getGroupByClause();
        CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = new CockroachDBConstant.CockroachDBNullConstant();
        CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.LEFT;
        CockroachDBJoin cockroachDBJoin0 = new CockroachDBJoin(cockroachDBSelect0,
                cockroachDBConstant_CockroachDBNullConstant0, cockroachDBSelect0, cockroachDBJoin_JoinType0);
        CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.CURRENT_DATABASE;
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, list0);
        CockroachDBJoin cockroachDBJoin1 = CockroachDBJoin.createJoin(cockroachDBFunctionCall0,
                cockroachDBFunctionCall0, cockroachDBJoin_JoinType0, cockroachDBJoin0);
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit(cockroachDBJoin1);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    // @Test
    // public void test08() throws Throwable {
    // CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
    // CockroachDBExpression[] cockroachDBExpressionArray0 = new CockroachDBExpression[3];
    // CockroachDBConstant.CockroachDBDoubleConstant cockroachDBConstant_CockroachDBDoubleConstant0 = new
    // CockroachDBConstant.CockroachDBDoubleConstant(
    // 2107.9);
    // CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createIntervalConstant((-1943L), (-1L),
    // (-1943L), (-1943L), (-1L), (-1L));
    // CockroachDBBetweenOperation.CockroachDBBetweenOperatorType
    // cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 =
    // CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.NOT_BETWEEN;
    // CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(
    // cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBConstant_CockroachDBDoubleConstant0,
    // cockroachDBExpression0, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
    // cockroachDBExpressionArray0[0] = (CockroachDBExpression) cockroachDBBetweenOperation0;
    // CockroachDBNotOperation cockroachDBNotOperation0 = new CockroachDBNotOperation(cockroachDBExpressionArray0[0]);
    // List<CockroachDBExpression> list0 = Randomly.subset((-2797), cockroachDBExpressionArray0);
    // CockroachDBConstant.CockroachDBArrayConstant cockroachDBConstant_CockroachDBArrayConstant0 = new
    // CockroachDBConstant.CockroachDBArrayConstant(
    // list0);
    // CockroachDBInOperation cockroachDBInOperation0 = new CockroachDBInOperation(
    // cockroachDBConstant_CockroachDBArrayConstant0, list0);
    // CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.FULL;
    // CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBInOperation0, cockroachDBNotOperation0,
    // cockroachDBJoin_JoinType0, cockroachDBExpressionArray0[1]);
    // // Undeclared exception!
    // try {
    // cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.cockroachdb.CockroachDBVisitor", e);
    // }
    // }

    // @Test
    // public void test09() throws Throwable {
    // CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
    // CockroachDBConstant.CockroachDBTextConstant cockroachDBConstant_CockroachDBTextConstant0 = new
    // CockroachDBConstant.CockroachDBTextConstant(
    // (String) null);
    // cockroachDBToStringVisitor0.visit((CockroachDBConstant) cockroachDBConstant_CockroachDBTextConstant0);
    // String string0 = cockroachDBToStringVisitor0.getString();
    // assertNotNull(string0);
    // }

    @Test
    public void test10() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        String string0 = cockroachDBToStringVisitor0.getString();
        assertEquals("", string0);
    }

    @Test
    public void test11() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visitSpecific((CockroachDBExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.CockroachDBVisitor", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visitSpecific((CockroachDBExpression) cockroachDBSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBConstant.CockroachDBTextConstant cockroachDBConstant_CockroachDBTextConstant0 = CockroachDBConstant
                .createStringConstant("SELECT ");
        CockroachDBCollate cockroachDBCollate0 = new CockroachDBCollate(cockroachDBConstant_CockroachDBTextConstant0,
                "SELECT ");
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visitSpecific((CockroachDBExpression) cockroachDBCollate0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // class sqlancer.cockroachdb.ast.CockroachDBCollate
            //
        }
    }

    @Test
    public void test14() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit((CockroachDBSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit((CockroachDBMultiValuedComparison) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit((CockroachDBInOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit((CockroachDBColumnReference) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = CockroachDBConstant
                .createNullConstant();
        List<CockroachDBExpression> list0 = List
                .of((CockroachDBExpression) cockroachDBConstant_CockroachDBNullConstant0);
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                cockroachDBProvider_CockroachDBGlobalState0);
        CockroachDBSelect cockroachDBSelect0 = cockroachDBExpressionGenerator0.generateSelect();
        List<CockroachDBExpression> list1 = cockroachDBSelect0.getGroupByClause();
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list1,
                cockroachDBConstant_CockroachDBNullConstant0);
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit(cockroachDBCaseOperation0);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 0
            //
            verifyException("java.util.Collections$EmptyList", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
        List<CockroachDBExpression> list0 = cockroachDBSelect0.getJoinList();
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0,
                cockroachDBSelect0);
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit(cockroachDBCaseOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    // @Test
    // public void test20() throws Throwable {
    // CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
    // CockroachDBBetweenOperation.CockroachDBBetweenOperatorType
    // cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 =
    // CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN_SYMMETRIC;
    // CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(
    // (CockroachDBExpression) null, (CockroachDBExpression) null, (CockroachDBExpression) null,
    // cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
    // // Undeclared exception!
    // try {
    // cockroachDBToStringVisitor0.visit(cockroachDBBetweenOperation0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.cockroachdb.CockroachDBVisitor", e);
    // }
    // }

    @Test
    public void test21() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit((CockroachDBAggregate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = new CockroachDBConstant.CockroachDBNullConstant();
        List<CockroachDBExpression> list0 = List
                .of((CockroachDBExpression) cockroachDBConstant_CockroachDBNullConstant0);
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0,
                cockroachDBConstant_CockroachDBNullConstant0);
        cockroachDBToStringVisitor0.visit(cockroachDBCaseOperation0);
    }

    @Test
    public void test23() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit(cockroachDBSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
        cockroachDBSelect0.setDistinct(true);
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit(cockroachDBSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType
                .getInt(0);
        CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn(
                "#cC<", cockroachDBSchema_CockroachDBCompositeDataType0, true, false);
        CockroachDBColumnReference cockroachDBColumnReference0 = new CockroachDBColumnReference(
                cockroachDBSchema_CockroachDBColumn0);
        cockroachDBToStringVisitor0.visit(cockroachDBColumnReference0);
        assertEquals("#cC<", cockroachDBToStringVisitor0.getString());
    }

    @Test
    public void test26() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit((CockroachDBConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.System", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
        CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.VARIANCE;
        CockroachDBAggregate cockroachDBAggregate0 = new CockroachDBAggregate(
                cockroachDBAggregate_CockroachDBAggregateFunction0, linkedList0);
        cockroachDBToStringVisitor0.visit(cockroachDBAggregate0);
        assertEquals("VARIANCE()", cockroachDBToStringVisitor0.getString());
    }

    @Test
    public void test28() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = new CockroachDBConstant.CockroachDBNullConstant();
        CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.NATURAL;
        CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBConstant_CockroachDBNullConstant0,
                cockroachDBConstant_CockroachDBNullConstant0, cockroachDBJoin_JoinType0,
                cockroachDBConstant_CockroachDBNullConstant0);
        cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
        assertEquals(CockroachDBJoin.JoinType.NATURAL, cockroachDBJoin0.getJoinType());
    }

    @Test
    public void test29() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = CockroachDBConstant
                .createNullConstant();
        CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.CROSS;
        CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBConstant_CockroachDBNullConstant0,
                cockroachDBConstant_CockroachDBNullConstant0, cockroachDBJoin_JoinType0,
                cockroachDBConstant_CockroachDBNullConstant0);
        cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
        assertEquals(CockroachDBJoin.JoinType.CROSS, cockroachDBJoin0.getJoinType());
    }

    @Test
    public void test30() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = CockroachDBConstant
                .createNullConstant();
        CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.FULL;
        CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBConstant_CockroachDBNullConstant0,
                cockroachDBConstant_CockroachDBNullConstant0, cockroachDBJoin_JoinType0,
                cockroachDBConstant_CockroachDBNullConstant0);
        cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
        assertEquals(CockroachDBJoin.JoinType.FULL, cockroachDBJoin0.getJoinType());
    }

    @Test
    public void test31() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = new CockroachDBConstant.CockroachDBNullConstant();
        CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.RIGHT;
        CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBConstant_CockroachDBNullConstant0,
                cockroachDBConstant_CockroachDBNullConstant0, cockroachDBJoin_JoinType0,
                cockroachDBConstant_CockroachDBNullConstant0);
        cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
        assertEquals(CockroachDBJoin.JoinType.RIGHT, cockroachDBJoin0.getJoinType());
    }

    @Test
    public void test32() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBConstant.CockroachDBDoubleConstant cockroachDBConstant_CockroachDBDoubleConstant0 = CockroachDBConstant
                .createFloatConstant(0.0);
        CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.LEFT;
        CockroachDBJoin cockroachDBJoin0 = new CockroachDBJoin(cockroachDBConstant_CockroachDBDoubleConstant0,
                cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBConstant_CockroachDBDoubleConstant0,
                cockroachDBJoin_JoinType0);
        cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
        assertEquals(CockroachDBJoin.JoinType.LEFT, cockroachDBJoin0.getJoinType());
    }

    @Test
    public void test33() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = new CockroachDBConstant.CockroachDBNullConstant();
        CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.INNER;
        CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBConstant_CockroachDBNullConstant0,
                cockroachDBConstant_CockroachDBNullConstant0, cockroachDBJoin_JoinType0,
                cockroachDBConstant_CockroachDBNullConstant0);
        cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
        assertEquals(CockroachDBJoin.JoinType.INNER, cockroachDBJoin0.getJoinType());
    }

    // @Test
    // public void test34() throws Throwable {
    // CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
    // CockroachDBExpression[] cockroachDBExpressionArray0 = new CockroachDBExpression[8];
    // List<CockroachDBExpression> list0 = Randomly.subset(cockroachDBExpressionArray0);
    // CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0,
    // cockroachDBExpressionArray0[5]);
    // cockroachDBToStringVisitor0.visit(cockroachDBCaseOperation0);
    // assertEquals("CASE END", cockroachDBToStringVisitor0.get());
    // }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test35() throws Throwable { CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new
     * CockroachDBToStringVisitor(); CockroachDBSchema.CockroachDBCompositeDataType
     * cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType .getVarBit(8);
     * CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new
     * CockroachDBSchema.CockroachDBColumn( "", cockroachDBSchema_CockroachDBCompositeDataType0, true, true);
     * CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = mock(
     * CockroachDBSchema.CockroachDBTable.class, new ViolatedAssumptionAnswer()); doReturn((String)
     * null).when(cockroachDBSchema_CockroachDBTable0).getName(); CockroachDBTableReference cockroachDBTableReference0 =
     * new CockroachDBTableReference( cockroachDBSchema_CockroachDBTable0); TableIndex tableIndex0 =
     * TableIndex.create(""); CockroachDBIndexReference cockroachDBIndexReference0 = new
     * CockroachDBIndexReference(cockroachDBTableReference0, tableIndex0); CockroachDBSchema.CockroachDBTable
     * cockroachDBSchema_CockroachDBTable1 = cockroachDBIndexReference0.getTable();
     * cockroachDBSchema_CockroachDBColumn0.setTable(cockroachDBSchema_CockroachDBTable1); CockroachDBColumnReference
     * cockroachDBColumnReference0 = new CockroachDBColumnReference( cockroachDBSchema_CockroachDBColumn0);
     * cockroachDBToStringVisitor0.visit(cockroachDBColumnReference0); assertEquals("null.",
     * cockroachDBToStringVisitor0.get()); }
     */

    @Test
    public void test36() throws Throwable {
        CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
        LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBMultiValuedComparison.MultiValuedComparisonType cockroachDBMultiValuedComparison_MultiValuedComparisonType0 = CockroachDBMultiValuedComparison.MultiValuedComparisonType.ANY;
        CockroachDBMultiValuedComparison.MultiValuedComparisonOperator cockroachDBMultiValuedComparison_MultiValuedComparisonOperator0 = CockroachDBMultiValuedComparison.MultiValuedComparisonOperator.GREATER;
        CockroachDBMultiValuedComparison cockroachDBMultiValuedComparison0 = new CockroachDBMultiValuedComparison(
                cockroachDBSelect0, linkedList0, cockroachDBMultiValuedComparison_MultiValuedComparisonType0,
                cockroachDBMultiValuedComparison_MultiValuedComparisonOperator0);
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit(cockroachDBMultiValuedComparison0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test37() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit((CockroachDBTableReference) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
        }
    }

    @Test
    public void test38() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
        CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN;
        CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(cockroachDBSelect0,
                (CockroachDBExpression) null, (CockroachDBExpression) null,
                cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit(cockroachDBBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test39() throws Throwable {
        CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
        LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(linkedList0, linkedList0,
                cockroachDBSelect0);
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        CockroachDBInOperation cockroachDBInOperation0 = new CockroachDBInOperation(cockroachDBCaseOperation0,
                linkedList0);
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit(cockroachDBInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test40() throws Throwable {
        CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                cockroachDBProvider_CockroachDBGlobalState0);
        CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType
                .getBit((-1028));
        CockroachDBExpression cockroachDBExpression0 = cockroachDBExpressionGenerator0
                .generateConstant(cockroachDBSchema_CockroachDBCompositeDataType0);
        CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn(
                (String) null, cockroachDBSchema_CockroachDBCompositeDataType0, false, true);
        CockroachDBColumnReference cockroachDBColumnReference0 = new CockroachDBColumnReference(
                cockroachDBSchema_CockroachDBColumn0);
        CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN_SYMMETRIC;
        CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(
                cockroachDBExpression0, cockroachDBColumnReference0, cockroachDBExpression0,
                cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
        CockroachDBSelect cockroachDBSelect0 = cockroachDBExpressionGenerator0.generateSelect();
        // Undeclared exception!
        try {
            cockroachDBExpressionGenerator0.generateOptimizedQueryString(cockroachDBSelect0,
                    (CockroachDBExpression) cockroachDBBetweenOperation0, true);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test41() throws Throwable {
        CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
        // Undeclared exception!
        try {
            cockroachDBToStringVisitor0.visit((CockroachDBFunctionCall) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
        }
    }
}
