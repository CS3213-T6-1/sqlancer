/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:36:49 GMT 2025
 */

package sqlancer.evosuite.cockroachdb.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;

import org.junit.jupiter.api.Test;

import sqlancer.cockroachdb.ast.CockroachDBBinaryArithmeticOperation;
import sqlancer.cockroachdb.ast.CockroachDBCaseOperation;
import sqlancer.cockroachdb.ast.CockroachDBCollate;
import sqlancer.cockroachdb.ast.CockroachDBConstant;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBFunction;
import sqlancer.cockroachdb.ast.CockroachDBFunctionCall;
import sqlancer.cockroachdb.ast.CockroachDBSelect;
import sqlancer.cockroachdb.CockroachDBProvider;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.gen.CockroachDBExpressionGenerator;

public class CockroachDBCaseOperation_ESTest {

    @Test
    public void test0() throws Throwable {
        CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createBitConstant((-855L));
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(
                (List<CockroachDBExpression>) null, (List<CockroachDBExpression>) null, cockroachDBExpression0);
        List<CockroachDBExpression> list0 = cockroachDBCaseOperation0.getThenClauses();
        assertNull(list0);
    }

    @Test
    public void test1() throws Throwable {
        LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
        linkedList0.add((CockroachDBExpression) null);
        CockroachDBCollate cockroachDBCollate0 = new CockroachDBCollate((CockroachDBExpression) null, (String) null);
        CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0 = CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator.DIV;
        CockroachDBBinaryArithmeticOperation cockroachDBBinaryArithmeticOperation0 = new CockroachDBBinaryArithmeticOperation(
                cockroachDBCollate0, (CockroachDBExpression) null,
                cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0);
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(linkedList0, linkedList0,
                cockroachDBBinaryArithmeticOperation0);
        List<CockroachDBExpression> list0 = cockroachDBCaseOperation0.getThenClauses();
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test2() throws Throwable {
        CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                cockroachDBProvider_CockroachDBGlobalState0);
        CockroachDBSelect cockroachDBSelect0 = cockroachDBExpressionGenerator0.generateSelect();
        List<CockroachDBExpression> list0 = cockroachDBSelect0.getJoinList();
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0,
                cockroachDBSelect0);
        CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType
                .getVarBit(0);
        List<CockroachDBExpression> list1 = cockroachDBExpressionGenerator0
                .generateExpressions(cockroachDBSchema_CockroachDBCompositeDataType0, 0, 0);
        CockroachDBCaseOperation cockroachDBCaseOperation1 = new CockroachDBCaseOperation(list0, list1,
                cockroachDBCaseOperation0);
        List<CockroachDBExpression> list2 = cockroachDBCaseOperation1.getThenClauses();
        assertSame(list2, list1);
    }

    @Test
    public void test3() throws Throwable {
        CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
        List<CockroachDBExpression> list0 = cockroachDBSelect0.getOrderByClauses();
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0,
                (CockroachDBExpression) null);
        CockroachDBExpression cockroachDBExpression0 = cockroachDBCaseOperation0.getElseClause();
        assertNull(cockroachDBExpression0);
    }

    @Test
    public void test4() throws Throwable {
        CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createBitConstant((-855L));
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(
                (List<CockroachDBExpression>) null, (List<CockroachDBExpression>) null, cockroachDBExpression0);
        List<CockroachDBExpression> list0 = cockroachDBCaseOperation0.getConditions();
        assertNull(list0);
    }

    @Test
    public void test5() throws Throwable {
        LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
        linkedList0.add((CockroachDBExpression) null);
        CockroachDBCollate cockroachDBCollate0 = new CockroachDBCollate((CockroachDBExpression) null, (String) null);
        CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0 = CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator.DIV;
        CockroachDBBinaryArithmeticOperation cockroachDBBinaryArithmeticOperation0 = new CockroachDBBinaryArithmeticOperation(
                cockroachDBCollate0, (CockroachDBExpression) null,
                cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0);
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(linkedList0, linkedList0,
                cockroachDBBinaryArithmeticOperation0);
        List<CockroachDBExpression> list0 = cockroachDBCaseOperation0.getConditions();
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test6() throws Throwable {
        CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.REGEXP_REPLACE;
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                (CockroachDBProvider.CockroachDBGlobalState) null);
        CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.VARBIT;
        CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(
                cockroachDBSchema_CockroachDBDataType0, 48);
        List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator0
                .generateExpressions(cockroachDBSchema_CockroachDBCompositeDataType0, (-1380));
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, list0);
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0,
                cockroachDBFunctionCall0);
        List<CockroachDBExpression> list1 = cockroachDBCaseOperation0.getConditions();
        assertSame(list0, list1);
    }

    @Test
    public void test7() throws Throwable {
        CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                cockroachDBProvider_CockroachDBGlobalState0);
        CockroachDBSelect cockroachDBSelect0 = cockroachDBExpressionGenerator0.generateSelect();
        List<CockroachDBExpression> list0 = cockroachDBSelect0.getJoinList();
        CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0,
                cockroachDBSelect0);
        CockroachDBExpression cockroachDBExpression0 = cockroachDBCaseOperation0.getElseClause();
        assertSame(cockroachDBExpression0, cockroachDBSelect0);
    }
}
