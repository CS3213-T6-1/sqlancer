/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:49:29 GMT 2025
 */

package sqlancer.evosuite.cockroachdb.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.cockroachdb.ast.CockroachDBConstant;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBFunction;
import sqlancer.cockroachdb.ast.CockroachDBFunctionCall;
import sqlancer.cockroachdb.CockroachDBProvider;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.gen.CockroachDBExpressionGenerator;

public class CockroachDBFunctionCall_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.SUBSTRING1;
        CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                cockroachDBProvider_CockroachDBGlobalState0);
        CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType
                .getVarBit((-320));
        List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator0
                .generateExpressions(cockroachDBSchema_CockroachDBCompositeDataType0, (-320), 1180);
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, list0);
        String string0 = cockroachDBFunctionCall0.getName();
        assertEquals("SUBSTRING", string0);
    }

    @Test
    public void test1() throws Throwable {
        CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.SUBSTRING1;
        CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                cockroachDBProvider_CockroachDBGlobalState0);
        CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType
                .getVarBit((-320));
        List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator0
                .generateExpressions(cockroachDBSchema_CockroachDBCompositeDataType0, (-320), 1180);
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, list0);
        CockroachDBFunction cockroachDBFunction1 = cockroachDBFunctionCall0.getFunction();
        assertSame(cockroachDBFunction1, cockroachDBFunction0);
    }

    @Test
    public void test2() throws Throwable {
        CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.ACOS;
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0,
                (List<CockroachDBExpression>) null);
        List<CockroachDBExpression> list0 = cockroachDBFunctionCall0.getArguments();
        assertNull(list0);
    }

    @Test
    public void test3() throws Throwable {
        CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.VERSION;
        LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
        CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createTimestamptzConstant(1544L);
        linkedList0.add(cockroachDBExpression0);
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0,
                linkedList0);
        List<CockroachDBExpression> list0 = cockroachDBFunctionCall0.getArguments();
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test4() throws Throwable {
        CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.SUBSTRING1;
        CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
        CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(
                cockroachDBProvider_CockroachDBGlobalState0);
        CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType
                .getVarBit((-320));
        List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator0
                .generateExpressions(cockroachDBSchema_CockroachDBCompositeDataType0, (-320), 1180);
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, list0);
        List<CockroachDBExpression> list1 = cockroachDBFunctionCall0.getArguments();
        assertSame(list0, list1);
    }

    @Test
    public void test5() throws Throwable {
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall((CockroachDBFunction) null,
                (List<CockroachDBExpression>) null);
        // Undeclared exception!
        try {
            cockroachDBFunctionCall0.getName();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.ast.CockroachDBFunctionCall", e);
        }
    }

    @Test
    public void test6() throws Throwable {
        CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall((CockroachDBFunction) null,
                (List<CockroachDBExpression>) null);
        cockroachDBFunctionCall0.getFunction();
    }
}
