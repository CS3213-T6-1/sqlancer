/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:51:46 GMT 2025
 */

package sqlancer.evosuite.cockroachdb;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBTableReference;
import sqlancer.cockroachdb.CockroachDBCommon;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.common.schema.TableIndex;

public class CockroachDBCommon_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        LinkedList<CockroachDBTableReference> linkedList0 = new LinkedList<CockroachDBTableReference>();
        List<CockroachDBExpression> list0 = CockroachDBCommon.getTableReferences(linkedList0);
        assertEquals(0, list0.size());
    }

    @Test
    public void test1() throws Throwable {
        LinkedList<CockroachDBTableReference> linkedList0 = new LinkedList<CockroachDBTableReference>();
        linkedList0.add((CockroachDBTableReference) null);
        // Undeclared exception!
        try {
            CockroachDBCommon.getTableReferences(linkedList0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cockroachdb.CockroachDBCommon", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        LinkedList<CockroachDBSchema.CockroachDBColumn> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBColumn>();
        LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
        TableIndex tableIndex0 = TableIndex.create("4");
        linkedList1.add(tableIndex0);
        CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable(
                "4", linkedList0, linkedList1, true);
        String string0 = CockroachDBCommon.getRandomCollate();
        assertEquals("en", string0);
        assertNotNull(string0);

        CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(
                cockroachDBSchema_CockroachDBTable0);
        List<CockroachDBTableReference> list0 = List.of(cockroachDBTableReference0);
        List<CockroachDBExpression> list1 = CockroachDBCommon.getTableReferences(list0);
        assertEquals(1, list1.size());
    }

    @Test
    public void test3() throws Throwable {
        LinkedList<CockroachDBSchema.CockroachDBColumn> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBColumn>();
        LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
        TableIndex tableIndex0 = TableIndex.create("4");
        linkedList1.add(tableIndex0);
        CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable(
                "4", linkedList0, linkedList1, true);
        CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(
                cockroachDBSchema_CockroachDBTable0);
        List<CockroachDBTableReference> list0 = List.of(cockroachDBTableReference0);
        List<CockroachDBExpression> list1 = CockroachDBCommon.getTableReferences(list0);
        assertFalse(list1.isEmpty());
    }

    @Test
    public void test4() throws Throwable {
        LinkedList<CockroachDBSchema.CockroachDBColumn> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBColumn>();
        LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
        CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable(
                "4", linkedList0, linkedList1, true);
        CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(
                cockroachDBSchema_CockroachDBTable0);
        List<CockroachDBTableReference> list0 = List.of(cockroachDBTableReference0);
        List<CockroachDBExpression> list1 = CockroachDBCommon.getTableReferences(list0);
        assertEquals(1, list1.size());
    }
}
