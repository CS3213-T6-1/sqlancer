/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:43:07 GMT 2025
 */

package sqlancer.evosuite.yugabyte.ycql;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;

import org.junit.jupiter.api.Test;
import sqlancer.SQLConnection;
import sqlancer.yugabyte.ycql.YCQLSchema;

public class YCQLSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.DATE;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, (-1453246218));
        int int0 = yCQLSchema_YCQLCompositeDataType0.getSize();
        assertEquals((-1453246218), int0);
    }

    @Test
    public void test01() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.getRandom();
        assertEquals(YCQLSchema.YCQLDataType.INT, yCQLSchema_YCQLDataType0);
    }

    @Test
    public void test02() throws Throwable {
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = YCQLSchema.YCQLCompositeDataType
                .getRandom();
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = yCQLSchema_YCQLCompositeDataType0.getPrimitiveDataType();
        assertEquals(YCQLSchema.YCQLDataType.INT, yCQLSchema_YCQLDataType0);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test03() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn(false).when(resultSet0).next(); Statement statement0 =
     * mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class,
     * new ViolatedAssumptionAnswer()); doReturn(statement0).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); List<String> list0 = YCQLSchema.getTableNames(sQLConnection0,
     * "SMALLINT"); assertFalse(list0.contains("SMALLINT")); }
     */

    @Test
    public void test04() throws Throwable {
        LinkedList<YCQLSchema.YCQLTable> linkedList0 = new LinkedList<YCQLSchema.YCQLTable>();
        YCQLSchema yCQLSchema0 = new YCQLSchema(linkedList0);
        // Undeclared exception!
        try {
            yCQLSchema0.getRandomTableNonEmptyTables();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test05() throws Throwable { YCQLSchema.YCQLDataType.values(); YCQLSchema.YCQLCompositeDataType
     * yCQLSchema_YCQLCompositeDataType0 = YCQLSchema.YCQLCompositeDataType .getRandom();
     * yCQLSchema_YCQLCompositeDataType0.toString(); ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("SMALLINT", "sqlancer.yugabyte.ycql.YCQLSchema$YCQLCompositeDataType",
     * "v\"I", (String) null) .when(resultSet0).getString(anyString()); doReturn(true, true, true, true,
     * false).when(resultSet0).next(); ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
     * Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); yCQLSchema_YCQLCompositeDataType0.getSize();
     * Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
     * null).when(connection0).createStatement(); SQLConnection sQLConnection0 = new SQLConnection(connection0); //
     * Undeclared exception! try { YCQLSchema.fromConnection(sQLConnection0, "SMALLINT");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.yugabyte.ycql.YCQLSchema", e); } }
     */

    // @Test
    // public void test06() throws Throwable {
    // YCQLSchema yCQLSchema0 = null;
    // try {
    // yCQLSchema0 = new YCQLSchema((List<YCQLSchema.YCQLTable>) null);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("java.util.Collections$UnmodifiableCollection", e);
    // }
    // }

    @Test
    public void test07() throws Throwable {
        // Undeclared exception!
        try {
            YCQLSchema.getTableNames((SQLConnection) null, "ENUM$VALUES");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.yugabyte.ycql.YCQLSchema", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test08() throws Throwable { Statement statement0 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn((ResultSet) null).when(statement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(statement0).when(connection0).createStatement(); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); // Undeclared exception! try { YCQLSchema.getTableNames(sQLConnection0, "SMALLINT");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.yugabyte.ycql.YCQLSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test09() throws Throwable { Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * YCQLSchema.getTableNames(sQLConnection0, (String) null); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.yugabyte.ycql.YCQLSchema", e); } }
     */

    // @Test
    // public void test10() throws Throwable {
    // LinkedList<YCQLSchema.YCQLTable> linkedList0 = new LinkedList<YCQLSchema.YCQLTable>();
    // YCQLSchema.YCQLTables yCQLSchema_YCQLTables0 = new YCQLSchema.YCQLTables(linkedList0);
    // }
    //
    // @Test
    // public void test11() throws Throwable {
    // LinkedList<YCQLSchema.YCQLColumn> linkedList0 = new LinkedList<YCQLSchema.YCQLColumn>();
    // YCQLSchema.YCQLTable yCQLSchema_YCQLTable0 = new YCQLSchema.YCQLTable("SMALLINT", linkedList0, false);
    // List<YCQLSchema.YCQLTable> list0 = List.of(yCQLSchema_YCQLTable0, yCQLSchema_YCQLTable0, yCQLSchema_YCQLTable0,
    // yCQLSchema_YCQLTable0, yCQLSchema_YCQLTable0, yCQLSchema_YCQLTable0, yCQLSchema_YCQLTable0,
    // yCQLSchema_YCQLTable0, yCQLSchema_YCQLTable0, yCQLSchema_YCQLTable0);
    // YCQLSchema yCQLSchema0 = new YCQLSchema(list0);
    // }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test12() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer());
     * doReturn("vsqlancer.yugabyte.ycql.YCQLSchema$YCQLColumn").when(resultSet0).getString(anyString()); doReturn(true,
     * false).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); Statement statement1 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn((ResultSet) null).when(statement1).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0,
     * statement1).when(connection0).createStatement(); SQLConnection sQLConnection0 = new SQLConnection(connection0);
     * // Undeclared exception! try { YCQLSchema.fromConnection(sQLConnection0, "SMALLINT");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.yugabyte.ycql.YCQLSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test13() throws Throwable { YCQLSchema.YCQLDataType.values(); YCQLSchema.YCQLCompositeDataType
     * yCQLSchema_YCQLCompositeDataType0 = YCQLSchema.YCQLCompositeDataType .getRandom(); int int0 =
     * yCQLSchema_YCQLCompositeDataType0.getSize(); assertEquals(2, int0);
     *
     * String string0 = yCQLSchema_YCQLCompositeDataType0.toString(); assertEquals("SMALLINT", string0);
     *
     * ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn((String)
     * null).when(resultSet0).getString(anyString()); doReturn(true, false).when(resultSet0).next(); Statement
     * statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class,
     * new ViolatedAssumptionAnswer()); doReturn(statement0).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); List<String> list0 = YCQLSchema.getTableNames(sQLConnection0,
     * (String) null); assertEquals(1, list0.size()); }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test14() throws Throwable { YCQLSchema.YCQLDataType.values(); YCQLSchema.YCQLCompositeDataType
     * yCQLSchema_YCQLCompositeDataType0 = YCQLSchema.YCQLCompositeDataType .getRandom();
     * yCQLSchema_YCQLCompositeDataType0.getSize(); yCQLSchema_YCQLCompositeDataType0.toString(); ResultSet resultSet0 =
     * mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn("-]^3C").when(resultSet0).getString(anyString());
     * doReturn(true, false).when(resultSet0).next(); ResultSet resultSet1 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class,
     * new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement) null).when(connection0).createStatement();
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * YCQLSchema.fromConnection(sQLConnection0, "SMALLINT"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.yugabyte.ycql.YCQLSchema", e); } }
     */

    @Test
    public void test15() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.FLOAT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 484);
        // Undeclared exception!
        try {
            yCQLSchema_YCQLCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 484
            //
        }
    }

    @Test
    public void test16() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.FLOAT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 7);
        // Undeclared exception!
        try {
            yCQLSchema_YCQLCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 7
            //
        }
    }

    @Test
    public void test17() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.FLOAT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 6);
        // Undeclared exception!
        try {
            yCQLSchema_YCQLCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 6
            //
        }
    }

    @Test
    public void test18() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.FLOAT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 5);
        // Undeclared exception!
        try {
            yCQLSchema_YCQLCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 5
            //
        }
    }

    @Test
    public void test19() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.FLOAT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 4);
        String string0 = yCQLSchema_YCQLCompositeDataType0.toString();
        assertEquals("FLOAT", string0);
    }

    @Test
    public void test20() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.INT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, (-1453246218));
        // Undeclared exception!
        try {
            yCQLSchema_YCQLCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // -1453246218
            //
        }
    }

    @Test
    public void test21() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.INT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 8);
        String string0 = yCQLSchema_YCQLCompositeDataType0.toString();
        assertEquals("BIGINT", string0);
    }

    @Test
    public void test22() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.INT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 7);
        // Undeclared exception!
        try {
            yCQLSchema_YCQLCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 7
            //
        }
    }

    @Test
    public void test23() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.INT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 6);
        // Undeclared exception!
        try {
            yCQLSchema_YCQLCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 6
            //
        }
    }

    // @Test
    // public void test24() throws Throwable {
    // YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.DATE;
    // YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
    // yCQLSchema_YCQLDataType0, (-1453246218));
    // yCQLSchema_YCQLCompositeDataType0.toString();
    // YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType1 = YCQLSchema.YCQLCompositeDataType
    // .getRandom();
    // String string0 = yCQLSchema_YCQLCompositeDataType1.toString();
    // // // Unstable assertion: assertEquals("INTEGER", string0);
    // // // Unstable assertion: assertNotNull(string0);
    // }

    @Test
    public void test25() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.INT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 3);
        // Undeclared exception!
        try {
            yCQLSchema_YCQLCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 3
            //
        }
    }

    @Test
    public void test26() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.INT;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 1);
        String string0 = yCQLSchema_YCQLCompositeDataType0.toString();
        assertEquals("TINYINT", string0);
    }

    @Test
    public void test27() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.DATE;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, 2);
        YCQLSchema.YCQLColumn yCQLSchema_YCQLColumn0 = new YCQLSchema.YCQLColumn("SMALLINT",
                yCQLSchema_YCQLCompositeDataType0, true, true);
        yCQLSchema_YCQLColumn0.toString();
        assertTrue(yCQLSchema_YCQLColumn0.isNullable());
        assertTrue(yCQLSchema_YCQLColumn0.isPrimaryKey());
    }

    @Test
    public void test28() throws Throwable {
        YCQLSchema.YCQLCompositeDataType.getRandom();
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = YCQLSchema.YCQLCompositeDataType
                .getRandom();
        String string0 = yCQLSchema_YCQLCompositeDataType0.toString();
        assertEquals("VARCHAR", string0);
    }

    @Test
    public void test29() throws Throwable {
        YCQLSchema.YCQLCompositeDataType.getRandom();
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = YCQLSchema.YCQLCompositeDataType
                .getRandom();
        YCQLSchema.YCQLCompositeDataType.getRandom();
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType1 = YCQLSchema.YCQLCompositeDataType
                .getRandom();
        yCQLSchema_YCQLCompositeDataType1.toString();
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType2 = YCQLSchema.YCQLCompositeDataType
                .getRandom();
        assertFalse(yCQLSchema_YCQLCompositeDataType2.equals((Object) yCQLSchema_YCQLCompositeDataType0));
    }

    @Test
    public void test30() throws Throwable {
        YCQLSchema.YCQLCompositeDataType.getRandom();
        YCQLSchema.YCQLCompositeDataType.getRandom();
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = YCQLSchema.YCQLCompositeDataType
                .getRandom();
        YCQLSchema.YCQLCompositeDataType.getRandom();
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType1 = YCQLSchema.YCQLCompositeDataType
                .getRandom();
        assertFalse(yCQLSchema_YCQLCompositeDataType1.equals((Object) yCQLSchema_YCQLCompositeDataType0));
    }

    @Test
    public void test31() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.TIMESTAMP;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, (-1));
        // Undeclared exception!
        try {
            yCQLSchema_YCQLCompositeDataType0.getSize();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP
            //
        }
    }

    @Test
    public void test32() throws Throwable {
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = YCQLSchema.YCQLCompositeDataType
                .getRandom();
        YCQLSchema.YCQLColumn yCQLSchema_YCQLColumn0 = new YCQLSchema.YCQLColumn("SMALLINT",
                yCQLSchema_YCQLCompositeDataType0, false, false);
        boolean boolean0 = yCQLSchema_YCQLColumn0.isNullable();
        assertFalse(boolean0);
        assertFalse(yCQLSchema_YCQLColumn0.isPrimaryKey());
    }

    @Test
    public void test33() throws Throwable {
        YCQLSchema.YCQLDataType yCQLSchema_YCQLDataType0 = YCQLSchema.YCQLDataType.TIMESTAMP;
        YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 = new YCQLSchema.YCQLCompositeDataType(
                yCQLSchema_YCQLDataType0, (-2754));
        YCQLSchema.YCQLColumn yCQLSchema_YCQLColumn0 = new YCQLSchema.YCQLColumn("", yCQLSchema_YCQLCompositeDataType0,
                true, true);
        boolean boolean0 = yCQLSchema_YCQLColumn0.isPrimaryKey();
        assertTrue(boolean0);
        assertTrue(yCQLSchema_YCQLColumn0.isNullable());
    }
}

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test34() throws Throwable { YCQLSchema.YCQLDataType.values(); YCQLSchema.YCQLCompositeDataType
 * yCQLSchema_YCQLCompositeDataType0 = YCQLSchema.YCQLCompositeDataType .getRandom();
 * yCQLSchema_YCQLCompositeDataType0.getSize(); YCQLSchema.YCQLCompositeDataType.getRandom();
 * yCQLSchema_YCQLCompositeDataType0.toString(); ResultSet resultSet0 = mock(ResultSet.class, new
 * ViolatedAssumptionAnswer()); doReturn("CREATE DATABASE ").when(resultSet0).getString(anyString()); doReturn(true,
 * false).when(resultSet0).next(); ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
 * Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
 * doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
 * ViolatedAssumptionAnswer()); doReturn(statement0, (Statement) null).when(connection0).createStatement();
 * SQLConnection sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
 * YCQLSchema.fromConnection(sQLConnection0, "WP]L{Xnia~"); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.yugabyte.ycql.YCQLSchema", e); } }
 *
 * @Test public void test35() throws Throwable { YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType0 =
 * YCQLSchema.YCQLCompositeDataType .getRandom(); String string0 = yCQLSchema_YCQLCompositeDataType0.toString(); // //
 * Unstable assertion: assertEquals("SMALLINT", string0);
 *
 * YCQLSchema.YCQLCompositeDataType yCQLSchema_YCQLCompositeDataType1 = YCQLSchema.YCQLCompositeDataType .getRandom();
 * String string1 = yCQLSchema_YCQLCompositeDataType1.toString(); // // Unstable assertion: assertEquals("BOOLEAN",
 * string1); } }
 */
