/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:21:47 GMT 2025
 */

package sqlancer.evosuite.yugabyte.ysql.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;

import org.junit.jupiter.api.Test;
import sqlancer.Randomly;
import sqlancer.common.ast.JoinBase;
import sqlancer.yugabyte.ysql.ast.YSQLConstant;
import sqlancer.yugabyte.ysql.ast.YSQLExpression;
import sqlancer.yugabyte.ysql.ast.YSQLJoin;
import sqlancer.yugabyte.ysql.ast.YSQLSelect;
import sqlancer.yugabyte.ysql.YSQLSchema;

public class YSQLSelect_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        ySQLSelect0.setJoinClauses((List<JoinBase<YSQLExpression>>) null);
        List<JoinBase<YSQLExpression>> list0 = ySQLSelect0.getJoinClauses();
        assertNull(list0);
    }

    @Test
    public void test01() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLJoin[] ySQLJoinArray0 = new YSQLJoin[1];
        List<JoinBase<YSQLExpression>> list0 = Randomly.nonEmptySubset(ySQLJoinArray0);
        ySQLSelect0.setJoinClauses(list0);
        List<JoinBase<YSQLExpression>> list1 = ySQLSelect0.getJoinClauses();
        assertEquals(1, list1.size());
    }

    @Test
    public void test02() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLSelect.ForClause ySQLSelect_ForClause0 = YSQLSelect.ForClause.NO_KEY_UPDATE;
        ySQLSelect0.setForClause(ySQLSelect_ForClause0);
        YSQLSelect.ForClause ySQLSelect_ForClause1 = ySQLSelect0.getForClause();
        assertEquals(YSQLSelect.ForClause.NO_KEY_UPDATE, ySQLSelect_ForClause1);
    }

    @Test
    public void test03() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        List<YSQLExpression> list0 = List.of((YSQLExpression) ySQLSelect0, (YSQLExpression) ySQLSelect0,
                (YSQLExpression) ySQLSelect0);
        ySQLSelect0.setFetchColumns(list0);
        // Undeclared exception!
        try {
            ySQLSelect0.asString();
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test04() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLExpression[] ySQLExpressionArray0 = new YSQLExpression[6];
        List<YSQLExpression> list0 = Randomly.nonEmptySubset(ySQLExpressionArray0);
        ySQLSelect0.setFetchColumns(list0);
        // Undeclared exception!
        try {
            ySQLSelect0.asString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test05() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLSelect.SelectType ySQLSelect_SelectType0 = ySQLSelect0.getSelectOption();
        assertEquals(YSQLSelect.SelectType.ALL, ySQLSelect_SelectType0);
    }

    @Test
    public void test06() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        // Undeclared exception!
        try {
            ySQLSelect0.setDistinctOnClause(ySQLSelect0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.yugabyte.ysql.ast.YSQLSelect", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLConstant.IntConstant ySQLConstant_IntConstant0 = new YSQLConstant.IntConstant(3371L);
        YSQLConstant ySQLConstant0 = YSQLConstant.createByteConstant("");
        YSQLSelect.SelectType ySQLSelect_SelectType0 = YSQLSelect.SelectType.DISTINCT;
        ySQLSelect0.setSelectOption(ySQLSelect_SelectType0);
        YSQLConstant ySQLConstant1 = ySQLConstant_IntConstant0.isLessThan(ySQLConstant0);
        ySQLSelect0.setDistinctOnClause(ySQLConstant1);
        YSQLConstant.BooleanConstant ySQLConstant_BooleanConstant0 = (YSQLConstant.BooleanConstant) ySQLSelect0
                .getDistinctOnClause();
        assertEquals("FALSE", ySQLConstant_BooleanConstant0.getTextRepresentation());
    }

    @Test
    public void test08() throws Throwable {
        YSQLSelect.ForClause ySQLSelect_ForClause0 = YSQLSelect.ForClause.getRandom();
        assertEquals("UPDATE", ySQLSelect_ForClause0.getTextRepresentation());
    }

    @Test
    public void test09() throws Throwable {
        YSQLSelect.ForClause ySQLSelect_ForClause0 = YSQLSelect.ForClause.KEY_SHARE;
        String string0 = ySQLSelect_ForClause0.getTextRepresentation();
        assertEquals("KEY SHARE", string0);
    }

    @Test
    public void test10() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLSelect.YSQLSubquery ySQLSelect_YSQLSubquery0 = new YSQLSelect.YSQLSubquery(ySQLSelect0, "FIELD");
        ySQLSelect_YSQLSubquery0.getExpressionType();
    }

    @Test
    public void test11() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLSelect.YSQLSubquery ySQLSelect_YSQLSubquery0 = new YSQLSelect.YSQLSubquery(ySQLSelect0, "ENUM$VALUES");
        YSQLSelect ySQLSelect1 = ySQLSelect_YSQLSubquery0.getSelect();
        assertSame(ySQLSelect0, ySQLSelect1);
    }

    @Test
    public void test12() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLSelect.YSQLSubquery ySQLSelect_YSQLSubquery0 = new YSQLSelect.YSQLSubquery(ySQLSelect0, "FIELD");
        String string0 = ySQLSelect_YSQLSubquery0.getName();
        assertEquals("FIELD", string0);
    }

    @Test
    public void test13() throws Throwable {
        YSQLSchema.YSQLColumn[] ySQLSchema_YSQLColumnArray0 = new YSQLSchema.YSQLColumn[5];
        List<YSQLSchema.YSQLColumn> list0 = Randomly.subset((-1195), ySQLSchema_YSQLColumnArray0);
        LinkedList<YSQLSchema.YSQLIndex> linkedList0 = new LinkedList<YSQLSchema.YSQLIndex>();
        YSQLSchema.YSQLTable.TableType ySQLSchema_YSQLTable_TableType0 = YSQLSchema.YSQLTable.TableType.TEMPORARY;
        LinkedList<YSQLSchema.YSQLStatisticsObject> linkedList1 = new LinkedList<YSQLSchema.YSQLStatisticsObject>();
        YSQLSchema.YSQLTable ySQLSchema_YSQLTable0 = new YSQLSchema.YSQLTable((String) null, list0, linkedList0,
                ySQLSchema_YSQLTable_TableType0, linkedList1, true, true);
        YSQLSelect.YSQLFromTable ySQLSelect_YSQLFromTable0 = new YSQLSelect.YSQLFromTable(ySQLSchema_YSQLTable0, true);
        boolean boolean0 = ySQLSelect_YSQLFromTable0.isOnly();
        assertTrue(boolean0);
    }

    @Test
    public void test14() throws Throwable {
        YSQLSelect.YSQLFromTable ySQLSelect_YSQLFromTable0 = new YSQLSelect.YSQLFromTable((YSQLSchema.YSQLTable) null,
                false);
        ySQLSelect_YSQLFromTable0.getTable();
        assertFalse(ySQLSelect_YSQLFromTable0.isOnly());
    }

    @Test
    public void test15() throws Throwable {
        YSQLSelect.YSQLFromTable ySQLSelect_YSQLFromTable0 = new YSQLSelect.YSQLFromTable((YSQLSchema.YSQLTable) null,
                true);
        ySQLSelect_YSQLFromTable0.getExpressionType();
        assertTrue(ySQLSelect_YSQLFromTable0.isOnly());
    }

    @Test
    public void test16() throws Throwable {
        YSQLSelect.SelectType ySQLSelect_SelectType0 = YSQLSelect.SelectType.getRandom();
        assertEquals(YSQLSelect.SelectType.DISTINCT, ySQLSelect_SelectType0);
    }

    @Test
    public void test17() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        ySQLSelect0.getExpressionType();
    }

    @Test
    public void test18() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        // Undeclared exception!
        try {
            ySQLSelect0.asString();
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLJoin[] ySQLJoinArray0 = new YSQLJoin[8];
        List<JoinBase<YSQLExpression>> list0 = Randomly.subset((-4455), ySQLJoinArray0);
        ySQLSelect0.setJoinClauses(list0);
        List<JoinBase<YSQLExpression>> list1 = ySQLSelect0.getJoinClauses();
        assertTrue(list1.isEmpty());
    }

    @Test
    public void test20() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLExpression ySQLExpression0 = ySQLSelect0.getDistinctOnClause();
        assertNull(ySQLExpression0);
    }

    @Test
    public void test21() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        ySQLSelect0.getForClause();
    }

    @Test
    public void test22() throws Throwable {
        YSQLSelect ySQLSelect0 = new YSQLSelect();
        YSQLSelect.SelectType ySQLSelect_SelectType0 = YSQLSelect.SelectType.ALL;
        ySQLSelect0.setSelectType(ySQLSelect_SelectType0);
        assertEquals(YSQLSelect.SelectType.ALL, ySQLSelect0.getSelectOption());
    }
}
