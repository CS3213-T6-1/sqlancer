/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:12:56 GMT 2025
 */

package sqlancer.evosuite.materialize;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeAggregate;
import sqlancer.materialize.ast.MaterializeBetweenOperation;
import sqlancer.materialize.ast.MaterializeBinaryBitOperation;
import sqlancer.materialize.ast.MaterializeBinaryComparisonOperation;
import sqlancer.materialize.ast.MaterializeBinaryLogicalOperation;
import sqlancer.materialize.ast.MaterializeBinaryRangeOperation;
import sqlancer.materialize.ast.MaterializeCastOperation;
import sqlancer.materialize.ast.MaterializeColumnValue;
import sqlancer.materialize.ast.MaterializeConcatOperation;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeFunctionWithUnknownResult;
import sqlancer.materialize.ast.MaterializeInOperation;
import sqlancer.materialize.ast.MaterializeLikeOperation;
import sqlancer.materialize.ast.MaterializeOrderByTerm;
import sqlancer.materialize.ast.MaterializePOSIXRegularExpression;
import sqlancer.materialize.ast.MaterializePostfixOperation;
import sqlancer.materialize.ast.MaterializePostfixText;
import sqlancer.materialize.ast.MaterializePrefixOperation;
import sqlancer.materialize.ast.MaterializeSelect;
import sqlancer.materialize.ast.MaterializeSimilarTo;
import sqlancer.materialize.MaterializeCompoundDataType;
import sqlancer.materialize.MaterializeSchema;
import sqlancer.materialize.MaterializeToStringVisitor;
import sqlancer.Randomly;

public class MaterializeToStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test000() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        assertEquals("", materializeToStringVisitor0.get());

        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "<~|4=S6,r_I", materializeSchema_MaterializeDataType0);
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                (-933.34));
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                1.0F);
        materializeConstant_DoubleConstant0.isEquals(materializeConstant_FloatConstant0);
        MaterializeColumnValue materializeColumnValue0 = new MaterializeColumnValue(
                materializeSchema_MaterializeColumn0, materializeConstant_DoubleConstant0);
        materializeToStringVisitor0.visit(materializeColumnValue0);
        MaterializeSelect.SelectType materializeSelect_SelectType0 = MaterializeSelect.SelectType.DISTINCT;
        materializeSelect0.setSelectType(materializeSelect_SelectType0);
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = MaterializeSchema.MaterializeDataType.INT;
        materializeSelect0.setDistinctOnClause(materializeConstant_DoubleConstant0);
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant_DoubleConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType1,
                materializeExpressionArray0);
        materializeToStringVisitor0.visit(materializeFunction0);
        List<MaterializeExpression> list0 = Randomly.subset(materializeExpressionArray0);
        Randomly.subset(list0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test001() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[3];
        List<MaterializeExpression> list0 = Randomly.nonEmptySubset(materializeExpressionArray0);
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BOOL_OR;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(list0,
                materializeAggregate_MaterializeAggregateFunction0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeAggregate0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test002() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.SUM;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate((List<MaterializeExpression>) null,
                materializeAggregate_MaterializeAggregateFunction0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visitSpecific((MaterializeExpression) materializeAggregate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test003() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[3];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[1] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[2] = (MaterializeExpression) materializeSelect0;
        List<MaterializeExpression> list0 = Randomly.nonEmptySubset(materializeExpressionArray0);
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BOOL_OR;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(list0,
                materializeAggregate_MaterializeAggregateFunction0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeAggregate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test004() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeSelect0, materializeSelect0, materializePOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializePOSIXRegularExpression0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test005() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText(materializeSelect0, "ON (",
                (MaterializeConstant) null, materializeSchema_MaterializeDataType0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializePostfixText0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test006() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_UNKNOWN;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeSelect0,
                materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializePostfixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test007() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeSelect0, materializeSelect0, materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeBinaryLogicalOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test008() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeOrderByTerm.MaterializeOrder materializeOrderByTerm_MaterializeOrder0 = MaterializeOrderByTerm.MaterializeOrder.ASC;
        MaterializeOrderByTerm materializeOrderByTerm0 = new MaterializeOrderByTerm(materializeSelect0,
                materializeOrderByTerm_MaterializeOrder0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeOrderByTerm0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test009() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test010() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.SelectType materializeSelect_SelectType0 = MaterializeSelect.SelectType.DISTINCT;
        materializeSelect0.setSelectOption(materializeSelect_SelectType0);
        materializeSelect0.getExpectedValue();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test011() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.SelectType materializeSelect_SelectType0 = MaterializeSelect.SelectType.DISTINCT;
        materializeSelect0.setSelectOption(materializeSelect_SelectType0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test012() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeConstant materializeConstant0 = materializeConstant_MaterializeNullConstant0
                .cast(materializeSchema_MaterializeDataType0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeConstant.createTextConstant((String) null);
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, (-1313));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        MaterializeCastOperation materializeCastOperation1 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        MaterializeCompoundDataType materializeCompoundDataType1 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType1);
        MaterializeCastOperation materializeCastOperation2 = new MaterializeCastOperation(materializeCastOperation0,
                materializeCompoundDataType1);
        materializeToStringVisitor0.visit(materializeCastOperation1);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeSimilarTo) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test013() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(FALSE != FALSE)", materializeToStringVisitor0.get());
    }

    @Test
    public void test014() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, 6);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        String string0 = materializeToStringVisitor0.get();
        assertEquals("(NULL)::INT(6)", string0);
    }

    @Test
    public void test015() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeConstant materializeConstant0 = materializeConstant_MaterializeNullConstant0
                .cast(materializeSchema_MaterializeDataType0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType1, (-3241));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(NULL)::INT(-3241)", materializeToStringVisitor0.get());
    }

    @Test
    public void test016() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFloatConstant(312.2F);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0 = MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator.LESS_EQUALS;
        MaterializeBinaryComparisonOperation materializeBinaryComparisonOperation0 = new MaterializeBinaryComparisonOperation(
                materializeCastOperation0, materializeConstant0,
                materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0);
        materializeBinaryComparisonOperation0.getExpectedValue();
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(
                (MaterializeExpression) null, (MaterializeExpression) null);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType1 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType1, 6);
        MaterializeCastOperation materializeCastOperation1 = null;
        try {
            materializeCastOperation1 = new MaterializeCastOperation((MaterializeExpression) null,
                    materializeCompoundDataType1);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test017() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("0{f3!JQ:N/uY");
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_MaterializeNullConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, 5);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[8];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeColumnValue0;
        materializeExpressionArray0[1] = (MaterializeExpression) materializeColumnValue0;
        materializeExpressionArray0[2] = (MaterializeExpression) materializeCastOperation0;
        materializeExpressionArray0[3] = (MaterializeExpression) materializeColumnValue0;
        materializeExpressionArray0[4] = (MaterializeExpression) materializeColumnValue0;
        materializeExpressionArray0[5] = (MaterializeExpression) materializeConstant_MaterializeNullConstant0;
        materializeExpressionArray0[6] = (MaterializeExpression) materializeConstant_MaterializeNullConstant0;
        materializeExpressionArray0[7] = (MaterializeExpression) materializeColumnValue0;
        List<MaterializeExpression> list0 = Randomly.nonEmptySubset(materializeExpressionArray0);
        materializeToStringVisitor0.visit(list0);
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(
                materializeConstant_MaterializeNullConstant0, (List<MaterializeExpression>) null, false);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeInOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test018() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(
                materializeConstant_MaterializeNullConstant0, (List<MaterializeExpression>) null, false);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeInOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test019() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test020() throws Throwable {
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = null;
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visitSpecific((MaterializeExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test021() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant((-3291L));
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeConstant materializeConstant0 = MaterializeConstant.createDoubleConstant(0.0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(
                materializeCastOperation0, materializeCastOperation0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType2 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeCompoundDataType materializeCompoundDataType1 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType2, 962);
        MaterializeCastOperation materializeCastOperation1 = new MaterializeCastOperation(materializeCastOperation0,
                materializeCompoundDataType1);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_PLUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                materializeCastOperation0, materializePrefixOperation_PrefixOperator0);
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.QUOTE_IDENT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[9];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeCastOperation1;
        materializeExpressionArray0[1] = (MaterializeExpression) materializeCastOperation1;
        materializeExpressionArray0[2] = (MaterializeExpression) materializePrefixOperation0;
        materializeExpressionArray0[3] = (MaterializeExpression) materializeCastOperation1;
        materializeExpressionArray0[4] = (MaterializeExpression) materializeCastOperation0;
        materializeExpressionArray0[5] = materializeExpression0;
        materializeExpressionArray0[6] = (MaterializeExpression) materializeConstant0;
        materializeExpressionArray0[7] = (MaterializeExpression) materializeCastOperation1;
        MaterializeCastOperation materializeCastOperation2 = new MaterializeCastOperation(
                materializeExpressionArray0[5], materializeCompoundDataType0);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant0,
                materializeExpressionArray0[7], materializeCastOperation2);
        materializeExpressionArray0[8] = (MaterializeExpression) materializeSimilarTo0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
                materializeSchema_MaterializeDataType1, materializeExpressionArray0);
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult1 = MaterializeFunctionWithUnknownResult.ACOSH;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType3 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeFunction materializeFunction1 = new MaterializeFunction(materializeFunctionWithUnknownResult1,
                materializeSchema_MaterializeDataType3, materializeExpressionArray0);
        materializeToStringVisitor0.visit(materializeFunction1);
        assertEquals(
                "(0.0)::VARCHARacosh(((0.0)::VARCHAR)::INT(962), ((0.0)::VARCHAR)::INT(962), + ((0.0)::VARCHAR), ((0.0)::VARCHAR)::INT(962), (0.0)::VARCHAR, -3291, 0.0, ((0.0)::VARCHAR)::INT(962), (0.0 SIMILAR TO ((0.0)::VARCHAR)::INT(962)(-3291)::VARCHAR))",
                materializeToStringVisitor0.get());
    }

    @Test
    public void test022() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(NULL)::INT", materializeToStringVisitor0.get());
    }

    @Test
    public void test023() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant(0L);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeExpression0,
                materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeExpression0,
                materializeExpression0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType1 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType1, (-961));
        MaterializeCastOperation materializeCastOperation1 = new MaterializeCastOperation(materializeConcatOperation0,
                materializeCompoundDataType1);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_PLUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(materializeExpression0,
                materializePrefixOperation_PrefixOperator0);
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.QUOTE_IDENT;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType2 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[3];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConcatOperation0;
        materializeExpressionArray0[1] = (MaterializeExpression) materializeConcatOperation0;
        materializeExpressionArray0[2] = (MaterializeExpression) materializeCastOperation1;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
                materializeSchema_MaterializeDataType2, materializeExpressionArray0);
        materializeToStringVisitor0.visit(materializeFunction0);
        assertEquals("(0)::VARCHARquote_ident(((0)||(0)), ((0)||(0)), (((0)||(0)) != ''))",
                materializeToStringVisitor0.get());

        materializeToStringVisitor0.visit(materializeCastOperation1);
        assertEquals("(0)::VARCHARquote_ident(((0)||(0)), ((0)||(0)), (((0)||(0)) != ''))(((0)||(0)) != '')",
                materializeToStringVisitor0.get());
    }

    @Test
    public void test024() throws Throwable {
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = null;
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeOrderByTerm.MaterializeOrder materializeOrderByTerm_MaterializeOrder0 = MaterializeOrderByTerm.MaterializeOrder.DESC;
        MaterializeOrderByTerm materializeOrderByTerm0 = new MaterializeOrderByTerm((MaterializeExpression) null,
                materializeOrderByTerm_MaterializeOrder0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeOrderByTerm0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test025() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("I");
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, 4860);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("('I' != '')", materializeToStringVisitor0.get());
    }

    @Test
    public void test026() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(NULL != 0)", materializeToStringVisitor0.get());
    }

    @Test
    public void test027() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeSelect0,
                materializeCompoundDataType0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeCastOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test028() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeBinaryBitOperation.MaterializeBinaryBitOperator materializeBinaryBitOperation_MaterializeBinaryBitOperator0 = MaterializeBinaryBitOperation.MaterializeBinaryBitOperator.BITWISE_SHIFT_LEFT;
        MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator materializeBinaryRangeOperation_MaterializeBinaryRangeOperator0 = MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator.DIFFERENCE;
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                2092.58635);
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_NULL;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                materializeConstant_DoubleConstant0, materializePostfixOperation_PostfixOperator0);
        MaterializeBinaryRangeOperation materializeBinaryRangeOperation0 = new MaterializeBinaryRangeOperation(
                materializeBinaryRangeOperation_MaterializeBinaryRangeOperator0, materializePostfixOperation0,
                materializePostfixOperation0);
        MaterializeBinaryBitOperation materializeBinaryBitOperation0 = new MaterializeBinaryBitOperation(
                materializeBinaryBitOperation_MaterializeBinaryBitOperator0, materializeBinaryRangeOperation0,
                materializeConstant_DoubleConstant0);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeBinaryBitOperation0, materializePostfixOperation0, materializePostfixOperation0, true);
        materializeToStringVisitor0.visit(materializeBetweenOperation0);
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = new MaterializeSelect.MaterializeSubquery(
                materializeSelect0, "S;");
        MaterializeToStringVisitor materializeToStringVisitor1 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor1.visit(materializeSelect_MaterializeSubquery0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test029() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        List<MaterializeExpression> list0 = materializeSelect0.getGroupByClause();
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(materializeSelect0, list0, true);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test030() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.NOT;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(materializeSelect0,
                materializePrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializePrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test031() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[9];
        materializeExpressionArray0[0] = (MaterializeExpression) null;
        materializeExpressionArray0[1] = (MaterializeExpression) null;
        materializeExpressionArray0[2] = (MaterializeExpression) null;
        materializeExpressionArray0[3] = (MaterializeExpression) null;
        materializeExpressionArray0[4] = (MaterializeExpression) null;
        materializeExpressionArray0[5] = (MaterializeExpression) null;
        materializeExpressionArray0[6] = (MaterializeExpression) null;
        materializeExpressionArray0[7] = (MaterializeExpression) null;
        materializeExpressionArray0[8] = (MaterializeExpression) null;
        List<MaterializeExpression> list0 = Randomly.subset(materializeExpressionArray0);
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BIT_OR;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(list0,
                materializeAggregate_MaterializeAggregateFunction0);
        materializeToStringVisitor0.visit(materializeAggregate0);
        assertEquals("BIT_OR()", materializeToStringVisitor0.get());
    }

    @Test
    public void test032() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeSimilarTo) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test033() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(
                materializeConstant_MaterializeNullConstant0, (List<MaterializeExpression>) null, true);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeInOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test034() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("");
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_MaterializeNullConstant0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeColumnValue0, materializeColumnValue0, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializePOSIXRegularExpression0, materializeCompoundDataType0);
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[4];
        MaterializeCastOperation materializeCastOperation1 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeExpressionArray0[0] = (MaterializeExpression) materializeCastOperation1;
        materializeExpressionArray0[1] = (MaterializeExpression) materializeColumnValue0;
        materializeExpressionArray0[2] = (MaterializeExpression) materializePOSIXRegularExpression0;
        materializeExpressionArray0[3] = (MaterializeExpression) materializeConstant_MaterializeNullConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        List<MaterializeExpression> list0 = Randomly.nonEmptySubset(materializeExpressionArray0);
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(materializeCastOperation0, list0,
                true);
        materializeToStringVisitor0.visit(materializeInOperation0);
        assertEquals("((~*)::INT::FLOAT) IN ()", materializeToStringVisitor0.get());
    }

    @Test
    public void test035() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation((MaterializeExpression) null,
                (List<MaterializeExpression>) null, true);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeInOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test036() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo((MaterializeExpression) null,
                (MaterializeExpression) null, (MaterializeExpression) null);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSimilarTo0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test037() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                (MaterializeExpression) null, (MaterializeExpression) null, (MaterializeExpression) null, true);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeBetweenOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    // @Test
    // public void test038() throws Throwable {
    // MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
    // MaterializeToStringVisitor materializeToStringVisitor1 = new MaterializeToStringVisitor();
    // LinkedList<MaterializeSchema.MaterializeColumn> linkedList0 = new
    // LinkedList<MaterializeSchema.MaterializeColumn>();
    // MaterializeSchema.MaterializeIndex[] materializeSchema_MaterializeIndexArray0 = new
    // MaterializeSchema.MaterializeIndex[0];
    // List<MaterializeSchema.MaterializeIndex> list0 = Randomly.subset(materializeSchema_MaterializeIndexArray0);
    // MaterializeSchema.MaterializeTable.TableType materializeSchema_MaterializeTable_TableType0 =
    // MaterializeSchema.MaterializeTable.TableType.TEMPORARY;
    // MaterializeSchema.MaterializeStatisticsObject[] materializeSchema_MaterializeStatisticsObjectArray0 = new
    // MaterializeSchema.MaterializeStatisticsObject[9];
    // MaterializeSchema.MaterializeStatisticsObject materializeSchema_MaterializeStatisticsObject0 = mock(
    // MaterializeSchema.MaterializeStatisticsObject.class, new ViolatedAssumptionAnswer());
    // materializeSchema_MaterializeStatisticsObjectArray0[0] = materializeSchema_MaterializeStatisticsObject0;
    // materializeSchema_MaterializeStatisticsObjectArray0[1] = materializeSchema_MaterializeStatisticsObject0;
    // materializeSchema_MaterializeStatisticsObjectArray0[2] = materializeSchema_MaterializeStatisticsObject0;
    // materializeSchema_MaterializeStatisticsObjectArray0[3] = materializeSchema_MaterializeStatisticsObject0;
    // materializeSchema_MaterializeStatisticsObjectArray0[4] = materializeSchema_MaterializeStatisticsObject0;
    // materializeSchema_MaterializeStatisticsObjectArray0[5] = materializeSchema_MaterializeStatisticsObject0;
    // materializeSchema_MaterializeStatisticsObjectArray0[6] = materializeSchema_MaterializeStatisticsObject0;
    // materializeSchema_MaterializeStatisticsObjectArray0[7] = materializeSchema_MaterializeStatisticsObject0;
    // materializeSchema_MaterializeStatisticsObjectArray0[8] = materializeSchema_MaterializeStatisticsObject0;
    // List<MaterializeSchema.MaterializeStatisticsObject> list1 = Randomly
    // .subset(materializeSchema_MaterializeStatisticsObjectArray0);
    // List<MaterializeSchema.MaterializeStatisticsObject> list2 = Randomly.extractNrRandomColumns(list1, (-745));
    // MaterializeSchema.MaterializeTable materializeSchema_MaterializeTable0 = new MaterializeSchema.MaterializeTable(
    // "OWHT%{@xYqj", linkedList0, list0, materializeSchema_MaterializeTable_TableType0, list2, true, true);
    // MaterializeSelect.MaterializeFromTable materializeSelect_MaterializeFromTable0 = new
    // MaterializeSelect.MaterializeFromTable(
    // materializeSchema_MaterializeTable0, false);
    // materializeToStringVisitor0.visit(materializeSelect_MaterializeFromTable0);
    // assertNotSame(materializeToStringVisitor0, materializeToStringVisitor1);
    // }

    @Test
    public void test039() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                (MaterializeExpression) null, (MaterializeExpression) null,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeBinaryLogicalOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test040() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.RIGHT;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
                materializeSchema_MaterializeDataType0, materializeExpressionArray0);
        materializeToStringVisitor0.visit(materializeFunction0);
        assertEquals("right()", materializeToStringVisitor0.get());
    }

    @Test
    public void test041() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("");
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_MaterializeNullConstant0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeColumnValue0, materializeColumnValue0, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializePOSIXRegularExpression0, materializeCompoundDataType0);
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[4];
        MaterializeCastOperation materializeCastOperation1 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeExpressionArray0[0] = (MaterializeExpression) materializeCastOperation1;
        materializeExpressionArray0[1] = (MaterializeExpression) materializeColumnValue0;
        materializeExpressionArray0[2] = (MaterializeExpression) materializePOSIXRegularExpression0;
        materializeExpressionArray0[3] = (MaterializeExpression) materializeConstant_MaterializeNullConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        materializeToStringVisitor0.visit(materializeFunction0);
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test042() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFloatConstant(312.2F);
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[3];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeFunction0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test043() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeFunction) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test044() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeSelect0,
                materializeSelect0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeLikeOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test045() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeSelect.MaterializeFromTable) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test046() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(1L);
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant(1L);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeConstant0,
                materializeExpression0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, (-961));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConcatOperation0,
                materializeCompoundDataType0);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                materializeCastOperation0, materializePrefixOperation_PrefixOperator0);
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect.MaterializeFromTable materializeSelect_MaterializeFromTable0 = new MaterializeSelect.MaterializeFromTable(
                (MaterializeSchema.MaterializeTable) null, false);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSelect_MaterializeFromTable0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test047() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeLikeOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test048() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                (MaterializeExpression) null, materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializePostfixOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test049() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        materializeToStringVisitor0.get();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeSelect0,
                materializeConstant0, materializeSelect0, true);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test050() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeBetweenOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test051() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        double double0 = 50.0;
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        String string0 = "";
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeSelect0,
                materializeSelect0, materializeSelect0, true);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test052() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        MaterializeConstant.DecimalConstant materializeConstant_DecimalConstant0 = new MaterializeConstant.DecimalConstant(
                bigDecimal0);
        MaterializeOrderByTerm.MaterializeOrder materializeOrderByTerm_MaterializeOrder0 = MaterializeOrderByTerm.MaterializeOrder.ASC;
        MaterializeOrderByTerm materializeOrderByTerm0 = new MaterializeOrderByTerm(
                materializeConstant_DecimalConstant0, materializeOrderByTerm_MaterializeOrder0);
        materializeToStringVisitor0.visit(materializeOrderByTerm0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeOrderByTerm0,
                materializeConstant_DecimalConstant0);
        // Undeclared exception!
        try {
            materializeConcatOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.materialize.ast.MaterializeOrderByTerm@3
            //
        }
    }

    @Test
    public void test053() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeInOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test054() throws Throwable {
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = null;
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.NOT;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                (MaterializeExpression) null, materializePrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializePrefixOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test055() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(1L);
        MaterializeConstant materializeConstant0 = materializeBinaryLogicalOperation_BinaryLogicalOperator0
                .apply(materializeConstant_IntConstant0, materializeConstant_IntConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText(materializeConstant0, "ss{G2",
                materializeConstant_IntConstant0, materializeSchema_MaterializeDataType0);
        materializeToStringVisitor0.visit(materializePostfixText0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "LEFT OUTER JOIN", materializeSchema_MaterializeDataType1);
        materializeSchema_MaterializeColumn0.toString();
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_IntConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType2 = MaterializeSchema.MaterializeDataType.FLOAT;
        materializeConstant0.cast(materializeSchema_MaterializeDataType2);
        materializeToStringVisitor0.visit(materializeColumnValue0);
        materializeToStringVisitor0.visit(materializeColumnValue0);
        materializeToStringVisitor0.get();
        MaterializeConstant.createBitConstant(1L);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        // Undeclared exception!
        try {
            materializeLikeOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test056() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.CHR;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeSelect0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
                materializeSchema_MaterializeDataType0, materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test057() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[2];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeFunction0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test058() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.SelectType materializeSelect_SelectType0 = MaterializeSelect.SelectType.ALL;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[9];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[1] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[2] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[3] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[4] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[5] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[6] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[7] = (MaterializeExpression) materializeSelect0;
        materializeExpressionArray0[8] = (MaterializeExpression) materializeSelect0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test059() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(1L);
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant(1L);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeConstant0,
                materializeExpression0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, (-961));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConcatOperation0,
                materializeCompoundDataType0);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                materializeCastOperation0, materializePrefixOperation_PrefixOperator0);
        materializeToStringVisitor0.visit(materializePrefixOperation0);
        assertEquals("- ((((1)||(1)))::VARCHAR(-961))", materializeToStringVisitor0.get());
    }

    @Test
    public void test060() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, 6);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(NULL)::VARCHAR(6)", materializeToStringVisitor0.get());
    }

    @Test
    public void test061() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(NULL)::VARCHAR", materializeToStringVisitor0.get());
    }

    @Test
    public void test062() throws Throwable {
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = null;
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText((MaterializeExpression) null, "",
                (MaterializeConstant) null, materializeSchema_MaterializeDataType0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializePostfixText0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test063() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializePostfixText) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test064() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                1.0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        materializeConstant_DoubleConstant0.cast(materializeSchema_MaterializeDataType0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText((MaterializeExpression) null, "+",
                materializeConstant_DoubleConstant0, materializeSchema_MaterializeDataType1);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializePostfixText0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test065() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "'~3<]lEN");
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant_StringConstant0, materializeConstant_StringConstant0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        materializeToStringVisitor0.visit(materializeBinaryLogicalOperation0);
        assertEquals("(('''~3<]lEN')OR('''~3<]lEN'))", materializeToStringVisitor0.get());
    }

    @Test
    public void test066() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeBinaryLogicalOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test067() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(NULL)::DECIMAL", materializeToStringVisitor0.get());
    }

    @Test
    public void test068() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFloatConstant(312.2F);
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeConstant0,
                materializePostfixOperation_PostfixOperator0);
        materializeToStringVisitor0.visit(materializePostfixOperation0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializePostfixOperation0,
                materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(312.2) IS FALSE((312.2) IS FALSE)::DECIMAL", materializeToStringVisitor0.get());
    }

    @Test
    public void test069() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeAggregate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test070() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        String string0 = "";
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "", materializeSchema_MaterializeDataType0);
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                1235.43426463964);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeConstant_DoubleConstant0, materializeConstant_DoubleConstant0,
                materializePOSIXRegularExpression_POSIXRegex0);
        materializePOSIXRegularExpression0.getExpectedValue();
        MaterializeColumnValue materializeColumnValue0 = new MaterializeColumnValue(
                materializeSchema_MaterializeColumn0, (MaterializeConstant) null);
        materializeToStringVisitor0.visitSpecific((MaterializeExpression) materializeColumnValue0);
        MaterializeConstant.createFalse();
        materializeToStringVisitor0.visit(materializeColumnValue0);
        materializeToStringVisitor0.visitSpecific((MaterializeExpression) materializeColumnValue0);
        materializeToStringVisitor0.get();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(
                materializePOSIXRegularExpression0, (MaterializeExpression) null);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeLikeOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test071() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeCastOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test072() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(
                (MaterializeExpression) null, (MaterializeExpression) null);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConcatOperation0,
                materializeCompoundDataType0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeCastOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test073() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeOrderByTerm) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test074() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(NULL)::INT", materializeToStringVisitor0.get());
    }

    @Test
    public void test075() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeExpression materializeExpression0 = null;
        MaterializeOrderByTerm.MaterializeOrder materializeOrderByTerm_MaterializeOrder0 = MaterializeOrderByTerm.MaterializeOrder.ASC;
        MaterializeOrderByTerm materializeOrderByTerm0 = new MaterializeOrderByTerm((MaterializeExpression) null,
                materializeOrderByTerm_MaterializeOrder0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, 1673);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeOrderByTerm0,
                materializeCompoundDataType0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeCastOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test076() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = new MaterializeSelect.MaterializeSubquery(
                materializeSelect0, "");
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSelect_MaterializeSubquery0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test077() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializePrefixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test078() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeBinaryBitOperation.MaterializeBinaryBitOperator materializeBinaryBitOperation_MaterializeBinaryBitOperator0 = MaterializeBinaryBitOperation.MaterializeBinaryBitOperator.BITWISE_OR;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeBinaryBitOperation materializeBinaryBitOperation0 = new MaterializeBinaryBitOperation(
                materializeBinaryBitOperation_MaterializeBinaryBitOperator0, materializeConstant0,
                materializeConstant0);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializeConstant.createFloatConstant(0.0F);
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                materializeBinaryBitOperation0, materializePrefixOperation_PrefixOperator0);
        materializeToStringVisitor0.visit(materializePrefixOperation0);
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = new MaterializeSelect.MaterializeSubquery(
                materializeSelect0, "Q");
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSelect_MaterializeSubquery0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test079() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visitSpecific((MaterializeExpression) materializeSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test080() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeSelect.MaterializeSubquery) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test081() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test082() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        String string0 = "pet,";
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = new MaterializeSelect.MaterializeSubquery(
                materializeSelect0, "pet,");
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visitSpecific((MaterializeExpression) materializeSelect_MaterializeSubquery0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test083() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("r*%tO!fd[Gk8h!CsK");
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_MaterializeNullConstant0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeColumnValue0,
                materializeConstant_MaterializeNullConstant0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeLikeOperation0, materializeLikeOperation0, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializePOSIXRegularExpression0, materializeCompoundDataType0);
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                0.0);
        materializeConstant_DoubleConstant0.isEquals(materializeConstant_MaterializeNullConstant0);
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NULL;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                (MaterializeExpression) null, materializePostfixOperation_PostfixOperator0);
        MaterializeCastOperation materializeCastOperation1 = new MaterializeCastOperation(materializePostfixOperation0,
                materializeCompoundDataType0);
        MaterializeCastOperation materializeCastOperation2 = new MaterializeCastOperation(materializePostfixOperation0,
                materializeCompoundDataType0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeCastOperation2);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test084() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFloatConstant(312.2F);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "-](", materializeSchema_MaterializeDataType0);
        MaterializeColumnValue.create(materializeSchema_MaterializeColumn0, materializeConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType1);
        MaterializeConstant.createTextConstant("-](");
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        MaterializeCastOperation materializeCastOperation1 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        MaterializeCastOperation materializeCastOperation2 = new MaterializeCastOperation(materializeCastOperation0,
                materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation2);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeSimilarTo) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test085() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(NULL)::INT::REAL", materializeToStringVisitor0.get());
    }

    @Test
    public void test086() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, materializeCompoundDataType0);
        materializeToStringVisitor0.visit(materializeCastOperation0);
        assertEquals("(NULL)::INT::FLOAT", materializeToStringVisitor0.get());
    }

    @Test
    public void test087() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("");
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_MaterializeNullConstant0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeColumnValue0, materializeColumnValue0, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializePOSIXRegularExpression0, materializeCompoundDataType0);
        materializeCastOperation0.getExpectedValue();
        materializeToStringVisitor0.visit(materializeCastOperation0);
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        BigDecimal bigDecimal1 = BigDecimal.ZERO;
        MathContext mathContext0 = MathContext.DECIMAL32;
        // Undeclared exception!
        try {
            bigDecimal0.divide(bigDecimal1, mathContext0);
            fail("Expecting exception: ArithmeticException");

        } catch (ArithmeticException e) {
            //
            // Division undefined
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test
    public void test088() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                (MaterializeExpression) null, (MaterializeExpression) null,
                materializePOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializePOSIXRegularExpression0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test089() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(0L);
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                0L);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        materializeConstant_DoubleConstant0.cast(materializeSchema_MaterializeDataType0);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant_IntConstant0,
                materializeConstant_IntConstant0, (MaterializeExpression) null);
        materializeToStringVisitor0.visit(materializeSimilarTo0);
        assertEquals("(0 SIMILAR TO 0)", materializeToStringVisitor0.get());
    }

    @Test
    public void test090() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator materializeBinaryRangeOperation_MaterializeBinaryRangeComparisonOperator0 = MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator.STRICT_RIGHT_OF;
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                1.0F);
        MaterializeBinaryRangeOperation materializeBinaryRangeOperation0 = new MaterializeBinaryRangeOperation(
                materializeBinaryRangeOperation_MaterializeBinaryRangeComparisonOperator0,
                materializeConstant_FloatConstant0, materializeConstant_FloatConstant0);
        MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0 = MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator.GREATER_EQUALS;
        MaterializeBinaryComparisonOperation materializeBinaryComparisonOperation0 = new MaterializeBinaryComparisonOperation(
                materializeBinaryRangeOperation0, materializeBinaryRangeOperation0,
                materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeBinaryComparisonOperation0,
                materializeBinaryRangeOperation0, materializeBinaryRangeOperation0);
        materializeToStringVisitor0.visit(materializeSimilarTo0);
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        materializeToStringVisitor0.visit(materializeLikeOperation0);
        String string0 = materializeToStringVisitor0.get();
        assertEquals("(((((1.0)>>(1.0)))>=(((1.0)>>(1.0)))) SIMILAR TO ((1.0)>>(1.0))((1.0)>>(1.0)))((TRUE)LIKE(TRUE))",
                string0);
    }

    @Test
    public void test091() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant0,
                materializeConstant0, materializeConstant0);
        materializeToStringVisitor0.visit(materializeSimilarTo0);
        assertEquals("(TRUE SIMILAR TO TRUETRUE)", materializeToStringVisitor0.get());
    }

    @Test
    public void test092() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        String string0 = materializeToStringVisitor0.get();
        assertEquals("", string0);
    }

    @Test
    public void test093() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeSelect0, materializeSelect0,
                materializeSelect0);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeSimilarTo0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test094() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializePOSIXRegularExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test095() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation((MaterializeExpression) null,
                (MaterializeExpression) null);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeLikeOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test096() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeConstant materializeConstant1 = materializeConstant_MaterializeNullConstant0
                .isEquals(materializeConstant0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeConstant1, materializeConstant1, materializePOSIXRegularExpression_POSIXRegex0);
        materializeToStringVisitor0.visit(materializePOSIXRegularExpression0);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeConstant1,
                materializePOSIXRegularExpression0, materializeConstant0, true);
        materializeBetweenOperation0.getExpectedValue();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation((MaterializeExpression) null,
                (MaterializeExpression) null);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit(materializeLikeOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test097() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                1016.9242F);
        materializeToStringVisitor0.visit((MaterializeConstant) materializeConstant_FloatConstant0);
        assertNull(materializeConstant_FloatConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test098() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializeColumnValue) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test099() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "5Q%\"<", materializeSchema_MaterializeDataType0);
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(
                (-1716L));
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeConstant_IntConstant0.isEquals(materializeConstant0);
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant1);
        materializeToStringVisitor0.visit(materializeColumnValue0);
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        MaterializeConstant materializeConstant2 = MaterializeConstant.createFalse();
        materializeConstant2.getExpressionType();
        MaterializeConstant materializeConstant3 = materializeConstant_BooleanConstant0.isEquals(materializeConstant2);
        MaterializeColumnValue materializeColumnValue1 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant3);
        MaterializeColumnValue.create(materializeSchema_MaterializeColumn0, materializeConstant2);
        materializeToStringVisitor0.visit(materializeColumnValue1);
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializePostfixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test100() throws Throwable {
        MaterializeToStringVisitor materializeToStringVisitor0 = new MaterializeToStringVisitor();
        // Undeclared exception!
        try {
            materializeToStringVisitor0.visit((MaterializePostfixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }
}
