/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:29:02 GMT 2025
 */

package sqlancer.evosuite.materialize.gen;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import sqlancer.common.query.ExpectedErrors;
import sqlancer.materialize.gen.MaterializeCommon;
import sqlancer.materialize.MaterializeGlobalState;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeCommon_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("8#9otCsI6'sTgcbU=");
        List<MaterializeSchema.MaterializeColumn> list0 = List.of(materializeSchema_MaterializeColumn0,
                materializeSchema_MaterializeColumn0, materializeSchema_MaterializeColumn0,
                materializeSchema_MaterializeColumn0);
        LinkedList<MaterializeSchema.MaterializeIndex> linkedList0 = new LinkedList<MaterializeSchema.MaterializeIndex>();
        LinkedList<MaterializeSchema.MaterializeStatisticsObject> linkedList1 = new LinkedList<MaterializeSchema.MaterializeStatisticsObject>();
        MaterializeSchema.MaterializeTable.TableType materializeSchema_MaterializeTable_TableType0 = MaterializeSchema.MaterializeTable.TableType.TEMPORARY;
        MaterializeSchema.MaterializeTable materializeSchema_MaterializeTable0 = new MaterializeSchema.MaterializeTable(
                "RBo6Hf=", list0, linkedList0, materializeSchema_MaterializeTable_TableType0, linkedList1, false, true);
        materializeSchema_MaterializeTable0.getRandomNonEmptyColumnSubset();
        MaterializeGlobalState materializeGlobalState0 = new MaterializeGlobalState();
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        StringBuilder stringBuilder0 = new StringBuilder();
        // Undeclared exception!
        try {
            MaterializeCommon.addTableConstraint(stringBuilder0, materializeSchema_MaterializeTable0,
                    materializeGlobalState0, expectedErrors0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    // @Test
    // public void test01() throws Throwable {
    // MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
    // .createDummy("");
    // List<MaterializeSchema.MaterializeColumn> list0 = List.of(materializeSchema_MaterializeColumn0,
    // materializeSchema_MaterializeColumn0, materializeSchema_MaterializeColumn0,
    // materializeSchema_MaterializeColumn0);
    // List<MaterializeSchema.MaterializeIndex> list1 = List.of();
    // MaterializeSchema.MaterializeTable.TableType materializeSchema_MaterializeTable_TableType0 =
    // MaterializeSchema.MaterializeTable.TableType.TEMPORARY;
    // LinkedList<MaterializeSchema.MaterializeStatisticsObject> linkedList0 = new
    // LinkedList<MaterializeSchema.MaterializeStatisticsObject>();
    // MaterializeSchema.MaterializeTable materializeSchema_MaterializeTable0 = new MaterializeSchema.MaterializeTable(
    // "8Dm[6$P;r%UT}QWy6", list0, list1, materializeSchema_MaterializeTable_TableType0, linkedList0, false,
    // true);
    // MaterializeGlobalState materializeGlobalState0 = new MaterializeGlobalState();
    // ExpectedErrors expectedErrors0 = new ExpectedErrors();
    // StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "8Dm[6$P;r%UT}QWy6");
    // // Undeclared exception!
    // try {
    // MaterializeCommon.addTableConstraint(stringBuilder0, materializeSchema_MaterializeTable0,
    // materializeGlobalState0, expectedErrors0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.materialize.gen.MaterializeExpressionGenerator", e);
    // }
    // }

    @Test
    public void test02() throws Throwable {
        // Undeclared exception!
        try {
            MaterializeCommon.getFreeIndexName((MaterializeSchema) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.gen.MaterializeCommon", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        // Undeclared exception!
        try {
            MaterializeCommon.appendDataType(materializeSchema_MaterializeDataType0, (StringBuilder) null, true, true,
                    linkedList0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.gen.MaterializeCommon", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        // Undeclared exception!
        try {
            MaterializeCommon.addCommonTableErrors((ExpectedErrors) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.gen.MaterializeCommon", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        // Undeclared exception!
        try {
            MaterializeCommon.addCommonRangeExpressionErrors((ExpectedErrors) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.gen.MaterializeCommon", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        // Undeclared exception!
        try {
            MaterializeCommon.addCommonInsertUpdateErrors((ExpectedErrors) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.gen.MaterializeCommon", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        // Undeclared exception!
        try {
            MaterializeCommon.addCommonExpressionErrors((ExpectedErrors) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.gen.MaterializeCommon", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        List<String> list0 = MaterializeCommon.getCommonFetchErrors();
        assertFalse(list0.isEmpty());
    }

    // @Test
    // public void test09() throws Throwable {
    // LinkedList<MaterializeSchema.MaterializeTable> linkedList0 = new
    // LinkedList<MaterializeSchema.MaterializeTable>();
    // LinkedList<String> linkedList1 = new LinkedList<String>();
    // linkedList1.add("i0");
    // MaterializeSchema materializeSchema0 = new MaterializeSchema(linkedList0, "i0", linkedList1);
    // String string0 = MaterializeCommon.getFreeIndexName(materializeSchema0);
    // assertEquals("i1", string0);
    // }
    //
    // @Test
    // public void test10() throws Throwable {
    // MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
    // .createDummy("^_`*");
    // List<MaterializeSchema.MaterializeColumn> list0 = List.of(materializeSchema_MaterializeColumn0,
    // materializeSchema_MaterializeColumn0, materializeSchema_MaterializeColumn0,
    // materializeSchema_MaterializeColumn0);
    // LinkedList<MaterializeSchema.MaterializeIndex> linkedList0 = new
    // LinkedList<MaterializeSchema.MaterializeIndex>();
    // LinkedList<MaterializeSchema.MaterializeStatisticsObject> linkedList1 = new
    // LinkedList<MaterializeSchema.MaterializeStatisticsObject>();
    // MaterializeSchema.MaterializeTable.TableType materializeSchema_MaterializeTable_TableType0 =
    // MaterializeSchema.MaterializeTable.TableType.STANDARD;
    // MaterializeSchema.MaterializeTable materializeSchema_MaterializeTable0 = new MaterializeSchema.MaterializeTable(
    // "^_`*", list0, linkedList0, materializeSchema_MaterializeTable_TableType0, linkedList1, false, false);
    // materializeSchema_MaterializeTable0.getRandomNonEmptyColumnSubset();
    // MaterializeGlobalState materializeGlobalState0 = new MaterializeGlobalState();
    // ExpectedErrors expectedErrors0 = new ExpectedErrors();
    // materializeSchema_MaterializeTable0.getRandomColumn();
    // StringBuilder stringBuilder0 = new StringBuilder();
    // // Undeclared exception!
    // try {
    // MaterializeCommon.addTableConstraint(stringBuilder0, materializeSchema_MaterializeTable0,
    // materializeGlobalState0, expectedErrors0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.materialize.gen.MaterializeExpressionGenerator", e);
    // }
    // }

    // @Test
    // public void test11() throws Throwable {
    // MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
    // .createDummy("^_`*");
    // List<MaterializeSchema.MaterializeColumn> list0 = List.of(materializeSchema_MaterializeColumn0,
    // materializeSchema_MaterializeColumn0, materializeSchema_MaterializeColumn0,
    // materializeSchema_MaterializeColumn0);
    // LinkedList<MaterializeSchema.MaterializeIndex> linkedList0 = new
    // LinkedList<MaterializeSchema.MaterializeIndex>();
    // LinkedList<MaterializeSchema.MaterializeStatisticsObject> linkedList1 = new
    // LinkedList<MaterializeSchema.MaterializeStatisticsObject>();
    // MaterializeSchema.MaterializeTable.TableType materializeSchema_MaterializeTable_TableType0 =
    // MaterializeSchema.MaterializeTable.TableType.STANDARD;
    // MaterializeSchema.MaterializeTable materializeSchema_MaterializeTable0 = new MaterializeSchema.MaterializeTable(
    // "^_`*", list0, linkedList0, materializeSchema_MaterializeTable_TableType0, linkedList1, true, true);
    // MaterializeGlobalState materializeGlobalState0 = new MaterializeGlobalState();
    // ExpectedErrors expectedErrors0 = new ExpectedErrors();
    // materializeSchema_MaterializeTable0.getRandomColumn();
    // StringBuilder stringBuilder0 = new StringBuilder();
    // MaterializeCommon.addTableConstraint(stringBuilder0, materializeSchema_MaterializeTable0,
    // materializeGlobalState0, expectedErrors0);
    // assertEquals("PRIMARY KEY(^_`*, ^_`*, ^_`*)", stringBuilder0.toString());
    // }

    @Test
    public void test12() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        MaterializeGlobalState materializeGlobalState0 = new MaterializeGlobalState();
        // Undeclared exception!
        try {
            MaterializeCommon.addTableConstraints(true, (StringBuilder) null, (MaterializeSchema.MaterializeTable) null,
                    materializeGlobalState0, expectedErrors0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test13() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        // Undeclared exception!
        try {
            MaterializeCommon.addTableConstraints(false, (StringBuilder) null,
                    (MaterializeSchema.MaterializeTable) null, (MaterializeGlobalState) null, expectedErrors0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.gen.MaterializeCommon", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        List<String> list0 = MaterializeCommon.getGroupingErrors();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        StringBuilder stringBuilder0 = new StringBuilder("TV-OkuJ $RXO U,OfU");
        boolean boolean0 = MaterializeCommon.appendDataType(materializeSchema_MaterializeDataType0, stringBuilder0,
                true, true, list0);
        assertFalse(boolean0);
    }

    @Test
    public void test15() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        StringBuilder stringBuilder0 = new StringBuilder(4);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        boolean boolean0 = MaterializeCommon.appendDataType(materializeSchema_MaterializeDataType0, stringBuilder0,
                true, true, linkedList0);
        assertFalse(boolean0);
    }

    @Test
    public void test16() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        StringBuilder stringBuilder0 = new StringBuilder(4);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        boolean boolean0 = MaterializeCommon.appendDataType(materializeSchema_MaterializeDataType0, stringBuilder0,
                true, true, linkedList0);
        assertEquals("REAL", stringBuilder0.toString());
        assertFalse(boolean0);
    }

    // @Test
    // public void test17() throws Throwable {
    // StringBuilder stringBuilder0 = new StringBuilder(4);
    // MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 =
    // MaterializeSchema.MaterializeDataType.TEXT;
    // boolean boolean0 = MaterializeCommon.appendDataType(materializeSchema_MaterializeDataType0, stringBuilder0,
    // true, true, (List<String>) null);
    // // // Unstable assertion: assertEquals("CHAR(409)", stringBuilder0.toString());
    // // // Unstable assertion: assertFalse(boolean0);
    // }

    @Test
    public void test18() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        StringBuilder stringBuilder0 = new StringBuilder(0);
        boolean boolean0 = MaterializeCommon.appendDataType(materializeSchema_MaterializeDataType0, stringBuilder0,
                false, false, (List<String>) null);
        assertEquals("boolean", stringBuilder0.toString());
        assertFalse(boolean0);
    }

    @Test
    public void test19() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        StringBuilder stringBuilder0 = new StringBuilder(3);
        boolean boolean0 = MaterializeCommon.appendDataType(materializeSchema_MaterializeDataType0, stringBuilder0,
                true, true, linkedList0);
        assertEquals("DECIMAL", stringBuilder0.toString());
        assertFalse(boolean0);
    }

    @Test
    public void test20() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        StringBuilder stringBuilder0 = new StringBuilder(2109);
        boolean boolean0 = MaterializeCommon.appendDataType(materializeSchema_MaterializeDataType0, stringBuilder0,
                true, false, linkedList0);
        assertEquals("smallint", stringBuilder0.toString());
        assertFalse(boolean0);
    }

    @Test
    public void test21() throws Throwable {
        String[] stringArray0 = new String[6];
        ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
        MaterializeCommon.addCommonTableErrors(expectedErrors0);
    }

    @Test
    public void test22() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        LinkedList<Pattern> linkedList1 = new LinkedList<Pattern>();
        ExpectedErrors expectedErrors0 = new ExpectedErrors(linkedList0, linkedList1);
        MaterializeCommon.addCommonRangeExpressionErrors(expectedErrors0);
    }

    @Test
    public void test23() throws Throwable {
        List<String> list0 = MaterializeCommon.getCommonTableErrors();
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test24() throws Throwable {
        List<String> list0 = MaterializeCommon.getCommonInsertUpdateErrors();
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test25() throws Throwable {
        List<String> list0 = MaterializeCommon.getCommonExpressionErrors();
        LinkedList<Pattern> linkedList0 = new LinkedList<Pattern>();
        ExpectedErrors expectedErrors0 = new ExpectedErrors(list0, linkedList0);
        MaterializeCommon.addCommonInsertUpdateErrors(expectedErrors0);
    }

    @Test
    public void test26() throws Throwable {
        List<String> list0 = List.of("", "");
        Pattern pattern0 = Pattern.compile("");
        List<Pattern> list1 = List.of(pattern0, pattern0, pattern0, pattern0);
        ExpectedErrors expectedErrors0 = new ExpectedErrors(list0, list1);
        MaterializeCommon.addCommonFetchErrors(expectedErrors0);
    }

    // @Test
    // public void test27() throws Throwable {
    // List<String> list0 = MaterializeCommon.getCommonRangeExpressionErrors();
    // LinkedList<Pattern> linkedList0 = new LinkedList<Pattern>();
    // ExpectedErrors expectedErrors0 = new ExpectedErrors(list0, linkedList0);
    // MaterializeCommon.addCommonExpressionErrors(expectedErrors0);
    // }

    @Test
    public void test28() throws Throwable {
        String[] stringArray0 = new String[5];
        ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
        MaterializeCommon.addGroupingErrors(expectedErrors0);
    }
}
