/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:47:50 GMT 2025
 */

package sqlancer.evosuite.materialize;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeAggregate;
import sqlancer.materialize.ast.MaterializeAlias;
import sqlancer.materialize.ast.MaterializeBetweenOperation;
import sqlancer.materialize.ast.MaterializeBinaryComparisonOperation;
import sqlancer.materialize.ast.MaterializeBinaryLogicalOperation;
import sqlancer.materialize.ast.MaterializeCastOperation;
import sqlancer.materialize.ast.MaterializeColumnValue;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeFunctionWithUnknownResult;
import sqlancer.materialize.ast.MaterializeInOperation;
import sqlancer.materialize.ast.MaterializeLikeOperation;
import sqlancer.materialize.ast.MaterializeOrderByTerm;
import sqlancer.materialize.ast.MaterializePOSIXRegularExpression;
import sqlancer.materialize.ast.MaterializePostfixOperation;
import sqlancer.materialize.ast.MaterializePostfixText;
import sqlancer.materialize.ast.MaterializePrefixOperation;
import sqlancer.materialize.ast.MaterializeSelect;
import sqlancer.materialize.ast.MaterializeSimilarTo;
import sqlancer.materialize.MaterializeCompoundDataType;
import sqlancer.materialize.MaterializeExpectedValueVisitor;
import sqlancer.materialize.MaterializeSchema;
import sqlancer.Randomly;

public class MaterializeExpectedValueVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                0.0F);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText(materializeConstant_FloatConstant0,
                "Q8NQ=3v[QF~3", materializeConstant_FloatConstant0, materializeSchema_MaterializeDataType0);
        materializeExpectedValueVisitor0.visit(materializePostfixText0);
        assertEquals("0.0Q8NQ=3v[QF~3 -- 0.0\n0.0 -- 0.0\n", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test01() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        materializeExpectedValueVisitor0.visit(materializeConstant0);
        assertEquals("TRUE -- TRUE\n", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test02() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(0L);
        materializeSelect0.setWhereClause(materializeConstant0);
        materializeExpectedValueVisitor0.visit(materializeSelect0);
        assertEquals("0 -- 0\n", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test03() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        LinkedList<MaterializeSchema.MaterializeColumn> linkedList0 = new LinkedList<MaterializeSchema.MaterializeColumn>();
        MaterializeSchema.MaterializeTable.TableType materializeSchema_MaterializeTable_TableType0 = MaterializeSchema.MaterializeTable.TableType.TEMPORARY;
        MaterializeSchema.MaterializeStatisticsObject[] materializeSchema_MaterializeStatisticsObjectArray0 = new MaterializeSchema.MaterializeStatisticsObject[7];
        List<MaterializeSchema.MaterializeStatisticsObject> list0 = Randomly.subset((-1),
                materializeSchema_MaterializeStatisticsObjectArray0);
        MaterializeSchema.MaterializeTable materializeSchema_MaterializeTable0 = new MaterializeSchema.MaterializeTable(
                "sa", linkedList0, (List<MaterializeSchema.MaterializeIndex>) null,
                materializeSchema_MaterializeTable_TableType0, list0, false, false);
        MaterializeSelect.MaterializeFromTable materializeSelect_MaterializeFromTable0 = new MaterializeSelect.MaterializeFromTable(
                materializeSchema_MaterializeTable0, true);
        materializeExpectedValueVisitor0.visit(materializeSelect_MaterializeFromTable0);
        assertEquals("sa -- null\n", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test04() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(450L);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.NOT;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(materializeConstant0,
                materializePrefixOperation_PrefixOperator0);
        materializeExpectedValueVisitor0.visit(materializePrefixOperation0);
        assertEquals("NOT (450) -- FALSE\n450 -- 450\n", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test05() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("+j8_+F`q{F]v4^RO");
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_TRUE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeConstant0,
                materializePostfixOperation_PostfixOperator0);
        materializeExpectedValueVisitor0.visit(materializePostfixOperation0);
        assertEquals("('+j8_+F`q{F]v4^RO') IS TRUE -- FALSE\n'+j8_+F`q{F]v4^RO' -- '+j8_+F`q{F]v4^RO'\n",
                materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test06() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                0.0F);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText(materializeConstant_FloatConstant0,
                "Q8NQ=3v[QF~3", materializeConstant_FloatConstant0, materializeSchema_MaterializeDataType0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializePostfixText0, materializeConstant_FloatConstant0,
                materializePOSIXRegularExpression_POSIXRegex0);
        materializeExpectedValueVisitor0.visit(materializePOSIXRegularExpression0);
        assertEquals("0.0Q8NQ=3v[QF~3!~*0.0 -- null\n0.0Q8NQ=3v[QF~3 -- 0.0\n0.0 -- 0.0\n0.0 -- 0.0\n",
                materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test07() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0);
        materializeExpectedValueVisitor0.visit(materializeLikeOperation0);
        assertEquals("((NULL)LIKE(NULL)) -- NULL\nNULL -- NULL\nNULL -- NULL\n",
                materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test08() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                0.0F);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_FloatConstant0, materializeCompoundDataType0);
        materializeExpectedValueVisitor0.visit(materializeCastOperation0);
        assertEquals("(0.0)::INT -- null\n0.0 -- 0.0\n", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test09() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                " -- ", materializeSchema_MaterializeDataType0);
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(1L);
        MaterializeColumnValue materializeColumnValue0 = new MaterializeColumnValue(
                materializeSchema_MaterializeColumn0, materializeConstant_IntConstant0);
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeColumnValue0, materializeColumnValue0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        materializeExpectedValueVisitor0.visit(materializeBinaryLogicalOperation0);
        assertEquals("(( -- )OR( -- )) -- TRUE\n --  -- 1\n --  -- 1\n", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test10() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "sqlancer.materialize.MaterializeExpectedValueVisitor", materializeSchema_MaterializeDataType0);
        MaterializeColumnValue materializeColumnValue0 = new MaterializeColumnValue(
                materializeSchema_MaterializeColumn0, (MaterializeConstant) null);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeColumnValue0, materializeColumnValue0, materializeColumnValue0, true);
        materializeExpectedValueVisitor0.visit(materializeBetweenOperation0);
        assertEquals(
                "(sqlancer.materialize.MaterializeExpectedValueVisitor) BETWEEN (sqlancer.materialize.MaterializeExpectedValueVisitor) AND (sqlancer.materialize.MaterializeExpectedValueVisitor) -- null\nsqlancer.materialize.MaterializeExpectedValueVisitor -- null\nsqlancer.materialize.MaterializeExpectedValueVisitor -- null\nsqlancer.materialize.MaterializeExpectedValueVisitor -- null\n",
                materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test11() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "A new database get created!\n", materializeSchema_MaterializeDataType0);
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-1L));
        MaterializeColumnValue materializeColumnValue0 = new MaterializeColumnValue(
                materializeSchema_MaterializeColumn0, materializeConstant_IntConstant0);
        materializeExpectedValueVisitor0.visit(materializeColumnValue0);
        materializeExpectedValueVisitor0.get();
        assertEquals("A new database get created!\n -- -1\n", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test12() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0 = MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator.LESS_EQUALS;
        MaterializeBinaryComparisonOperation materializeBinaryComparisonOperation0 = new MaterializeBinaryComparisonOperation(
                materializeConstant0, materializeConstant0,
                materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                materializeBinaryComparisonOperation0, materializePrefixOperation_PrefixOperator0);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializePrefixOperation0,
                materializeConstant0, materializeConstant0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSimilarTo0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeLikeOperation0,
                materializeConstant0, materializeLikeOperation0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSimilarTo0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        LinkedList<MaterializeExpression> linkedList0 = new LinkedList<MaterializeExpression>();
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BOOL_AND;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(linkedList0,
                materializeAggregate_MaterializeAggregateFunction0);
        linkedList0.add((MaterializeExpression) materializeAggregate0);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeAggregate0,
                (MaterializeExpression) null, materializeAggregate0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSimilarTo0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test15() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant_StringConstant0,
                materializeConstant_StringConstant0, materializeConstant_StringConstant0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSimilarTo0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeSelect0, materializeSelect0,
                materializeSelect0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSimilarTo0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeSimilarTo) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test18() throws Throwable {
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.COTD;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
                materializeSchema_MaterializeDataType0, materializeExpressionArray0);
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.ABS;
        MaterializeFunction materializeFunction1 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeFunction0,
                materializeFunction1, materializeFunction0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSimilarTo0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$1", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeExpectedValueVisitor", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = new MaterializeSelect.MaterializeSubquery(
                (MaterializeSelect) null, "sqlancer.clickhouse.ClickHouseOptions");
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSelect_MaterializeSubquery0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = new MaterializeSelect.MaterializeSubquery(
                materializeSelect0, "");
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSelect_MaterializeSubquery0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect.MaterializeFromTable materializeSelect_MaterializeFromTable0 = new MaterializeSelect.MaterializeFromTable(
                (MaterializeSchema.MaterializeTable) null, true);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSelect_MaterializeFromTable0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(materializeConstant0,
                materializePrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePrefixOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                true);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(
                materializeConstant_BooleanConstant0, materializeConstant_BooleanConstant0);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.NOT;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                materializeLikeOperation0, materializePrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePrefixOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_PLUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(materializeSelect0,
                materializePrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test26() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializePrefixOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test27() throws Throwable {
        LinkedList<MaterializeExpression> linkedList0 = new LinkedList<MaterializeExpression>();
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.MAX;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(linkedList0,
                materializeAggregate_MaterializeAggregateFunction0);
        linkedList0.add((MaterializeExpression) materializeAggregate0);
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText(materializeAggregate0, " -- ",
                materializeConstant0, materializeSchema_MaterializeDataType0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePostfixText0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test28() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText(materializeConstant_StringConstant0,
                (String) null, materializeConstant_StringConstant0, materializeSchema_MaterializeDataType0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePostfixText0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText(materializeSelect0, "$l$fra<",
                materializeConstant0, materializeSchema_MaterializeDataType0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePostfixText0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializePostfixText) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test31() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createDoubleConstant((-2789.71111630846));
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_TRUE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeConstant0,
                materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePostfixOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePostfixOperation$PostfixOperator$5", e);
        }
    }

    @Test
    public void test32() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_TRUE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeSelect0,
                materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePostfixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test33() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializePostfixOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test34() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_NULL;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeFunction0,
                materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePostfixOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$2", e);
        }
    }

    @Test
    public void test35() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeLikeOperation0, materializeConstant0, materializePOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePOSIXRegularExpression0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // FALSE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test36() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant((String) null);
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeConstant0, materializeConstant0, materializePOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePOSIXRegularExpression0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test37() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeSelect0, materializeSelect0, materializePOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePOSIXRegularExpression0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test38() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializePOSIXRegularExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test39() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeLikeOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // FALSE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test40() throws Throwable {
        LinkedList<MaterializeExpression> linkedList0 = new LinkedList<MaterializeExpression>();
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BOOL_AND;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(linkedList0,
                materializeAggregate_MaterializeAggregateFunction0);
        linkedList0.add((MaterializeExpression) materializeAggregate0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeAggregate0,
                materializeAggregate0);
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeLikeOperation0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test41() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant((String) null);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeLikeOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test42() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeSelect0,
                materializeSelect0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeLikeOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test43() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeFunction0,
                materializeFunction0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeLikeOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$4", e);
        }
    }

    @Test
    public void test44() throws Throwable {
        LinkedList<MaterializeExpression> linkedList0 = new LinkedList<MaterializeExpression>();
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BOOL_AND;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(linkedList0,
                materializeAggregate_MaterializeAggregateFunction0);
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        linkedList0.add((MaterializeExpression) materializeAggregate0);
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(materializeAggregate0, linkedList0,
                true);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeInOperation0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test45() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(true);
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(materializeConstant0,
                (List<MaterializeExpression>) null, false);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeInOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test46() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        List<MaterializeExpression> list0 = materializeSelect0.getGroupByExpressions();
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(materializeSelect0, list0, false);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test47() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeInOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test48() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeFunction0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // FALSE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test49() throws Throwable {
        LinkedList<MaterializeExpression> linkedList0 = new LinkedList<MaterializeExpression>();
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BOOL_AND;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(linkedList0,
                materializeAggregate_MaterializeAggregateFunction0);
        linkedList0.add((MaterializeExpression) materializeAggregate0);
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.COSD;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[2];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeAggregate0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
                materializeSchema_MaterializeDataType0, materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeFunction0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test50() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant_StringConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeFunction0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test51() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.RPAD;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[12];
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        materializeExpressionArray0[0] = (MaterializeExpression) materializeSelect0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
                materializeSchema_MaterializeDataType0, materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test52() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeFunction) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test53() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeFunction0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$3", e);
        }
    }

    @Test
    public void test54() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant((String) null);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test55() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeColumnValue materializeColumnValue0 = new MaterializeColumnValue(
                (MaterializeSchema.MaterializeColumn) null, (MaterializeConstant) null);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeColumnValue0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test56() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_MaterializeNullConstant0, (MaterializeCompoundDataType) null);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeCastOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.MaterializeToStringVisitor", e);
        }
    }

    @Test
    public void test57() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeSelect0,
                materializeCompoundDataType0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeCastOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test58() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeCastOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test59() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeLikeOperation0, materializeLikeOperation0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeBinaryLogicalOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // FALSE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test60() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeSelect0, materializeSelect0, materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeBinaryLogicalOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test61() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeBinaryLogicalOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test62() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant(0L);
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[2];
        materializeExpressionArray0[0] = materializeExpression0;
        materializeExpressionArray0[1] = materializeExpression0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeExpression0, materializeFunction0, materializeExpressionArray0[1], false);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeBetweenOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$IntConstant", e);
        }
    }

    @Test
    public void test63() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        BigDecimal bigDecimal0 = new BigDecimal(3432L);
        MaterializeConstant materializeConstant0 = MaterializeConstant.createDecimalConstant(bigDecimal0);
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_UNKNOWN;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeConstant0,
                materializePostfixOperation_PostfixOperator0);
        MaterializeConstant materializeConstant1 = materializePostfixOperation0.getExpectedValue();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializePostfixOperation0, materializeConstant1, materializeConstant0, true);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeBetweenOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 3432
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test64() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeSelect0,
                materializeSelect0, materializeSelect0, true);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test65() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeBetweenOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test66() throws Throwable {
        LinkedList<MaterializeExpression> linkedList0 = new LinkedList<MaterializeExpression>();
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.MAX;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(linkedList0,
                materializeAggregate_MaterializeAggregateFunction0);
        linkedList0.add((MaterializeExpression) materializeAggregate0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeAggregate0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test67() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BIT_AND;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate((List<MaterializeExpression>) null,
                materializeAggregate_MaterializeAggregateFunction0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeAggregate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test68() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[8];
        materializeExpressionArray0[1] = (MaterializeExpression) materializeSelect0;
        List<MaterializeExpression> list0 = Randomly.nonEmptySubset(materializeExpressionArray0);
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BOOL_OR;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(list0,
                materializeAggregate_MaterializeAggregateFunction0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeAggregate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test69() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeAggregate) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test70() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[3];
        LinkedList<MaterializeExpression> linkedList0 = new LinkedList<MaterializeExpression>();
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.MAX;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(linkedList0,
                materializeAggregate_MaterializeAggregateFunction0);
        materializeExpressionArray0[0] = (MaterializeExpression) materializeAggregate0;
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(materializeExpressionArray0[0],
                linkedList0, false);
        List<MaterializeExpression> list0 = Randomly.nonEmptySubset(materializeExpressionArray0);
        MaterializeInOperation materializeInOperation1 = new MaterializeInOperation(materializeInOperation0, list0,
                false);
        materializeExpectedValueVisitor0.visit(materializeInOperation1);
        assertEquals(
                "((MAX()) NOT IN ()) NOT IN (MAX()) -- null\n(MAX()) NOT IN () -- null\nMAX() -- null\nMAX() -- null\n",
                materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test71() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeConstant) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test72() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeLikeOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test73() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeSelect.MaterializeSubquery) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test74() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                0.0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, 0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_DoubleConstant0, materializeCompoundDataType0);
        MaterializeAlias materializeAlias0 = new MaterializeAlias(materializeCastOperation0, "");
        MaterializeOrderByTerm.MaterializeOrder materializeOrderByTerm_MaterializeOrder0 = MaterializeOrderByTerm.MaterializeOrder.DESC;
        MaterializeOrderByTerm materializeOrderByTerm0 = new MaterializeOrderByTerm(materializeAlias0,
                materializeOrderByTerm_MaterializeOrder0);
        materializeExpectedValueVisitor0.visit(materializeOrderByTerm0);
        assertEquals("", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test75() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[2];
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0,
                materializeExpressionArray0[0]);
        materializeExpectedValueVisitor0.visit(materializeSimilarTo0);
        assertEquals("(NULL SIMILAR TO NULL) -- null\nNULL -- NULL\nNULL -- NULL\n",
                materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test76() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        List<MaterializeExpression> list0 = List.of((MaterializeExpression) materializeConstant0,
                (MaterializeExpression) materializeConstant0, (MaterializeExpression) materializeConstant0,
                (MaterializeExpression) materializeConstant0, (MaterializeExpression) materializeConstant0);
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.COUNT;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate(list0,
                materializeAggregate_MaterializeAggregateFunction0);
        materializeExpectedValueVisitor0.visit(materializeAggregate0);
        assertEquals(
                "COUNT(TRUE, TRUE, TRUE, TRUE, TRUE) -- null\nTRUE -- TRUE\nTRUE -- TRUE\nTRUE -- TRUE\nTRUE -- TRUE\nTRUE -- TRUE\n",
                materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test77() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                true);
        LinkedList<MaterializeExpression> linkedList0 = new LinkedList<MaterializeExpression>();
        linkedList0.add((MaterializeExpression) materializeConstant_BooleanConstant0);
        MaterializeInOperation materializeInOperation0 = new MaterializeInOperation(
                materializeConstant_BooleanConstant0, linkedList0, true);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant_BooleanConstant0,
                materializeInOperation0, materializeConstant_BooleanConstant0);
        materializeExpectedValueVisitor0.visit(materializeSimilarTo0);
        assertEquals(
                "(TRUE SIMILAR TO (TRUE) IN (TRUE)TRUE) -- null\nTRUE -- TRUE\n(TRUE) IN (TRUE) -- TRUE\nTRUE -- TRUE\nTRUE -- TRUE\nTRUE -- TRUE\n",
                materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test78() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        materializeExpectedValueVisitor0.visit(materializeFunction0);
        assertEquals("num_nonnulls(FALSE) -- 1\nFALSE -- FALSE\n", materializeExpectedValueVisitor0.get());
    }

    @Test
    public void test79() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeSelect.MaterializeFromTable) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test80() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit((MaterializeColumnValue) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test81() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeSelect0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test82() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                0.0F);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_FloatConstant0, materializeConstant_FloatConstant0,
                materializeConstant_FloatConstant0, false);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeBetweenOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "sqlancer.materialize.ast.MaterializeBinaryComparisonOperation$MaterializeBinaryComparisonOperator$4",
                    e);
        }
    }

    @Test
    public void test83() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        String string0 = materializeExpectedValueVisitor0.get();
        assertEquals("", string0);
    }

    @Test
    public void test84() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant(3L);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.NOT;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(materializeExpression0,
                materializePrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePrefixOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePrefixOperation$PrefixOperator$1", e);
        }
    }

    @Test
    public void test85() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeFunction0, materializeFunction0, materializePOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePOSIXRegularExpression0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$4", e);
        }
    }

    @Test
    public void test86() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializePostfixText materializePostfixText0 = new MaterializePostfixText(materializeLikeOperation0, "time",
                materializeConstant0, materializeSchema_MaterializeDataType0);
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePostfixText0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test87() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                materializeLikeOperation0, materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializePostfixOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // FALSE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test88() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("u{");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createDoubleConstant((-3435.0));
        MaterializeColumnValue materializeColumnValue0 = new MaterializeColumnValue(
                materializeSchema_MaterializeColumn0, materializeConstant0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeColumnValue0,
                materializeConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, (-2425));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeLikeOperation0,
                materializeCompoundDataType0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeCastOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // -3435.0
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test89() throws Throwable {
        MaterializeExpectedValueVisitor materializeExpectedValueVisitor0 = new MaterializeExpectedValueVisitor();
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant((-1247L));
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeExpression0, materializeExpression0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeExpectedValueVisitor0.visit(materializeBinaryLogicalOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeBinaryLogicalOperation$BinaryLogicalOperator$1", e);
        }
    }
}
