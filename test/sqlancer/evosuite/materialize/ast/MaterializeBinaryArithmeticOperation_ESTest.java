/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:21:48 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeBinaryArithmeticOperation;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeLikeOperation;
import sqlancer.materialize.ast.MaterializeOrderByTerm;
import sqlancer.materialize.ast.MaterializePrefixOperation;
import sqlancer.materialize.ast.MaterializeSelect;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeBinaryArithmeticOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.MODULO;
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant0, materializeConstant0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation1 = new MaterializeBinaryArithmeticOperation(
                materializeConstant0, materializeBinaryArithmeticOperation0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryArithmeticOperation1.getExpectedValue();
        assertNotNull(materializeConstant1);

        MaterializeConstant materializeConstant2 = materializeBinaryArithmeticOperation_MaterializeBinaryOperator0
                .apply(materializeConstant0, materializeConstant1);
        assertEquals(0L, materializeConstant2.asInt());
        assertEquals("-1", materializeConstant1.getTextRepresentation());
    }

    @Test
    public void test01() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.DIVISION;
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant0, materializeConstant0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryArithmeticOperation0.getExpectedValue();
        assertNotNull(materializeConstant1);
        assertEquals("1", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.MULTIPLICATION;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConstant materializeConstant1 = materializeBinaryArithmeticOperation_MaterializeBinaryOperator0
                .apply(materializeConstant0, materializeConstant0);
        assertEquals("1", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test03() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.MULTIPLICATION;
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "ta");
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant_StringConstant0, materializeConstant_BooleanConstant0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant0 = materializeBinaryArithmeticOperation0.getExpectedValue();
        assertNotNull(materializeConstant0);
        assertEquals("0", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test04() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.SUBTRACTION;
        MaterializeConstant materializeConstant1 = MaterializeConstant.createFalse();
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant1, materializeConstant0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant2 = materializeBinaryArithmeticOperation0.getExpectedValue();
        assertNotNull(materializeConstant2);
        assertEquals((-1L), materializeConstant2.asInt());
    }

    @Test
    public void test05() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.SUBTRACTION;
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[9];
        MaterializeConstant materializeConstant0 = materializeBinaryArithmeticOperation_MaterializeBinaryOperator0
                .apply(materializeConstant_MaterializeNullConstant0, materializeConstantArray0[7]);
        assertFalse(materializeConstant0.isInt());
    }

    @Test
    public void test06() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConstant materializeConstant1 = MaterializeConstant.createFalse();
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator
                .getRandom();
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant1, materializeConstant0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant2 = materializeBinaryArithmeticOperation0.getExpectedValue();
        assertEquals(1L, materializeConstant2.asInt());
        assertNotNull(materializeConstant2);
    }

    @Test
    public void test07() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.MODULO;
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant0, materializeConstant_MaterializeNullConstant0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryArithmeticOperation0.getExpectedValue();
        assertFalse(materializeConstant1.isInt());
    }

    @Test
    public void test08() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(materializeConstant0,
                materializePrefixOperation_PrefixOperator0);
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.MODULO;
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializePrefixOperation0, materializePrefixOperation0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        // Undeclared exception!
        try {
            materializeBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator
                .getRandom();
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                640.937);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(
                materializeConstant_DoubleConstant0, materializeConstant_DoubleConstant0);
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant_DoubleConstant0, materializeLikeOperation0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        // Undeclared exception!
        try {
            materializeBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 640.937
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.MODULO;
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                (MaterializeExpression) null, (MaterializeExpression) null,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        // Undeclared exception!
        try {
            materializeBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator
                .getRandom();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeOrderByTerm.MaterializeOrder materializeOrderByTerm_MaterializeOrder0 = MaterializeOrderByTerm.MaterializeOrder.DESC;
        MaterializeOrderByTerm materializeOrderByTerm0 = new MaterializeOrderByTerm(materializeConstant0,
                materializeOrderByTerm_MaterializeOrder0);
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeOrderByTerm0, materializeConstant0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        // Undeclared exception!
        try {
            materializeBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.materialize.ast.MaterializeOrderByTerm@2
            //
        }
    }

    @Test
    public void test12() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.MULTIPLICATION;
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeFunction0, materializeFunction0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        // Undeclared exception!
        try {
            materializeBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$4", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator
                .getRandom();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant0, materializeSelect0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryArithmeticOperation0.getExpectedValue();
        assertNull(materializeConstant1);
    }

    @Test
    public void test14() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator
                .getRandom();
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeSelect0, materializeSelect0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant0 = materializeBinaryArithmeticOperation0.getExpectedValue();
        assertNull(materializeConstant0);
    }

    @Test
    public void test15() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.DIVISION;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeBinaryArithmeticOperation_MaterializeBinaryOperator0
                .apply(materializeConstant0, materializeConstant0);
        assertEquals("-1", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test16() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.MODULO;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeBinaryArithmeticOperation_MaterializeBinaryOperator0
                .apply(materializeConstant0, materializeConstant0);
        assertEquals((-1L), materializeConstant1.asInt());
    }

    @Test
    public void test17() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.ADDITION;
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant0, materializeConstant0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeBinaryArithmeticOperation0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.INT, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test18() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.DIVISION;
        MaterializeConstant materializeConstant1 = MaterializeConstant.createIntConstant((-1139L));
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeConstant0, materializeConstant1,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant2 = materializeBinaryArithmeticOperation0.getExpectedValue();
        assertNotNull(materializeConstant2);
        assertEquals("0", materializeConstant2.getTextRepresentation());
    }

    @Test
    public void test19() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.DIVISION;
        String string0 = materializeBinaryArithmeticOperation_MaterializeBinaryOperator0.getTextRepresentation();
        assertEquals("/", string0);
    }
}
