/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 03:09:14 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.math.BigInteger;
import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeConstant_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test000() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(562L);
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isEquals(materializeConstant_BooleanConstant0);
        assertEquals("FALSE", materializeConstant0.getUnquotedTextRepresentation());
        assertEquals(562L, materializeConstant_IntConstant0.asInt());
    }

    @Test
    public void test001() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "=*U|^E=#z");
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(295L);
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isLessThan(materializeConstant_StringConstant0);
        assertEquals(295L, materializeConstant_IntConstant0.asInt());
        assertEquals("FALSE", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test002() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-1L));
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "0.0");
        MaterializeConstant materializeConstant0 = materializeConstant_StringConstant0
                .isLessThan(materializeConstant_IntConstant0);
        assertFalse(materializeConstant0.asBoolean());
        assertEquals("-1", materializeConstant_IntConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test003() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "/>");
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(
                (-3276L));
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isEquals(materializeConstant_StringConstant0);
        assertEquals("FALSE", materializeConstant0.getTextRepresentation());
        assertEquals((-3276L), materializeConstant_IntConstant0.asInt());
    }

    @Test
    public void test004() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                true);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeConstant materializeConstant0 = materializeConstant_BooleanConstant0
                .cast(materializeSchema_MaterializeDataType0);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "?zf]i,I");
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertEquals("FALSE", materializeConstant1.getTextRepresentation());
        assertEquals("1", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test005() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeConstant materializeConstant1 = MaterializeConstant.createTextConstant("-1");
        MaterializeConstant materializeConstant2 = materializeConstant0.isEquals(materializeConstant1);
        assertFalse(materializeConstant2.asBoolean());
    }

    @Test
    public void test006() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializeConstant.StringConstant materializeConstant_StringConstant1 = new MaterializeConstant.StringConstant(
                "sqlancer.materialize.ast.MaterializeConstant$MaterializeNullConstant");
        MaterializeConstant materializeConstant0 = materializeConstant_StringConstant1
                .isLessThan(materializeConstant_StringConstant0);
        assertFalse(materializeConstant0.asBoolean());
    }

    @Test
    public void test007() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "sqlancer.materialize.ast.MaterializeConstant$BooleanConstant");
        boolean boolean0 = materializeConstant_StringConstant0.isString();
        assertTrue(boolean0);
    }

    @Test
    public void test008() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "/>");
        String string0 = materializeConstant_StringConstant0.getTextRepresentation();
        assertEquals("'/>'", string0);
    }

    @Test
    public void test009() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("q``Yqo");
        String string0 = materializeConstant0.asString();
        assertEquals("q``Yqo", string0);
    }

    @Test
    public void test010() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "q``Yqo");
        MaterializeConstant materializeConstant0 = materializeConstant_MaterializeNullConstant0
                .isEquals(materializeConstant_StringConstant0);
        assertEquals("NULL", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test011() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        String string0 = materializeConstant_MaterializeNullConstant0.getUnquotedTextRepresentation();
        assertEquals("NULL", string0);
    }

    @Test
    public void test012() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        String string0 = materializeConstant0.getTextRepresentation();
        assertEquals("NULL", string0);
    }

    @Test
    public void test013() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "=*U|^E=#z");
        BigDecimal bigDecimal0 = new BigDecimal(870);
        MaterializeConstant.DecimalConstant materializeConstant_DecimalConstant0 = new MaterializeConstant.DecimalConstant(
                bigDecimal0);
        MaterializeConstant materializeConstant0 = materializeConstant_DecimalConstant0
                .isEquals(materializeConstant_StringConstant0);
        assertNull(materializeConstant0);
    }

    @Test
    public void test014() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(2733L);
        materializeConstant0.isInt();
        assertEquals("2733", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test015() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-1L));
        String string0 = materializeConstant_IntConstant0.getUnquotedTextRepresentation();
        assertEquals("-1", string0);
    }

    @Test
    public void test016() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(0L);
        String string0 = materializeConstant_IntConstant0.getTextRepresentation();
        assertEquals("0", string0);
    }

    @Test
    public void test017() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(3257L);
        long long0 = materializeConstant_IntConstant0.asInt();
        assertEquals(3257L, long0);
    }

    // @Test
    // public void test018() throws Throwable {
    // MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
    // 0.40971065F);
    // String string0 = materializeConstant_FloatConstant0.getTextRepresentation();
    // assertEquals("0.40971065", string0);
    // }

    @Test
    public void test019() throws Throwable {
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                (-1.0));
        String string0 = materializeConstant_DoubleConstant0.getTextRepresentation();
        assertEquals("-1.0", string0);
    }

    @Test
    public void test020() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createDecimalConstant((BigDecimal) null);
        String string0 = materializeConstant0.getTextRepresentation();
        assertEquals("null", string0);
    }

    @Test
    public void test021() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                true);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "OF");
        MaterializeConstant materializeConstant0 = materializeConstant_BooleanConstant0
                .isEquals(materializeConstant_StringConstant0);
        assertFalse(materializeConstant0.asBoolean());
    }

    @Test
    public void test022() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        materializeConstant0.isBoolean();
        assertTrue(materializeConstant0.asBoolean());
    }

    @Test
    public void test023() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                true);
        String string0 = materializeConstant_BooleanConstant0.getTextRepresentation();
        assertEquals("TRUE", string0);
    }

    @Test
    public void test024() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                true);
        boolean boolean0 = materializeConstant_BooleanConstant0.asBoolean();
        assertTrue(boolean0);
    }

    @Test
    public void test025() throws Throwable {
        MaterializeConstant.BitConstant materializeConstant_BitConstant0 = new MaterializeConstant.BitConstant((-1L));
        String string0 = materializeConstant_BitConstant0.getTextRepresentation();
        assertEquals("-1", string0);
    }

    @Test
    public void test026() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("q``Yqo");
        boolean boolean0 = materializeConstant0.isString();
        assertTrue(boolean0);
    }

    @Test
    public void test027() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        boolean boolean0 = materializeConstant_MaterializeNullConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test028() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-1L));
        materializeConstant_IntConstant0.isInt();
        assertEquals((-1L), materializeConstant_IntConstant0.asInt());
    }

    @Test
    public void test029() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        materializeConstant_BooleanConstant0.isBoolean();
        assertEquals("FALSE", materializeConstant_BooleanConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test030() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("");
        String string0 = materializeConstant0.getUnquotedTextRepresentation();
        assertEquals("", string0);
    }

    @Test
    public void test031() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "/>");
        MaterializeConstant materializeConstant0 = materializeConstant_StringConstant0.getExpectedValue();
        assertFalse(materializeConstant0.isInt());
    }

    @Test
    public void test032() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(230L);
        MaterializeConstant materializeConstant1 = materializeConstant0.getExpectedValue();
        assertEquals("230", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test033() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeConstant materializeConstant1 = materializeConstant0.cast(materializeSchema_MaterializeDataType0);
        assertEquals("FALSE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test034() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        String string0 = materializeConstant_StringConstant0.asString();
        assertNull(string0);
    }

    @Test
    public void test035() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "m[@3GT'7H");
        String string0 = materializeConstant_StringConstant0.asString();
        assertEquals("m[@3GT'7H", string0);
    }

    @Test
    public void test036() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("");
        String string0 = materializeConstant0.asString();
        assertEquals("", string0);
    }

    @Test
    public void test037() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(0L);
        long long0 = materializeConstant0.asInt();
        assertEquals(0L, long0);
    }

    @Test
    public void test038() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeConstant materializeConstant1 = materializeConstant0.cast(materializeSchema_MaterializeDataType0);
        long long0 = materializeConstant1.asInt();
        assertEquals(1L, long0);
    }

    @Test
    public void test039() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant((-935L));
        long long0 = materializeConstant0.asInt();
        assertEquals((-935L), long0);
    }

    @Test
    public void test040() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                true);
        boolean boolean0 = materializeConstant_BooleanConstant0.asBoolean();
        assertTrue(boolean0);
    }

    @Test
    public void test041() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        boolean boolean0 = materializeConstant0.asBoolean();
        assertFalse(boolean0);
    }

    @Test
    public void test042() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        // Undeclared exception!
        try {
            materializeConstant_StringConstant0.toString();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test043() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        // Undeclared exception!
        try {
            materializeConstant_StringConstant0.isEquals(materializeConstant_StringConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test044() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        // Undeclared exception!
        try {
            materializeConstant_StringConstant0.getTextRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test045() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant((String) null);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        // Undeclared exception!
        try {
            materializeConstant0.cast(materializeSchema_MaterializeDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test046() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        // Undeclared exception!
        try {
            materializeConstant_StringConstant0.asInt();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test047() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        // Undeclared exception!
        try {
            materializeConstant_StringConstant0.asBoolean();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test048() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(true);
        materializeConstant0.isNull();
        assertEquals("TRUE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test049() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "/>");
        boolean boolean0 = materializeConstant_StringConstant0.isBoolean();
        assertFalse(boolean0);
    }

    @Test
    public void test050() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        materializeConstant_BooleanConstant0.isInt();
        assertEquals("FALSE", materializeConstant_BooleanConstant0.getTextRepresentation());
    }

    @Test
    public void test051() throws Throwable {
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                (-1243.83168918));
        boolean boolean0 = materializeConstant_DoubleConstant0.isString();
        assertFalse(boolean0);
    }

    @Test
    public void test052() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(0L);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .cast(materializeSchema_MaterializeDataType0);
        assertNull(materializeConstant0);
    }

    @Test
    public void test053() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(1189L);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .cast(materializeSchema_MaterializeDataType0);
        assertEquals("1189", materializeConstant0.asString());
    }

    @Test
    public void test054() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "t%d");
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-314L));
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isLessThan(materializeConstant_StringConstant0);
        assertEquals((-314L), materializeConstant_IntConstant0.asInt());
        assertEquals("TRUE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test055() throws Throwable {
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                4015.2106898935976);
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(700L);
        // Undeclared exception!
        try {
            materializeConstant_IntConstant0.isLessThan(materializeConstant_DoubleConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$IntConstant", e);
        }
    }

    @Test
    public void test056() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(1L);
        // Undeclared exception!
        try {
            materializeConstant_IntConstant0.isLessThan(materializeConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // FALSE
            //
        }
    }

    @Test
    public void test057() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(280L);
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(2773L);
        MaterializeConstant materializeConstant1 = materializeConstant_IntConstant0.isLessThan(materializeConstant0);
        assertEquals("TRUE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test058() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "TRU");
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-1L));
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isLessThan(materializeConstant_StringConstant0);
        assertEquals("-1", materializeConstant_IntConstant0.getUnquotedTextRepresentation());
        assertEquals("FALSE", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test059() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(0L);
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isLessThan(materializeConstant_MaterializeNullConstant0);
        assertFalse(materializeConstant0.isString());
    }

    @Test
    public void test060() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "FAS");
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(1362L);
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isEquals(materializeConstant_StringConstant0);
        assertEquals(1362L, materializeConstant_IntConstant0.asInt());
        assertEquals("FALSE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test061() throws Throwable {
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                0.33048013F);
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(
                (-5216L));
        // Undeclared exception!
        try {
            materializeConstant_IntConstant0.isEquals(materializeConstant_FloatConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 0.33048013
            //
        }
    }

    @Test
    public void test062() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(0L);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "0");
        assertFalse(materializeConstant_StringConstant0.isInt());

        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isEquals(materializeConstant_StringConstant0);
        assertEquals("TRUE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test063() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(17L);
        materializeConstant0.isEquals(materializeConstant_MaterializeNullConstant0);
        assertEquals("17", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test064() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "BqY");
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertEquals("TRUE", materializeConstant1.getTextRepresentation());
    }

    @Test
    public void test065() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "TRUE");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeConstant0.isEquals(materializeConstant_StringConstant0);
        assertEquals("FALSE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test066() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(true);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "FALS");
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertFalse(materializeConstant1.isInt());
        assertEquals("FALSE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test067() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "YES");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertFalse(materializeConstant1.isInt());
        assertFalse(materializeConstant1.asBoolean());
    }

    @Test
    public void test068() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "OFF");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeConstant0.isEquals(materializeConstant_StringConstant0);
        assertEquals("TRUE", materializeConstant1.getTextRepresentation());
        assertEquals("FALSE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test069() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "FAL");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeConstant0.isEquals(materializeConstant_StringConstant0);
        assertEquals("TRUE", materializeConstant1.getTextRepresentation());
        assertEquals("FALSE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test070() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                true);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "YE");
        MaterializeConstant materializeConstant0 = materializeConstant_StringConstant0
                .isEquals(materializeConstant_BooleanConstant0);
        assertEquals("TRUE", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test071() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "ON");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertFalse(materializeConstant1.isInt());
        assertFalse(materializeConstant1.asBoolean());
    }

    @Test
    public void test072() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "NO");
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertEquals("TRUE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test073() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "FA");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertEquals("TRUE", materializeConstant1.getUnquotedTextRepresentation());
        assertEquals("FALSE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test074() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "N");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant materializeConstant1 = materializeConstant0.isEquals(materializeConstant_StringConstant0);
        assertEquals("TRUE", materializeConstant1.getTextRepresentation());
        assertFalse(materializeConstant0.asBoolean());
    }

    @Test
    public void test075() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "F");
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertEquals("TRUE", materializeConstant1.getUnquotedTextRepresentation());
        assertEquals("FALSE", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test076() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "1");
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertFalse(materializeConstant1.isInt());
        assertFalse(materializeConstant1.asBoolean());
    }

    @Test
    public void test077() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "0");
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertTrue(materializeConstant1.asBoolean());
        assertFalse(materializeConstant1.isInt());
    }

    @Test
    public void test078() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "INT");
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeConstant materializeConstant0 = materializeConstant_StringConstant0
                .cast(materializeSchema_MaterializeDataType0);
        assertNull(materializeConstant0);
    }

    @Test
    public void test079() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "FAL");
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeConstant materializeConstant0 = materializeConstant_StringConstant0
                .cast(materializeSchema_MaterializeDataType0);
        assertSame(materializeConstant0, materializeConstant_StringConstant0);
    }

    @Test
    public void test080() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("column_name");
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isLessThan(materializeConstant0);
        assertEquals("TRUE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test081() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializeConstant materializeConstant0 = materializeConstant_StringConstant0
                .isLessThan(materializeConstant_StringConstant0);
        assertFalse(materializeConstant0.isInt());
        assertEquals("FALSE", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test082() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "TR");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createDecimalConstant((BigDecimal) null);
        // Undeclared exception!
        try {
            materializeConstant_StringConstant0.isLessThan(materializeConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test083() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "b");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant((-150L));
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isLessThan(materializeConstant0);
        assertEquals("FALSE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test084() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "TRUE");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isLessThan(materializeConstant0);
        assertFalse(materializeConstant1.isString());
    }

    @Test
    public void test085() throws Throwable {
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                (-1L));
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "PU-");
        // Undeclared exception!
        try {
            materializeConstant_StringConstant0.isEquals(materializeConstant_DoubleConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // -1.0
            //
        }
    }

    @Test
    public void test086() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "F");
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant materializeConstant0 = materializeConstant_StringConstant0
                .isEquals(materializeConstant_MaterializeNullConstant0);
        assertFalse(materializeConstant0.equals((Object) materializeConstant_MaterializeNullConstant0));
    }

    @Test
    public void test087() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeConstant materializeConstant1 = materializeConstant0.cast(materializeSchema_MaterializeDataType0);
        assertEquals("false", materializeConstant1.asString());
    }

    @Test
    public void test088() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(0L);
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeConstant materializeConstant1 = materializeConstant_IntConstant0.isEquals(materializeConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeConstant materializeConstant2 = materializeConstant1.cast(materializeSchema_MaterializeDataType0);
        assertEquals("1", materializeConstant2.getTextRepresentation());
    }

    @Test
    public void test089() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        materializeConstant0.cast(materializeSchema_MaterializeDataType0);
        assertFalse(materializeConstant0.asBoolean());
    }

    @Test
    public void test090() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeConstant materializeConstant1 = materializeConstant0.cast(materializeSchema_MaterializeDataType0);
        assertEquals("true", materializeConstant1.asString());
    }

    @Test
    public void test091() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeConstant materializeConstant1 = materializeConstant0.cast(materializeSchema_MaterializeDataType0);
        assertEquals("0", materializeConstant1.getTextRepresentation());
    }

    @Test
    public void test092() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("TR");
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = (MaterializeConstant.BooleanConstant) materializeConstant_StringConstant0
                .isEquals(materializeConstant0);
        assertFalse(materializeConstant0.isNull());
        assertFalse(materializeConstant_BooleanConstant0.isString());

        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant1 = (MaterializeConstant.BooleanConstant) materializeConstant_BooleanConstant0
                .isLessThan(materializeConstant0);
        assertEquals("TRUE", materializeConstant_BooleanConstant1.getTextRepresentation());
        assertEquals("FALSE", materializeConstant_BooleanConstant0.getTextRepresentation());
    }

    @Test
    public void test093() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "T");
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        assertFalse(materializeConstant0.isString());

        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isLessThan(materializeConstant0);
        assertFalse(materializeConstant0.isNull());
        assertTrue(materializeConstant0.asBoolean());
        assertFalse(materializeConstant1.asBoolean());
    }

    @Test
    public void test094() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = (MaterializeConstant.BooleanConstant) MaterializeConstant
                .createFalse();
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = (MaterializeConstant.FloatConstant) MaterializeConstant
                .createFloatConstant((-4582.84F));
        // Undeclared exception!
        try {
            materializeConstant_BooleanConstant0.isLessThan(materializeConstant_FloatConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test095() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = (MaterializeConstant.BooleanConstant) MaterializeConstant
                .createBooleanConstant(true);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                (String) null);
        // Undeclared exception!
        try {
            materializeConstant_BooleanConstant0.isLessThan(materializeConstant_StringConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$StringConstant", e);
        }
    }

    @Test
    public void test096() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "TRU");
        MaterializeConstant materializeConstant0 = materializeConstant_BooleanConstant0
                .isEquals(materializeConstant_StringConstant0);
        assertFalse(materializeConstant_StringConstant0.isNull());
        assertEquals("FALSE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test097() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-1L));
        // Undeclared exception!
        try {
            materializeConstant0.isEquals(materializeConstant_IntConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // -1
            //
        }
    }

    @Test
    public void test098() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-1L));
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeConstant materializeConstant1 = materializeConstant_IntConstant0.isEquals(materializeConstant0);
        assertFalse(materializeConstant0.isNull());
        assertEquals("-1", materializeConstant_IntConstant0.getTextRepresentation());
        assertEquals("FALSE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test099() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(true);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "Y");
        assertTrue(materializeConstant_StringConstant0.isString());

        MaterializeConstant materializeConstant1 = materializeConstant0.isEquals(materializeConstant_StringConstant0);
        assertFalse(materializeConstant_StringConstant0.isNull());
        assertEquals("TRUE", materializeConstant1.getTextRepresentation());
    }

    @Test
    public void test100() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        materializeConstant0.isEquals(materializeConstant_MaterializeNullConstant0);
        assertFalse(materializeConstant0.asBoolean());
    }

    @Test
    public void test101() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(true);
        String string0 = materializeConstant0.toString();
        assertEquals("TRUE", string0);
    }

    @Test
    public void test102() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeConstant materializeConstant0 = materializeConstant_MaterializeNullConstant0
                .cast(materializeSchema_MaterializeDataType0);
        assertEquals("NULL", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test103() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        String string0 = materializeConstant_MaterializeNullConstant0.getUnquotedTextRepresentation();
        assertEquals("NULL", string0);
    }

    @Test
    public void test104() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        materializeConstant_MaterializeNullConstant0.isLessThan(materializeConstant0);
        assertEquals("FALSE", materializeConstant0.getTextRepresentation());
        assertEquals("FALSE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test105() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = (MaterializeConstant.BooleanConstant) MaterializeConstant
                .createBooleanConstant(false);
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        assertTrue(materializeConstant_MaterializeNullConstant0.isNull());

        materializeConstant_BooleanConstant0.isLessThan(materializeConstant_MaterializeNullConstant0);
        assertEquals("FALSE", materializeConstant_BooleanConstant0.getTextRepresentation());
    }

    @Test
    public void test106() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        materializeConstant_MaterializeNullConstant0.getExpressionType();
    }

    @Test
    public void test107() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
        MaterializeConstant.DecimalConstant materializeConstant_DecimalConstant0 = new MaterializeConstant.DecimalConstant(
                bigDecimal0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeConstant_DecimalConstant0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.DECIMAL, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test108() throws Throwable {
        MaterializeConstant.BitConstant materializeConstant_BitConstant0 = new MaterializeConstant.BitConstant(0L);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeConstant_BitConstant0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.BIT, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test109() throws Throwable {
        MaterializeConstant.BitConstant materializeConstant_BitConstant0 = (MaterializeConstant.BitConstant) MaterializeConstant
                .createBitConstant((-707L));
        String string0 = materializeConstant_BitConstant0.toString();
        assertEquals("-707", string0);
    }

    @Test
    public void test110() throws Throwable {
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                (-126.935470511982));
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeConstant materializeConstant0 = materializeConstant_DoubleConstant0
                .cast(materializeSchema_MaterializeDataType0);
        assertNull(materializeConstant0);
    }

    @Test
    public void test111() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFloatConstant((-2039.0F));
        String string0 = materializeConstant0.getUnquotedTextRepresentation();
        assertNull(string0);
    }

    @Test
    public void test112() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant.BitConstant materializeConstant_BitConstant0 = new MaterializeConstant.BitConstant(
                (-2563L));
        materializeConstant_BitConstant0.isLessThan(materializeConstant0);
        assertEquals("FALSE", materializeConstant0.getTextRepresentation());
        assertFalse(materializeConstant0.asBoolean());
    }

    @Test
    public void test113() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createDecimalConstant(bigDecimal0);
        // Undeclared exception!
        try {
            materializeConstant0.asString();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 10
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test114() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createDoubleConstant((-845.02592));
        // Undeclared exception!
        try {
            materializeConstant0.asBoolean();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // -845.02592
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test115() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeConstant materializeConstant1 = materializeConstant0.getExpectedValue();
        assertFalse(materializeConstant1.isString());
    }

    @Test
    public void test116() throws Throwable {
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                0.0F);
        // Undeclared exception!
        try {
            materializeConstant_FloatConstant0.asInt();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 0.0
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test117() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeConstant materializeConstant1 = materializeConstant0.getExpectedValue();
        assertEquals("FALSE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test118() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("ia^c\"t?`T\u0000?h1@PtN");
        MaterializeConstant materializeConstant1 = MaterializeConstant.createIntConstant((-84L));
        MaterializeConstant materializeConstant2 = materializeConstant0.isEquals(materializeConstant1);
        assertEquals((-84L), materializeConstant1.asInt());
        assertFalse(materializeConstant1.isNull());
        assertEquals("FALSE", materializeConstant2.getUnquotedTextRepresentation());
    }

    @Test
    public void test119() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = (MaterializeConstant.BooleanConstant) MaterializeConstant
                .createBooleanConstant(false);
        assertFalse(materializeConstant_BooleanConstant0.isString());

        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant1 = (MaterializeConstant.BooleanConstant) materializeConstant_BooleanConstant0
                .isLessThan(materializeConstant_BooleanConstant0);
        assertFalse(materializeConstant_BooleanConstant0.isNull());
        assertFalse(materializeConstant_BooleanConstant1.asBoolean());
    }

    @Test
    public void test120() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConstant materializeConstant1 = MaterializeConstant.createDoubleConstant((-845.02592));
        materializeConstant1.isEquals(materializeConstant0);
        assertEquals("TRUE", materializeConstant0.getTextRepresentation());
        assertTrue(materializeConstant0.asBoolean());
    }

    @Test
    public void test121() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(0L);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeConstant_IntConstant0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.INT, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test122() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-1L));
        assertTrue(materializeConstant_IntConstant0.isInt());
        assertFalse(materializeConstant_IntConstant0.isBoolean());

        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isEquals(materializeConstant_IntConstant0);
        assertFalse(materializeConstant_IntConstant0.isNull());
        assertEquals("-1", materializeConstant_IntConstant0.getTextRepresentation());
        assertTrue(materializeConstant0.asBoolean());
    }

    @Test
    public void test123() throws Throwable {
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                (-1L));
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeConstant_DoubleConstant0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.FLOAT, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test124() throws Throwable {
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                0.0F);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeConstant_FloatConstant0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.FLOAT, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test125() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        materializeConstant_BooleanConstant0.getExpressionType();
        assertEquals("FALSE", materializeConstant_BooleanConstant0.getTextRepresentation());
    }

    @Test
    public void test126() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        assertTrue(materializeConstant0.isBoolean());

        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "FALSE");
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        assertTrue(materializeConstant1.asBoolean());
        assertFalse(materializeConstant_StringConstant0.isNull());
    }

    @Test
    public void test127() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        String string0 = materializeConstant0.getUnquotedTextRepresentation();
        assertEquals("FALSE", string0);
    }

    @Test
    public void test128() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "F");
        String string0 = materializeConstant_StringConstant0.getTextRepresentation();
        assertEquals("'F'", string0);
    }

    @Test
    public void test129() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "FALSE");
        String string0 = materializeConstant_StringConstant0.getUnquotedTextRepresentation();
        assertEquals("FALSE", string0);
    }

    @Test
    public void test130() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                ";$n-Sm4N@yF#'");
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeConstant_StringConstant0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.TEXT, materializeSchema_MaterializeDataType0);
    }
}
