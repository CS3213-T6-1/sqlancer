/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:23:16 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import sqlancer.common.ast.JoinBase;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeFunctionWithUnknownResult;
import sqlancer.materialize.ast.MaterializeJoin;
import sqlancer.materialize.ast.MaterializePrefixOperation;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeFunction_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializeFunction_MaterializeFunctionWithResult0
                .getRandomTypes(4089);
        assertEquals(4089, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test01() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.ABS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeConstant materializeConstant1 = materializeFunction0.getExpectedValue();
        assertEquals(0L, materializeConstant1.asInt());
    }

    @Test
    public void test02() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[2];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeExpression[] materializeExpressionArray1 = materializeFunction0.getArguments();
        assertEquals(2, materializeExpressionArray1.length);
    }

    @Test
    public void test03() throws Throwable {
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                0.0);
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant_DoubleConstant0;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeFunction0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 0.0
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                (-1.0));
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[3];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant_DoubleConstant0;
        JoinBase.JoinType materializeJoin_MaterializeJoinType0 = JoinBase.JoinType.FULL;
        MaterializeJoin materializeJoin0 = new MaterializeJoin(materializeConstant_DoubleConstant0,
                materializeExpressionArray0[0], materializeJoin_MaterializeJoinType0);
        materializeExpressionArray0[1] = (MaterializeExpression) materializeJoin0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeFunction0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test05() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[0];
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeConstantArray0);
        // Undeclared exception!
        try {
            materializeFunction0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$4", e);
        }
    }

    // @Test
    // public void test06() throws Throwable {
    // MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 =
    // MaterializeFunctionWithUnknownResult.LOG2;
    // MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 =
    // MaterializeSchema.MaterializeDataType.INT;
    // MaterializeFunction materializeFunction0 = null;
    // try {
    // materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
    // materializeSchema_MaterializeDataType0, (MaterializeExpression[]) null);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.materialize.ast.MaterializeFunction", e);
    // }
    // }

    // @Test
    // public void test07() throws Throwable {
    // MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 =
    // MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
    // MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 =
    // MaterializeSchema.MaterializeDataType.TEXT;
    // MaterializeFunction materializeFunction0 = null;
    // try {
    // materializeFunction0 = new MaterializeFunction(materializeFunction_MaterializeFunctionWithResult0,
    // materializeSchema_MaterializeDataType0, (MaterializeExpression[]) null);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.materialize.ast.MaterializeFunction", e);
    // }
    // }

    @Test
    public void test08() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        String string0 = materializeFunction_MaterializeFunctionWithResult0.getName();
        assertEquals("upper", string0);
    }

    @Test
    public void test09() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.COTD;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
                materializeSchema_MaterializeDataType0, materializeExpressionArray0);
        materializeExpressionArray0[0] = (MaterializeExpression) materializeFunction0;
        MaterializeFunction materializeFunction1 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeConstant materializeConstant0 = materializeFunction1.getExpectedValue();
        assertNull(materializeConstant0);
    }

    @Test
    public void test10() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.COTD;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(materializeFunctionWithUnknownResult0,
                materializeSchema_MaterializeDataType0, materializeExpressionArray0);
        MaterializeConstant materializeConstant0 = materializeFunction0.getExpectedValue();
        assertNull(materializeConstant0);
    }

    @Test
    public void test11() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test12() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test13() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[1];
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        materializeConstantArray0[0] = materializeConstant0;
        MaterializeConstant materializeConstant1 = materializeFunction_MaterializeFunctionWithResult0
                .apply(materializeConstantArray0, materializeConstantArray0);
        assertEquals("1", materializeConstant1.getTextRepresentation());
    }

    @Test
    public void test14() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test15() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test16() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[1];
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        materializeConstantArray0[0] = (MaterializeConstant) materializeConstant_MaterializeNullConstant0;
        MaterializeConstant materializeConstant0 = materializeFunction_MaterializeFunctionWithResult0
                .apply(materializeConstantArray0, materializeConstantArray0);
        assertEquals(0L, materializeConstant0.asInt());
    }

    @Test
    public void test17() throws Throwable {
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                0.0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[2];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant_DoubleConstant0;
        materializeExpressionArray0[1] = (MaterializeExpression) materializeConstant_DoubleConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeConstant materializeConstant0 = materializeFunction0.getExpectedValue();
        assertNotNull(materializeConstant0);
        assertEquals("2", materializeConstant0.getUnquotedTextRepresentation());

        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult1 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[5];
        materializeConstantArray0[0] = materializeConstant0;
        materializeConstantArray0[1] = materializeConstant0;
        materializeConstantArray0[2] = materializeConstant0;
        materializeConstantArray0[3] = (MaterializeConstant) materializeConstant_DoubleConstant0;
        materializeConstantArray0[4] = (MaterializeConstant) materializeConstant_DoubleConstant0;
        MaterializeConstant materializeConstant1 = materializeFunction_MaterializeFunctionWithResult1
                .apply(materializeConstantArray0, materializeExpressionArray0);
        assertEquals(0L, materializeConstant1.asInt());
    }

    @Test
    public void test18() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test19() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test20() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeConstant materializeConstant1 = materializeFunction0.getExpectedValue();
        assertTrue(materializeConstant1.isNull());
    }

    @Test
    public void test21() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(4127);
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                materializeConstant_IntConstant0, materializePrefixOperation_PrefixOperator0);
        MaterializeConstant materializeConstant0 = materializeConstant_IntConstant0
                .isLessThan(materializeConstant_IntConstant0);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[5];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant_StringConstant0;
        materializeExpressionArray0[1] = (MaterializeExpression) materializePrefixOperation0;
        materializeExpressionArray0[2] = (MaterializeExpression) materializeConstant_IntConstant0;
        materializeExpressionArray0[3] = (MaterializeExpression) materializeConstant_IntConstant0;
        materializeExpressionArray0[4] = (MaterializeExpression) materializeConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeConstant materializeConstant1 = materializeFunction0.getExpectedValue();
        assertEquals(MaterializeSchema.MaterializeDataType.TEXT, materializeConstant1.getExpressionType());
    }

    @Test
    public void test22() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test23() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test24() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[1];
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        materializeConstantArray0[0] = materializeConstant0;
        MaterializeConstant materializeConstant1 = materializeFunction_MaterializeFunctionWithResult0
                .apply(materializeConstantArray0, materializeConstantArray0);
        assertNull(materializeConstant1.getExpressionType());
    }

    @Test
    public void test25() throws Throwable {
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[2];
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("(AH-W");
        materializeConstantArray0[0] = materializeConstant0;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        MaterializeConstant materializeConstant1 = materializeFunction_MaterializeFunctionWithResult0
                .apply(materializeConstantArray0, materializeConstantArray0);
        assertTrue(materializeConstant1.isInt());
    }

    @Test
    public void test26() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test27() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test28() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant_MaterializeNullConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeConstant materializeConstant0 = materializeFunction0.getExpectedValue();
        assertTrue(materializeConstant0.isNull());
    }

    @Test
    public void test29() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[2];
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("(AH-W");
        materializeConstantArray0[0] = materializeConstant0;
        MaterializeConstant materializeConstant1 = materializeFunction_MaterializeFunctionWithResult0
                .apply(materializeConstantArray0, materializeConstantArray0);
        assertNotSame(materializeConstant1, materializeConstant0);
    }

    @Test
    public void test30() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.ABS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test31() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.ABS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test32() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.ABS;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant_MaterializeNullConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeConstant materializeConstant0 = materializeFunction0.getExpectedValue();
        assertEquals("NULL", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test33() throws Throwable {
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                0.0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.ABS;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        materializeExpressionArray0[0] = (MaterializeExpression) materializeConstant_DoubleConstant0;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        // Undeclared exception!
        try {
            materializeFunction0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$1", e);
        }
    }

    @Test
    public void test34() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeExpression[] materializeExpressionArray1 = materializeFunction0.getArguments();
        assertNotSame(materializeExpressionArray0, materializeExpressionArray1);
    }

    @Test
    public void test35() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[1];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        String string0 = materializeFunction0.getFunctionName();
        assertEquals("upper", string0);
    }

    @Test
    public void test36() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[2];
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeConstantArray0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = materializeFunction0
                .getExpressionType();
        assertSame(materializeSchema_MaterializeDataType1, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test37() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        // Undeclared exception!
        try {
            materializeFunction_MaterializeFunctionWithResult0
                    .getInputTypesForReturnType(materializeSchema_MaterializeDataType0, (-2835));
            fail("Expecting exception: NegativeArraySizeException");

        } catch (NegativeArraySizeException e) {
            //
            // -2835
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult", e);
        }
    }

    @Test
    public void test38() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NULLS;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0.isVariadic();
        assertTrue(boolean0);
    }

    @Test
    public void test39() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        String string0 = materializeFunction_MaterializeFunctionWithResult0.toString();
        assertEquals("lower", string0);
    }

    @Test
    public void test40() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        MaterializeConstant[] materializeConstantArray0 = new MaterializeConstant[4];
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0.checkArguments(materializeConstantArray0);
        assertTrue(boolean0);
    }

    @Test
    public void test41() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0.isVariadic();
        assertFalse(boolean0);
    }

    @Test
    public void test42() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        int int0 = materializeFunction_MaterializeFunctionWithResult0.getNrArgs();
        assertEquals(1, int0);
    }

    @Test
    public void test43() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        boolean boolean0 = materializeFunction_MaterializeFunctionWithResult0.isVariadic();
        assertTrue(boolean0);
    }

    @Test
    public void test44() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.NUM_NONNULLS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializeFunction_MaterializeFunctionWithResult0
                .getInputTypesForReturnType(materializeSchema_MaterializeDataType0, 3848);
        assertEquals(3848, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test45() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializeFunction_MaterializeFunctionWithResult0
                .getInputTypesForReturnType(materializeSchema_MaterializeDataType0, 69361);
        assertEquals(1, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test46() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializeFunction_MaterializeFunctionWithResult0
                .getInputTypesForReturnType(materializeSchema_MaterializeDataType0, 2670);
        assertEquals(1, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test47() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializeFunction_MaterializeFunctionWithResult0
                .getInputTypesForReturnType(materializeSchema_MaterializeDataType0, 8080);
        assertEquals(1, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test48() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.ABS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializeFunction_MaterializeFunctionWithResult0
                .getInputTypesForReturnType(materializeSchema_MaterializeDataType0, (-676));
        assertEquals(1, materializeSchema_MaterializeDataTypeArray0.length);
    }
}
