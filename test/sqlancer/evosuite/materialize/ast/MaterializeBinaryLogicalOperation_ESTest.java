/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 01:24:42 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeBetweenOperation;
import sqlancer.materialize.ast.MaterializeBinaryArithmeticOperation;
import sqlancer.materialize.ast.MaterializeBinaryComparisonOperation;
import sqlancer.materialize.ast.MaterializeBinaryLogicalOperation;
import sqlancer.materialize.ast.MaterializeConcatOperation;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeLikeOperation;
import sqlancer.materialize.ast.MaterializeOrderByTerm;
import sqlancer.materialize.ast.MaterializePOSIXRegularExpression;
import sqlancer.materialize.ast.MaterializePrefixOperation;
import sqlancer.materialize.ast.MaterializeSimilarTo;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeBinaryLogicalOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant0, materializeConstant0, materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.SUBTRACTION;
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                materializeBinaryLogicalOperation0, materializeConstant0,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryArithmeticOperation0.getExpectedValue();
        MaterializeConstant materializeConstant2 = materializeBinaryLogicalOperation_BinaryLogicalOperator0
                .apply(materializeConstant0, materializeConstant1);
        assertEquals(0L, materializeConstant1.asInt());
        assertEquals("FALSE", materializeConstant2.getUnquotedTextRepresentation());
    }

    @Test
    public void test01() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-392L));
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant_IntConstant0, materializeConstant0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryLogicalOperation0.getExpectedValue();
        assertEquals("TRUE", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                materializeConstant_MaterializeNullConstant0, materializePrefixOperation_PrefixOperator0);
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant_MaterializeNullConstant0, materializePrefixOperation0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant0, materializeLikeOperation0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                (MaterializeExpression) null, (MaterializeExpression) null,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeBinaryLogicalOperation", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeOrderByTerm.MaterializeOrder materializeOrderByTerm_MaterializeOrder0 = MaterializeOrderByTerm.MaterializeOrder.ASC;
        MaterializeOrderByTerm materializeOrderByTerm0 = new MaterializeOrderByTerm(materializeConstant0,
                materializeOrderByTerm_MaterializeOrder0);
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant0, materializeOrderByTerm0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.materialize.ast.MaterializeOrderByTerm@2
            //
        }
    }

    @Test
    public void test06() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.ABS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeFunction0, materializeFunction0, materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            materializeBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$1", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                (MaterializeExpression) null, materializeConstant0, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant0, materializePOSIXRegularExpression0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryLogicalOperation0.getExpectedValue();
        assertNull(materializeConstant1);
    }

    @Test
    public void test08() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant0,
                materializeConstant0, materializeConstant0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_INSENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                (MaterializeExpression) null, materializeSimilarTo0, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializePOSIXRegularExpression0, materializeConstant0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryLogicalOperation0.getExpectedValue();
        assertNull(materializeConstant1);
    }

    @Test
    public void test09() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeConstant0,
                materializeConstant0);
        MaterializeConstant materializeConstant1 = materializeConcatOperation0.getExpectedValue();
        MaterializeConstant materializeConstant2 = materializeBinaryLogicalOperation_BinaryLogicalOperator0
                .apply(materializeConstant1, materializeConstant1);
        materializeBinaryLogicalOperation_BinaryLogicalOperator0.apply(materializeConstant2,
                materializeConstant_MaterializeNullConstant0);
        assertEquals("FALSE", materializeConstant2.getUnquotedTextRepresentation());
        assertEquals("FALSE", materializeConstant2.getTextRepresentation());
    }

    @Test
    public void test10() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0 = MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator.GREATER;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConstant materializeConstant1 = materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0
                .getExpectedValue(materializeConstant0, materializeConstant0);
        MaterializeConstant materializeConstant2 = materializeBinaryLogicalOperation_BinaryLogicalOperator0
                .apply(materializeConstant1, materializeConstant1);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeConstant0,
                materializeConstant0, materializeConstant2, true);
        MaterializeConstant materializeConstant3 = materializeBetweenOperation0.getExpectedValue();
        assertEquals("TRUE", materializeConstant3.getUnquotedTextRepresentation());
        assertFalse(materializeConstant2.asBoolean());
        assertNotNull(materializeConstant3);
    }

    @Test
    public void test11() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConstant materializeConstant1 = materializeBinaryLogicalOperation_BinaryLogicalOperator0
                .apply(materializeConstant0, materializeConstant0);
        assertFalse(materializeConstant1.isNull());
    }

    @Test
    public void test12() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0,
                materializeConstant_MaterializeNullConstant0, true);
        MaterializeConstant materializeConstant0 = materializeBetweenOperation0.getExpectedValue();
        assertEquals("NULL", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test13() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeConstant materializeConstant1 = MaterializeConstant.createNullConstant();
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant0, materializeConstant1, materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant2 = materializeBinaryLogicalOperation0.getExpectedValue();
        assertEquals("NULL", materializeConstant2.getUnquotedTextRepresentation());
    }

    @Test
    public void test14() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeConstant0,
                materializeConstant0);
        MaterializeConstant materializeConstant1 = materializeConcatOperation0.getExpectedValue();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant1, materializeConstant0, materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant2 = materializeBinaryLogicalOperation0.getExpectedValue();
        assertNotNull(materializeConstant2);
        assertEquals("FALSE", materializeConstant2.getTextRepresentation());
    }

    @Test
    public void test15() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant_BooleanConstant0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant0 = materializeBinaryLogicalOperation0.getExpectedValue();
        assertTrue(materializeConstant0.isBoolean());
    }

    @Test
    public void test16() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConstant materializeConstant1 = MaterializeConstant.createNullConstant();
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator
                .getRandom();
        MaterializeConstant materializeConstant2 = materializeBinaryLogicalOperation_BinaryLogicalOperator0
                .apply(materializeConstant1, materializeConstant0);
        assertFalse(materializeConstant2.isInt());
    }

    @Test
    public void test17() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator
                .getRandom();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTextConstant("ENUM$VALUES");
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryLogicalOperation0.getExpectedValue();
        assertTrue(materializeConstant1.isBoolean());
    }

    @Test
    public void test18() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        String string0 = materializeBinaryLogicalOperation_BinaryLogicalOperator0.getTextRepresentation();
        assertEquals("AND", string0);
    }

    @Test
    public void test19() throws Throwable {
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.OR;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant0, materializeConstant0, materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeBinaryLogicalOperation0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeSchema_MaterializeDataType0);
    }
}
