/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 01:16:15 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunctionWithUnknownResult;
import sqlancer.materialize.gen.MaterializeExpressionGenerator;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeFunctionWithUnknownResult_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeFunctionWithUnknownResult[] materializeFunctionWithUnknownResultArray0 = MaterializeFunctionWithUnknownResult
                .values();
        assertEquals(71, materializeFunctionWithUnknownResultArray0.length);
    }

    @Test
    public void test01() throws Throwable {
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult
                .valueOf("TANH");
        assertEquals("tanh", materializeFunctionWithUnknownResult0.getName());
    }

    @Test
    public void test02() throws Throwable {
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.UPPER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        // Undeclared exception!
        try {
            materializeFunctionWithUnknownResult0.getArguments(materializeSchema_MaterializeDataType0,
                    (MaterializeExpressionGenerator) null, 71);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunctionWithUnknownResult", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.ABS;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        boolean boolean0 = materializeFunctionWithUnknownResult0
                .isCompatibleWithReturnType(materializeSchema_MaterializeDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test04() throws Throwable {
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.SIND;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        boolean boolean0 = materializeFunctionWithUnknownResult0
                .isCompatibleWithReturnType(materializeSchema_MaterializeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test05() throws Throwable {
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.PI;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeExpression[] materializeExpressionArray0 = materializeFunctionWithUnknownResult0
                .getArguments(materializeSchema_MaterializeDataType0, (MaterializeExpressionGenerator) null, (-2522));
        assertEquals(0, materializeExpressionArray0.length);
    }

    @Test
    public void test06() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        List<MaterializeFunctionWithUnknownResult> list0 = MaterializeFunctionWithUnknownResult
                .getSupportedFunctions(materializeSchema_MaterializeDataType0);
        assertEquals(36, list0.size());
    }

    @Test
    public void test07() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        List<MaterializeFunctionWithUnknownResult> list0 = MaterializeFunctionWithUnknownResult
                .getSupportedFunctions(materializeSchema_MaterializeDataType0);
        assertEquals(0, list0.size());
    }

    @Test
    public void test08() throws Throwable {
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.TO_CHAR;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        // Undeclared exception!
        try {
            materializeFunctionWithUnknownResult0.getArguments(materializeSchema_MaterializeDataType0,
                    (MaterializeExpressionGenerator) null, 3);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunctionWithUnknownResult", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.CONVERT_FROM;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        // Undeclared exception!
        try {
            materializeFunctionWithUnknownResult0.getArguments(materializeSchema_MaterializeDataType0,
                    (MaterializeExpressionGenerator) null, 1460);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunctionWithUnknownResult", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        MaterializeFunctionWithUnknownResult materializeFunctionWithUnknownResult0 = MaterializeFunctionWithUnknownResult.REVERSE;
        String string0 = materializeFunctionWithUnknownResult0.getName();
        assertEquals("reverse", string0);
    }
}
