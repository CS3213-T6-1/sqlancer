/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:18:36 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeAggregate;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeAggregate_ESTest {

    @Test
    public void test0() throws Throwable {
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.MIN;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeAggregate_MaterializeAggregateFunction0
                .getRandomReturnType();
        boolean boolean0 = materializeAggregate_MaterializeAggregateFunction0
                .supportsReturnType(materializeSchema_MaterializeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test1() throws Throwable {
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BOOL_OR;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeAggregate_MaterializeAggregateFunction0
                .getRandomReturnType();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test2() throws Throwable {
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.BIT_AND;
        MaterializeAggregate materializeAggregate0 = new MaterializeAggregate((List<MaterializeExpression>) null,
                materializeAggregate_MaterializeAggregateFunction0);
    }

    @Test
    public void test3() throws Throwable {
        MaterializeAggregate.MaterializeAggregateFunction materializeAggregate_MaterializeAggregateFunction0 = MaterializeAggregate.MaterializeAggregateFunction.COUNT;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        List<MaterializeSchema.MaterializeDataType> list0 = materializeAggregate_MaterializeAggregateFunction0
                .getTypes(materializeSchema_MaterializeDataType0);
        assertTrue(list0.contains(materializeSchema_MaterializeDataType0));
    }

    @Test
    public void test4() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        List<MaterializeAggregate.MaterializeAggregateFunction> list0 = MaterializeAggregate.MaterializeAggregateFunction
                .getAggregates(materializeSchema_MaterializeDataType0);
        assertEquals(7, list0.size());
    }
}
