/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:41:43 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import sqlancer.common.ast.JoinBase;
import sqlancer.materialize.ast.MaterializeBetweenOperation;
import sqlancer.materialize.ast.MaterializeColumnValue;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeJoin;
import sqlancer.materialize.ast.MaterializeLikeOperation;
import sqlancer.materialize.ast.MaterializePostfixOperation;
import sqlancer.materialize.ast.MaterializeSelect;
import sqlancer.materialize.ast.MaterializeSimilarTo;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeLikeOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "/{Gms9sx,T");
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "", materializeSchema_MaterializeDataType0);
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_StringConstant0);
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_NULL;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                materializeColumnValue0, materializePostfixOperation_PostfixOperator0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeColumnValue0,
                materializePostfixOperation0);
        // Undeclared exception!
        try {
            materializeLikeOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test01() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "/{Gms9sx,T");
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "", materializeSchema_MaterializeDataType0);
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_StringConstant0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(
                materializeConstant_StringConstant0, materializeColumnValue0);
        MaterializeConstant materializeConstant0 = materializeLikeOperation0.getExpectedValue();
        assertNotNull(materializeConstant0);
        assertEquals("TRUE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(
                (-1198L));
        MaterializeConstant materializeConstant0 = MaterializeConstant.createDoubleConstant((-1198L));
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeConstant0,
                materializeConstant_IntConstant0, materializeConstant0, false);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeBetweenOperation0,
                materializeConstant_IntConstant0);
        // Undeclared exception!
        try {
            materializeLikeOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant$IntConstant", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation((MaterializeExpression) null,
                (MaterializeExpression) null);
        // Undeclared exception!
        try {
            materializeLikeOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeLikeOperation", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        JoinBase.JoinType materializeJoin_MaterializeJoinType0 = JoinBase.JoinType.FULL;
        MaterializeJoin materializeJoin0 = new MaterializeJoin(materializeConstant0, materializeConstant0,
                materializeJoin_MaterializeJoinType0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeJoin0);
        // Undeclared exception!
        try {
            materializeLikeOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test05() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeFunction0,
                materializeFunction0);
        // Undeclared exception!
        try {
            materializeLikeOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$2", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        MaterializeConstant materializeConstant1 = materializeLikeOperation0.getExpectedValue();
        assertFalse(materializeConstant1.isBoolean());
    }

    @Test
    public void test07() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0,
                materializeConstant_MaterializeNullConstant0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(
                materializeConstant_MaterializeNullConstant0, materializeSimilarTo0);
        MaterializeConstant materializeConstant0 = materializeLikeOperation0.getExpectedValue();
        assertNull(materializeConstant0);
    }

    @Test
    public void test08() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant_MaterializeNullConstant0);
        MaterializeConstant materializeConstant1 = materializeLikeOperation0.getExpectedValue();
        assertEquals("NULL", materializeConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test09() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeSelect0,
                materializeSelect0);
        MaterializeConstant materializeConstant0 = materializeLikeOperation0.getExpectedValue();
        assertNull(materializeConstant0);
    }

    @Test
    public void test10() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "/{Gms9sx,T");
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "", materializeSchema_MaterializeDataType0);
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_StringConstant0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(
                materializeConstant_StringConstant0, materializeColumnValue0);
        String string0 = materializeLikeOperation0.getOperatorRepresentation();
        assertEquals("LIKE", string0);
    }

    @Test
    public void test11() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "/{Gms9sx,T");
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.DECIMAL;
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = new MaterializeSchema.MaterializeColumn(
                "", materializeSchema_MaterializeDataType0);
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_StringConstant0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(
                materializeConstant_StringConstant0, materializeColumnValue0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = materializeLikeOperation0
                .getExpressionType();
        assertNotSame(materializeSchema_MaterializeDataType0, materializeSchema_MaterializeDataType1);
    }
}
