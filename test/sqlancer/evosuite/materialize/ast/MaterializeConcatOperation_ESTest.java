/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:19:21 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import org.junit.jupiter.api.Test;

import sqlancer.common.ast.JoinBase;
import sqlancer.materialize.ast.MaterializeBinaryLogicalOperation;
import sqlancer.materialize.ast.MaterializeConcatOperation;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeJoin;
import sqlancer.materialize.ast.MaterializeLikeOperation;
import sqlancer.materialize.ast.MaterializePrefixOperation;
import sqlancer.materialize.ast.MaterializeSelect;
import sqlancer.materialize.ast.MaterializeSimilarTo;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeConcatOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "w&c'(Xe3d}|");
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant_StringConstant0, materializeConstant_StringConstant0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant0 = materializeBinaryLogicalOperation0.getExpectedValue();
        MaterializeConstant materializeConstant1 = materializeConstant_StringConstant0.isEquals(materializeConstant0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeConstant1,
                materializeBinaryLogicalOperation0);
        MaterializeConstant materializeConstant2 = materializeConcatOperation0.getExpectedValue();
        assertNotNull(materializeConstant2);
        assertEquals("truefalse", materializeConstant2.getUnquotedTextRepresentation());
    }

    @Test
    public void test01() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(materializeConstant0,
                materializePrefixOperation_PrefixOperator0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(
                materializePrefixOperation0, materializeConstant0);
        // Undeclared exception!
        try {
            materializeConcatOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        MaterializeConstant.DecimalConstant materializeConstant_DecimalConstant0 = new MaterializeConstant.DecimalConstant(
                bigDecimal0);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(
                materializeConstant_DecimalConstant0, materializeConstant_DecimalConstant0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(
                materializeLikeOperation0, materializeConstant_DecimalConstant0);
        // Undeclared exception!
        try {
            materializeConcatOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 1
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(
                (MaterializeExpression) null, (MaterializeExpression) null);
        // Undeclared exception!
        try {
            materializeConcatOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeConcatOperation", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        JoinBase.JoinType materializeJoin_MaterializeJoinType0 = JoinBase.JoinType.CROSS;
        MaterializeJoin materializeJoin0 = new MaterializeJoin(materializeSelect0, materializeSelect0,
                materializeJoin_MaterializeJoinType0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeJoin0,
                materializeJoin0);
        // Undeclared exception!
        try {
            materializeConcatOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test05() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LOWER;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BIT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeFunction0,
                materializeFunction0);
        // Undeclared exception!
        try {
            materializeConcatOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$2", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeConstant0,
                materializeConstant_MaterializeNullConstant0);
        MaterializeConstant materializeConstant1 = materializeConcatOperation0.getExpectedValue();
        assertTrue(materializeConstant1.isNull());
    }

    @Test
    public void test07() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant_BooleanConstant0,
                materializeConstant_BooleanConstant0, materializeConstant_BooleanConstant0);
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(
                materializeConstant_BooleanConstant0, materializeSimilarTo0);
        MaterializeConstant materializeConstant0 = materializeConcatOperation0.getExpectedValue();
        assertNull(materializeConstant0);
    }

    @Test
    public void test08() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeSelect0,
                materializeSelect0);
        MaterializeConstant materializeConstant0 = materializeConcatOperation0.getExpectedValue();
        assertNull(materializeConstant0);
    }

    @Test
    public void test09() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "w&c'(Xe3d}|");
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant_StringConstant0, materializeConstant_StringConstant0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant0 = materializeBinaryLogicalOperation0.getExpectedValue();
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeConstant0,
                materializeBinaryLogicalOperation0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeConcatOperation0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.TEXT, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test10() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "w&c'(Xe3d}|");
        MaterializeBinaryLogicalOperation.BinaryLogicalOperator materializeBinaryLogicalOperation_BinaryLogicalOperator0 = MaterializeBinaryLogicalOperation.BinaryLogicalOperator.AND;
        MaterializeBinaryLogicalOperation materializeBinaryLogicalOperation0 = new MaterializeBinaryLogicalOperation(
                materializeConstant_StringConstant0, materializeConstant_StringConstant0,
                materializeBinaryLogicalOperation_BinaryLogicalOperator0);
        MaterializeConstant materializeConstant0 = materializeBinaryLogicalOperation0.getExpectedValue();
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeConstant0,
                materializeBinaryLogicalOperation0);
        String string0 = materializeConcatOperation0.getOperatorRepresentation();
        assertEquals("||", string0);
    }

    @Test
    public void test11() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeConcatOperation materializeConcatOperation0 = new MaterializeConcatOperation(materializeConstant0,
                materializeConstant0);
        MaterializeConstant materializeConstant1 = materializeConcatOperation0.getExpectedValue();
        assertEquals("NULL", materializeConstant1.getUnquotedTextRepresentation());
    }
}
