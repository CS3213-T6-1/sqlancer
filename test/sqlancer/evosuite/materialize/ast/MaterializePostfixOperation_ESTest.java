/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 17:12:18 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import sqlancer.common.ast.JoinBase;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeJoin;
import sqlancer.materialize.ast.MaterializeLikeOperation;
import sqlancer.materialize.ast.MaterializePostfixOperation;
import sqlancer.materialize.ast.MaterializePrefixOperation;
import sqlancer.materialize.ast.MaterializeSelect;
import sqlancer.materialize.MaterializeSchema;

public class MaterializePostfixOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "5");
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_NULL;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                materializeConstant_StringConstant0, materializePostfixOperation_PostfixOperator0);
        MaterializeExpression materializeExpression0 = materializePostfixOperation0.getExpression();
        assertSame(materializeExpression0, materializeConstant_StringConstant0);
    }

    @Test
    public void test01() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_TRUE;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(materializeConstant0,
                materializePrefixOperation_PrefixOperator0);
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                materializePrefixOperation0, materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializePostfixOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator
                .getRandom();
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant(732L);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeExpression0,
                materializeExpression0);
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                materializeLikeOperation0, materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializePostfixOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 732
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                (MaterializeExpression) null, materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializePostfixOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePostfixOperation", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        JoinBase.JoinType materializeJoin_MaterializeJoinType0 = JoinBase.JoinType.CROSS;
        MaterializeJoin materializeJoin0 = new MaterializeJoin((MaterializeExpression) null,
                (MaterializeExpression) null, materializeJoin_MaterializeJoinType0);
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NULL;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeJoin0,
                materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializePostfixOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test05() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_TRUE;
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeFunction0,
                materializePostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            materializePostfixOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$3", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        // Undeclared exception!
        try {
            MaterializePostfixOperation.create((MaterializeExpression) null,
                    (MaterializePostfixOperation.PostfixOperator) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePostfixOperation$PostfixOperator", e);
        }
    }

    // @Test
    // public void test07() throws Throwable {
    // MaterializePostfixOperation materializePostfixOperation0 = null;
    // try {
    // materializePostfixOperation0 = new MaterializePostfixOperation((MaterializeExpression) null,
    // (MaterializePostfixOperation.PostfixOperator) null);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.materialize.ast.MaterializePostfixOperation$PostfixOperator", e);
    // }
    // }

    @Test
    public void test08() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(materializeSelect0,
                materializePostfixOperation_PostfixOperator0);
        MaterializeConstant materializeConstant0 = materializePostfixOperation0.getExpectedValue();
        assertNull(materializeConstant0);
    }

    @Test
    public void test09() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(1L);
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                materializeConstant_IntConstant0, materializePostfixOperation_PostfixOperator0);
        MaterializeConstant materializeConstant0 = materializePostfixOperation0.getExpectedValue();
        assertNotNull(materializeConstant0);
        assertEquals("FALSE", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test10() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant materializeConstant0 = materializePostfixOperation_PostfixOperator0
                .apply(materializeConstant_MaterializeNullConstant0);
        assertFalse(materializeConstant0.isString());
    }

    @Test
    public void test11() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializeConstant materializeConstant0 = materializePostfixOperation_PostfixOperator0
                .apply(materializeConstant_StringConstant0);
        assertEquals("TRUE", materializeConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test12() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_TRUE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                materializeConstant_MaterializeNullConstant0, materializePostfixOperation_PostfixOperator0);
        MaterializeConstant materializeConstant0 = materializePostfixOperation0.getExpectedValue();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeConstant0.getExpressionType());
    }

    @Test
    public void test13() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_TRUE;
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "<|,&QQfA");
        MaterializeConstant materializeConstant0 = materializePostfixOperation_PostfixOperator0
                .apply(materializeConstant_StringConstant0);
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeConstant0.getExpressionType());
    }

    @Test
    public void test14() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
        MaterializeConstant materializeConstant0 = materializePostfixOperation_PostfixOperator0
                .apply(materializeConstant_MaterializeNullConstant0);
        assertFalse(materializeConstant0.asBoolean());
    }

    @Test
    public void test15() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeConstant materializeConstant1 = materializePostfixOperation_PostfixOperator0
                .apply(materializeConstant0);
        assertEquals("TRUE", materializeConstant1.getTextRepresentation());
    }

    @Test
    public void test16() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_NULL;
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeConstant materializeConstant0 = materializePostfixOperation_PostfixOperator0
                .apply(materializeConstant_MaterializeNullConstant0);
        assertFalse(materializeConstant0.asBoolean());
    }

    @Test
    public void test17() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createFalse();
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_NULL;
        MaterializeConstant materializeConstant1 = materializePostfixOperation_PostfixOperator0
                .apply(materializeConstant0);
        assertTrue(materializeConstant1.asBoolean());
    }

    @Test
    public void test18() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator
                .getRandom();
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializePostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(7, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test19() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator
                .getRandom();
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeConstant materializeConstant1 = materializePostfixOperation_PostfixOperator0
                .apply(materializeConstant0);
        assertEquals("TRUE", materializeConstant1.getTextRepresentation());
    }

    @Test
    public void test20() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator
                .getRandom();
        String string0 = materializePostfixOperation_PostfixOperator0.getTextRepresentation();
        assertEquals("IS_NULL", string0);
    }

    @Test
    public void test21() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_UNKNOWN;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializePostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(1, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test22() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_UNKNOWN;
        // Undeclared exception!
        try {
            materializePostfixOperation_PostfixOperator0.apply((MaterializeConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePostfixOperation$PostfixOperator$2", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_NULL;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                materializeConstant_StringConstant0, materializePostfixOperation_PostfixOperator0);
        MaterializePostfixOperation materializePostfixOperation1 = (MaterializePostfixOperation) MaterializePostfixOperation
                .create(materializePostfixOperation0, materializePostfixOperation_PostfixOperator0);
        assertEquals("IS NOT NULL", materializePostfixOperation1.getOperatorTextRepresentation());
    }

    @Test
    public void test24() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                (MaterializeExpression) null, materializePostfixOperation_PostfixOperator0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializePostfixOperation0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test25() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                (MaterializeExpression) null, materializePostfixOperation_PostfixOperator0);
        String string0 = materializePostfixOperation0.getOperatorTextRepresentation();
        assertEquals("IS FALSE", string0);
    }

    @Test
    public void test26() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_UNKNOWN;
        MaterializePostfixOperation materializePostfixOperation0 = new MaterializePostfixOperation(
                (MaterializeExpression) null, materializePostfixOperation_PostfixOperator0);
        MaterializeExpression materializeExpression0 = materializePostfixOperation0.getExpression();
        assertNull(materializeExpression0);
    }

    @Test
    public void test27() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializePostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(1, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test28() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_TRUE;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializePostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(1, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test29() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_NOT_NULL;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializePostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(7, materializeSchema_MaterializeDataTypeArray0.length);
    }

    @Test
    public void test30() throws Throwable {
        MaterializePostfixOperation.PostfixOperator materializePostfixOperation_PostfixOperator0 = MaterializePostfixOperation.PostfixOperator.IS_FALSE;
        MaterializeSchema.MaterializeDataType[] materializeSchema_MaterializeDataTypeArray0 = materializePostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(1, materializeSchema_MaterializeDataTypeArray0.length);
    }
}
