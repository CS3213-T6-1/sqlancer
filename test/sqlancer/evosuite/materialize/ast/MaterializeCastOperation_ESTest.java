/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 17:22:31 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeBetweenOperation;
import sqlancer.materialize.ast.MaterializeCastOperation;
import sqlancer.materialize.ast.MaterializeColumnValue;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeLikeOperation;
import sqlancer.materialize.ast.MaterializeOrderByTerm;
import sqlancer.materialize.ast.MaterializeSimilarTo;
import sqlancer.materialize.MaterializeCompoundDataType;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeCastOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("x)dERTZT");
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_StringConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, (-992));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeColumnValue0,
                materializeCompoundDataType0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = materializeCastOperation0
                .getType();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeSchema_MaterializeDataType1);
    }

    @Test
    public void test01() throws Throwable {
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("x)dERTZT");
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_StringConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, (-992));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeColumnValue0,
                materializeCompoundDataType0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = materializeCastOperation0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeSchema_MaterializeDataType1);
    }

    @Test
    public void test02() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(true);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, 1016);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                materializeCompoundDataType0);
        MaterializeConstant materializeConstant1 = materializeCastOperation0.getExpectedValue();
        assertFalse(materializeConstant1.isInt());
    }

    @Test
    public void test03() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0,
                materializeConstant_MaterializeNullConstant0, false);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeBetweenOperation0,
                materializeCompoundDataType0);
        MaterializeConstant materializeConstant0 = materializeCastOperation0.getExpectedValue();
        assertFalse(materializeConstant0.isBoolean());
    }

    @Test
    public void test04() throws Throwable {
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("x)dERTZT");
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_StringConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, (-992));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeColumnValue0,
                materializeCompoundDataType0);
        MaterializeConstant materializeConstant0 = materializeCastOperation0.getExpectedValue();
        assertFalse(materializeConstant0.asBoolean());
    }

    @Test
    public void test05() throws Throwable {
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("x)dERTZT");
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, materializeConstant_StringConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.BOOLEAN;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, (-992));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeColumnValue0,
                materializeCompoundDataType0);
        MaterializeCompoundDataType materializeCompoundDataType1 = materializeCastOperation0.getCompoundType();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeCompoundDataType1.getDataType());
    }

    @Test
    public void test06() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                (MaterializeCompoundDataType) null);
        // Undeclared exception!
        try {
            materializeCastOperation0.getType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeCastOperation", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, (-2750));
        MaterializeConstant.FloatConstant materializeConstant_FloatConstant0 = new MaterializeConstant.FloatConstant(
                (-149.0F));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_FloatConstant0, materializeCompoundDataType0);
        MaterializeCastOperation materializeCastOperation1 = new MaterializeCastOperation(materializeCastOperation0,
                (MaterializeCompoundDataType) null);
        // Undeclared exception!
        try {
            materializeCastOperation1.getExpressionType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeCastOperation", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(3L);
        MaterializeLikeOperation materializeLikeOperation0 = new MaterializeLikeOperation(materializeConstant0,
                materializeConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeLikeOperation0,
                materializeCompoundDataType0);
        // Undeclared exception!
        try {
            materializeCastOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 3
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeConstant0,
                (MaterializeCompoundDataType) null);
        // Undeclared exception!
        try {
            materializeCastOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeCastOperation", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        MaterializeOrderByTerm.MaterializeOrder materializeOrderByTerm_MaterializeOrder0 = MaterializeOrderByTerm.MaterializeOrder.DESC;
        MaterializeOrderByTerm materializeOrderByTerm0 = new MaterializeOrderByTerm((MaterializeExpression) null,
                materializeOrderByTerm_MaterializeOrder0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeOrderByTerm0,
                (MaterializeCompoundDataType) null);
        // Undeclared exception!
        try {
            materializeCastOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.materialize.ast.MaterializeOrderByTerm@1
            //
        }
    }

    @Test
    public void test11() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.TEXT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.ABS;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeFunction0,
                materializeCompoundDataType0);
        // Undeclared exception!
        try {
            materializeCastOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$1", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant0,
                materializeConstant0, materializeConstant0);
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create((MaterializeSchema.MaterializeDataType) null);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeSimilarTo0,
                materializeCompoundDataType0);
        MaterializeConstant materializeConstant1 = materializeCastOperation0.getExpectedValue();
        assertNull(materializeConstant1);
    }

    @Test
    public void test13() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant((-27L));
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(
                materializeConstant_IntConstant0, materializeCompoundDataType0);
        MaterializeConstant materializeConstant0 = materializeCastOperation0.getExpectedValue();
        assertEquals("-27", materializeConstant0.getTextRepresentation());
    }

    @Test
    public void test14() throws Throwable {
        MaterializeCastOperation materializeCastOperation0 = null;
        try {
            materializeCastOperation0 = new MaterializeCastOperation((MaterializeExpression) null,
                    (MaterializeCompoundDataType) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test15() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant0,
                materializeConstant0, materializeConstant0);
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create((MaterializeSchema.MaterializeDataType) null);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeSimilarTo0,
                materializeCompoundDataType0);
        materializeCastOperation0.getType();
    }

    @Test
    public void test16() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant0,
                materializeConstant0, materializeConstant0);
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create((MaterializeSchema.MaterializeDataType) null);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeSimilarTo0,
                materializeCompoundDataType0);
        materializeCastOperation0.getExpressionType();
    }

    @Test
    public void test17() throws Throwable {
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant((-3723L));
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeExpression0,
                (MaterializeCompoundDataType) null);
        MaterializeCompoundDataType materializeCompoundDataType0 = materializeCastOperation0.getCompoundType();
        assertNull(materializeCompoundDataType0);
    }

    @Test
    public void test18() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeSimilarTo materializeSimilarTo0 = new MaterializeSimilarTo(materializeConstant0,
                materializeConstant0, materializeConstant0);
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create((MaterializeSchema.MaterializeDataType) null);
        MaterializeCastOperation materializeCastOperation0 = new MaterializeCastOperation(materializeSimilarTo0,
                materializeCompoundDataType0);
        MaterializeExpression materializeExpression0 = materializeCastOperation0.getExpression();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeExpression0.getExpressionType());
    }
}
