/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 03:18:24 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;

import sqlancer.common.ast.JoinBase;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeJoin;
import sqlancer.materialize.ast.MaterializeSelect;
import sqlancer.materialize.MaterializeSchema;
import sqlancer.Randomly;

public class MaterializeSelect_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        materializeSelect0.setJoinClauses((List<JoinBase<MaterializeExpression>>) null);
        List<JoinBase<MaterializeExpression>> list0 = materializeSelect0.getJoinClauses();
        assertNull(list0);
    }

    @Test
    public void test01() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.ForClause materializeSelect_ForClause0 = MaterializeSelect.ForClause.NO_KEY_UPDATE;
        materializeSelect0.setForClause(materializeSelect_ForClause0);
        MaterializeSelect.ForClause materializeSelect_ForClause1 = materializeSelect0.getForClause();
        assertEquals("NO KEY UPDATE", materializeSelect_ForClause1.getTextRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        List<MaterializeExpression> list0 = List.of((MaterializeExpression) materializeSelect0,
                (MaterializeExpression) materializeSelect0, (MaterializeExpression) materializeSelect0,
                (MaterializeExpression) materializeSelect0, (MaterializeExpression) materializeSelect0,
                (MaterializeExpression) materializeSelect0);
        materializeSelect0.setFetchColumns(list0);
        // Undeclared exception!
        try {
            materializeSelect0.asString();
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
        }
    }

    @Test
    public void test03() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.SelectType materializeSelect_SelectType0 = materializeSelect0.getSelectOption();
        assertEquals(MaterializeSelect.SelectType.ALL, materializeSelect_SelectType0);
    }

    @Test
    public void test04() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeConstant.DoubleConstant materializeConstant_DoubleConstant0 = new MaterializeConstant.DoubleConstant(
                0.0);
        // Undeclared exception!
        try {
            materializeSelect0.setDistinctOnClause(materializeConstant_DoubleConstant0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeSelect", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.SelectType materializeSelect_SelectType0 = MaterializeSelect.SelectType.DISTINCT;
        materializeSelect0.setSelectOption(materializeSelect_SelectType0);
        MaterializeConstant.StringConstant materializeConstant_StringConstant0 = new MaterializeConstant.StringConstant(
                "");
        materializeSelect0.setDistinctOnClause(materializeConstant_StringConstant0);
        MaterializeExpression materializeExpression0 = materializeSelect0.getDistinctOnClause();
        assertEquals(MaterializeSchema.MaterializeDataType.TEXT, materializeExpression0.getExpressionType());
    }

    // @Test
    // public void test06() throws Throwable {
    // MaterializeSelect.ForClause materializeSelect_ForClause0 = MaterializeSelect.ForClause.getRandom();
    // String string0 = materializeSelect_ForClause0.getTextRepresentation();
    // assertEquals("UPDATE", string0);
    // }

    @Test
    public void test07() throws Throwable {
        MaterializeSelect.MaterializeFromTable materializeSelect_MaterializeFromTable0 = new MaterializeSelect.MaterializeFromTable(
                (MaterializeSchema.MaterializeTable) null, true);
        boolean boolean0 = materializeSelect_MaterializeFromTable0.isOnly();
        assertTrue(boolean0);
    }

    @Test
    public void test08() throws Throwable {
        MaterializeSchema.MaterializeColumn[] materializeSchema_MaterializeColumnArray0 = new MaterializeSchema.MaterializeColumn[4];
        List<MaterializeSchema.MaterializeColumn> list0 = Randomly.subset(materializeSchema_MaterializeColumnArray0);
        MaterializeSchema.MaterializeIndex[] materializeSchema_MaterializeIndexArray0 = new MaterializeSchema.MaterializeIndex[4];
        List<MaterializeSchema.MaterializeIndex> list1 = Randomly.subset(0, materializeSchema_MaterializeIndexArray0);
        MaterializeSchema.MaterializeTable.TableType materializeSchema_MaterializeTable_TableType0 = MaterializeSchema.MaterializeTable.TableType.STANDARD;
        MaterializeSchema.MaterializeStatisticsObject[] materializeSchema_MaterializeStatisticsObjectArray0 = new MaterializeSchema.MaterializeStatisticsObject[4];
        List<MaterializeSchema.MaterializeStatisticsObject> list2 = Randomly
                .subset(materializeSchema_MaterializeStatisticsObjectArray0);
        MaterializeSchema.MaterializeTable materializeSchema_MaterializeTable0 = new MaterializeSchema.MaterializeTable(
                "rm{]>#<twy<{3%.Wh", list0, list1, materializeSchema_MaterializeTable_TableType0, list2, true, true);
        MaterializeSelect.MaterializeFromTable materializeSelect_MaterializeFromTable0 = new MaterializeSelect.MaterializeFromTable(
                materializeSchema_MaterializeTable0, true);
        materializeSelect_MaterializeFromTable0.getTable();
        assertTrue(materializeSelect_MaterializeFromTable0.isOnly());
    }

    @Test
    public void test09() throws Throwable {
        MaterializeSchema.MaterializeColumn[] materializeSchema_MaterializeColumnArray0 = new MaterializeSchema.MaterializeColumn[2];
        List<MaterializeSchema.MaterializeColumn> list0 = Randomly.subset(0, materializeSchema_MaterializeColumnArray0);
        MaterializeSchema.MaterializeTable.TableType materializeSchema_MaterializeTable_TableType0 = MaterializeSchema.MaterializeTable.TableType.TEMPORARY;
        MaterializeSchema.MaterializeTable materializeSchema_MaterializeTable0 = new MaterializeSchema.MaterializeTable(
                "d]3Mep5c8>cAl,:", list0, (List<MaterializeSchema.MaterializeIndex>) null,
                materializeSchema_MaterializeTable_TableType0,
                (List<MaterializeSchema.MaterializeStatisticsObject>) null, false, false);
        MaterializeSelect.MaterializeFromTable materializeSelect_MaterializeFromTable0 = new MaterializeSelect.MaterializeFromTable(
                materializeSchema_MaterializeTable0, false);
        materializeSelect_MaterializeFromTable0.getExpressionType();
        assertFalse(materializeSelect_MaterializeFromTable0.isOnly());
    }

    // @Test
    // public void test10() throws Throwable {
    // MaterializeSelect.SelectType materializeSelect_SelectType0 = MaterializeSelect.SelectType.getRandom();
    // assertEquals(MaterializeSelect.SelectType.DISTINCT, materializeSelect_SelectType0);
    // }

    @Test
    public void test11() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = new MaterializeSelect.MaterializeSubquery(
                materializeSelect0, "");
        MaterializeSelect materializeSelect1 = materializeSelect_MaterializeSubquery0.getSelect();
        assertSame(materializeSelect0, materializeSelect1);
    }

    @Test
    public void test12() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = new MaterializeSelect.MaterializeSubquery(
                materializeSelect0, "w&HzYmK(^h");
        String string0 = materializeSelect_MaterializeSubquery0.getName();
        assertEquals("w&HzYmK(^h", string0);
    }

    @Test
    public void test13() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.MaterializeSubquery materializeSelect_MaterializeSubquery0 = new MaterializeSelect.MaterializeSubquery(
                materializeSelect0, "");
        materializeSelect_MaterializeSubquery0.getExpressionType();
    }

    // @Test
    // public void test14() throws Throwable {
    // MaterializeSelect materializeSelect0 = new MaterializeSelect();
    // MaterializeJoin[] materializeJoinArray0 = new MaterializeJoin[4];
    // List<JoinBase<MaterializeExpression>> list0 = Randomly.nonEmptySubset(materializeJoinArray0);
    // materializeSelect0.setJoinClauses(list0);
    // List<JoinBase<MaterializeExpression>> list1 = materializeSelect0.getJoinClauses();
    // assertEquals(1, list1.size());
    // }

    @Test
    public void test15() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        materializeSelect0.getExpressionType();
    }

    @Test
    public void test16() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeExpression materializeExpression0 = materializeSelect0.getDistinctOnClause();
        assertNull(materializeExpression0);
    }

    // @Test
    // public void test17() throws Throwable {
    // MaterializeSelect materializeSelect0 = new MaterializeSelect();
    // List<JoinBase<MaterializeExpression>> list0 = materializeSelect0.getJoinClauses();
    // List<JoinBase<MaterializeExpression>> list1 = Randomly.nonEmptySubsetLeast(list0, (-1368));
    // materializeSelect0.setJoinClauses(list1);
    // List<JoinBase<MaterializeExpression>> list2 = materializeSelect0.getJoinClauses();
    // assertTrue(list2.equals((Object) list0));
    // }

    @Test
    public void test18() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        MaterializeSelect.SelectType materializeSelect_SelectType0 = MaterializeSelect.SelectType.DISTINCT;
        materializeSelect0.setSelectType(materializeSelect_SelectType0);
        assertEquals(MaterializeSelect.SelectType.DISTINCT, materializeSelect0.getSelectOption());
    }

    @Test
    public void test19() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        // Undeclared exception!
        try {
            materializeSelect0.asString();
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        MaterializeSelect materializeSelect0 = new MaterializeSelect();
        materializeSelect0.getForClause();
    }
}
