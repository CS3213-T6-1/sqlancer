/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:31:48 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeBetweenOperation;
import sqlancer.materialize.ast.MaterializeColumnValue;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializeFunction;
import sqlancer.materialize.ast.MaterializeJoin;
import sqlancer.materialize.ast.MaterializePrefixOperation;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeBetweenOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(true);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeConstant0,
                materializeConstant0, materializeConstant0, true);
        boolean boolean0 = materializeBetweenOperation0.isSymmetric();
        assertTrue(boolean0);
    }

    @Test
    public void test01() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(true);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                (MaterializeExpression) null, materializeConstant0, (MaterializeExpression) null, true);
        MaterializeExpression materializeExpression0 = materializeBetweenOperation0.getRight();
        assertTrue(materializeBetweenOperation0.isSymmetric());
        assertNull(materializeExpression0);
    }

    @Test
    public void test02() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeConstant0,
                materializeConstant0, materializeConstant0, false);
        materializeBetweenOperation0.getLeft();
        assertFalse(materializeBetweenOperation0.isSymmetric());
    }

    @Test
    public void test03() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                (MaterializeExpression) null, materializeConstant0, (MaterializeExpression) null, false);
        MaterializeExpression materializeExpression0 = materializeBetweenOperation0.getExpr();
        assertFalse(materializeBetweenOperation0.isSymmetric());
        assertNull(materializeExpression0);
    }

    @Test
    public void test04() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeSchema.MaterializeColumn materializeSchema_MaterializeColumn0 = MaterializeSchema.MaterializeColumn
                .createDummy("");
        MaterializeColumnValue materializeColumnValue0 = MaterializeColumnValue
                .create(materializeSchema_MaterializeColumn0, (MaterializeConstant) null);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_MaterializeNullConstant0, materializeColumnValue0, materializeColumnValue0, false);
        materializeBetweenOperation0.getExpectedValue();
        assertFalse(materializeBetweenOperation0.isSymmetric());
    }

    @Test
    public void test05() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createBooleanConstant(false);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeConstant0,
                materializeConstant0, materializeConstant0, false);
        materializeBetweenOperation0.getExpectedValue();
        assertFalse(materializeBetweenOperation0.isSymmetric());
    }

    @Test
    public void test06() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializePrefixOperation.PrefixOperator materializePrefixOperation_PrefixOperator0 = MaterializePrefixOperation.PrefixOperator.UNARY_MINUS;
        MaterializePrefixOperation materializePrefixOperation0 = new MaterializePrefixOperation(
                materializeConstant_MaterializeNullConstant0, materializePrefixOperation_PrefixOperator0);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_MaterializeNullConstant0, materializePrefixOperation0,
                materializeConstant_MaterializeNullConstant0, true);
        // Undeclared exception!
        try {
            materializeBetweenOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializePrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = new MaterializeConstant.BooleanConstant(
                false);
        MaterializeExpression materializeExpression0 = MaterializeConstant.createBitConstant(3885);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_BooleanConstant0, materializeConstant_BooleanConstant0, materializeExpression0,
                false);
        // Undeclared exception!
        try {
            materializeBetweenOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 3885
            //
            verifyException("sqlancer.materialize.ast.MaterializeConstant", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeJoin.MaterializeJoinType materializeJoin_MaterializeJoinType0 = MaterializeJoin.MaterializeJoinType.LEFT;
        MaterializeJoin materializeJoin0 = new MaterializeJoin(materializeConstant_MaterializeNullConstant0,
                materializeConstant_MaterializeNullConstant0, materializeJoin_MaterializeJoinType0);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0,
                materializeJoin0, false);
        // Undeclared exception!
        try {
            materializeBetweenOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test09() throws Throwable {
        MaterializeFunction.MaterializeFunctionWithResult materializeFunction_MaterializeFunctionWithResult0 = MaterializeFunction.MaterializeFunctionWithResult.LENGTH;
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.INT;
        MaterializeExpression[] materializeExpressionArray0 = new MaterializeExpression[0];
        MaterializeFunction materializeFunction0 = new MaterializeFunction(
                materializeFunction_MaterializeFunctionWithResult0, materializeSchema_MaterializeDataType0,
                materializeExpressionArray0);
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeFunction0,
                materializeFunction0, materializeFunction0, true);
        // Undeclared exception!
        try {
            materializeBetweenOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.materialize.ast.MaterializeFunction$MaterializeFunctionWithResult$3", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0,
                materializeConstant_MaterializeNullConstant0, true);
        materializeBetweenOperation0.getExpectedValue();
        assertTrue(materializeBetweenOperation0.isSymmetric());
    }

    @Test
    public void test11() throws Throwable {
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                (MaterializeExpression) null, (MaterializeExpression) null, (MaterializeExpression) null, false);
        // Undeclared exception!
        try {
            materializeBetweenOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeBinaryComparisonOperation", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0,
                materializeConstant_MaterializeNullConstant0, true);
        materializeBetweenOperation0.getExpr();
        assertTrue(materializeBetweenOperation0.isSymmetric());
    }

    @Test
    public void test13() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createNullConstant();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(materializeConstant0,
                (MaterializeExpression) null, materializeConstant0, false);
        MaterializeExpression materializeExpression0 = materializeBetweenOperation0.getLeft();
        assertFalse(materializeBetweenOperation0.isSymmetric());
        assertNull(materializeExpression0);
    }

    @Test
    public void test14() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0,
                materializeConstant_MaterializeNullConstant0, false);
        boolean boolean0 = materializeBetweenOperation0.isSymmetric();
        assertFalse(boolean0);
    }

    @Test
    public void test15() throws Throwable {
        MaterializeConstant.MaterializeNullConstant materializeConstant_MaterializeNullConstant0 = new MaterializeConstant.MaterializeNullConstant();
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                materializeConstant_MaterializeNullConstant0, materializeConstant_MaterializeNullConstant0,
                materializeConstant_MaterializeNullConstant0, true);
        materializeBetweenOperation0.getRight();
        assertTrue(materializeBetweenOperation0.isSymmetric());
    }

    @Test
    public void test16() throws Throwable {
        MaterializeBetweenOperation materializeBetweenOperation0 = new MaterializeBetweenOperation(
                (MaterializeExpression) null, (MaterializeExpression) null, (MaterializeExpression) null, false);
        materializeBetweenOperation0.getExpressionType();
        assertFalse(materializeBetweenOperation0.isSymmetric());
    }
}
