/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:29:53 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeBinaryRangeOperation;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeBinaryRangeOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        MaterializeConstant.IntConstant materializeConstant_IntConstant0 = new MaterializeConstant.IntConstant(0L);
        MaterializeBinaryRangeOperation materializeBinaryRangeOperation0 = null;
        try {
            materializeBinaryRangeOperation0 = new MaterializeBinaryRangeOperation(
                    (MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator) null,
                    materializeConstant_IntConstant0, materializeConstant_IntConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeBinaryRangeOperation", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        MaterializeBinaryRangeOperation materializeBinaryRangeOperation0 = null;
        try {
            materializeBinaryRangeOperation0 = new MaterializeBinaryRangeOperation(
                    (MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator) null,
                    (MaterializeExpression) null, (MaterializeExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.materialize.ast.MaterializeBinaryRangeOperation", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator materializeBinaryRangeOperation_MaterializeBinaryRangeOperator0 = MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator.INTERSECTION;
        String string0 = materializeBinaryRangeOperation_MaterializeBinaryRangeOperator0.getTextRepresentation();
        assertEquals("*", string0);
    }

    @Test
    public void test3() throws Throwable {
        MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator materializeBinaryRangeOperation_MaterializeBinaryRangeComparisonOperator0 = MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator.STRICT_LEFT_OF;
        String string0 = materializeBinaryRangeOperation_MaterializeBinaryRangeComparisonOperator0
                .getTextRepresentation();
        assertEquals("<<", string0);
    }

    @Test
    public void test4() throws Throwable {
        MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator materializeBinaryRangeOperation_MaterializeBinaryRangeOperator0 = MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator.INTERSECTION;
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryRangeOperation materializeBinaryRangeOperation0 = new MaterializeBinaryRangeOperation(
                materializeBinaryRangeOperation_MaterializeBinaryRangeOperator0, materializeConstant0,
                materializeConstant0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializeBinaryRangeOperation0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test5() throws Throwable {
        MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator materializeBinaryRangeOperation_MaterializeBinaryRangeOperator0 = MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator
                .getRandom();
        assertEquals(MaterializeBinaryRangeOperation.MaterializeBinaryRangeOperator.UNION,
                materializeBinaryRangeOperation_MaterializeBinaryRangeOperator0);
    }

    @Test
    public void test6() throws Throwable {
        MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator materializeBinaryRangeOperation_MaterializeBinaryRangeComparisonOperator0 = MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator
                .getRandom();
        assertEquals(MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator.CONTAINS_RANGE_OR_ELEMENT,
                materializeBinaryRangeOperation_MaterializeBinaryRangeComparisonOperator0);
    }

    @Test
    public void test7() throws Throwable {
        MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator materializeBinaryRangeOperation_MaterializeBinaryRangeComparisonOperator0 = MaterializeBinaryRangeOperation.MaterializeBinaryRangeComparisonOperator.STRICT_LEFT_OF;
        MaterializeBinaryRangeOperation materializeBinaryRangeOperation0 = new MaterializeBinaryRangeOperation(
                materializeBinaryRangeOperation_MaterializeBinaryRangeComparisonOperator0, (MaterializeExpression) null,
                (MaterializeExpression) null);
        String string0 = materializeBinaryRangeOperation0.getOperatorRepresentation();
        assertEquals("<<", string0);
    }
}
