/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:23:18 GMT 2025
 */

package sqlancer.evosuite.materialize.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.materialize.ast.MaterializeAlias;
import sqlancer.materialize.ast.MaterializeBinaryComparisonOperation;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;
import sqlancer.materialize.ast.MaterializePOSIXRegularExpression;
import sqlancer.materialize.MaterializeSchema;

public class MaterializePOSIXRegularExpression_ESTest {

    @Test
    public void test00() throws Throwable {
        MaterializeAlias materializeAlias0 = new MaterializeAlias((MaterializeExpression) null, "]vR+O&Zeu");
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeAlias0, (MaterializeExpression) null, materializePOSIXRegularExpression_POSIXRegex0);
        assertEquals(MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_SENSITIVE,
                materializePOSIXRegularExpression0.getOp());
    }

    @Test
    public void test01() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(9223372036854775807L);
        MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0 = MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator.LESS_EQUALS;
        MaterializeBinaryComparisonOperation materializeBinaryComparisonOperation0 = new MaterializeBinaryComparisonOperation(
                materializeConstant0, materializeConstant0,
                materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryComparisonOperation0.getExpectedValue();
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeConstant1, materializeConstant1, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = (MaterializeConstant.BooleanConstant) materializePOSIXRegularExpression0
                .getString();
        assertTrue(materializeConstant_BooleanConstant0.asBoolean());
    }

    @Test
    public void test02() throws Throwable {
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                (MaterializeExpression) null, (MaterializeExpression) null,
                materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeExpression materializeExpression0 = materializePOSIXRegularExpression0.getRegex();
        assertNull(materializeExpression0);
    }

    @Test
    public void test03() throws Throwable {
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                (MaterializeExpression) null, (MaterializeExpression) null,
                (MaterializePOSIXRegularExpression.POSIXRegex) null);
        materializePOSIXRegularExpression0.getOp();
    }

    @Test
    public void test04() throws Throwable {
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        String string0 = materializePOSIXRegularExpression_POSIXRegex0.getTextRepresentation();
        assertEquals("MATCH_CASE_SENSITIVE", string0);
    }

    @Test
    public void test05() throws Throwable {
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_SENSITIVE;
        String string0 = materializePOSIXRegularExpression_POSIXRegex0.getStringRepresentation();
        assertEquals("!~", string0);
    }

    @Test
    public void test06() throws Throwable {
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex
                .getRandom();
        assertEquals(MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE,
                materializePOSIXRegularExpression_POSIXRegex0);
    }

    @Test
    public void test07() throws Throwable {
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                (MaterializeExpression) null, (MaterializeExpression) null,
                materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeConstant materializeConstant0 = materializePOSIXRegularExpression0.getExpectedValue();
        assertNull(materializeConstant0);
    }

    @Test
    public void test08() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(9223372036854775807L);
        MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0 = MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator.LESS_EQUALS;
        MaterializeBinaryComparisonOperation materializeBinaryComparisonOperation0 = new MaterializeBinaryComparisonOperation(
                materializeConstant0, materializeConstant0,
                materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryComparisonOperation0.getExpectedValue();
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeConstant1, materializeConstant1, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeConstant.BooleanConstant materializeConstant_BooleanConstant0 = (MaterializeConstant.BooleanConstant) materializePOSIXRegularExpression0
                .getRegex();
        assertTrue(materializeConstant_BooleanConstant0.isBoolean());
    }

    @Test
    public void test09() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(9223372036854775807L);
        MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0 = MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator.LESS_EQUALS;
        MaterializeBinaryComparisonOperation materializeBinaryComparisonOperation0 = new MaterializeBinaryComparisonOperation(
                materializeConstant0, materializeConstant0,
                materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryComparisonOperation0.getExpectedValue();
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeConstant1, materializeConstant1, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex1 = materializePOSIXRegularExpression0
                .getOp();
        assertSame(materializePOSIXRegularExpression_POSIXRegex1, materializePOSIXRegularExpression_POSIXRegex0);
    }

    @Test
    public void test10() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createIntConstant(9223372036854775807L);
        MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0 = MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator.LESS_EQUALS;
        MaterializeBinaryComparisonOperation materializeBinaryComparisonOperation0 = new MaterializeBinaryComparisonOperation(
                materializeConstant0, materializeConstant0,
                materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryComparisonOperation0.getExpectedValue();
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                materializeConstant1, materializeConstant1, materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = materializePOSIXRegularExpression0
                .getExpressionType();
        assertEquals(MaterializeSchema.MaterializeDataType.BOOLEAN, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test11() throws Throwable {
        MaterializePOSIXRegularExpression.POSIXRegex materializePOSIXRegularExpression_POSIXRegex0 = MaterializePOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        MaterializePOSIXRegularExpression materializePOSIXRegularExpression0 = new MaterializePOSIXRegularExpression(
                (MaterializeExpression) null, (MaterializeExpression) null,
                materializePOSIXRegularExpression_POSIXRegex0);
        MaterializeExpression materializeExpression0 = materializePOSIXRegularExpression0.getString();
        assertNull(materializeExpression0);
    }
}
