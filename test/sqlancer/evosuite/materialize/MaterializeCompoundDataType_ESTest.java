/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 14:11:14 GMT 2025
 */

package sqlancer.evosuite.materialize;

import static org.junit.jupiter.api.Assertions.*;
import java.util.Optional;
import org.junit.jupiter.api.Test;
import sqlancer.materialize.MaterializeCompoundDataType;
import sqlancer.materialize.MaterializeSchema;

public class MaterializeCompoundDataType_ESTest {

    @Test
    public void test0() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, 6);
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType1 = materializeCompoundDataType0
                .getDataType();
        assertSame(materializeSchema_MaterializeDataType1, materializeSchema_MaterializeDataType0);
    }

    @Test
    public void test1() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.FLOAT;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0);
        Optional<Integer> optional0 = materializeCompoundDataType0.getSize();
        assertNotNull(optional0);
    }

    @Test
    public void test2() throws Throwable {
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create((MaterializeSchema.MaterializeDataType) null);
        // Undeclared exception!
        try {
            materializeCompoundDataType0.getElemType();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test3() throws Throwable {
        MaterializeSchema.MaterializeDataType materializeSchema_MaterializeDataType0 = MaterializeSchema.MaterializeDataType.REAL;
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create(materializeSchema_MaterializeDataType0, 6);
        Optional<Integer> optional0 = materializeCompoundDataType0.getSize();
        assertNotNull(optional0);
    }

    @Test
    public void test4() throws Throwable {
        MaterializeCompoundDataType materializeCompoundDataType0 = MaterializeCompoundDataType
                .create((MaterializeSchema.MaterializeDataType) null);
        materializeCompoundDataType0.getDataType();
    }
}
