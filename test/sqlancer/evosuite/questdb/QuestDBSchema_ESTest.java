/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 02:48:11 GMT 2025
 */

package sqlancer.evosuite.questdb;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;

import org.junit.jupiter.api.Test;
import sqlancer.questdb.QuestDBSchema;

public class QuestDBSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        QuestDBSchema.QuestDBDataType questDBSchema_QuestDBDataType0 = QuestDBSchema.QuestDBDataType.NULL;
        QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0 = new QuestDBSchema.QuestDBCompositeDataType(
                questDBSchema_QuestDBDataType0, (-4943));
        int int0 = questDBSchema_QuestDBCompositeDataType0.getSize();
        assertTrue(questDBSchema_QuestDBCompositeDataType0.isNullable());
        assertEquals((-4943), int0);
    }

    @Test
    public void test01() throws Throwable {
        QuestDBSchema.QuestDBDataType questDBSchema_QuestDBDataType0 = QuestDBSchema.QuestDBDataType
                .getRandomWithoutNull();
        assertEquals(QuestDBSchema.QuestDBDataType.BOOLEAN, questDBSchema_QuestDBDataType0);
    }

    @Test
    public void test02() throws Throwable {
        QuestDBSchema.QuestDBDataType questDBSchema_QuestDBDataType0 = QuestDBSchema.QuestDBDataType.NULL;
        QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0 = new QuestDBSchema.QuestDBCompositeDataType(
                questDBSchema_QuestDBDataType0, 1457014865);
        questDBSchema_QuestDBCompositeDataType0.getPrimitiveDataType();
        assertTrue(questDBSchema_QuestDBCompositeDataType0.isNullable());
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test03() throws Throwable { QuestDBSchema.QuestDBDataType questDBSchema_QuestDBDataType0 =
     * QuestDBSchema.QuestDBDataType.INT; QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0
     * = new QuestDBSchema.QuestDBCompositeDataType( questDBSchema_QuestDBDataType0, 1317);
     * QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType1 = new
     * QuestDBSchema.QuestDBCompositeDataType( questDBSchema_QuestDBDataType0, 4);
     * QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType2 =
     * QuestDBSchema.QuestDBCompositeDataType .getRandomWithoutNull();
     * questDBSchema_QuestDBCompositeDataType2.toString(); ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("BOOLEAN").when(resultSet0).getString(anyString()); doReturn(true,
     * false).when(resultSet0).next(); PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("=m"); Connection connection1
     * = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
     * null).when(connection1).createStatement(); SQLConnection sQLConnection1 = new SQLConnection(connection1); //
     * Undeclared exception! try { QuestDBSchema.fromConnection(sQLConnection1, "BOOLEAN");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.questdb.QuestDBSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test04() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("U.(ZCpx**?Z4fE.G", "zd!N \"d^IMORO(}WWJ",
     * "FLOAT").when(resultSet0).getString(anyString());
     */
    /*
     * doReturn(true, true, true, false).when(resultSet0).next(); PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
     * mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("=m"); Connection connection1
     * = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(statement0).when(connection1).createStatement(); SQLConnection sQLConnection1 = new
     * SQLConnection(connection1); List<String> list0 = QuestDBSchema.getTableNames(sQLConnection1); assertEquals(3,
     * list0.size()); }
     *
     * @Test public void test05() throws Throwable { // Undeclared exception! try {
     * QuestDBSchema.getTableNames((SQLConnection) null); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.questdb.QuestDBSchema", e); } }
     *
     * @Test public void test06() throws Throwable { LinkedList<QuestDBSchema.QuestDBTable> linkedList0 = new
     * LinkedList<QuestDBSchema.QuestDBTable>(); linkedList0.offer((QuestDBSchema.QuestDBTable) null); QuestDBSchema
     * questDBSchema0 = new QuestDBSchema(linkedList0); // Undeclared exception! try {
     * questDBSchema0.getRandomTableNonEmptyTables(); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.common.schema.AbstractTables", e); } }
     *
     * /* Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test07() throws Throwable { QuestDBSchema.QuestDBDataType questDBSchema_QuestDBDataType0 =
     * QuestDBSchema.QuestDBDataType.INT; QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0
     * = new QuestDBSchema.QuestDBCompositeDataType( questDBSchema_QuestDBDataType0, 1317);
     * QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType1 = new
     * QuestDBSchema.QuestDBCompositeDataType( questDBSchema_QuestDBDataType0, 4);
     * QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType2 =
     * QuestDBSchema.QuestDBCompositeDataType .getRandomWithoutNull();
     * questDBSchema_QuestDBCompositeDataType2.toString(); questDBSchema_QuestDBCompositeDataType1.toString(); ResultSet
     * resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn((String)
     * null).when(resultSet0).getString(anyString()); doReturn(true, false).when(resultSet0).next(); PreparedStatement
     * preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
     * mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("=m"); Connection connection1
     * = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(statement0).when(connection1).createStatement(); SQLConnection sQLConnection1 = new
     * SQLConnection(connection1); // Undeclared exception! try { QuestDBSchema.fromConnection(sQLConnection1, "INT");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
     */

    @Test
    public void test08() throws Throwable {
        QuestDBSchema.QuestDBDataType questDBSchema_QuestDBDataType0 = QuestDBSchema.QuestDBDataType.INT;
        QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0 = new QuestDBSchema.QuestDBCompositeDataType(
                questDBSchema_QuestDBDataType0, 10);
        QuestDBSchema.QuestDBColumn questDBSchema_QuestDBColumn0 = new QuestDBSchema.QuestDBColumn("|eq>2C,SG72tJ",
                questDBSchema_QuestDBCompositeDataType0, false);
        assertFalse(questDBSchema_QuestDBColumn0.isIndexed());
        assertTrue(questDBSchema_QuestDBColumn0.isNullable());
    }

    @Test
    public void test09() throws Throwable {
        QuestDBSchema.QuestDBDataType questDBSchema_QuestDBDataType0 = QuestDBSchema.QuestDBDataType.INT;
        QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0 = new QuestDBSchema.QuestDBCompositeDataType(
                questDBSchema_QuestDBDataType0, 2);
        assertFalse(questDBSchema_QuestDBCompositeDataType0.isNullable());
    }

    @Test
    public void test10() throws Throwable {
        QuestDBSchema.QuestDBDataType questDBSchema_QuestDBDataType0 = QuestDBSchema.QuestDBDataType.BOOLEAN;
        QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0 = new QuestDBSchema.QuestDBCompositeDataType(
                questDBSchema_QuestDBDataType0, 1066705495);
        assertFalse(questDBSchema_QuestDBCompositeDataType0.isNullable());
    }

    @Test
    public void test11() throws Throwable {
        LinkedList<QuestDBSchema.QuestDBColumn> linkedList0 = new LinkedList<QuestDBSchema.QuestDBColumn>();
        QuestDBSchema.QuestDBTable questDBSchema_QuestDBTable0 = new QuestDBSchema.QuestDBTable("eGJ]*]@q", linkedList0,
                false);
        assertEquals("eGJ]*]@q", questDBSchema_QuestDBTable0.getName());
    }

    @Test
    public void test12() throws Throwable {
        LinkedList<QuestDBSchema.QuestDBTable> linkedList0 = new LinkedList<QuestDBSchema.QuestDBTable>();
        QuestDBSchema.QuestDBTables questDBSchema_QuestDBTables0 = new QuestDBSchema.QuestDBTables(linkedList0);
    }

    @Test
    public void test13() throws Throwable {
        LinkedList<QuestDBSchema.QuestDBTable> linkedList0 = new LinkedList<QuestDBSchema.QuestDBTable>();
        QuestDBSchema questDBSchema0 = new QuestDBSchema(linkedList0);
        // Undeclared exception!
        try {
            questDBSchema0.getRandomTableNonEmptyTables();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test14() throws Throwable {
        QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0 = QuestDBSchema.QuestDBCompositeDataType
                .getRandomWithoutNull();
        boolean boolean0 = questDBSchema_QuestDBCompositeDataType0.isNullable();
        assertFalse(boolean0);
        assertEquals(QuestDBSchema.QuestDBDataType.BOOLEAN,
                questDBSchema_QuestDBCompositeDataType0.getPrimitiveDataType());
    }
}

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test15() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
 * ViolatedAssumptionAnswer()); doReturn("PRI", "PRI").when(resultSet0).getString(anyString()); doReturn(true, true,
 * false).when(resultSet0).next(); PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new
 * ViolatedAssumptionAnswer()); doReturn(resultSet0, (ResultSet)
 * null).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
 * ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
 * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
 * sQLConnection0.prepareStatement("=m"); Connection connection1 = mock(Connection.class, new
 * ViolatedAssumptionAnswer()); doReturn(statement0, statement0).when(connection1).createStatement(); SQLConnection
 * sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
 * QuestDBSchema.fromConnection(sQLConnection1, "BYTE"); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.questdb.QuestDBSchema", e); } }
 */

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test16() throws Throwable { Connection connection0 = mock(Connection.class, new
 * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
 * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
 * QuestDBSchema.fromConnection(sQLConnection0, "set experimental_enable_hash_sharded_indexes='on';");
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.questdb.QuestDBSchema", e); } }
 */

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test17() throws Throwable { QuestDBSchema.QuestDBCompositeDataType.getRandomWithoutNull();
 * QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0 =
 * QuestDBSchema.QuestDBCompositeDataType .getRandomWithoutNull(); QuestDBSchema.QuestDBCompositeDataType
 * questDBSchema_QuestDBCompositeDataType1 = QuestDBSchema.QuestDBCompositeDataType .getRandomWithoutNull();
 * questDBSchema_QuestDBCompositeDataType1.toString(); questDBSchema_QuestDBCompositeDataType0.toString(); ResultSet
 * resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn("U.(ZCpx**?Z4fE.G", (String)
 * null).when(resultSet0).getString(anyString()); doReturn(true, true, false).when(resultSet0).next(); PreparedStatement
 * preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
 * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
 * mock(Connection.class, new ViolatedAssumptionAnswer());
 * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
 * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("=m"); Connection connection1 =
 * mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0).when(connection1).createStatement();
 * SQLConnection sQLConnection1 = new SQLConnection(connection1); List<String> list0 =
 * QuestDBSchema.getTableNames(sQLConnection1); assertTrue(list0.contains("U.(ZCpx**?Z4fE.G")); }
 */

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test18() throws Throwable { PreparedStatement preparedStatement0 = mock(PreparedStatement.class,
 * new ViolatedAssumptionAnswer()); doReturn((ResultSet) null).when(preparedStatement0).executeQuery(anyString());
 * Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
 * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
 * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("=m"); Connection connection1 =
 * mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0).when(connection1).createStatement();
 * SQLConnection sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
 * QuestDBSchema.fromConnection(sQLConnection1, "INT"); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.questdb.QuestDBSchema", e); } }
 */

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test19() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
 * ViolatedAssumptionAnswer()); doReturn("sys.column_versions_purge_log", "sys.column_versions_purge_log",
 * "INT").when(resultSet0) .getString(anyString()); doReturn(true, true, true, false).when(resultSet0).next();
 * PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
 * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
 * mock(Connection.class, new ViolatedAssumptionAnswer());
 * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
 * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("=m"); Connection connection1 =
 * mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
 * null).when(connection1).createStatement(); SQLConnection sQLConnection1 = new SQLConnection(connection1); //
 * Undeclared exception! try { QuestDBSchema.fromConnection(sQLConnection1, "INT");
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.questdb.QuestDBSchema", e); } }
 */
