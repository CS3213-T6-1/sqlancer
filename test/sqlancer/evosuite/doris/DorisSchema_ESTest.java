/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 16:09:41 GMT 2025
 */

package sqlancer.evosuite.doris;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.Connection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;
import sqlancer.common.schema.AbstractTableColumn;
import sqlancer.doris.ast.DorisConstant;
import sqlancer.doris.DorisSchema;
import sqlancer.SQLConnection;

public class DorisSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("",
                dorisSchema_DorisCompositeDataType0, true, true);
        DorisSchema.DorisColumn dorisSchema_DorisColumn1 = new DorisSchema.DorisColumn((String) null,
                dorisSchema_DorisCompositeDataType0, true, false);
        // Undeclared exception!
        try {
            dorisSchema_DorisColumn0.compareTo(
                    (AbstractTableColumn<DorisSchema.DorisTable, DorisSchema.DorisCompositeDataType>) dorisSchema_DorisColumn1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test01() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, (-594415409));
        int int0 = dorisSchema_DorisCompositeDataType0.getSize();
        assertEquals((-594415409), int0);
    }

    @Test
    public void test02() throws Throwable {
        DorisSchema.DorisRowValue dorisSchema_DorisRowValue0 = new DorisSchema.DorisRowValue(
                (DorisSchema.DorisTables) null, (Map<DorisSchema.DorisColumn, DorisConstant>) null);
    }

    @Test
    public void test03() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        int int0 = dorisSchema_DorisDataType0.getVarcharLength();
        assertEquals(0, int0);
    }

    @Test
    public void test04() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        int int0 = dorisSchema_DorisDataType0.getDecimalScale();
        assertEquals(0, int0);
    }

    @Test
    public void test05() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType1 = dorisSchema_DorisCompositeDataType0
                .getPrimitiveDataType();
        int int0 = dorisSchema_DorisDataType1.getDecimalPrecision();
        assertEquals(0, int0);
    }

    @Test
    public void test06() throws Throwable {
        LinkedList<DorisSchema.DorisTable> linkedList0 = new LinkedList<DorisSchema.DorisTable>();
        linkedList0.addLast((DorisSchema.DorisTable) null);
        DorisSchema dorisSchema0 = new DorisSchema(linkedList0);
        // Undeclared exception!
        try {
            dorisSchema0.getRandomTableNonEmptyTables();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.schema.AbstractTables", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        LinkedList<DorisSchema.DorisTable> linkedList0 = new LinkedList<DorisSchema.DorisTable>();
        DorisSchema dorisSchema0 = new DorisSchema(linkedList0);
        // Undeclared exception!
        try {
            dorisSchema0.getRandomTableNonEmptyTables();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test08() throws Throwable {
        LinkedList<DorisSchema.DorisTable> linkedList0 = new LinkedList<DorisSchema.DorisTable>();
        linkedList0.add((DorisSchema.DorisTable) null);
        DorisSchema dorisSchema0 = new DorisSchema(linkedList0);
        // Undeclared exception!
        try {
            dorisSchema0.getRandomTableNonEmptyAndViewTables();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.DorisSchema", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        LinkedList<DorisSchema.DorisTable> linkedList0 = new LinkedList<DorisSchema.DorisTable>();
        linkedList0.add((DorisSchema.DorisTable) null);
        DorisSchema dorisSchema0 = new DorisSchema(linkedList0);
        // Undeclared exception!
        try {
            dorisSchema0.getIndexCount();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.DorisSchema", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test10() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn((String) null, "MATERIALIZED VIEW").when(resultSet0).getString(anyInt());
     * doReturn(true, true, false).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(statement0).when(connection0).createStatement(); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); // Undeclared exception! try { DorisSchema.fromConnection(sQLConnection0, "");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
     */

    @Test
    public void test11() throws Throwable {
        DorisSchema dorisSchema0 = null;
        try {
            dorisSchema0 = new DorisSchema((List<DorisSchema.DorisTable>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, (-2466));
        String string0 = dorisSchema_DorisCompositeDataType0.toString();
        // // Unstable assertion: assertEquals("VARCHAR(1)", string0);
    }

    @Test
    public void test13() throws Throwable {
        DorisSchema.DorisTableDataModel.getRandom();
        DorisSchema.DorisTableDataModel.getRandom();
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        // // Unstable assertion: assertEquals(DorisSchema.DorisDataType.DECIMAL,
        // dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());

        DorisSchema.DorisCompositeDataType.getRandomWithoutNull();
        DorisSchema.DorisTableDataModel dorisSchema_DorisTableDataModel0 = DorisSchema.DorisTableDataModel.getRandom();
        // // Unstable assertion: assertEquals(DorisSchema.DorisTableDataModel.DUPLICATE,
        // dorisSchema_DorisTableDataModel0);

        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType1 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        // // Unstable assertion: assertEquals(DorisSchema.DorisDataType.INT,
        // dorisSchema_DorisCompositeDataType1.getPrimitiveDataType());
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test14() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn(".ehw<X0fMa^R$OmZY:%").when(resultSet0).getString(anyInt()); doReturn(true,
     * false).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class,
     * new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement) null).when(connection0).createStatement();
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * DorisSchema.fromConnection(sQLConnection0, "tb$=B8o"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.doris.DorisSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test15() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("sqlancer.doris.DorisSchema$DorisTableDataModel", "'d:*okezq CEVP",
     * "sqlancer.doris.DorisSchema$DorisTableDataModel", "sqlancer.doris.DorisSchema$DorisTableDataModel")
     * .when(resultSet0).getString(anyInt()); doReturn(true, true, true, true, false).when(resultSet0).next(); Statement
     * statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); Statement statement1 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(statement0, (Statement) null).when(connection0).createStatement(); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); // Undeclared exception! try { DorisSchema.fromConnection(sQLConnection0, "");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.doris.DorisSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test16() throws Throwable { DorisSchema.DorisTableDataModel.values(); ResultSet resultSet0 =
     * mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn("0-").when(resultSet0).getString(anyInt());
     * doReturn(true, false).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
     * null).when(connection0).createStatement(); SQLConnection sQLConnection0 = new SQLConnection(connection0); //
     * Undeclared exception! try { DorisSchema.fromConnection(sQLConnection0, "");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.doris.DorisSchema", e); } }
     */

    @Test
    public void test17() throws Throwable {
        // Undeclared exception!
        try {
            DorisSchema.fromConnection((SQLConnection) null, "DATEV2");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.DorisSchema", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test18() throws Throwable { Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * DorisSchema.fromConnection(sQLConnection0, "Field"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.doris.DorisSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test19() throws Throwable { DorisSchema.DorisTableDataModel.values(); ResultSet resultSet0 =
     * mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn((String)
     * null).when(resultSet0).getString(anyInt()); doReturn(true, false).when(resultSet0).next(); Statement statement0 =
     * mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class,
     * new ViolatedAssumptionAnswer()); doReturn(statement0).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * DorisSchema.fromConnection(sQLConnection0, "8-|10Ssc"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test20() throws Throwable { PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer()); doReturn((ResultSet)
     * null).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
     * sQLConnection0.prepareStatement("6xeMU!)hSL^Vn"); Connection connection1 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(statement0).when(connection1).createStatement(); SQLConnection
     * sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
     * DorisSchema.fromConnection(sQLConnection1, "6xeMU!)hSL^Vn"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.doris.DorisSchema", e); } }
     */

    @Test
    public void test21() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn((String) null,
                dorisSchema_DorisCompositeDataType0, true, true);
        DorisSchema.DorisColumnAggrType dorisSchema_DorisColumnAggrType0 = DorisSchema.DorisColumnAggrType.REPLCAE_IF_NOT_NULL;
        DorisSchema.DorisColumn dorisSchema_DorisColumn1 = new DorisSchema.DorisColumn((String) null,
                dorisSchema_DorisCompositeDataType0, true, true, dorisSchema_DorisColumnAggrType0, true, (String) null);
        List<DorisSchema.DorisColumn> list0 = List.of(dorisSchema_DorisColumn0, dorisSchema_DorisColumn0,
                dorisSchema_DorisColumn0, dorisSchema_DorisColumn0, dorisSchema_DorisColumn1);
        DorisSchema.DorisTable dorisSchema_DorisTable0 = new DorisSchema.DorisTable("\"U", list0, true);
        List<DorisSchema.DorisColumn> list1 = dorisSchema_DorisTable0.getRandomNonEmptyInsertColumns();
        assertTrue(dorisSchema_DorisColumn1.isKey());
        assertTrue(dorisSchema_DorisColumn0.isKey());
        assertEquals(2, list1.size());
        assertTrue(dorisSchema_DorisColumn1.hasDefaultValue());
        assertFalse(dorisSchema_DorisColumn0.hasDefaultValue());
        assertEquals(DorisSchema.DorisDataType.INT, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
        assertTrue(dorisSchema_DorisColumn1.isNullable());
    }

    @Test
    public void test22() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn((String) null,
                dorisSchema_DorisCompositeDataType0, false, false);
        List<DorisSchema.DorisColumn> list0 = List.of(dorisSchema_DorisColumn0, dorisSchema_DorisColumn0,
                dorisSchema_DorisColumn0, dorisSchema_DorisColumn0, dorisSchema_DorisColumn0);
        DorisSchema.DorisTable dorisSchema_DorisTable0 = new DorisSchema.DorisTable("'UY#&j3\",RE", list0, false);
        List<DorisSchema.DorisColumn> list1 = dorisSchema_DorisTable0.getRandomNonEmptyInsertColumns();
        assertEquals(5, list1.size());
        assertEquals(DorisSchema.DorisDataType.INT, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
        assertFalse(dorisSchema_DorisColumn0.isKey());
    }

    @Test
    public void test23() throws Throwable {
        LinkedList<DorisSchema.DorisColumn> linkedList0 = new LinkedList<DorisSchema.DorisColumn>();
        DorisSchema.DorisTable dorisSchema_DorisTable0 = new DorisSchema.DorisTable("j", linkedList0, true);
        LinkedList<DorisSchema.DorisTable> linkedList1 = new LinkedList<DorisSchema.DorisTable>();
        linkedList1.add(dorisSchema_DorisTable0);
        DorisSchema dorisSchema0 = new DorisSchema(linkedList1);
        int int0 = dorisSchema0.getIndexCount();
        assertEquals(0, int0);
    }

    @Test
    public void test24() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumnAggrType dorisSchema_DorisColumnAggrType0 = DorisSchema.DorisColumnAggrType.SUM;
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("6xeMU!)hSL^Vn",
                dorisSchema_DorisCompositeDataType0, true, true, dorisSchema_DorisColumnAggrType0, true, "U");
        LinkedList<DorisSchema.DorisTable> linkedList0 = new LinkedList<DorisSchema.DorisTable>();
        List<DorisSchema.DorisColumn> list0 = List.of(dorisSchema_DorisColumn0, dorisSchema_DorisColumn0,
                dorisSchema_DorisColumn0, dorisSchema_DorisColumn0, dorisSchema_DorisColumn0, dorisSchema_DorisColumn0,
                dorisSchema_DorisColumn0, dorisSchema_DorisColumn0, dorisSchema_DorisColumn0, dorisSchema_DorisColumn0);
        DorisSchema.DorisTable dorisSchema_DorisTable0 = new DorisSchema.DorisTable("Default", list0, true);
        linkedList0.add(dorisSchema_DorisTable0);
        DorisSchema dorisSchema0 = new DorisSchema(linkedList0);
        // Undeclared exception!
        try {
            dorisSchema0.getRandomTableNonEmptyAndViewTables();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test25() throws Throwable { DorisSchema.DorisTableDataModel.values(); ResultSet resultSet0 =
     * mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn("").when(resultSet0).getString(anyInt());
     * doReturn(true, false).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
     * null).when(connection0).createStatement(); SQLConnection sQLConnection0 = new SQLConnection(connection0); //
     * Undeclared exception! try { DorisSchema.fromConnection(sQLConnection0, "");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.doris.DorisSchema", e); } }
     */

    @Test
    public void test26() throws Throwable {
        LinkedList<DorisSchema.DorisTable> linkedList0 = new LinkedList<DorisSchema.DorisTable>();
        DorisSchema.DorisTables dorisSchema_DorisTables0 = new DorisSchema.DorisTables(linkedList0);
        SQLConnection sQLConnection0 = new SQLConnection((Connection) null);
        // Undeclared exception!
        try {
            dorisSchema_DorisTables0.getRandomRowValue(sQLConnection0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.SQLConnection", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test27() throws Throwable { LinkedList<DorisSchema.DorisTable> linkedList0 = new
     * LinkedList<DorisSchema.DorisTable>(); DorisSchema.DorisTables dorisSchema_DorisTables0 = new
     * DorisSchema.DorisTables(linkedList0); Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * dorisSchema_DorisTables0.getRandomRowValue(sQLConnection0); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.doris.DorisSchema$DorisTables", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test28() throws Throwable { LinkedList<DorisSchema.DorisTable> linkedList0 = new
     * LinkedList<DorisSchema.DorisTable>(); DorisSchema.DorisTables dorisSchema_DorisTables0 = new
     * DorisSchema.DorisTables(linkedList0); ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
     * Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn((Statement)
     * null).when(connection0).createStatement(); SQLConnection sQLConnection0 = new SQLConnection(connection0); //
     * Undeclared exception! try { dorisSchema_DorisTables0.getRandomRowValue(sQLConnection0);
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.doris.DorisSchema$DorisTables", e); } }
     */

    @Test
    public void test29() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.NULL;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 0);
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("|V3EIhc| d",
                dorisSchema_DorisCompositeDataType0, false, false);
        DorisSchema.DorisColumnAggrType dorisSchema_DorisColumnAggrType0 = DorisSchema.DorisColumnAggrType.NULL;
        DorisSchema.DorisColumn dorisSchema_DorisColumn1 = new DorisSchema.DorisColumn("|V3EIhc| d",
                dorisSchema_DorisCompositeDataType0, true, false, dorisSchema_DorisColumnAggrType0, true,
                "u2ha1l>!pQ? d5Z");
        int int0 = dorisSchema_DorisColumn0.compareTo(
                (AbstractTableColumn<DorisSchema.DorisTable, DorisSchema.DorisCompositeDataType>) dorisSchema_DorisColumn1);
        assertFalse(dorisSchema_DorisColumn0.isNullable());
        assertFalse(dorisSchema_DorisColumn0.hasDefaultValue());
        assertEquals((-1), int0);
        assertTrue(dorisSchema_DorisColumn1.hasDefaultValue());
        assertFalse(dorisSchema_DorisColumn1.isNullable());
    }

    @Test
    public void test30() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 8);
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("Field",
                dorisSchema_DorisCompositeDataType0, true, true);
        DorisSchema.DorisColumnAggrType dorisSchema_DorisColumnAggrType0 = DorisSchema.DorisColumnAggrType.NULL;
        DorisSchema.DorisColumn dorisSchema_DorisColumn1 = new DorisSchema.DorisColumn("Field DATETIME",
                dorisSchema_DorisCompositeDataType0, false, true, dorisSchema_DorisColumnAggrType0, true, "V9}~7A7FW");
        int int0 = dorisSchema_DorisColumn0.compareTo(
                (AbstractTableColumn<DorisSchema.DorisTable, DorisSchema.DorisCompositeDataType>) dorisSchema_DorisColumn1);
        assertFalse(dorisSchema_DorisColumn0.hasDefaultValue());
        assertEquals(1, int0);
        assertTrue(dorisSchema_DorisColumn1.hasDefaultValue());
        assertTrue(dorisSchema_DorisColumn0.isNullable());
        assertTrue(dorisSchema_DorisColumn1.isNullable());
    }

    @Test
    public void test31() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumnAggrType dorisSchema_DorisColumnAggrType0 = DorisSchema.DorisColumnAggrType.SUM;
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("6xeMU!)hSL^Vn",
                dorisSchema_DorisCompositeDataType0, true, true, dorisSchema_DorisColumnAggrType0, true, "U");
        String string0 = dorisSchema_DorisColumn0.toString();
        assertTrue(dorisSchema_DorisColumn0.isKey());
        assertEquals("6xeMU!)hSL^Vn TINYINT SUM DEFAULT U", string0);
    }

    @Test
    public void test32() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 9);
        boolean boolean0 = dorisSchema_DorisCompositeDataType0.canBeKey();
        assertTrue(boolean0);
    }

    @Test
    public void test33() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.FLOAT;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 277);
        boolean boolean0 = dorisSchema_DorisCompositeDataType0.canBeKey();
        assertFalse(boolean0);
    }

    @Test
    public void test34() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DECIMAL;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 2);
        // Undeclared exception!
        try {
            dorisSchema_DorisCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 2
            //
        }
    }

    @Test
    public void test35() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.FLOAT;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 12);
        String string0 = dorisSchema_DorisCompositeDataType0.toString();
        assertEquals("DOUBLE", string0);
    }

    @Test
    public void test36() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.FLOAT;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 277);
        // Undeclared exception!
        try {
            dorisSchema_DorisCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 277
            //
        }
    }

    @Test
    public void test37() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.getRandomWithoutNull();
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 3960);
        // Undeclared exception!
        try {
            dorisSchema_DorisCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 3960
            //
        }
    }

    @Test
    public void test38() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 4);
        String string0 = dorisSchema_DorisCompositeDataType0.toString();
        assertEquals("INT", string0);
    }

    @Test
    public void test39() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 2);
        String string0 = dorisSchema_DorisCompositeDataType0.toString();
        assertEquals("SMALLINT", string0);
    }

    @Test
    public void test40() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 9);
        String string0 = dorisSchema_DorisCompositeDataType0.toString();
        assertEquals("BOOLEAN", string0);
    }

    @Test
    public void test41() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 0);
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("|V3EIhc| d",
                dorisSchema_DorisCompositeDataType0, false, false);
        String string0 = dorisSchema_DorisColumn0.toString();
        assertEquals("|V3EIhc| d DATETIME NOT NULL", string0);
        assertFalse(dorisSchema_DorisColumn0.isKey());
    }

    @Test
    public void test42() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, (-594415409));
        String string0 = dorisSchema_DorisCompositeDataType0.toString();
        assertEquals("DATEV2", string0);
    }

    @Test
    public void test43() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.getRandomWithoutNull();
        assertEquals(DorisSchema.DorisDataType.INT, dorisSchema_DorisDataType0);

        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        String string0 = dorisSchema_DorisCompositeDataType0.toString();
        assertEquals("FLOAT", string0);
    }

    @Test
    public void test44() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 565);
        dorisSchema_DorisCompositeDataType0.initColumnArgs();
        assertEquals(DorisSchema.DorisDataType.VARCHAR, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
    }

    @Test
    public void test45() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 0);
        dorisSchema_DorisCompositeDataType0.initColumnArgs();
        assertEquals(DorisSchema.DorisDataType.DATETIME, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
    }

    @Test
    public void test46() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, (-594415409));
        dorisSchema_DorisCompositeDataType0.initColumnArgs();
        assertEquals(DorisSchema.DorisDataType.DATE, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
    }

    @Test
    public void test47() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        dorisSchema_DorisCompositeDataType0.initColumnArgs();
        assertEquals(DorisSchema.DorisDataType.INT, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
    }

    @Test
    public void test48() throws Throwable {
        DorisSchema.DorisTableDataModel dorisSchema_DorisTableDataModel0 = DorisSchema.DorisTableDataModel.getRandom();
        assertEquals(DorisSchema.DorisTableDataModel.DUPLICATE, dorisSchema_DorisTableDataModel0);

        DorisSchema.DorisTableDataModel.getRandom();
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        dorisSchema_DorisCompositeDataType0.initColumnArgs();
        assertEquals(DorisSchema.DorisDataType.DECIMAL, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
    }

    @Test
    public void test49() throws Throwable {
        DorisSchema.DorisTableDataModel dorisSchema_DorisTableDataModel0 = DorisSchema.DorisTableDataModel.getRandom();
        // // Unstable assertion: assertEquals(DorisSchema.DorisTableDataModel.DUPLICATE,
        // dorisSchema_DorisTableDataModel0);

        DorisSchema.DorisTableDataModel.getRandom();
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        // // Unstable assertion: assertEquals(DorisSchema.DorisDataType.DECIMAL,
        // dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());

        DorisSchema.DorisCompositeDataType.getRandomWithoutNull();
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType1 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        // // Unstable assertion: assertEquals(DorisSchema.DorisDataType.BOOLEAN,
        // dorisSchema_DorisCompositeDataType1.getPrimitiveDataType());
    }

    @Test
    public void test50() throws Throwable {
        DorisSchema.DorisTableDataModel dorisSchema_DorisTableDataModel0 = DorisSchema.DorisTableDataModel.getRandom();
        assertEquals(DorisSchema.DorisTableDataModel.DUPLICATE, dorisSchema_DorisTableDataModel0);

        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        assertEquals(DorisSchema.DorisDataType.FLOAT, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());

        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType1 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        assertEquals(DorisSchema.DorisDataType.DATE, dorisSchema_DorisCompositeDataType1.getPrimitiveDataType());
    }

    @Test
    public void test51() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DECIMAL;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, (-1));
        // Undeclared exception!
        try {
            dorisSchema_DorisCompositeDataType0.getSize();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // -1
            //
        }
    }

    @Test
    public void test52() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 8);
        int int0 = dorisSchema_DorisCompositeDataType0.getSize();
        assertEquals(8, int0);
    }

    @Test
    public void test53() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.NULL;
        DorisSchema.DorisDataType.getRandomWithoutNull();
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 0);
        DorisSchema.DorisCompositeDataType.getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("|V3EIhc| d",
                dorisSchema_DorisCompositeDataType0, false, false);
        dorisSchema_DorisColumn0.toString();
        String string0 = dorisSchema_DorisColumn0.toString();
        // // Unstable assertion: assertEquals("|V3EIhc| d NULL NOT NULL", string0);
        // // Unstable assertion: assertFalse(dorisSchema_DorisColumn0.isKey());

        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType1 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        // // Unstable assertion: assertEquals(DorisSchema.DorisDataType.VARCHAR,
        // dorisSchema_DorisCompositeDataType1.getPrimitiveDataType());

        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType2 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        String string1 = dorisSchema_DorisCompositeDataType2.toString();
        // // Unstable assertion: assertEquals("LARGEINT", string1);
    }

    @Test
    public void test54() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumnAggrType dorisSchema_DorisColumnAggrType0 = DorisSchema.DorisColumnAggrType
                .getRandom(dorisSchema_DorisCompositeDataType0);
        assertEquals(DorisSchema.DorisDataType.INT, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
        assertEquals(DorisSchema.DorisColumnAggrType.MIN, dorisSchema_DorisColumnAggrType0);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test55() throws Throwable { DorisSchema.DorisTableDataModel.values(); ResultSet resultSet0 =
     * mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn("Nj\"%.hqC)%ymvJ`ic", "Ddj+&",
     * "Nj\"%.hqC)%ymvJ`ic", "Ddj+&").when(resultSet0).getString(anyInt()); doReturn(true, true, true, true,
     * false).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); DorisSchema.DorisTableDataModel.values();
     * Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
     * null).when(connection0).createStatement(); SQLConnection sQLConnection0 = new SQLConnection(connection0); //
     * Undeclared exception! try { DorisSchema.fromConnection(sQLConnection0, "");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.doris.DorisSchema", e); } }
     */

    @Test
    public void test56() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("P3gVF`",
                dorisSchema_DorisCompositeDataType0, true, true);
        boolean boolean0 = dorisSchema_DorisColumn0.isNullable();
        assertTrue(boolean0);
        assertFalse(dorisSchema_DorisColumn0.hasDefaultValue());
        assertTrue(dorisSchema_DorisColumn0.isKey());
        assertEquals(DorisSchema.DorisDataType.INT, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
    }

    @Test
    public void test57() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("tinyint(3)",
                dorisSchema_DorisCompositeDataType0, true, false);
        boolean boolean0 = dorisSchema_DorisColumn0.isKey();
        assertFalse(dorisSchema_DorisColumn0.hasDefaultValue());
        assertTrue(boolean0);
        assertEquals(DorisSchema.DorisDataType.INT, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
        assertFalse(dorisSchema_DorisColumn0.isNullable());
    }

    @Test
    public void test58() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("j&($mO7;5)7RQ",
                dorisSchema_DorisCompositeDataType0, true, false);
        boolean boolean0 = dorisSchema_DorisColumn0.hasDefaultValue();
        assertEquals(DorisSchema.DorisDataType.INT, dorisSchema_DorisCompositeDataType0.getPrimitiveDataType());
        assertFalse(boolean0);
        assertFalse(dorisSchema_DorisColumn0.isNullable());
        assertTrue(dorisSchema_DorisColumn0.isKey());
    }

    @Test
    public void test59() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DECIMAL;
        dorisSchema_DorisDataType0.setDecimalScale((-852));
    }

    @Test
    public void test60() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.NULL;
        dorisSchema_DorisDataType0.setDecimalPrecision((-14));
        assertEquals((-14), dorisSchema_DorisDataType0.getDecimalPrecision());
    }

    @Test
    public void test61() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        dorisSchema_DorisDataType0.setVarcharLength(1179);
    }

    @Test
    public void test62() throws Throwable {
        DorisSchema.DorisTableDataModel dorisSchema_DorisTableDataModel0 = DorisSchema.DorisTableDataModel.getRandom();
        // // Unstable assertion: assertEquals(DorisSchema.DorisTableDataModel.DUPLICATE,
        // dorisSchema_DorisTableDataModel0);

        DorisSchema.DorisTableDataModel.getRandom();
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        String string0 = dorisSchema_DorisCompositeDataType0.toString();
        // // Unstable assertion: assertEquals("DECIMALV3(0,0)", string0);
    }
}
