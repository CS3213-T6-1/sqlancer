/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 17:40:19 GMT 2025
 */

package sqlancer.evosuite.doris.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.doris.ast.DorisBinaryLogicalOperation;
import sqlancer.doris.ast.DorisColumnValue;
import sqlancer.doris.ast.DorisConstant;
import sqlancer.doris.ast.DorisExpression;
import sqlancer.doris.ast.DorisFunctionOperation;
import sqlancer.doris.ast.DorisLikeOperation;
import sqlancer.doris.ast.DorisSelect;
import sqlancer.doris.DorisSchema;

public class DorisBinaryLogicalOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, (-243286476));
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("",
                dorisSchema_DorisCompositeDataType0, true, true);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue(dorisSchema_DorisColumn0,
                dorisConstant_DorisDatetimeConstant0);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.AND;
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(dorisColumnValue0,
                dorisColumnValue0, dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation1 = new DorisBinaryLogicalOperation(dorisColumnValue0,
                dorisBinaryLogicalOperation0, dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisConstant dorisConstant0 = dorisBinaryLogicalOperation1.getExpectedValue();
        assertFalse(dorisConstant0.isDatetime());
    }

    @Test
    public void test01() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = DorisConstant.createIntConstant((-373L));
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.AND;
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(dorisConstant0,
                dorisConstant1, dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = (DorisConstant.DorisIntConstant) dorisBinaryLogicalOperation0
                .getRightExpr();
        assertEquals((-373L), dorisConstant_DorisIntConstant0.getValue());
    }

    @Test
    public void test02() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(
                (DorisExpression) null, dorisConstant_DorisDatetimeConstant0,
                (DorisBinaryLogicalOperation.DorisBinaryLogicalOperator) null);
        dorisBinaryLogicalOperation0.getOp();
    }

    @Test
    public void test03() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.AND;
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(
                (DorisExpression) null, (DorisExpression) null,
                dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisExpression dorisExpression0 = dorisBinaryLogicalOperation0.getLeftExpr();
        assertNull(dorisExpression0);
    }

    @Test
    public void test04() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(
                (DorisExpression) null, (DorisExpression) null,
                dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            dorisBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.ast.DorisBinaryLogicalOperation", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        DorisFunctionOperation.DorisFunction dorisFunctionOperation_DorisFunction0 = DorisFunctionOperation.DorisFunction.SUBSTRING;
        DorisSelect dorisSelect0 = new DorisSelect();
        List<DorisExpression> list0 = dorisSelect0.getGroupByClause();
        DorisFunctionOperation dorisFunctionOperation0 = new DorisFunctionOperation(
                dorisFunctionOperation_DorisFunction0, list0);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(
                dorisFunctionOperation0, (DorisExpression) null,
                dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1 = dorisBinaryLogicalOperation0
                .getOp();
        assertSame(dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1,
                dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
    }

    @Test
    public void test06() throws Throwable {
        DorisFunctionOperation.DorisFunction dorisFunctionOperation_DorisFunction0 = DorisFunctionOperation.DorisFunction.SUBSTRING;
        DorisSelect dorisSelect0 = new DorisSelect();
        List<DorisExpression> list0 = dorisSelect0.getGroupByClause();
        DorisFunctionOperation dorisFunctionOperation0 = new DorisFunctionOperation(
                dorisFunctionOperation_DorisFunction0, list0);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(
                dorisFunctionOperation0, (DorisExpression) null,
                dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisExpression dorisExpression0 = dorisBinaryLogicalOperation0.getRightExpr();
        assertNull(dorisExpression0);
    }

    @Test
    public void test07() throws Throwable {
        DorisFunctionOperation.DorisFunction dorisFunctionOperation_DorisFunction0 = DorisFunctionOperation.DorisFunction.SUBSTRING;
        DorisSelect dorisSelect0 = new DorisSelect();
        List<DorisExpression> list0 = dorisSelect0.getGroupByClause();
        DorisFunctionOperation dorisFunctionOperation0 = new DorisFunctionOperation(
                dorisFunctionOperation_DorisFunction0, list0);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(
                dorisFunctionOperation0, (DorisExpression) null,
                dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisExpression dorisExpression0 = dorisBinaryLogicalOperation0.getLeftExpr();
        assertSame(dorisExpression0, dorisFunctionOperation0);
    }

    @Test
    public void test08() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-3546L));
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-3546L));
        DorisConstant dorisConstant0 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0
                .apply(dorisConstant_DorisFloatConstant0, dorisConstant_DorisIntConstant0);
        assertTrue(dorisConstant0.asBoolean());
    }

    @Test
    public void test09() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(0L);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisConstant dorisConstant1 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0.apply(dorisConstant0,
                dorisConstant0);
        assertEquals("false", dorisConstant1.toString());
    }

    @Test
    public void test10() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant((-993L));
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.NULL;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, 1793702779);
        DorisSchema.DorisColumnAggrType dorisSchema_DorisColumnAggrType0 = DorisSchema.DorisColumnAggrType.BITMAP_UNION;
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("bT<IMxC=et\"\"Ic[>2",
                dorisSchema_DorisCompositeDataType0, true, true, dorisSchema_DorisColumnAggrType0, true,
                "bT<IMxC=et\"\"Ic[>2");
        DorisColumnValue dorisColumnValue0 = DorisColumnValue.create(dorisSchema_DorisColumn0, dorisConstant0);
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(dorisColumnValue0,
                dorisColumnValue0, dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisBinaryLogicalOperation0
                .getExpectedValue();
        assertNotNull(dorisConstant_DorisBooleanConstant0);
        assertTrue(dorisConstant_DorisBooleanConstant0.getValue());
    }

    @Test
    public void test11() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(0L);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisConstant dorisConstant0 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0
                .apply(dorisConstant_DorisIntConstant0, dorisConstant_DorisDatetimeConstant0);
        assertTrue(dorisConstant0.isNull());
    }

    @Test
    public void test12() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, (-243286476));
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("",
                dorisSchema_DorisCompositeDataType0, true, true);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue(dorisSchema_DorisColumn0,
                dorisConstant_DorisDatetimeConstant0);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(dorisColumnValue0,
                dorisColumnValue0, dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisConstant dorisConstant0 = dorisBinaryLogicalOperation0.getExpectedValue();
        assertFalse(dorisConstant0.isDatetime());
    }

    @Test
    public void test13() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .valueOf("AND");
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-1.0));
        DorisConstant dorisConstant0 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0
                .apply(dorisConstant_DorisFloatConstant0, dorisConstant_DorisFloatConstant0);
        dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0.getTextRepresentation();
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        // Undeclared exception!
        try {
            dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1.apply(dorisConstant0,
                    dorisConstant_DorisFloatConstant0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisFloatConstant@0000000001
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(51L);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0
                .apply(dorisConstant_DorisIntConstant0, dorisConstant_DorisIntConstant0);
        assertTrue(dorisConstant_DorisBooleanConstant0.getValue());
    }

    @Test
    public void test15() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0
                .valueEquals(dorisConstant_DorisBooleanConstant0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant1 = (DorisConstant.DorisBooleanConstant) dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0
                .apply(dorisConstant0, dorisConstant_DorisBooleanConstant0);
        assertFalse(dorisConstant_DorisBooleanConstant1.getValue());
    }

    @Test
    public void test16() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("k",
                (DorisSchema.DorisCompositeDataType) null, true, true);
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                1.7976931348623157E308);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue(dorisSchema_DorisColumn0,
                dorisConstant_DorisFloatConstant0);
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(dorisColumnValue0,
                dorisColumnValue0, dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            dorisBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisFloatConstant@0000000002
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisLikeOperation.DorisLikeOperator dorisLikeOperation_DorisLikeOperator0 = DorisLikeOperation.DorisLikeOperator.NOT_LIKE;
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant dorisConstant0 = dorisLikeOperation_DorisLikeOperator0.apply(dorisConstant_DorisDatetimeConstant0,
                dorisConstant_DorisDatetimeConstant0);
        DorisConstant dorisConstant1 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0.apply(dorisConstant0,
                dorisConstant_DorisDatetimeConstant0);
        assertFalse(dorisConstant1.asBoolean());
    }

    @Test
    public void test18() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = DorisConstant.createIntConstant((-373L));
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.AND;
        DorisConstant dorisConstant2 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0.apply(dorisConstant1,
                dorisConstant0);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisConstant dorisConstant3 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1.apply(dorisConstant2,
                dorisConstant1);
        assertEquals("true", dorisConstant3.asString());
    }

    @Test
    public void test19() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-2960L));
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = DorisConstant.createBooleanConstant(false);
        DorisConstant dorisConstant2 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1.apply(dorisConstant0,
                dorisConstant1);
        DorisConstant dorisConstant3 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0.apply(dorisConstant2,
                dorisConstant_DorisIntConstant0);
        assertNotSame(dorisConstant2, dorisConstant3);
    }

    @Test
    public void test20() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = DorisConstant.createBooleanConstant(false);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0
                .apply(dorisConstant0, dorisConstant1);
        assertFalse(dorisConstant_DorisBooleanConstant0.getValue());
    }

    @Test
    public void test21() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-11L));
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.OR;
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue((DorisSchema.DorisColumn) null,
                dorisConstant_DorisIntConstant0);
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(dorisColumnValue0,
                dorisConstant_DorisIntConstant0, dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisConstant dorisConstant0 = dorisBinaryLogicalOperation0.getExpectedValue();
        assertNull(dorisConstant0);
    }

    @Test
    public void test22() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .valueOf("AND");
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-1.0));
        DorisConstant dorisConstant0 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0
                .apply(dorisConstant_DorisFloatConstant0, dorisConstant_DorisFloatConstant0);
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(
                dorisConstant_DorisFloatConstant0, dorisConstant0,
                dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisConstant dorisConstant1 = dorisBinaryLogicalOperation0.getExpectedValue();
        assertNull(dorisConstant1);
    }

    @Test
    public void test23() throws Throwable {
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0
                .getRandomOp();
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-2960L));
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = dorisBinaryLogicalOperation_DorisBinaryLogicalOperator1
                .apply(dorisConstant_DorisIntConstant0, dorisConstant0);
        assertTrue(dorisConstant1.asBoolean());
    }

    @Test
    public void test24() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = new DorisSchema.DorisCompositeDataType(
                dorisSchema_DorisDataType0, (-243286476));
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("",
                dorisSchema_DorisCompositeDataType0, true, true);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue(dorisSchema_DorisColumn0,
                dorisConstant_DorisDatetimeConstant0);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator.AND;
        DorisBinaryLogicalOperation dorisBinaryLogicalOperation0 = new DorisBinaryLogicalOperation(dorisColumnValue0,
                dorisColumnValue0, dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType1 = dorisBinaryLogicalOperation0.getExpectedType();
        assertEquals(DorisSchema.DorisDataType.BOOLEAN, dorisSchema_DorisDataType1);
    }
}
