/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:58:58 GMT 2025
 */

package sqlancer.evosuite.doris.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.Comparator;
import java.util.function.BinaryOperator;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.doris.ast.DorisBinaryArithmeticOperation;
import sqlancer.doris.ast.DorisBinaryComparisonOperation;
import sqlancer.doris.ast.DorisBinaryLogicalOperation;
import sqlancer.doris.ast.DorisColumnValue;
import sqlancer.doris.ast.DorisConstant;
import sqlancer.doris.ast.DorisExpression;
import sqlancer.doris.ast.DorisLikeOperation;
import sqlancer.doris.ast.DorisUnaryPostfixOperation;
import sqlancer.doris.DorisSchema;
import sqlancer.h2.H2ExpressionGenerator;

public class DorisBinaryArithmeticOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.CONCAT;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn((String) null,
                dorisSchema_DorisCompositeDataType0, true, true);
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue(dorisSchema_DorisColumn0, dorisConstant0);
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisColumnValue0, dorisColumnValue0, dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0);
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation1 = new DorisBinaryArithmeticOperation(
                dorisBinaryArithmeticOperation0, dorisColumnValue0,
                dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0);
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation1.getExpectedValue();
        assertFalse(dorisConstant1.isString());
    }

    @Test
    public void test01() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(0.0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisConstant dorisConstant1 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.RSHIFT;
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant1 = (DorisConstant.DorisFloatConstant) dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant1, dorisConstant0);
        assertEquals(1.0, dorisConstant_DorisFloatConstant1.getValue(), 0.01);
    }

    @Test
    public void test02() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-2193L));
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.LSHIFT;
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisIntConstant0, dorisConstant_DorisIntConstant0);
        assertEquals((-7.1860224E7), dorisConstant0.asFloat(), 0.01);
    }

    @Test
    public void test03() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(0L);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.LSHIFT;
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant1 = new DorisConstant.DorisIntConstant(0L);
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisIntConstant1, dorisConstant_DorisIntConstant0);
        assertFalse(dorisConstant0.isInt());
    }

    @Test
    public void test04() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-2233L));
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.BIT_OR;
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant((-3258L));
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = (DorisConstant.DorisFloatConstant) dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant_DorisIntConstant0);
        assertEquals((-2233.0), dorisConstant_DorisFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test05() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant((-2193L));
        DorisConstant dorisConstant1 = DorisConstant.createIntConstant(0L);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.BIT_AND;
        DorisConstant dorisConstant2 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant1, dorisConstant0);
        assertEquals(0.0, dorisConstant2.asFloat(), 0.01);
    }

    @Test
    public void test06() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(1L);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.MODULO;
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant0);
        DorisConstant dorisConstant2 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant1, dorisConstant0);
        assertEquals(0.0, dorisConstant1.asFloat(), 0.01);
        assertEquals("0.0", dorisConstant2.toString());
    }

    @Test
    public void test07() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.MODULO;
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant((-1L));
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant0);
        assertEquals(-0.0, dorisConstant1.asFloat(), 0.01);
    }

    @Test
    public void test08() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.DIVISION;
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1811L));
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant dorisConstant0 = dorisConstant_DorisIntConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant_DorisIntConstant0);
        assertEquals("1.0", dorisConstant1.asString());
    }

    @Test
    public void test09() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.DIVISION;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant_DorisBooleanConstant0);
        assertEquals("1.0", dorisConstant1.asString());
    }

    @Test
    public void test10() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant((-2193L));
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.MULTIPLICATION;
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = (DorisConstant.DorisFloatConstant) dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant0);
        assertEquals(4809249.0, dorisConstant_DorisFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test11() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(-0.0);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.SUBTRACTION;
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant1 = (DorisConstant.DorisFloatConstant) dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisFloatConstant0, dorisConstant_DorisFloatConstant0);
        assertEquals(0.0, dorisConstant_DorisFloatConstant1.getValue(), 0.01);
    }

    @Test
    public void test12() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(2332L);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.SUBTRACTION;
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant0);
        assertEquals(0.0, dorisConstant1.asFloat(), 0.01);
    }

    @Test
    public void test13() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(1.0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.SUBTRACTION;
        // Undeclared exception!
        try {
            dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0.apply((DorisConstant) null, dorisConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.ast.DorisBinaryArithmeticOperation$DorisBinaryArithmeticOperator", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.ADDITION;
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = (DorisConstant.DorisFloatConstant) dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant0);
        assertEquals(2.0, dorisConstant_DorisFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test15() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(1.0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant dorisConstant1 = DorisConstant.createDatetimeConstant("4%W");
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.ADDITION;
        // Undeclared exception!
        try {
            dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0.apply(dorisConstant1, dorisConstant0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisNullConstant@0000000004
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.BIT_OR;
        String string0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0.getTextRepresentation();
        assertEquals("|", string0);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test17() throws Throwable { DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator
     * dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 =
     * DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.BIT_OR;
     * DorisBinaryComparisonOperation.DorisBinaryComparisonOperator
     * dorisBinaryComparisonOperation_DorisBinaryComparisonOperator0 =
     * DorisBinaryComparisonOperation.DorisBinaryComparisonOperator.GREATER_EQUALS; DorisConstant dorisConstant0 =
     * DorisConstant.createFloatConstant(0.0); DorisConstant dorisConstant1 =
     * dorisBinaryComparisonOperation_DorisBinaryComparisonOperator0 .apply(dorisConstant0, dorisConstant0);
     * Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
     * doReturn(0).when(comparator0).compare(any(), any()); BinaryOperator<Double> binaryOperator0 =
     * BinaryOperator.minBy((Comparator<? super Double>) comparator0); DorisConstant dorisConstant2 =
     * dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 .applyOperation(dorisConstant1, dorisConstant1,
     * binaryOperator0); assertEquals("1.0", dorisConstant2.asString()); }
     */

    @Test
    public void test18() throws Throwable {
        DorisUnaryPostfixOperation.DorisUnaryPostfixOperator dorisUnaryPostfixOperation_DorisUnaryPostfixOperator0 = DorisUnaryPostfixOperation.DorisUnaryPostfixOperator.IS_NULL;
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                (DorisExpression) null, (DorisExpression) null, dorisUnaryPostfixOperation_DorisUnaryPostfixOperator0);
        DorisExpression dorisExpression0 = dorisBinaryArithmeticOperation0.getRightExpr();
        assertNull(dorisExpression0);
    }

    @Test
    public void test19() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant((-651));
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisConstant_DorisDateConstant0, dorisConstant_DorisDateConstant0, (BinaryOperatorNode.Operator) null);
        dorisBinaryArithmeticOperation0.getOp();
    }

    @Test
    public void test20() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.RSHIFT;
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant0);
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisConstant1, dorisConstant1, dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator1 = dorisBinaryArithmeticOperation0
                .getOp();
        assertSame(dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator1,
                dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0);
    }

    @Test
    public void test21() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant(
                "N");
        DorisConstant dorisConstant0 = DorisConstant.createStringConstant("'7X`bkprN");
        DorisConstant dorisConstant1 = dorisConstant_DorisDatetimeConstant0.valueLessThan(dorisConstant0);
        DorisBinaryLogicalOperation.DorisBinaryLogicalOperator dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0 = DorisBinaryLogicalOperation.DorisBinaryLogicalOperator
                .getRandom();
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisConstant1, dorisConstant1, dorisBinaryLogicalOperation_DorisBinaryLogicalOperator0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisBinaryArithmeticOperation0
                .getLeftExpr();
        assertFalse(dorisConstant_DorisBooleanConstant0.isFloat());
    }

    @Test
    public void test22() throws Throwable {
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                (DorisExpression) null, (DorisExpression) null, (BinaryOperatorNode.Operator) null);
        // Undeclared exception!
        try {
            dorisBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.ast.DorisBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue((DorisSchema.DorisColumn) null, dorisConstant0);
        H2ExpressionGenerator.H2BinaryArithmeticOperator h2ExpressionGenerator_H2BinaryArithmeticOperator0 = H2ExpressionGenerator.H2BinaryArithmeticOperator.MOD;
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisColumnValue0, dorisColumnValue0, h2ExpressionGenerator_H2BinaryArithmeticOperator0);
        // Undeclared exception!
        try {
            dorisBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // class sqlancer.h2.H2ExpressionGenerator$H2BinaryArithmeticOperator cannot be cast to class
            // sqlancer.doris.ast.DorisBinaryArithmeticOperation$DorisBinaryArithmeticOperator
            // (sqlancer.h2.H2ExpressionGenerator$H2BinaryArithmeticOperator and
            // sqlancer.doris.ast.DorisBinaryArithmeticOperation$DorisBinaryArithmeticOperator are in unnamed module of
            // loader org.evosuite.instrumentation.InstrumentingClassLoader @16f124c)
            //
            verifyException("sqlancer.doris.ast.DorisBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisLikeOperation.DorisLikeOperator dorisLikeOperation_DorisLikeOperator0 = DorisLikeOperation.DorisLikeOperator.LIKE_OPERATOR;
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisConstant0, dorisConstant0, dorisLikeOperation_DorisLikeOperator0);
        DorisExpression dorisExpression0 = dorisBinaryArithmeticOperation0.getRightExpr();
        assertEquals(DorisSchema.DorisDataType.NULL, dorisExpression0.getExpectedType());
    }

    @Test
    public void test25() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator0 = H2ExpressionGenerator.H2BinaryLogicalOperator.AND;
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                (DorisExpression) null, dorisConstant_DorisBooleanConstant0,
                h2ExpressionGenerator_H2BinaryLogicalOperator0);
        DorisExpression dorisExpression0 = dorisBinaryArithmeticOperation0.getLeftExpr();
        assertNull(dorisExpression0);
    }

    @Test
    public void test26() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisBinaryComparisonOperation.DorisBinaryComparisonOperator dorisBinaryComparisonOperation_DorisBinaryComparisonOperator0 = DorisBinaryComparisonOperation.DorisBinaryComparisonOperator.LESS;
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisConstant_DorisDatetimeConstant0, dorisConstant_DorisDatetimeConstant0,
                dorisBinaryComparisonOperation_DorisBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            dorisBinaryArithmeticOperation0.getOp();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // class sqlancer.doris.ast.DorisBinaryComparisonOperation$DorisBinaryComparisonOperator$3 cannot be cast to
            // class sqlancer.doris.ast.DorisBinaryArithmeticOperation$DorisBinaryArithmeticOperator
            // (sqlancer.doris.ast.DorisBinaryComparisonOperation$DorisBinaryComparisonOperator$3 and
            // sqlancer.doris.ast.DorisBinaryArithmeticOperation$DorisBinaryArithmeticOperator are in unnamed module of
            // loader org.evosuite.instrumentation.InstrumentingClassLoader @16f124c)
            //
            verifyException("sqlancer.doris.ast.DorisBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.CONCAT;
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("CURRENT_TIMESTAMP",
                dorisSchema_DorisCompositeDataType0, false, false);
        DorisColumnValue dorisColumnValue0 = DorisColumnValue.create(dorisSchema_DorisColumn0,
                dorisConstant_DorisDatetimeConstant0);
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisColumnValue0, dorisConstant_DorisDatetimeConstant0,
                dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0);
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation0.getExpectedValue();
        assertNull(dorisConstant0);
    }

    @Test
    public void test28() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_FALSE;
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("CURRENT_TIMESTAMP",
                dorisSchema_DorisCompositeDataType0, true, true);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue(dorisSchema_DorisColumn0,
                dorisConstant_DorisDatetimeConstant0);
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisConstant_DorisDatetimeConstant0, dorisColumnValue0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation0.getExpectedValue();
        assertNull(dorisConstant0);
    }

    @Test
    public void test29() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.MODULO;
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisDatetimeConstant0, dorisConstant_DorisNullConstant0);
        assertFalse(dorisConstant0.isDatetime());
    }

    @Test
    public void test30() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.SUBTRACTION;
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisNullConstant0, dorisConstant_DorisNullConstant0);
        assertNotSame(dorisConstant_DorisNullConstant0, dorisConstant0);
    }

    @Test
    public void test31() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-2193L));
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.RSHIFT;
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisIntConstant0, dorisConstant_DorisIntConstant0);
        assertEquals("-1.0", dorisConstant0.asString());
    }

    @Test
    public void test32() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.RSHIFT;
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(
                (-9223372036854775808L));
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisIntConstant0, dorisConstant_DorisNullConstant0);
        assertFalse(dorisConstant0.isDatetime());
    }

    @Test
    public void test33() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1889L));
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.LSHIFT;
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisIntConstant0, dorisConstant_DorisDatetimeConstant0);
        assertFalse(dorisConstant0.isDatetime());
    }

    @Test
    public void test34() throws Throwable {
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn((String) null,
                dorisSchema_DorisCompositeDataType0, true, true);
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue(dorisSchema_DorisColumn0, dorisConstant0);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.LSHIFT;
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisColumnValue0, dorisColumnValue0, dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0);
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation0.getExpectedValue();
        assertFalse(dorisConstant1.isFloat());
    }

    @Test
    public void test35() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-2193L));
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.BIT_OR;
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisIntConstant0, dorisConstant0);
        assertTrue(dorisConstant1.isNull());
    }

    @Test
    public void test36() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.BIT_OR;
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisDatetimeConstant0, dorisConstant_DorisDatetimeConstant0);
        assertEquals("NULL", dorisConstant0.toString());
    }

    @Test
    public void test37() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(0L);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.BIT_AND;
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisIntConstant0, dorisConstant_DorisDatetimeConstant0);
        assertFalse(dorisConstant0.isFloat());
    }

    @Test
    public void test38() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.BIT_AND;
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisDatetimeConstant0, dorisConstant_DorisDatetimeConstant0);
        assertTrue(dorisConstant0.isNull());
    }

    @Test
    public void test39() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.CONCAT;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisBooleanConstant0, dorisConstant_DorisBooleanConstant0);
        assertEquals("0.0", dorisConstant0.toString());
    }

    @Test
    public void test40() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.CONCAT;
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisConstant dorisConstant0 = dorisConstant_DorisDatetimeConstant0
                .valueLessThan(dorisConstant_DorisBooleanConstant0);
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = (DorisConstant.DorisFloatConstant) dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant_DorisBooleanConstant0);
        assertEquals(1.0, dorisConstant_DorisFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test41() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.CONCAT;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = (DorisConstant.DorisFloatConstant) dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisBooleanConstant0, dorisConstant_DorisBooleanConstant0);
        dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0.apply(dorisConstant_DorisBooleanConstant0,
                dorisConstant_DorisFloatConstant0);
        assertEquals(1.0, dorisConstant_DorisFloatConstant0.asFloat(), 0.01);
        assertEquals(1.0, dorisConstant_DorisFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test42() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(1L);
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.MODULO;
        DorisConstant dorisConstant1 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant0);
        DorisConstant dorisConstant2 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant0, dorisConstant1);
        assertEquals("0.0", dorisConstant1.toString());
        assertEquals("-1.0", dorisConstant2.asString());
    }

    @Test
    public void test43() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.MULTIPLICATION;
        // Undeclared exception!
        try {
            dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0.apply((DorisConstant) null,
                    dorisConstant_DorisDatetimeConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.ast.DorisBinaryArithmeticOperation$DorisBinaryArithmeticOperator", e);
        }
    }

    @Test
    public void test44() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.CONCAT;
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisDatetimeConstant0, dorisConstant_DorisDatetimeConstant0);
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisConstant0, dorisConstant_DorisDatetimeConstant0,
                dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = dorisBinaryArithmeticOperation0.getExpectedType();
        assertEquals(0, dorisSchema_DorisDataType0.getDecimalPrecision());
    }

    @Test
    public void test45() throws Throwable {
        DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0 = DorisBinaryArithmeticOperation.DorisBinaryArithmeticOperator.DIVISION;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant dorisConstant0 = dorisBinaryArithmeticOperation_DorisBinaryArithmeticOperator0
                .apply(dorisConstant_DorisBooleanConstant0, dorisConstant_DorisBooleanConstant0);
        assertEquals("-1.0", dorisConstant0.toString());
    }
}
