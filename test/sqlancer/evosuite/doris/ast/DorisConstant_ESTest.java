/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 03:03:09 GMT 2025
 */

package sqlancer.evosuite.doris.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.doris.ast.DorisConstant;
import sqlancer.doris.DorisSchema;

public class DorisConstant_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test000() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(0L);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant1 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisBooleanConstant0
                .valueLessThan(dorisConstant0);
        assertFalse(dorisConstant_DorisBooleanConstant1.getValue());
        assertEquals("true", dorisConstant_DorisBooleanConstant0.toString());
    }

    @Test
    public void test001() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-1.0));
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("597");
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0
                .valueLessThan(dorisConstant_DorisFloatConstant0);
        assertFalse(dorisConstant0.isString());
        assertFalse(dorisConstant0.asBoolean());
        assertEquals((-1.0), dorisConstant_DorisFloatConstant0.asFloat(), 0.01);
    }

    @Test
    public void test002() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(0.0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = (DorisConstant.DorisTextConstant) dorisConstant_DorisFloatConstant0
                .cast(dorisSchema_DorisDataType0);
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant1 = new DorisConstant.DorisTextConstant(
                "Wk@2m.1CR1t");
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisTextConstant1
                .valueLessThan(dorisConstant_DorisTextConstant0);
        assertTrue(dorisConstant_DorisTextConstant1.isString());
        assertEquals("false", dorisConstant_DorisBooleanConstant0.asString());
        assertEquals("0.0", dorisConstant_DorisTextConstant0.getValue());
    }

    @Test
    public void test003() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1338L));
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = (DorisConstant.DorisTextConstant) dorisConstant_DorisBooleanConstant0
                .cast(dorisSchema_DorisDataType0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant1 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisTextConstant0
                .valueEquals(dorisConstant_DorisIntConstant0);
        assertEquals((-1338.0), dorisConstant_DorisIntConstant0.asFloat(), 0.01);
        assertEquals("false", dorisConstant_DorisBooleanConstant1.toString());
        assertEquals("0", dorisConstant_DorisTextConstant0.getValue());
        assertFalse(dorisConstant_DorisBooleanConstant1.isString());
    }

    @Test
    public void test004() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createFloatConstant((-845.5197915609318));
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                4684L);
        DorisConstant dorisConstant1 = dorisConstant_DorisFloatConstant0.valueLessThan(dorisConstant0);
        assertEquals((-845.5197915609318), dorisConstant0.asFloat(), 0.01);
        assertFalse(dorisConstant1.asBoolean());
    }

    @Test
    public void test005() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(0L);
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                1266.388889524);
        DorisConstant dorisConstant1 = dorisConstant_DorisFloatConstant0.valueLessThan(dorisConstant0);
        assertEquals("false", dorisConstant1.toString());
    }

    @Test
    public void test006() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                2143.8443);
        DorisConstant dorisConstant0 = DorisConstant.createFloatConstant((-844.73));
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisFloatConstant0
                .valueEquals(dorisConstant0);
        assertFalse(dorisConstant_DorisBooleanConstant0.getValue());
        assertEquals((-844.73), dorisConstant0.asFloat(), 0.01);
    }

    @Test
    public void test007() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1338L));
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.POSITIVE_INFINITY);
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.valueEquals(dorisConstant_DorisIntConstant0);
        DorisConstant dorisConstant1 = dorisConstant0.valueEquals(dorisConstant_DorisFloatConstant0);
        assertEquals(Double.POSITIVE_INFINITY, dorisConstant_DorisFloatConstant0.asFloat(), 0.01);
        assertEquals("false", dorisConstant0.asString());
        assertEquals("false", dorisConstant1.toString());
        assertEquals((-1338L), dorisConstant_DorisIntConstant0.asInt());
    }

    @Test
    public void test008() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.POSITIVE_INFINITY);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisFloatConstant0
                .cast(dorisSchema_DorisDataType0);
        assertTrue(dorisConstant_DorisBooleanConstant0.getValue());
    }

    @Test
    public void test009() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(1715L);
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant((-1L));
        DorisConstant dorisConstant1 = dorisConstant_DorisIntConstant0.valueLessThan(dorisConstant0);
        assertEquals((-1.0), dorisConstant0.asFloat(), 0.01);
        assertFalse(dorisConstant1.asBoolean());
    }

    @Test
    public void test010() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                2143.8443);
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(2424L);
        DorisConstant dorisConstant1 = dorisConstant0.valueEquals(dorisConstant_DorisFloatConstant0);
        assertEquals(2143.8443, dorisConstant_DorisFloatConstant0.asFloat(), 0.01);
        assertFalse(dorisConstant1.asBoolean());
        assertEquals(2424.0, dorisConstant0.asFloat(), 0.01);
    }

    @Test
    public void test011() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-955L));
        DorisConstant dorisConstant0 = dorisConstant_DorisIntConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("true", dorisConstant0.toString());
        assertEquals("-955", dorisConstant_DorisIntConstant0.asString());
    }

    @Test
    public void test012() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1338L));
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        dorisConstant_DorisIntConstant0.valueLessThan(dorisConstant0);
        assertEquals((-1338L), dorisConstant_DorisIntConstant0.asInt());
    }

    @Test
    public void test013() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        dorisConstant_DorisBooleanConstant0.valueEquals(dorisConstant0);
        assertEquals("true", dorisConstant_DorisBooleanConstant0.toString());
    }

    @Test
    public void test014() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "|'tF(%c");
        String string0 = dorisConstant_DorisTextConstant0.toString();
        assertEquals("'|\\'tF(%c'", string0);
    }

    @Test
    public void test015() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                (String) null);
        boolean boolean0 = dorisConstant_DorisTextConstant0.isString();
        assertTrue(boolean0);
    }

    @Test
    public void test016() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "|Va4*_aje-5`bsi");
        String string0 = dorisConstant_DorisTextConstant0.asString();
        assertEquals("|Va4*_aje-5`bsi", string0);
    }

    @Test
    public void test017() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant(0L);
        DorisConstant dorisConstant1 = dorisConstant_DorisNullConstant0.valueLessThan(dorisConstant0);
        assertFalse(dorisConstant1.isInt());
    }

    @Test
    public void test018() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant(
                "sqlancer.doris.ast.DorisConstant$DorisBooleanConstant");
        DorisConstant dorisConstant0 = dorisConstant_DorisNullConstant0
                .valueEquals(dorisConstant_DorisDatetimeConstant0);
        assertFalse(dorisConstant0.isDate());
    }

    @Test
    public void test019() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        boolean boolean0 = dorisConstant_DorisNullConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test020() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        DorisConstant dorisConstant0 = dorisConstant_DorisNullConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(DorisSchema.DorisDataType.NULL, dorisConstant0.getExpectedType());
    }

    @Test
    public void test021() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(0L);
        // Undeclared exception!
        try {
            dorisConstant_DorisIntConstant0.valueLessThan(dorisConstant_DorisBooleanConstant0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisBooleanConstant@0000000001
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test022() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(0L);
        boolean boolean0 = dorisConstant_DorisIntConstant0.isNum();
        assertTrue(boolean0);
    }

    @Test
    public void test023() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(462L);
        dorisConstant_DorisIntConstant0.isInt();
        assertEquals("462", dorisConstant_DorisIntConstant0.toString());
    }

    @Test
    public void test024() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(597L);
        String string0 = dorisConstant_DorisIntConstant0.asString();
        assertEquals("597", string0);
    }

    @Test
    public void test025() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant((-1004L));
        long long0 = dorisConstant0.asInt();
        assertEquals((-1004L), long0);
    }

    @Test
    public void test026() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1338L));
        double double0 = dorisConstant_DorisIntConstant0.asFloat();
        assertEquals((-1338.0), double0, 0.01);
    }

    @Test
    public void test027() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1L));
        boolean boolean0 = dorisConstant_DorisIntConstant0.asBoolean();
        assertEquals("-1", dorisConstant_DorisIntConstant0.asString());
        assertTrue(boolean0);
    }

    @Test
    public void test028() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.POSITIVE_INFINITY);
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0
                .valueLessThan(dorisConstant_DorisFloatConstant0);
        assertEquals(Double.POSITIVE_INFINITY, dorisConstant_DorisFloatConstant0.asFloat(), 0.01);
        assertEquals("false", dorisConstant0.toString());
    }

    @Test
    public void test029() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                3105.4891419);
        dorisConstant_DorisFloatConstant0.isNum();
        assertEquals("3105.4891419", dorisConstant_DorisFloatConstant0.asString());
    }

    @Test
    public void test030() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = (DorisConstant.DorisFloatConstant) DorisConstant
                .createFloatConstant(0.0);
        dorisConstant_DorisFloatConstant0.isFloat();
        assertEquals(0.0, dorisConstant_DorisFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test031() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-3557.35514612));
        double double0 = dorisConstant_DorisFloatConstant0.asFloat();
        assertEquals((-3557.35514612), double0, 0.01);
    }

    @Test
    public void test032() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        String string0 = ((DorisConstant.DorisDatetimeConstant) dorisConstant0).toString();
        assertEquals("TIMESTAMP 'CURRENT_TIMESTAMP'", string0);
    }

    @Test
    public void test033() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant(
                "\"%HV,/(hUX&+u=OYT");
        boolean boolean0 = dorisConstant_DorisDatetimeConstant0.isDatetime();
        assertTrue(boolean0);
    }

    @Test
    public void test034() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant(
                "sqlancer.doris.ast.DorisConstant$DorisBooleanConstant");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        DorisConstant dorisConstant0 = dorisConstant_DorisDatetimeConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant0.isNull());
    }

    @Test
    public void test035() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant(
                "");
        String string0 = dorisConstant_DorisDatetimeConstant0.asString();
        assertEquals("", string0);
    }

    @Test
    public void test036() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant(1L);
        String string0 = dorisConstant_DorisDateConstant0.toString();
        assertEquals("DATE '1970-01-01'", string0);
    }

    @Test
    public void test037() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant("");
        boolean boolean0 = dorisConstant0.isDate();
        assertTrue(boolean0);
    }

    @Test
    public void test038() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant(
                "yyyy-MM-dd");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        DorisConstant dorisConstant0 = dorisConstant_DorisDateConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant0.isDatetime());
    }

    @Test
    public void test039() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant("");
        String string0 = dorisConstant0.asString();
        assertEquals("", string0);
    }

    @Test
    public void test040() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(0L);
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0
                .valueLessThan(dorisConstant_DorisIntConstant0);
        assertEquals("false", dorisConstant_DorisBooleanConstant0.asString());
        assertTrue(dorisConstant0.asBoolean());
    }

    @Test
    public void test041() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant dorisConstant0 = DorisConstant.createStringConstant("WI)A$V{C3je&R");
        // Undeclared exception!
        try {
            dorisConstant_DorisBooleanConstant0.valueEquals(dorisConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 'WI)A$V{C3je&R'
            //
        }
    }

    @Test
    public void test042() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant(0L);
        DorisConstant dorisConstant1 = DorisConstant.createDatetimeConstant((-1004L));
        DorisConstant dorisConstant2 = dorisConstant1.valueLessThan(dorisConstant0);
        String string0 = ((DorisConstant.DorisBooleanConstant) dorisConstant2).toString();
        assertFalse(dorisConstant2.isString());
        assertFalse(dorisConstant2.isDatetime());
        assertEquals("true", string0);
    }

    @Test
    public void test043() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        boolean boolean0 = dorisConstant_DorisBooleanConstant0.isNum();
        assertEquals("true", dorisConstant_DorisBooleanConstant0.toString());
        assertTrue(boolean0);
    }

    @Test
    public void test044() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        dorisConstant_DorisBooleanConstant0.isBoolean();
        assertEquals("false", dorisConstant_DorisBooleanConstant0.toString());
    }

    @Test
    public void test045() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        String string0 = dorisConstant_DorisBooleanConstant0.asString();
        assertEquals("false", string0);
    }

    @Test
    public void test046() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant(0L);
        DorisConstant dorisConstant1 = DorisConstant.createDatetimeConstant((-1004L));
        DorisConstant dorisConstant2 = dorisConstant1.valueLessThan(dorisConstant0);
        boolean boolean0 = dorisConstant2.asBoolean();
        assertFalse(dorisConstant2.isDatetime());
        assertTrue(boolean0);
        assertFalse(dorisConstant2.isString());
    }

    @Test
    public void test047() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "|'tF(%c");
        boolean boolean0 = dorisConstant_DorisTextConstant0.isString();
        assertTrue(boolean0);
    }

    @Test
    public void test048() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1338L));
        dorisConstant_DorisIntConstant0.isNum();
        assertEquals("-1338", dorisConstant_DorisIntConstant0.toString());
    }

    @Test
    public void test049() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        boolean boolean0 = dorisConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test050() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1338L));
        dorisConstant_DorisIntConstant0.isInt();
        assertEquals((-1338.0), dorisConstant_DorisIntConstant0.asFloat(), 0.01);
    }

    @Test
    public void test051() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                2143.8443);
        dorisConstant_DorisFloatConstant0.isFloat();
        assertEquals(2143.8443, dorisConstant_DorisFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test052() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant("'");
        boolean boolean0 = dorisConstant0.isDate();
        assertTrue(boolean0);
    }

    @Test
    public void test053() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "yyyy-MM-dd");
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant(
                "yyyy-MM-dd");
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.valueEquals(dorisConstant_DorisDateConstant0);
        dorisConstant0.isBoolean();
        assertEquals("false", dorisConstant0.toString());
    }

    @Test
    public void test054() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant((String) null);
        String string0 = dorisConstant0.asString();
        assertNull(string0);
    }

    @Test
    public void test055() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("");
        String string0 = dorisConstant_DorisTextConstant0.asString();
        assertEquals("", string0);
    }

    @Test
    public void test056() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(0L);
        long long0 = dorisConstant0.asInt();
        assertEquals(0L, long0);
    }

    @Test
    public void test057() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(1569L);
        long long0 = dorisConstant_DorisIntConstant0.asInt();
        assertEquals(1569L, long0);
    }

    @Test
    public void test058() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant((-3160L));
        long long0 = dorisConstant0.asInt();
        assertEquals((-3160L), long0);
    }

    @Test
    public void test059() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(597L);
        double double0 = dorisConstant_DorisIntConstant0.asFloat();
        assertEquals(597.0, double0, 0.01);
    }

    @Test
    public void test060() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1326L));
        double double0 = dorisConstant_DorisIntConstant0.asFloat();
        assertEquals((-1326.0), double0, 0.01);
    }

    @Test
    public void test061() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        // Undeclared exception!
        try {
            dorisConstant_DorisDatetimeConstant0.valueLessThan((DorisConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.ast.DorisConstant$DorisDatetimeConstant", e);
        }
    }

    @Test
    public void test062() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        // Undeclared exception!
        try {
            dorisConstant0.valueEquals((DorisConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.ast.DorisConstant$DorisDatetimeConstant", e);
        }
    }

    @Test
    public void test063() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant("DATE '%s'");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        // Undeclared exception!
        try {
            dorisConstant0.cast(dorisSchema_DorisDataType0);
            fail("Expecting exception: StringIndexOutOfBoundsException");

        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test064() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant((String) null);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        // Undeclared exception!
        try {
            dorisConstant0.cast(dorisSchema_DorisDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.utils.DorisNumberUtils", e);
        }
    }

    @Test
    public void test065() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        boolean boolean0 = dorisConstant_DorisNullConstant0.isDatetime();
        assertFalse(boolean0);
    }

    @Test
    public void test066() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createBooleanConstant(false);
        boolean boolean0 = dorisConstant0.isDate();
        assertFalse(boolean0);
        assertEquals("false", dorisConstant0.toString());
    }

    @Test
    public void test067() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        // Undeclared exception!
        try {
            dorisConstant_DorisDatetimeConstant0.asFloat();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisDatetimeConstant@0000000001
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test068() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant
                .createDateConstant("sqlancer.doris.ast.DorisConstant$DorisNullConstant");
        boolean boolean0 = dorisConstant0.isNum();
        assertFalse(boolean0);
    }

    @Test
    public void test069() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant(1468L);
        boolean boolean0 = dorisConstant_DorisDateConstant0.isFloat();
        assertFalse(boolean0);
        assertEquals("1970-01-01", dorisConstant_DorisDateConstant0.getValue());
    }

    @Test
    public void test070() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant("");
        boolean boolean0 = dorisConstant0.isInt();
        assertFalse(boolean0);
    }

    @Test
    public void test071() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(0L);
        dorisConstant_DorisFloatConstant0.isBoolean();
        assertEquals("0.0", dorisConstant_DorisFloatConstant0.asString());
    }

    @Test
    public void test072() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-3557.35514612));
        dorisConstant_DorisFloatConstant0.isNull();
        assertEquals((-3557.35514612), dorisConstant_DorisFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test073() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        boolean boolean0 = dorisConstant0.isString();
        assertFalse(boolean0);
        assertEquals("CURRENT_TIMESTAMP", dorisConstant0.asString());
    }

    @Test
    public void test074() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createBooleanConstant(false);
        DorisConstant dorisConstant1 = DorisConstant.createIntConstant(2132L);
        DorisConstant dorisConstant2 = dorisConstant0.valueLessThan(dorisConstant1);
        assertEquals("false", dorisConstant2.asString());
        assertEquals(2132.0, dorisConstant1.asFloat(), 0.01);
    }

    @Test
    public void test075() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        // Undeclared exception!
        try {
            dorisConstant_DorisBooleanConstant0.valueLessThan(dorisConstant0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisTextConstant@0000000002
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test076() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisConstant dorisConstant1 = DorisConstant.createBooleanConstant(true);
        dorisConstant1.valueLessThan(dorisConstant0);
        assertEquals("true", dorisConstant1.toString());
    }

    @Test
    public void test077() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        // Undeclared exception!
        try {
            dorisConstant_DorisBooleanConstant0.valueEquals(dorisConstant0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisTextConstant@0000000002
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test078() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant1 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisBooleanConstant0
                .valueEquals(dorisConstant0);
        assertTrue(dorisConstant_DorisBooleanConstant1.getValue());
    }

    @Test
    public void test079() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant1 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0
                .valueEquals(dorisConstant_DorisBooleanConstant1);
        assertFalse(dorisConstant0.asBoolean());
    }

    @Test
    public void test080() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant dorisConstant0 = dorisConstant_DorisDatetimeConstant0
                .valueLessThan(dorisConstant_DorisDatetimeConstant0);
        DorisConstant dorisConstant1 = dorisConstant0.valueEquals(dorisConstant0);
        assertEquals("false", dorisConstant0.toString());
        assertEquals("true", dorisConstant1.toString());
        assertEquals("CURRENT_TIMESTAMP", dorisConstant_DorisDatetimeConstant0.asString());
        assertTrue(dorisConstant_DorisDatetimeConstant0.isDatetime());
    }

    @Test
    public void test081() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisConstant dorisConstant1 = DorisConstant.createBooleanConstant(true);
        dorisConstant1.valueEquals(dorisConstant0);
        assertEquals("true", dorisConstant1.toString());
    }

    @Test
    public void test082() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createBooleanConstant(false);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(0L, dorisConstant1.asInt());
    }

    @Test
    public void test083() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant dorisConstant0 = dorisConstant_DorisDatetimeConstant0
                .valueLessThan(dorisConstant_DorisDatetimeConstant0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.NULL;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("false", dorisConstant0.toString());
        assertEquals("CURRENT_TIMESTAMP", dorisConstant_DorisDatetimeConstant0.asString());
        assertNull(dorisConstant1);
        assertTrue(dorisConstant_DorisDatetimeConstant0.isDatetime());
    }

    @Test
    public void test084() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant_DorisBooleanConstant0.getValue());
    }

    @Test
    public void test085() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("true", dorisConstant_DorisBooleanConstant0.toString());
    }

    @Test
    public void test086() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createBooleanConstant(true);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DECIMAL;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(1.0, dorisConstant1.asFloat(), 0.01);
    }

    @Test
    public void test087() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = dorisConstant0.valueLessThan(dorisConstant0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.FLOAT;
        DorisConstant dorisConstant2 = dorisConstant1.cast(dorisSchema_DorisDataType0);
        assertEquals(0.0, dorisConstant2.asFloat(), 0.01);
        assertTrue(dorisConstant0.isDatetime());
        assertEquals("CURRENT_TIMESTAMP", dorisConstant0.asString());
    }

    @Test
    public void test088() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant dorisConstant1 = dorisConstant_DorisBooleanConstant0.valueLessThan(dorisConstant0);
        assertEquals("true", dorisConstant1.asString());
    }

    @Test
    public void test089() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "CURRENT_TIMESTAMP");
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant0
                .valueLessThan(dorisConstant_DorisTextConstant0);
        assertFalse(dorisConstant_DorisBooleanConstant0.isDatetime());
        assertTrue(dorisConstant_DorisTextConstant0.isString());
        assertFalse(dorisConstant_DorisBooleanConstant0.getValue());
    }

    @Test
    public void test090() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = (DorisConstant.DorisDatetimeConstant) DorisConstant
                .createDatetimeConstant();
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant1 = new DorisConstant.DorisDatetimeConstant(
                "R!hXK<IYZ7B");
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisDatetimeConstant1
                .valueLessThan(dorisConstant_DorisDatetimeConstant0);
        assertEquals("CURRENT_TIMESTAMP", dorisConstant_DorisDatetimeConstant0.getValue());
        assertTrue(dorisConstant_DorisDatetimeConstant1.isDatetime());
        assertEquals("false", dorisConstant_DorisBooleanConstant0.asString());
    }

    @Test
    public void test091() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant(
                142L);
        DorisConstant dorisConstant1 = dorisConstant0.valueLessThan(dorisConstant_DorisDatetimeConstant0);
        assertTrue(dorisConstant_DorisDatetimeConstant0.isDatetime());
        assertEquals("false", dorisConstant1.toString());
        assertEquals("1970-01-01 00:00:00", dorisConstant_DorisDatetimeConstant0.getValue());
    }

    @Test
    public void test092() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant(35L);
        DorisConstant dorisConstant1 = dorisConstant0.valueLessThan(dorisConstant0);
        assertTrue(dorisConstant0.isDatetime());
        assertEquals("1970-01-01 00:00:00", dorisConstant0.asString());
        assertFalse(dorisConstant1.isDate());
        assertFalse(dorisConstant1.isString());
        assertEquals("false", dorisConstant1.toString());
    }

    @Test
    public void test093() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        dorisConstant_DorisDatetimeConstant0.valueLessThan(dorisConstant0);
        assertEquals("CURRENT_TIMESTAMP", dorisConstant_DorisDatetimeConstant0.asString());
    }

    @Test
    public void test094() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = DorisConstant.createDateConstant("CURRENT_TIMESTAMP");
        DorisConstant dorisConstant2 = dorisConstant0.valueEquals(dorisConstant1);
        assertFalse(dorisConstant2.isDatetime());
        assertFalse(dorisConstant2.isString());
        assertEquals("true", dorisConstant2.toString());
    }

    @Test
    public void test095() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = (DorisConstant.DorisDatetimeConstant) DorisConstant
                .createDatetimeConstant();
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant1 = new DorisConstant.DorisDatetimeConstant(
                142L);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisDatetimeConstant1
                .valueEquals(dorisConstant_DorisDatetimeConstant0);
        assertEquals("1970-01-01 00:00:00", dorisConstant_DorisDatetimeConstant1.asString());
        assertTrue(dorisConstant_DorisDatetimeConstant1.isDatetime());
        assertFalse(dorisConstant_DorisBooleanConstant0.asBoolean());
        assertEquals("CURRENT_TIMESTAMP", dorisConstant_DorisDatetimeConstant0.getValue());
    }

    @Test
    public void test096() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = DorisConstant.createDatetimeConstant(0L);
        DorisConstant dorisConstant2 = dorisConstant0.valueEquals(dorisConstant1);
        assertTrue(dorisConstant1.isDatetime());
        assertEquals("CURRENT_TIMESTAMP", dorisConstant0.asString());
        assertFalse(dorisConstant2.asBoolean());
    }

    @Test
    public void test097() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = (DorisConstant.DorisDatetimeConstant) DorisConstant
                .createDatetimeConstant(4268L);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisDatetimeConstant0
                .valueEquals(dorisConstant_DorisDatetimeConstant0);
        assertFalse(dorisConstant_DorisBooleanConstant0.isString());
        assertEquals("1970-01-01 00:00:04", dorisConstant_DorisDatetimeConstant0.getValue());
        assertFalse(dorisConstant_DorisBooleanConstant0.isDate());
        assertTrue(dorisConstant_DorisBooleanConstant0.asBoolean());
    }

    @Test
    public void test098() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "CURRENT_TIMESTAMP");
        DorisConstant dorisConstant1 = dorisConstant0.valueEquals(dorisConstant_DorisTextConstant0);
        assertFalse(dorisConstant1.isDatetime());
        assertTrue(dorisConstant1.asBoolean());
    }

    @Test
    public void test099() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        dorisConstant_DorisDatetimeConstant0.valueEquals(dorisConstant0);
        assertEquals("CURRENT_TIMESTAMP", dorisConstant_DorisDatetimeConstant0.getValue());
    }

    @Test
    public void test100() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        dorisConstant_DorisDatetimeConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("CURRENT_TIMESTAMP", dorisConstant_DorisDatetimeConstant0.asString());
    }

    @Test
    public void test101() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("CURRENT_TIMESTAMP", dorisConstant1.asString());
    }

    @Test
    public void test102() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = (DorisConstant.DorisDatetimeConstant) dorisConstant0
                .cast(dorisSchema_DorisDataType0);
        assertEquals("CURRENT_TIMESTAMP", dorisConstant_DorisDatetimeConstant0.getValue());
    }

    @Test
    public void test103() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant(2690L);
        DorisConstant dorisConstant1 = dorisConstant0.valueLessThan(dorisConstant0);
        assertTrue(dorisConstant0.isDate());
        assertFalse(dorisConstant1.isString());
        assertEquals("false", dorisConstant1.toString());
        assertEquals("1970-01-01", dorisConstant0.asString());
        assertFalse(dorisConstant1.isDatetime());
    }

    @Test
    public void test104() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant("t!");
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("t!");
        DorisConstant dorisConstant1 = dorisConstant0.valueLessThan(dorisConstant_DorisTextConstant0);
        assertFalse(dorisConstant1.asBoolean());
        assertFalse(dorisConstant1.isDatetime());
        assertTrue(dorisConstant_DorisTextConstant0.isString());
    }

    @Test
    public void test105() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = DorisConstant.createDateConstant("CURRENT_TIMESTAMP");
        DorisConstant dorisConstant2 = dorisConstant1.valueLessThan(dorisConstant0);
        assertTrue(dorisConstant0.isDatetime());
        assertFalse(dorisConstant2.asBoolean());
        assertEquals("CURRENT_TIMESTAMP", dorisConstant0.asString());
    }

    @Test
    public void test106() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant((-672L));
        DorisConstant dorisConstant0 = DorisConstant.createBooleanConstant(false);
        DorisConstant dorisConstant1 = dorisConstant_DorisDateConstant0.valueLessThan(dorisConstant0);
        assertEquals("1969-12-31", dorisConstant_DorisDateConstant0.getValue());
        assertEquals("false", dorisConstant1.asString());
    }

    @Test
    public void test107() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant("");
        DorisConstant dorisConstant1 = DorisConstant.createNullConstant();
        DorisConstant dorisConstant2 = dorisConstant0.valueLessThan(dorisConstant1);
        assertFalse(dorisConstant2.isDatetime());
    }

    @Test
    public void test108() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant("1");
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant("1");
        DorisConstant dorisConstant1 = dorisConstant_DorisDateConstant0.valueLessThan(dorisConstant0);
        assertFalse(dorisConstant1.isString());
        assertTrue(dorisConstant0.isDatetime());
        assertFalse(dorisConstant1.isDate());
        assertFalse(dorisConstant1.asBoolean());
    }

    @Test
    public void test109() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant("");
        DorisConstant dorisConstant1 = dorisConstant0.valueEquals(dorisConstant0);
        DorisConstant dorisConstant2 = dorisConstant0.valueEquals(dorisConstant1);
        assertFalse(dorisConstant2.isString());
        assertFalse(dorisConstant2.isDatetime());
        assertEquals("true", dorisConstant1.asString());
        assertEquals("false", dorisConstant2.toString());
        assertFalse(dorisConstant2.isDate());
    }

    @Test
    public void test110() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = (DorisConstant.DorisDateConstant) DorisConstant
                .createDateConstant((-2628L));
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisDateConstant0
                .valueEquals(dorisConstant0);
        assertTrue(dorisConstant0.isDatetime());
        assertEquals("1969-12-31", dorisConstant_DorisDateConstant0.getValue());
        assertEquals("false", dorisConstant_DorisBooleanConstant0.toString());
        assertEquals("CURRENT_TIMESTAMP", dorisConstant0.asString());
    }

    @Test
    public void test111() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant(1L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = (DorisConstant.DorisTextConstant) dorisConstant_DorisDateConstant0
                .cast(dorisSchema_DorisDataType0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisDateConstant0
                .valueEquals(dorisConstant_DorisTextConstant0);
        assertFalse(dorisConstant_DorisBooleanConstant0.isDatetime());
        assertTrue(dorisConstant_DorisBooleanConstant0.asBoolean());
        assertEquals("1970-01-01", dorisConstant_DorisTextConstant0.getValue());
    }

    @Test
    public void test112() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisConstant dorisConstant1 = DorisConstant.createDateConstant("0i:+/^/c#cI-Q");
        DorisConstant dorisConstant2 = dorisConstant1.valueEquals(dorisConstant0);
        assertFalse(dorisConstant2.isString());
    }

    @Test
    public void test113() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant(
                "NfVpj'34SQ<he|e;N");
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant(
                "NfVpj'34SQ<he|e;N");
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisDateConstant0
                .valueEquals(dorisConstant_DorisDatetimeConstant0);
        assertFalse(dorisConstant_DorisBooleanConstant0.isDate());
        assertFalse(dorisConstant_DorisBooleanConstant0.isString());
        assertTrue(dorisConstant_DorisBooleanConstant0.getValue());
    }

    @Test
    public void test114() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant("'");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisDateConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant0.isDatetime());
    }

    @Test
    public void test115() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant(1L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        DorisConstant dorisConstant0 = dorisConstant_DorisDateConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("1970-01-01 00:00:00", dorisConstant0.asString());
    }

    @Test
    public void test116() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDateConstant("");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant1.isBoolean());
    }

    @Test
    public void test117() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("1");
        DorisConstant dorisConstant1 = dorisConstant_DorisTextConstant0.valueLessThan(dorisConstant0);
        DorisConstant dorisConstant2 = dorisConstant0.valueEquals(dorisConstant1);
        assertFalse(dorisConstant2.isDate());
        assertFalse(dorisConstant2.isDatetime());
        assertEquals("CURRENT_TIMESTAMP", dorisConstant0.asString());
        assertEquals("false", dorisConstant1.asString());
        assertEquals("false", dorisConstant2.asString());
    }

    @Test
    public void test118() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(0.0);
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("");
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0
                .valueLessThan(dorisConstant_DorisFloatConstant0);
        assertEquals(0.0, dorisConstant_DorisFloatConstant0.getValue(), 0.01);
        assertFalse(dorisConstant0.asBoolean());
    }

    @Test
    public void test119() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1742L));
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant1 = (DorisConstant.DorisTextConstant) dorisConstant_DorisIntConstant0
                .cast(dorisSchema_DorisDataType0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisTextConstant0
                .valueLessThan(dorisConstant_DorisTextConstant1);
        assertEquals("true", dorisConstant_DorisBooleanConstant0.toString());
        assertEquals("-1742", dorisConstant_DorisTextConstant1.getValue());
    }

    @Test
    public void test120() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("");
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.valueLessThan(dorisConstant_DorisTextConstant0);
        assertEquals("false", dorisConstant0.toString());
        assertTrue(dorisConstant_DorisTextConstant0.isString());
    }

    @Test
    public void test121() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("`i");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant dorisConstant1 = dorisConstant_DorisTextConstant0.valueLessThan(dorisConstant0);
        assertFalse(dorisConstant1.isDate());
    }

    @Test
    public void test122() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(0L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = (DorisConstant.DorisTextConstant) dorisConstant_DorisBooleanConstant0
                .cast(dorisSchema_DorisDataType0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant1 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisTextConstant0
                .valueEquals(dorisConstant_DorisIntConstant0);
        assertFalse(dorisConstant_DorisBooleanConstant1.isString());
        assertEquals("0", dorisConstant_DorisTextConstant0.getValue());
        assertEquals("true", dorisConstant_DorisBooleanConstant1.toString());
    }

    @Test
    public void test123() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant dorisConstant1 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant1.isNum());

        DorisConstant dorisConstant2 = dorisConstant1.valueEquals(dorisConstant0);
        assertFalse(dorisConstant2.isString());
        assertEquals("false", dorisConstant2.asString());
        assertEquals("1", dorisConstant1.asString());
        assertEquals("CURRENT_TIMESTAMP", dorisConstant0.asString());
    }

    @Test
    public void test124() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("");
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.valueEquals(dorisConstant_DorisTextConstant0);
        // Undeclared exception!
        try {
            dorisConstant0.valueLessThan(dorisConstant_DorisTextConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // ''
            //
        }
    }

    @Test
    public void test125() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                (String) null);
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.valueEquals(dorisConstant_DorisNullConstant0);
        assertTrue(dorisConstant0.isNull());
    }

    @Test
    public void test126() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("true");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("true", dorisConstant0.toString());
    }

    @Test
    public void test127() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("'");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(DorisSchema.DorisDataType.NULL, dorisConstant0.getExpectedType());
    }

    @Test
    public void test128() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "CURRENT_TIMESTAMP");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant0.isDate());
    }

    @Test
    public void test129() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "CURRENT_TIMESTAMP");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DECIMAL;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant0.isFloat());
    }

    @Test
    public void test130() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("1");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(1.0, dorisConstant0.asFloat(), 0.01);
    }

    @Test
    public void test131() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("1");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.NULL;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant0.isString());
    }

    @Test
    public void test132() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "CURRENT_TIMESTAMP");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        assertSame(dorisConstant0, dorisConstant_DorisTextConstant0);
    }

    @Test
    public void test133() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant(1L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant dorisConstant0 = dorisConstant_DorisDateConstant0.cast(dorisSchema_DorisDataType0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType1 = DorisSchema.DorisDataType.DATE;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType1);
        assertEquals("1970-01-01", dorisConstant1.asString());
    }

    @Test
    public void test134() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("1");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DECIMAL;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("1.0", dorisConstant0.asString());
    }

    @Test
    public void test135() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        DorisSchema.DorisDataType dorisSchema_DorisDataType1 = DorisSchema.DorisDataType.FLOAT;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType1);
        assertEquals("0.0", dorisConstant1.asString());
        assertEquals("0", dorisConstant0.asString());
    }

    @Test
    public void test136() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.NEGATIVE_INFINITY);
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant1 = new DorisConstant.DorisFloatConstant(
                (-2429.8080698498634));
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0
                .valueLessThan(dorisConstant_DorisFloatConstant1);
        assertEquals((-2429.8080698498634), dorisConstant_DorisFloatConstant1.asFloat(), 0.01);
        assertEquals("true", dorisConstant0.toString());
    }

    @Test
    public void test137() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.NEGATIVE_INFINITY);
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(2940L);
        DorisConstant dorisConstant1 = dorisConstant_DorisFloatConstant0.valueLessThan(dorisConstant0);
        assertEquals(2940L, dorisConstant0.asInt());
        assertEquals("true", dorisConstant1.toString());
    }

    @Test
    public void test138() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisConstant dorisConstant1 = DorisConstant.createFloatConstant((-1101.0));
        dorisConstant1.valueLessThan(dorisConstant0);
        assertEquals("-1101.0", dorisConstant1.toString());
    }

    @Test
    public void test139() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.NEGATIVE_INFINITY);
        DorisConstant dorisConstant0 = DorisConstant.createFloatConstant(0.0);
        DorisConstant dorisConstant1 = dorisConstant_DorisFloatConstant0.valueEquals(dorisConstant0);
        assertEquals(0.0, dorisConstant0.asFloat(), 0.01);
        assertEquals("true", dorisConstant1.asString());
    }

    @Test
    public void test140() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createFloatConstant(1248.1294593845892);
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        // Undeclared exception!
        try {
            dorisConstant0.valueEquals(dorisConstant_DorisDatetimeConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP 'CURRENT_TIMESTAMP'
            //
        }
    }

    @Test
    public void test141() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-733.651210722895));
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(155L);
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.valueEquals(dorisConstant_DorisIntConstant0);
        assertEquals((-733.651210722895), dorisConstant_DorisFloatConstant0.asFloat(), 0.01);
        assertEquals(155L, dorisConstant_DorisIntConstant0.asInt());
        assertEquals("false", dorisConstant0.toString());
    }

    @Test
    public void test142() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.NEGATIVE_INFINITY);
        assertTrue(dorisConstant_DorisFloatConstant0.isFloat());
        assertFalse(dorisConstant_DorisFloatConstant0.isInt());

        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.valueEquals(dorisConstant_DorisFloatConstant0);
        assertEquals("-3.40282347e+38", dorisConstant_DorisFloatConstant0.asString());
        assertEquals("false", dorisConstant0.asString());
    }

    @Test
    public void test143() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-3518.9));
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant_DorisFloatConstant0.isBoolean());

        DorisConstant dorisConstant1 = dorisConstant0.valueEquals(dorisConstant_DorisFloatConstant0);
        assertFalse(dorisConstant1.asBoolean());
        assertFalse(dorisConstant0.asBoolean());
        assertEquals((-3518.9), dorisConstant_DorisFloatConstant0.asFloat(), 0.01);
    }

    @Test
    public void test144() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.NEGATIVE_INFINITY);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.NULL;
        dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("-3.40282347e+38", dorisConstant_DorisFloatConstant0.asString());
    }

    @Test
    public void test145() throws Throwable {
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(1.0);
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("true", dorisConstant0.asString());
    }

    @Test
    public void test146() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-2211.0));
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("-2211.0", dorisConstant_DorisFloatConstant0.toString());
    }

    @Test
    public void test147() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.NEGATIVE_INFINITY);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DECIMAL;
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(Double.NEGATIVE_INFINITY, dorisConstant0.asFloat(), 0.01);
    }

    @Test
    public void test148() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.NEGATIVE_INFINITY);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.FLOAT;
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(Double.NEGATIVE_INFINITY, dorisConstant0.asFloat(), 0.01);
    }

    @Test
    public void test149() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-390.30466034258));
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("-390.30466034258", dorisConstant_DorisFloatConstant0.asString());
    }

    @Test
    public void test150() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-3302.81497646));
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals((-3302L), dorisConstant0.asInt());
    }

    @Test
    public void test151() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(0.0);
        String string0 = dorisConstant_DorisFloatConstant0.toString();
        assertEquals("0.0", string0);
    }

    @Test
    public void test152() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.POSITIVE_INFINITY);
        String string0 = dorisConstant_DorisFloatConstant0.toString();
        assertEquals("3.40282347e+38", string0);
    }

    @Test
    public void test153() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(0L);
        DorisConstant dorisConstant1 = dorisConstant0.valueLessThan(dorisConstant0);
        assertEquals("false", dorisConstant1.toString());
    }

    @Test
    public void test154() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(2682L);
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant(
                2682L);
        // Undeclared exception!
        try {
            dorisConstant0.valueLessThan(dorisConstant_DorisDatetimeConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP '1970-01-01 00:00:02'
            //
        }
    }

    @Test
    public void test155() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.POSITIVE_INFINITY);
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(714L);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant0
                .valueLessThan(dorisConstant_DorisFloatConstant0);
        assertTrue(dorisConstant_DorisBooleanConstant0.getValue());
        assertEquals(714L, dorisConstant0.asInt());
    }

    @Test
    public void test156() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = (DorisConstant.DorisIntConstant) DorisConstant
                .createIntConstant((-413L));
        assertTrue(dorisConstant_DorisIntConstant0.isNum());

        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisIntConstant0
                .valueEquals(dorisConstant_DorisIntConstant0);
        assertEquals((-413L), dorisConstant_DorisIntConstant0.getValue());
        assertEquals("true", dorisConstant_DorisBooleanConstant0.toString());
    }

    @Test
    public void test157() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.POSITIVE_INFINITY);
        assertTrue(dorisConstant_DorisFloatConstant0.isNum());

        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(1468L);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant_DorisIntConstant0
                .valueEquals(dorisConstant_DorisFloatConstant0);
        assertEquals(Double.POSITIVE_INFINITY, dorisConstant_DorisFloatConstant0.asFloat(), 0.01);
        assertFalse(dorisConstant_DorisBooleanConstant0.getValue());
        assertEquals(1468.0, dorisConstant_DorisIntConstant0.asFloat(), 0.01);
    }

    @Test
    public void test158() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1230L));
        // Undeclared exception!
        try {
            dorisConstant_DorisIntConstant0.valueEquals(dorisConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP 'CURRENT_TIMESTAMP'
            //
        }
    }

    @Test
    public void test159() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        DorisConstant dorisConstant1 = DorisConstant.createIntConstant((-1L));
        dorisConstant1.valueEquals(dorisConstant0);
        assertEquals((-1.0), dorisConstant1.asFloat(), 0.01);
    }

    @Test
    public void test160() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(581L);
        boolean boolean0 = dorisConstant0.asBoolean();
        assertTrue(boolean0);
        assertEquals("581", dorisConstant0.toString());
    }

    @Test
    public void test161() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(0L);
        boolean boolean0 = dorisConstant0.asBoolean();
        assertFalse(boolean0);
    }

    @Test
    public void test162() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(0L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisConstant dorisConstant0 = dorisConstant_DorisIntConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant0.asBoolean());
    }

    @Test
    public void test163() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(2645L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisConstant dorisConstant0 = dorisConstant_DorisIntConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("2645", dorisConstant_DorisIntConstant0.toString());
        assertTrue(dorisConstant1.asBoolean());
    }

    @Test
    public void test164() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(2689L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant dorisConstant0 = dorisConstant_DorisIntConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) dorisConstant0
                .valueLessThan(dorisConstant_DorisIntConstant0);
        assertFalse(dorisConstant_DorisBooleanConstant0.isString());
        assertEquals(2689.0, dorisConstant_DorisIntConstant0.asFloat(), 0.01);
        assertFalse(dorisConstant_DorisBooleanConstant0.getValue());
        assertTrue(dorisConstant_DorisIntConstant0.isNum());
    }

    @Test
    public void test165() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(3208L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("3208", dorisConstant0.asString());
    }

    @Test
    public void test166() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(1156L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATE;
        dorisConstant_DorisIntConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(1156.0, dorisConstant_DorisIntConstant0.asFloat(), 0.01);
    }

    @Test
    public void test167() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(0L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DECIMAL;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(0.0, dorisConstant1.asFloat(), 0.01);
    }

    @Test
    public void test168() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(1641L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.FLOAT;
        DorisConstant dorisConstant0 = dorisConstant_DorisIntConstant0.cast(dorisSchema_DorisDataType0);
        assertTrue(dorisConstant_DorisIntConstant0.isInt());

        DorisConstant dorisConstant1 = dorisConstant0.valueLessThan(dorisConstant_DorisIntConstant0);
        assertEquals(1641L, dorisConstant_DorisIntConstant0.asInt());
        assertEquals("false", dorisConstant1.toString());
    }

    @Test
    public void test169() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = (DorisConstant.DorisIntConstant) DorisConstant
                .createIntConstant(1010L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.NULL;
        dorisConstant_DorisIntConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals(1010L, dorisConstant_DorisIntConstant0.getValue());
    }

    @Test
    public void test170() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(579L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.INT;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertEquals("579", dorisConstant1.toString());
    }

    @Test
    public void test171() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        // Undeclared exception!
        try {
            dorisConstant0.asBoolean();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisNullConstant@0000000001
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test172() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        // Undeclared exception!
        try {
            dorisConstant0.asInt();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisNullConstant@0000000001
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test173() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant
                .createStringConstant("sqlancer.doris.ast.DorisConstant$DorisTextConstant");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.DATETIME;
        DorisConstant dorisConstant1 = dorisConstant0.cast(dorisSchema_DorisDataType0);
        assertFalse(dorisConstant1.isInt());
    }

    @Test
    public void test174() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        // Undeclared exception!
        try {
            dorisConstant_DorisNullConstant0.asString();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisNullConstant@0000000001
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test175() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createFloatConstant((-2163.0374204));
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        // Undeclared exception!
        try {
            dorisConstant0.valueLessThan(dorisConstant_DorisDatetimeConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP 'CURRENT_TIMESTAMP'
            //
        }
    }

    @Test
    public void test176() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createFloatConstant(0.0);
        double double0 = dorisConstant0.asFloat();
        assertEquals(0.0, double0, 0.01);
    }

    @Test
    public void test177() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.NEGATIVE_INFINITY);
        DorisConstant dorisConstant0 = DorisConstant.createNullConstant();
        assertTrue(dorisConstant0.isNull());

        dorisConstant_DorisFloatConstant0.valueEquals(dorisConstant0);
        assertEquals(Double.NEGATIVE_INFINITY, dorisConstant_DorisFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test178() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        String string0 = dorisConstant_DorisNullConstant0.toString();
        assertEquals("NULL", string0);
    }

    @Test
    public void test179() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = dorisConstant_DorisNullConstant0.getExpectedType();
        assertEquals(DorisSchema.DorisDataType.NULL, dorisSchema_DorisDataType0);
    }

    @Test
    public void test180() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.NEGATIVE_INFINITY);
        String string0 = dorisConstant_DorisFloatConstant0.asString();
        assertEquals("-3.40282347e+38", string0);
    }

    @Test
    public void test181() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                Double.POSITIVE_INFINITY);
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("1");
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0
                .valueLessThan(dorisConstant_DorisFloatConstant0);
        assertFalse(dorisConstant0.isString());
        assertEquals("true", dorisConstant0.toString());
    }

    @Test
    public void test182() throws Throwable {
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(0.0);
        double double0 = dorisConstant_DorisFloatConstant0.getValue();
        assertEquals(0.0, double0, 0.01);
    }

    @Test
    public void test183() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant("false");
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.BOOLEAN;
        DorisConstant dorisConstant0 = dorisConstant_DorisTextConstant0.cast(dorisSchema_DorisDataType0);
        // Undeclared exception!
        try {
            dorisConstant0.valueEquals(dorisConstant_DorisTextConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 'false'
            //
        }
    }

    @Test
    public void test184() throws Throwable {
        DorisConstant.DorisTextConstant dorisConstant_DorisTextConstant0 = new DorisConstant.DorisTextConstant(
                "DECIMAL(*,*)");
        String string0 = dorisConstant_DorisTextConstant0.getValue();
        assertEquals("DECIMAL(*,*)", string0);
    }

    @Test
    public void test185() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant("'");
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant dorisConstant0 = dorisConstant_DorisDatetimeConstant0
                .valueLessThan(dorisConstant_DorisDateConstant0);
        // Undeclared exception!
        try {
            dorisConstant0.valueEquals(dorisConstant_DorisDateConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // DATE '''
            //
        }
    }

    @Test
    public void test186() throws Throwable {
        DorisConstant.DorisDateConstant dorisConstant_DorisDateConstant0 = new DorisConstant.DorisDateConstant(1L);
        String string0 = dorisConstant_DorisDateConstant0.getValue();
        assertEquals("1970-01-01", string0);
    }

    @Test
    public void test187() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1742L));
        long long0 = dorisConstant_DorisIntConstant0.getValue();
        assertEquals((-1742L), long0);
    }

    @Test
    public void test188() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-1L));
        String string0 = dorisConstant_DorisIntConstant0.toString();
        assertEquals("-1", string0);
    }

    @Test
    public void test189() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(0L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = dorisConstant_DorisIntConstant0.getExpectedType();
        assertEquals(DorisSchema.DorisDataType.INT, dorisSchema_DorisDataType0);
    }

    @Test
    public void test190() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createIntConstant(476L);
        String string0 = dorisConstant0.asString();
        assertEquals("476", string0);
    }

    @Test
    public void test191() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant(597L);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = DorisSchema.DorisDataType.VARCHAR;
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisConstant dorisConstant0 = dorisConstant_DorisBooleanConstant0.cast(dorisSchema_DorisDataType0);
        DorisConstant dorisConstant1 = dorisConstant0.valueEquals(dorisConstant_DorisIntConstant0);
        assertTrue(dorisConstant_DorisIntConstant0.isNum());
        assertFalse(dorisConstant1.isString());
        assertFalse(dorisConstant1.asBoolean());
        assertEquals("0", dorisConstant0.asString());
        assertEquals(597.0, dorisConstant_DorisIntConstant0.asFloat(), 0.01);
    }

    @Test
    public void test192() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = (DorisConstant.DorisBooleanConstant) DorisConstant
                .createBooleanConstant(false);
        boolean boolean0 = dorisConstant_DorisBooleanConstant0.getValue();
        assertFalse(boolean0);
    }

    @Test
    public void test193() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createBooleanConstant(true);
        DorisConstant dorisConstant1 = dorisConstant0.valueLessThan(dorisConstant0);
        assertEquals("true", dorisConstant1.toString());
    }

    @Test
    public void test194() throws Throwable {
        DorisConstant.DorisIntConstant dorisConstant_DorisIntConstant0 = new DorisConstant.DorisIntConstant((-504L));
        DorisConstant.DorisFloatConstant dorisConstant_DorisFloatConstant0 = new DorisConstant.DorisFloatConstant(
                (-504L));
        DorisConstant dorisConstant0 = dorisConstant_DorisFloatConstant0.valueEquals(dorisConstant_DorisIntConstant0);
        // Undeclared exception!
        try {
            dorisConstant_DorisIntConstant0.valueEquals(dorisConstant0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.doris.ast.DorisConstant$DorisBooleanConstant@0000000003
            //
            verifyException("sqlancer.doris.ast.DorisConstant", e);
        }
    }

    @Test
    public void test195() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisConstant dorisConstant0 = dorisConstant_DorisDatetimeConstant0
                .valueEquals(dorisConstant_DorisDatetimeConstant0);
        assertFalse(dorisConstant_DorisDatetimeConstant0.isNull());

        String string0 = dorisConstant0.asString();
        assertEquals("CURRENT_TIMESTAMP", dorisConstant_DorisDatetimeConstant0.getValue());
        assertEquals("true", string0);
    }

    @Test
    public void test196() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant(
                ")K");
        DorisConstant dorisConstant0 = DorisConstant.createBooleanConstant(true);
        DorisConstant dorisConstant1 = dorisConstant_DorisDatetimeConstant0.valueLessThan(dorisConstant0);
        assertTrue(dorisConstant1.isBoolean());

        DorisConstant dorisConstant2 = dorisConstant1.valueLessThan(dorisConstant0);
        assertFalse(dorisConstant0.isNull());
        assertFalse(dorisConstant2.asBoolean());
    }

    @Test
    public void test197() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = (DorisConstant.DorisDatetimeConstant) DorisConstant
                .createDatetimeConstant(572L);
        boolean boolean0 = dorisConstant_DorisDatetimeConstant0.isDatetime();
        assertEquals("1970-01-01 00:00:00", dorisConstant_DorisDatetimeConstant0.getValue());
        assertTrue(boolean0);
    }

    @Test
    public void test198() throws Throwable {
        DorisConstant dorisConstant0 = DorisConstant.createDatetimeConstant();
        DorisConstant dorisConstant1 = dorisConstant0.valueLessThan(dorisConstant0);
        // Undeclared exception!
        try {
            dorisConstant1.valueLessThan(dorisConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP 'CURRENT_TIMESTAMP'
            //
        }
    }

    @Test
    public void test199() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        String string0 = dorisConstant_DorisDatetimeConstant0.getValue();
        assertEquals("CURRENT_TIMESTAMP", string0);
    }
}
