/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 12:56:25 GMT 2025
 */

package sqlancer.evosuite.doris.ast;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.LinkedList;
import java.util.List;

import org.junit.jupiter.api.Test;

import sqlancer.doris.DorisSchema;
import sqlancer.doris.ast.DorisBinaryArithmeticOperation;
import sqlancer.doris.ast.DorisColumnValue;
import sqlancer.doris.ast.DorisConstant;
import sqlancer.doris.ast.DorisExpression;
import sqlancer.doris.ast.DorisInOperation;

import sqlancer.materialize.ast.MaterializeBinaryBitOperation;

public class DorisInOperation_ESTest {

    @Test
    public void test0() throws Throwable {
        DorisInOperation dorisInOperation0 = new DorisInOperation((DorisExpression) null, (List<DorisExpression>) null,
                true);
        // Undeclared exception!
        try {
            dorisInOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.ast.DorisInOperation", e);
        }
    }

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test1() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue((DorisSchema.DorisColumn) null,
                dorisConstant_DorisBooleanConstant0);
        LinkedList<DorisExpression> linkedList0 = new LinkedList<DorisExpression>();
        MaterializeBinaryBitOperation.MaterializeBinaryBitOperator materializeBinaryBitOperation_MaterializeBinaryBitOperator0 = MaterializeBinaryBitOperation.MaterializeBinaryBitOperator.BITWISE_XOR;
        DorisBinaryArithmeticOperation dorisBinaryArithmeticOperation0 = new DorisBinaryArithmeticOperation(
                dorisColumnValue0, dorisColumnValue0, materializeBinaryBitOperation_MaterializeBinaryBitOperator0);
        DorisInOperation dorisInOperation0 = new DorisInOperation(dorisBinaryArithmeticOperation0, linkedList0, false);
        // Undeclared exception!
        try {
            dorisInOperation0.getExpectedValue();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // sqlancer.materialize.ast.MaterializeBinaryBitOperation$MaterializeBinaryBitOperator cannot be cast to
            // sqlancer.doris.ast.DorisBinaryArithmeticOperation$DorisBinaryArithmeticOperator
            //
            verifyException("sqlancer.doris.ast.DorisBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisSchema.DorisCompositeDataType dorisSchema_DorisCompositeDataType0 = DorisSchema.DorisCompositeDataType
                .getRandomWithoutNull();
        DorisConstant dorisConstant0 = DorisConstant.createStringConstant("L");
        DorisSchema.DorisColumn dorisSchema_DorisColumn0 = new DorisSchema.DorisColumn("",
                dorisSchema_DorisCompositeDataType0, false, false);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue(dorisSchema_DorisColumn0, dorisConstant0);
        DorisColumnValue dorisColumnValue1 = new DorisColumnValue(dorisSchema_DorisColumn0,
                dorisConstant_DorisBooleanConstant0);
        LinkedList<DorisExpression> linkedList0 = new LinkedList<DorisExpression>();
        linkedList0.add((DorisExpression) dorisColumnValue1);
        DorisInOperation dorisInOperation0 = new DorisInOperation(dorisColumnValue0, linkedList0, true);
        // Undeclared exception!
        try {
            dorisInOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 'L'
            //
        }
    }

    @Test
    public void test3() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                false);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue((DorisSchema.DorisColumn) null,
                dorisConstant_DorisBooleanConstant0);
        LinkedList<DorisExpression> linkedList0 = new LinkedList<DorisExpression>();
        linkedList0.add((DorisExpression) dorisColumnValue0);
        DorisInOperation dorisInOperation0 = new DorisInOperation(dorisColumnValue0, linkedList0, false);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant1 = (DorisConstant.DorisBooleanConstant) dorisInOperation0
                .getExpectedValue();
        assertTrue(dorisConstant_DorisBooleanConstant1.getValue());
    }

    @Test
    public void test4() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue((DorisSchema.DorisColumn) null,
                dorisConstant_DorisBooleanConstant0);
        LinkedList<DorisExpression> linkedList0 = new LinkedList<DorisExpression>();
        linkedList0.add((DorisExpression) dorisColumnValue0);
        DorisInOperation dorisInOperation0 = new DorisInOperation(dorisColumnValue0, linkedList0, true);
        DorisInOperation dorisInOperation1 = new DorisInOperation(dorisInOperation0, linkedList0, true);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant1 = (DorisConstant.DorisBooleanConstant) dorisInOperation1
                .getExpectedValue();
        assertTrue(dorisConstant_DorisBooleanConstant1.getValue());
    }

    @Test
    public void test5() throws Throwable {
        DorisConstant.DorisDatetimeConstant dorisConstant_DorisDatetimeConstant0 = new DorisConstant.DorisDatetimeConstant();
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue((DorisSchema.DorisColumn) null,
                dorisConstant_DorisDatetimeConstant0);
        LinkedList<DorisExpression> linkedList0 = new LinkedList<DorisExpression>();
        linkedList0.add((DorisExpression) dorisConstant_DorisDatetimeConstant0);
        DorisInOperation dorisInOperation0 = new DorisInOperation(dorisColumnValue0, linkedList0, true);
        DorisConstant dorisConstant0 = dorisInOperation0.getExpectedValue();
        assertNull(dorisConstant0);
    }

    @Test
    public void test6() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue((DorisSchema.DorisColumn) null,
                dorisConstant_DorisBooleanConstant0);
        LinkedList<DorisExpression> linkedList0 = new LinkedList<DorisExpression>();
        linkedList0.add((DorisExpression) dorisColumnValue0);
        DorisInOperation dorisInOperation0 = new DorisInOperation(dorisColumnValue0, linkedList0, true);
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant1 = (DorisConstant.DorisBooleanConstant) dorisInOperation0
                .getExpectedValue();
        assertFalse(dorisConstant_DorisBooleanConstant1.getValue());
        assertNotNull(dorisConstant_DorisBooleanConstant1);
    }

    @Test
    public void test7() throws Throwable {
        DorisConstant.DorisNullConstant dorisConstant_DorisNullConstant0 = new DorisConstant.DorisNullConstant();
        DorisColumnValue dorisColumnValue0 = new DorisColumnValue((DorisSchema.DorisColumn) null,
                dorisConstant_DorisNullConstant0);
        LinkedList<DorisExpression> linkedList0 = new LinkedList<DorisExpression>();
        DorisInOperation dorisInOperation0 = new DorisInOperation(dorisColumnValue0, linkedList0, true);
        DorisConstant dorisConstant0 = dorisInOperation0.getExpectedValue();
        assertEquals("NULL", dorisConstant0.toString());
    }

    @Test
    public void test8() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        DorisInOperation dorisInOperation0 = new DorisInOperation(dorisConstant_DorisBooleanConstant0,
                (List<DorisExpression>) null, true);
        DorisConstant dorisConstant0 = dorisInOperation0.getExpectedValue();
        assertNull(dorisConstant0);
    }

    @Test
    public void test9() throws Throwable {
        DorisConstant.DorisBooleanConstant dorisConstant_DorisBooleanConstant0 = new DorisConstant.DorisBooleanConstant(
                true);
        LinkedList<DorisExpression> linkedList0 = new LinkedList<DorisExpression>();
        DorisInOperation dorisInOperation0 = new DorisInOperation(dorisConstant_DorisBooleanConstant0, linkedList0,
                false);
        DorisSchema.DorisDataType dorisSchema_DorisDataType0 = dorisInOperation0.getExpectedType();
        assertEquals(0, dorisSchema_DorisDataType0.getDecimalPrecision());
    }
}
