/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:07:14 GMT 2025
 */

package sqlancer.evosuite.doris.utils;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.doris.utils.DorisNumberUtils;

public class DorisNumberUtils_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        boolean boolean0 = DorisNumberUtils.dateLessThan("", "");
        assertFalse(boolean0);
    }

    @Test
    public void test01() throws Throwable {
        boolean boolean0 = DorisNumberUtils.isNumber("4");
        assertTrue(boolean0);
    }

    @Test
    public void test02() throws Throwable {
        boolean boolean0 = DorisNumberUtils.isInteger("0");
        assertTrue(boolean0);
    }

    @Test
    public void test03() throws Throwable {
        boolean boolean0 = DorisNumberUtils.isDatetime("0001-01-01[ tnfr]0:00:00\n");
        // // Unstable assertion: assertTrue(boolean0);
    }

    @Test
    public void test04() throws Throwable {
        boolean boolean0 = DorisNumberUtils.isDate("1970-01-01");
        assertTrue(boolean0);
    }

    @Test
    public void test05() throws Throwable {
        boolean boolean0 = DorisNumberUtils.datetimeEqual("0001-01-01[ tnfr]0:00:00\n", "0001-01-01[ tnfr]0:00:00\n");
        assertTrue(boolean0);
    }

    @Test
    public void test06() throws Throwable {
        boolean boolean0 = DorisNumberUtils.dateEqual("aE\".]b~ige_jj)%", "aE\".]b~ige_jj)%");
        assertTrue(boolean0);
    }

    @Test
    public void test07() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.isNumber((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test08() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.isInteger((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test09() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.isDatetime((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test10() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.isDate((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test11() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.datetimeTextToDateText("1000-1-0");
            fail("Expecting exception: StringIndexOutOfBoundsException");

        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test12() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.datetimeTextToDateText((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.doris.utils.DorisNumberUtils", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.datetimeLessThan((String) null, (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test14() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.datetimeEqual((String) null, (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test15() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.dateLessThan("x", (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test16() throws Throwable {
        // Undeclared exception!
        try {
            DorisNumberUtils.dateEqual((String) null, (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test17() throws Throwable {
        String string0 = DorisNumberUtils.dateTextToDatetimeText("BL1A@=@iB52eKSYjpgh");
        assertEquals("BL1A@=@iB52eKSYjpgh 00:00:00", string0);
    }

    @Test
    public void test18() throws Throwable {
        boolean boolean0 = DorisNumberUtils.isDate("^ZjAfJ%B+_");
        assertFalse(boolean0);
    }

    @Test
    public void test19() throws Throwable {
        String string0 = DorisNumberUtils.datetimeTextToDateText(
                "((([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29))\\s+([0-1]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])\n");
        assertEquals("((([0-9]{3", string0);
    }

    @Test
    public void test20() throws Throwable {
        boolean boolean0 = DorisNumberUtils.isDatetime("");
        assertFalse(boolean0);
    }

    @Test
    public void test21() throws Throwable {
        boolean boolean0 = DorisNumberUtils.datetimeLessThan("", "1970-01-01");
        assertTrue(boolean0);
    }

    @Test
    public void test22() throws Throwable {
        boolean boolean0 = DorisNumberUtils.datetimeLessThan("1970-01-01", " 00:00:00");
        assertFalse(boolean0);
    }

    @Test
    public void test23() throws Throwable {
        boolean boolean0 = DorisNumberUtils.datetimeLessThan(")S|AX9=Ni}", ")S|AX9=Ni}");
        assertFalse(boolean0);
    }

    @Test
    public void test24() throws Throwable {
        boolean boolean0 = DorisNumberUtils.dateLessThan("N>|8GIZuCq{VFpfNIlW", "0001-01-01[ tnfr]0:00:00\n");
        assertFalse(boolean0);
    }

    @Test
    public void test25() throws Throwable {
        boolean boolean0 = DorisNumberUtils.dateLessThan("0001-01-01[ tnfr]0:00:00\n", "NMXXL|xUyaO");
        assertTrue(boolean0);
    }

    @Test
    public void test26() throws Throwable {
        boolean boolean0 = DorisNumberUtils.dateEqual("L|OY", "0001-01-01[ tnfr]0:00:00\n");
        assertFalse(boolean0);
    }

    @Test
    public void test27() throws Throwable {
        boolean boolean0 = DorisNumberUtils.datetimeEqual(" 00:00:00", "1970-01-01");
        assertFalse(boolean0);
    }

    @Test
    public void test28() throws Throwable {
        boolean boolean0 = DorisNumberUtils.isInteger("yyyy-MM-dd");
        assertFalse(boolean0);
    }

    @Test
    public void test29() throws Throwable {
        boolean boolean0 = DorisNumberUtils.isNumber("qr/?j<!>Sfj&3ub^");
        assertFalse(boolean0);
    }

    @Test
    public void test30() throws Throwable {
        String string0 = DorisNumberUtils.timestampToDateText(921L);
        assertEquals("1970-01-01", string0);
    }

    @Test
    public void test31() throws Throwable {
        String string0 = DorisNumberUtils.getCurrentTimeText();
        assertEquals("2014-02-14 20:21:21", string0);
    }

    @Test
    public void test32() throws Throwable {
        boolean boolean0 = DorisNumberUtils.datetimeEqual("1970-01-01", "U;huy|-:oleOe()y");
        assertFalse(boolean0);
    }

    @Test
    public void test33() throws Throwable {
        String string0 = DorisNumberUtils.timestampToDatetimeText(0L);
        assertEquals("1970-01-01 00:00:00", string0);
    }

    @Test
    public void test34() throws Throwable {
        boolean boolean0 = DorisNumberUtils.dateEqual("0001-01-01[ tnfr]0:00:00\n", "");
        assertFalse(boolean0);
    }
}
