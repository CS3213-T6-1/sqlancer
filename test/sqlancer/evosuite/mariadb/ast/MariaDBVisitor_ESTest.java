/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:43:51 GMT 2025
 */

package sqlancer.evosuite.mariadb.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.mariadb.ast.MariaDBAggregate;
import sqlancer.mariadb.ast.MariaDBBinaryOperator;
import sqlancer.mariadb.ast.MariaDBColumnName;
import sqlancer.mariadb.ast.MariaDBConstant;
import sqlancer.mariadb.ast.MariaDBExpression;
import sqlancer.mariadb.ast.MariaDBFunction;
import sqlancer.mariadb.ast.MariaDBFunctionName;
import sqlancer.mariadb.ast.MariaDBInOperation;
import sqlancer.mariadb.ast.MariaDBJoin;
import sqlancer.mariadb.ast.MariaDBPostfixUnaryOperation;
import sqlancer.mariadb.ast.MariaDBSelectStatement;
import sqlancer.mariadb.ast.MariaDBStringVisitor;
import sqlancer.mariadb.ast.MariaDBTableReference;
import sqlancer.mariadb.ast.MariaDBText;
import sqlancer.mariadb.ast.MariaDBUnaryPrefixOperation;
import sqlancer.mariadb.ast.MariaDBVisitor;
import sqlancer.mariadb.MariaDBSchema;
import sqlancer.Randomly;

public class MariaDBVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBIntConstant mariaDBConstant_MariaDBIntConstant0 = MariaDBConstant
                .createIntConstant((-9223372036854775808L));
        MariaDBBinaryOperator.MariaDBBinaryComparisonOperator mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0 = MariaDBBinaryOperator.MariaDBBinaryComparisonOperator.BITWISE_XOR;
        MariaDBBinaryOperator mariaDBBinaryOperator0 = new MariaDBBinaryOperator(mariaDBConstant_MariaDBIntConstant0,
                mariaDBConstant_MariaDBIntConstant0, mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0);
        MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0 = MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.MINUS;
        MariaDBUnaryPrefixOperation mariaDBUnaryPrefixOperation0 = new MariaDBUnaryPrefixOperation(
                mariaDBBinaryOperator0, mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0);
        mariaDBStringVisitor0.visit(mariaDBUnaryPrefixOperation0);
        assertEquals(MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.MINUS,
                mariaDBUnaryPrefixOperation0.getOp());
    }

    @Test
    public void test01() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.MY_ISAM;
        LinkedList<MariaDBSchema.MariaDBColumn> linkedList1 = new LinkedList<MariaDBSchema.MariaDBColumn>();
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("&ZZA;G", linkedList1,
                linkedList0, mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBTableReference mariaDBTableReference0 = new MariaDBTableReference(mariaDBSchema_MariaDBTable0);
        mariaDBStringVisitor0.visit(mariaDBTableReference0);
        assertEquals("&ZZA;G", mariaDBStringVisitor0.getString());
    }

    @Test
    public void test02() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        LinkedList<MariaDBSchema.MariaDBColumn> linkedList0 = new LinkedList<MariaDBSchema.MariaDBColumn>();
        MariaDBSchema.MariaDBIndex[] mariaDBSchema_MariaDBIndexArray0 = new MariaDBSchema.MariaDBIndex[9];
        List<MariaDBSchema.MariaDBIndex> list0 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBIndexArray0);
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.MY_ISAM;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable(
                "sqlancer.mariadb.ast.MariaDBVisitor", linkedList0, list0, mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBConstant.MariaDBIntConstant mariaDBConstant_MariaDBIntConstant0 = new MariaDBConstant.MariaDBIntConstant(
                0L);
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.RIGHT;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, mariaDBConstant_MariaDBIntConstant0,
                mariaDBJoin_JoinType0);
        mariaDBStringVisitor0.visit(mariaDBJoin0);
        assertEquals(MariaDBJoin.JoinType.RIGHT, mariaDBJoin0.getType());
    }

    @Test
    public void test03() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBIntConstant mariaDBConstant_MariaDBIntConstant0 = MariaDBConstant
                .createIntConstant((-9223372036854775808L));
        mariaDBStringVisitor0.visit((MariaDBConstant) mariaDBConstant_MariaDBIntConstant0);
        assertEquals("-9223372036854775808", mariaDBConstant_MariaDBIntConstant0.toString());
    }

    @Test
    public void test04() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn
                .createDummy((String) null);
        MariaDBColumnName mariaDBColumnName0 = new MariaDBColumnName(mariaDBSchema_MariaDBColumn0);
        mariaDBStringVisitor0.visit(mariaDBColumnName0);
        assertEquals("null", mariaDBStringVisitor0.getString());
    }

    @Test
    public void test05() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = MariaDBConstant.createNullConstant();
        MariaDBAggregate.MariaDBAggregateFunction mariaDBAggregate_MariaDBAggregateFunction0 = MariaDBAggregate.MariaDBAggregateFunction.COUNT;
        MariaDBAggregate mariaDBAggregate0 = new MariaDBAggregate(mariaDBConstant_MariaDBNullConstant0,
                mariaDBAggregate_MariaDBAggregateFunction0);
        mariaDBStringVisitor0.visit(mariaDBAggregate0);
        assertEquals(MariaDBAggregate.MariaDBAggregateFunction.COUNT, mariaDBAggregate0.getAggr());
    }

    @Test
    public void test06() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.MY_ISAM;
        LinkedList<MariaDBSchema.MariaDBColumn> linkedList1 = new LinkedList<MariaDBSchema.MariaDBColumn>();
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("&ZZA;G", linkedList1,
                linkedList0, mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBTableReference mariaDBTableReference0 = new MariaDBTableReference(mariaDBSchema_MariaDBTable0);
        MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0 = MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator.IS_TRUE;
        MariaDBPostfixUnaryOperation mariaDBPostfixUnaryOperation0 = new MariaDBPostfixUnaryOperation(
                mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0, mariaDBTableReference0);
        mariaDBStringVisitor0.visit(mariaDBPostfixUnaryOperation0);
        assertEquals("(&ZZA;G IS TRUE)", mariaDBStringVisitor0.getString());
    }

    @Test
    public void test07() throws Throwable {
        MariaDBConstant.MariaDBTextConstant mariaDBConstant_MariaDBTextConstant0 = new MariaDBConstant.MariaDBTextConstant(
                (String) null);
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBAggregate.MariaDBAggregateFunction mariaDBAggregate_MariaDBAggregateFunction0 = MariaDBAggregate.MariaDBAggregateFunction.COUNT;
        MariaDBAggregate mariaDBAggregate0 = new MariaDBAggregate(mariaDBConstant_MariaDBTextConstant0,
                mariaDBAggregate_MariaDBAggregateFunction0);
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        List<MariaDBExpression> list0 = mariaDBSelectStatement0.getOrderByClauses();
        MariaDBInOperation mariaDBInOperation0 = new MariaDBInOperation(mariaDBAggregate0, list0, true);
        MariaDBBinaryOperator.MariaDBBinaryComparisonOperator mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0 = MariaDBBinaryOperator.MariaDBBinaryComparisonOperator.RLIKE;
        MariaDBBinaryOperator mariaDBBinaryOperator0 = new MariaDBBinaryOperator(mariaDBInOperation0,
                mariaDBSelectStatement0, mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBBinaryOperator0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = MariaDBConstant.createNullConstant();
        MariaDBAggregate.MariaDBAggregateFunction mariaDBAggregate_MariaDBAggregateFunction0 = MariaDBAggregate.MariaDBAggregateFunction.COUNT;
        MariaDBAggregate mariaDBAggregate0 = new MariaDBAggregate(mariaDBConstant_MariaDBNullConstant0,
                mariaDBAggregate_MariaDBAggregateFunction0);
        MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0 = MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.PLUS;
        MariaDBUnaryPrefixOperation mariaDBUnaryPrefixOperation0 = new MariaDBUnaryPrefixOperation(mariaDBAggregate0,
                mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0);
        MariaDBText mariaDBText0 = new MariaDBText(mariaDBUnaryPrefixOperation0, "XG(Q*T04>A`", true);
        mariaDBStringVisitor0.visit(mariaDBText0);
        assertEquals("XG(Q*T04>A`", mariaDBText0.getText());
    }

    @Test
    public void test09() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        List<MariaDBExpression> list0 = mariaDBSelectStatement0.getJoinList();
        mariaDBSelectStatement0.setFromTables(list0);
        mariaDBStringVisitor0.visit((MariaDBExpression) mariaDBSelectStatement0);
        assertEquals("SELECT  FROM ", mariaDBStringVisitor0.getString());
    }

    @Test
    public void test10() throws Throwable {
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn.createDummy("");
        MariaDBColumnName mariaDBColumnName0 = new MariaDBColumnName(mariaDBSchema_MariaDBColumn0);
        String string0 = MariaDBVisitor.asString(mariaDBColumnName0);
        assertEquals("", string0);
    }

    @Test
    public void test11() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBUnaryPrefixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0 = MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.PLUS;
        MariaDBUnaryPrefixOperation mariaDBUnaryPrefixOperation0 = new MariaDBUnaryPrefixOperation(
                mariaDBSelectStatement0, mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBUnaryPrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBText) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBTableReference) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBSelectStatement) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBSelectStatement0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBPostfixUnaryOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0 = MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator.IS_NULL;
        MariaDBPostfixUnaryOperation mariaDBPostfixUnaryOperation0 = new MariaDBPostfixUnaryOperation(
                mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0, mariaDBSelectStatement0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBPostfixUnaryOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBJoin) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        LinkedList<MariaDBSchema.MariaDBColumn> linkedList0 = new LinkedList<MariaDBSchema.MariaDBColumn>();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.MY_ISAM;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable(
                "sqlancer.mariadb.ast.MariaDBVisitor", linkedList0, (List<MariaDBSchema.MariaDBIndex>) null,
                mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.LEFT;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, mariaDBSelectStatement0,
                mariaDBJoin_JoinType0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBJoin0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBInOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        List<MariaDBExpression> list0 = mariaDBSelectStatement0.getGroupBys();
        MariaDBInOperation mariaDBInOperation0 = new MariaDBInOperation(mariaDBSelectStatement0, list0, false);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBFunction) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBExpression[] mariaDBExpressionArray0 = new MariaDBExpression[2];
        mariaDBExpressionArray0[1] = (MariaDBExpression) mariaDBSelectStatement0;
        List<MariaDBExpression> list0 = Randomly.nonEmptySubset(mariaDBExpressionArray0);
        MariaDBFunctionName mariaDBFunctionName0 = MariaDBFunctionName.LOCATE2;
        MariaDBFunction mariaDBFunction0 = new MariaDBFunction(mariaDBFunctionName0, list0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.System", e);
        }
    }

    @Test
    public void test26() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBColumnName) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBBinaryOperator) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test28() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBBinaryOperator.MariaDBBinaryComparisonOperator mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0 = MariaDBBinaryOperator.MariaDBBinaryComparisonOperator.LIKE;
        MariaDBBinaryOperator mariaDBBinaryOperator0 = new MariaDBBinaryOperator(mariaDBSelectStatement0,
                mariaDBSelectStatement0, mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBBinaryOperator0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBAggregate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBAggregate.MariaDBAggregateFunction mariaDBAggregate_MariaDBAggregateFunction0 = MariaDBAggregate.MariaDBAggregateFunction.COUNT;
        MariaDBAggregate mariaDBAggregate0 = new MariaDBAggregate(mariaDBSelectStatement0,
                mariaDBAggregate_MariaDBAggregateFunction0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBAggregate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test31() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0 = MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.PLUS;
        MariaDBUnaryPrefixOperation mariaDBUnaryPrefixOperation0 = new MariaDBUnaryPrefixOperation(
                (MariaDBExpression) null, mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBUnaryPrefixOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBVisitor", e);
        }
    }

    @Test
    public void test32() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        LinkedList<MariaDBSchema.MariaDBColumn> linkedList0 = new LinkedList<MariaDBSchema.MariaDBColumn>();
        MariaDBSchema.MariaDBIndex[] mariaDBSchema_MariaDBIndexArray0 = new MariaDBSchema.MariaDBIndex[4];
        List<MariaDBSchema.MariaDBIndex> list0 = Randomly.subset((-1323), mariaDBSchema_MariaDBIndexArray0);
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.ARIA;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("", linkedList0, list0,
                mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.STRAIGHT;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, (MariaDBExpression) null,
                mariaDBJoin_JoinType0);
        MariaDBInOperation mariaDBInOperation0 = new MariaDBInOperation(mariaDBJoin0, (List<MariaDBExpression>) null,
                true);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBInOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test33() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBFunctionName mariaDBFunctionName0 = MariaDBFunctionName.LENGTH;
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        MariaDBFunction mariaDBFunction0 = new MariaDBFunction(mariaDBFunctionName0, linkedList0);
        MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0 = MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.PLUS;
        MariaDBUnaryPrefixOperation mariaDBUnaryPrefixOperation0 = new MariaDBUnaryPrefixOperation(mariaDBFunction0,
                mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0);
        mariaDBStringVisitor0.visit(mariaDBUnaryPrefixOperation0);
        assertEquals(MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.PLUS, mariaDBUnaryPrefixOperation0.getOp());
    }

    @Test
    public void test34() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = MariaDBConstant.createNullConstant();
        MariaDBAggregate.MariaDBAggregateFunction mariaDBAggregate_MariaDBAggregateFunction0 = MariaDBAggregate.MariaDBAggregateFunction.COUNT;
        MariaDBAggregate mariaDBAggregate0 = new MariaDBAggregate(mariaDBConstant_MariaDBNullConstant0,
                mariaDBAggregate_MariaDBAggregateFunction0);
        mariaDBStringVisitor0.visit((MariaDBExpression) mariaDBAggregate0);
        assertEquals(MariaDBAggregate.MariaDBAggregateFunction.COUNT, mariaDBAggregate0.getAggr());
    }

    @Test
    public void test35() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = MariaDBConstant.createNullConstant();
        MariaDBAggregate.MariaDBAggregateFunction mariaDBAggregate_MariaDBAggregateFunction0 = MariaDBAggregate.MariaDBAggregateFunction.COUNT;
        MariaDBAggregate mariaDBAggregate0 = new MariaDBAggregate(mariaDBConstant_MariaDBNullConstant0,
                mariaDBAggregate_MariaDBAggregateFunction0);
        MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0 = MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator.IS_NULL;
        MariaDBPostfixUnaryOperation mariaDBPostfixUnaryOperation0 = new MariaDBPostfixUnaryOperation(
                mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0, mariaDBAggregate0);
        MariaDBBinaryOperator.MariaDBBinaryComparisonOperator mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0 = MariaDBBinaryOperator.MariaDBBinaryComparisonOperator.GREATER_THAN_EQUAL;
        MariaDBBinaryOperator mariaDBBinaryOperator0 = new MariaDBBinaryOperator(mariaDBPostfixUnaryOperation0,
                mariaDBPostfixUnaryOperation0, mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0);
        mariaDBStringVisitor0.visit(mariaDBBinaryOperator0);
        assertEquals(MariaDBBinaryOperator.MariaDBBinaryComparisonOperator.GREATER_THAN_EQUAL,
                mariaDBBinaryOperator0.getOp());
    }

    @Test
    public void test36() throws Throwable {
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBText mariaDBText0 = new MariaDBText(mariaDBSelectStatement0, "", false);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBText0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test37() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBTableReference mariaDBTableReference0 = new MariaDBTableReference((MariaDBSchema.MariaDBTable) null);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBExpression) mariaDBTableReference0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test38() throws Throwable {
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.STRAIGHT;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin((MariaDBSchema.MariaDBTable) null, (MariaDBExpression) null,
                mariaDBJoin_JoinType0);
        // Undeclared exception!
        try {
            MariaDBVisitor.asString(mariaDBJoin0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test39() throws Throwable {
        MariaDBFunctionName mariaDBFunctionName0 = MariaDBFunctionName.UNCOMPRESSED_LENGTH;
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        MariaDBFunction mariaDBFunction0 = new MariaDBFunction(mariaDBFunctionName0, linkedList0);
        String string0 = MariaDBVisitor.asString(mariaDBFunction0);
        assertEquals("UNCOMPRESSED_LENGTH()", string0);
    }

    @Test
    public void test40() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0 = MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.PLUS;
        MariaDBUnaryPrefixOperation mariaDBUnaryPrefixOperation0 = new MariaDBUnaryPrefixOperation(
                mariaDBSelectStatement0, mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBExpression) mariaDBUnaryPrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test41() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        MariaDBText mariaDBText0 = new MariaDBText(mariaDBConstant_MariaDBNullConstant0, (String) null, false);
        mariaDBStringVisitor0.visit((MariaDBExpression) mariaDBText0);
        assertNull(mariaDBText0.getText());
    }

    @Test
    public void test42() throws Throwable {
        MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0 = MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator.IS_NULL;
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBPostfixUnaryOperation mariaDBPostfixUnaryOperation0 = new MariaDBPostfixUnaryOperation(
                mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0, mariaDBSelectStatement0);
        // Undeclared exception!
        try {
            MariaDBVisitor.asString(mariaDBPostfixUnaryOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test43() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBColumnName mariaDBColumnName0 = new MariaDBColumnName((MariaDBSchema.MariaDBColumn) null);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBExpression) mariaDBColumnName0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }
}
