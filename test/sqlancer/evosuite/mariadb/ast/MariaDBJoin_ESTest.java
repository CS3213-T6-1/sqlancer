/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:35:36 GMT 2025
 */

package sqlancer.evosuite.mariadb.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.mariadb.ast.MariaDBConstant;
import sqlancer.mariadb.ast.MariaDBExpression;
import sqlancer.mariadb.ast.MariaDBJoin;
import sqlancer.mariadb.ast.MariaDBTableReference;
import sqlancer.mariadb.MariaDBSchema;
import sqlancer.Randomly;

public class MariaDBJoin_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = MariaDBConstant.createNullConstant();
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.INNER;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin((MariaDBSchema.MariaDBTable) null,
                mariaDBConstant_MariaDBNullConstant0, mariaDBJoin_JoinType0);
        MariaDBJoin mariaDBJoin1 = new MariaDBJoin(mariaDBJoin0);
        assertFalse(mariaDBJoin1.equals((Object) mariaDBJoin0));
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test01() throws Throwable { MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 =
     * new MariaDBSchema.MariaDBColumn[2]; List<MariaDBSchema.MariaDBColumn> list0 =
     * Randomly.nonEmptySubset(mariaDBSchema_MariaDBColumnArray0); LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 =
     * new LinkedList<MariaDBSchema.MariaDBIndex>(); MariaDBSchema.MariaDBTable.MariaDBEngine
     * mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.ARIA;
     * MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("", list0, linkedList0,
     * mariaDBSchema_MariaDBTable_MariaDBEngine0); MariaDBSchema.MariaDBIndex mariaDBSchema_MariaDBIndex0 =
     * mock(MariaDBSchema.MariaDBIndex.class, new ViolatedAssumptionAnswer());
     * linkedList0.add(mariaDBSchema_MariaDBIndex0); MariaDBConstant mariaDBConstant0 =
     * MariaDBConstant.createBooleanConstant(true); MariaDBJoin.JoinType mariaDBJoin_JoinType0 =
     * MariaDBJoin.JoinType.NATURAL; MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0,
     * mariaDBConstant0, mariaDBJoin_JoinType0); MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable1 =
     * mariaDBJoin0.getTable(); assertSame(mariaDBSchema_MariaDBTable0, mariaDBSchema_MariaDBTable1); }
     */

    @Test
    public void test02() throws Throwable {
        LinkedList<MariaDBSchema.MariaDBColumn> linkedList0 = new LinkedList<MariaDBSchema.MariaDBColumn>();
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList1 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.INNO_DB;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable(
                "sqlancer.mariadb.ast.MariaDBJoin", linkedList0, linkedList1,
                mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBTableReference mariaDBTableReference0 = new MariaDBTableReference(mariaDBSchema_MariaDBTable0);
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.LEFT;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, mariaDBTableReference0,
                mariaDBJoin_JoinType0);
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable1 = mariaDBJoin0.getTable();
        assertSame(mariaDBSchema_MariaDBTable0, mariaDBSchema_MariaDBTable1);
    }

    @Test
    public void test03() throws Throwable {
        MariaDBConstant.MariaDBIntConstant mariaDBConstant_MariaDBIntConstant0 = MariaDBConstant
                .createIntConstant(1062L);
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.CROSS;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin((MariaDBSchema.MariaDBTable) null,
                mariaDBConstant_MariaDBIntConstant0, mariaDBJoin_JoinType0);
        MariaDBExpression mariaDBExpression0 = mariaDBJoin0.getOnClause();
        assertSame(mariaDBExpression0, mariaDBConstant_MariaDBIntConstant0);
    }

    @Test
    public void test04() throws Throwable {
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[2];
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBColumnArray0);
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        Randomly.getNonCachedInteger();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.INNO_DB;
        List<MariaDBSchema.MariaDBIndex> list1 = Randomly
                .nonEmptySubsetLeast((List<MariaDBSchema.MariaDBIndex>) linkedList0, (-2291));
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("", list0, list1,
                mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBSchema.MariaDBTable[] mariaDBSchema_MariaDBTableArray0 = new MariaDBSchema.MariaDBTable[5];
        mariaDBSchema_MariaDBTableArray0[0] = mariaDBSchema_MariaDBTable0;
        List<MariaDBSchema.MariaDBTable> list2 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBTableArray0);
        Randomly.subset(list2);
        MariaDBJoin.getRandomJoinClauses(list2, (Randomly) null);
        assertFalse(list2.contains(mariaDBSchema_MariaDBTable0));
        assertEquals(2, list2.size());
    }

    @Test
    public void test05() throws Throwable {
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[2];
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBColumnArray0);
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        Randomly.getNonCachedInteger();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.INNO_DB;
        List<MariaDBSchema.MariaDBIndex> list1 = Randomly
                .nonEmptySubsetLeast((List<MariaDBSchema.MariaDBIndex>) linkedList0, (-1195));
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("", list0, list1,
                mariaDBSchema_MariaDBTable_MariaDBEngine0);
        List<MariaDBSchema.MariaDBTable> list2 = List.of(mariaDBSchema_MariaDBTable0, mariaDBSchema_MariaDBTable0,
                mariaDBSchema_MariaDBTable0, mariaDBSchema_MariaDBTable0);
        List<MariaDBSchema.MariaDBTable> list3 = Randomly.subset(list2);
        MariaDBJoin.getRandomJoinClauses(list3, (Randomly) null);
        assertEquals(1, list3.size());
    }

    @Test
    public void test06() throws Throwable {
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        Randomly.getNonCachedInteger();
        Randomly.nonEmptySubsetLeast((List<MariaDBSchema.MariaDBIndex>) linkedList0, (-2291));
        MariaDBSchema.MariaDBTable[] mariaDBSchema_MariaDBTableArray0 = new MariaDBSchema.MariaDBTable[5];
        List<MariaDBSchema.MariaDBTable> list0 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBTableArray0);
        Randomly.subset(list0);
        List<MariaDBJoin> list1 = MariaDBJoin.getRandomJoinClauses(list0, (Randomly) null);
        assertTrue(list1.isEmpty());
    }

    @Test
    public void test07() throws Throwable {
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[2];
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBColumnArray0);
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.INNO_DB;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("NATURAL", list0,
                linkedList0, mariaDBSchema_MariaDBTable_MariaDBEngine0);
        List<MariaDBSchema.MariaDBTable> list1 = List.of(mariaDBSchema_MariaDBTable0, mariaDBSchema_MariaDBTable0,
                mariaDBSchema_MariaDBTable0, mariaDBSchema_MariaDBTable0);
        // Undeclared exception!
        try {
            MariaDBJoin.getRandomJoinClauses(list1, (Randomly) null);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.ImmutableCollections", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[2];
        Randomly.nonEmptySubset(mariaDBSchema_MariaDBColumnArray0);
        MariaDBSchema.MariaDBTable[] mariaDBSchema_MariaDBTableArray0 = new MariaDBSchema.MariaDBTable[5];
        List<MariaDBSchema.MariaDBTable> list0 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBTableArray0);
        // Undeclared exception!
        try {
            MariaDBJoin.getRandomJoinClauses(list0, (Randomly) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBJoin", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new LinkedList<MariaDBSchema.MariaDBTable>();
        Randomly randomly0 = new Randomly();
        List<MariaDBJoin> list0 = MariaDBJoin.getRandomJoinClauses(linkedList0, randomly0);
        assertEquals(0, list0.size());
    }

    // @Test
    // public void test10() throws Throwable {
    // MariaDBJoin mariaDBJoin0 = null;
    // try {
    // mariaDBJoin0 = new MariaDBJoin((MariaDBJoin) null);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.mariadb.ast.MariaDBJoin", e);
    // }
    // }

    @Test
    public void test11() throws Throwable {
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[2];
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBColumnArray0);
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.ARIA;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("", list0, linkedList0,
                mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBConstant.MariaDBBooleanConstant mariaDBConstant_MariaDBBooleanConstant0 = (MariaDBConstant.MariaDBBooleanConstant) MariaDBConstant
                .createBooleanConstant(true);
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.NATURAL;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, mariaDBConstant_MariaDBBooleanConstant0,
                mariaDBJoin_JoinType0);
        mariaDBJoin0.setOnClause((MariaDBExpression) mariaDBConstant_MariaDBBooleanConstant0);
        assertTrue(mariaDBConstant_MariaDBBooleanConstant0.getValue());
    }

    @Test
    public void test12() throws Throwable {
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[2];
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBColumnArray0);
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.INNO_DB;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("NATURAL", list0,
                linkedList0, mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.LEFT;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, (MariaDBExpression) null,
                mariaDBJoin_JoinType0);
        MariaDBExpression mariaDBExpression0 = mariaDBJoin0.getOnClause();
        assertNull(mariaDBExpression0);
    }

    @Test
    public void test13() throws Throwable {
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.CROSS;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin((MariaDBSchema.MariaDBTable) null, (MariaDBExpression) null,
                mariaDBJoin_JoinType0);
        MariaDBJoin.JoinType mariaDBJoin_JoinType1 = mariaDBJoin0.getType();
        assertSame(mariaDBJoin_JoinType1, mariaDBJoin_JoinType0);
    }

    @Test
    public void test14() throws Throwable {
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.CROSS;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin((MariaDBSchema.MariaDBTable) null, (MariaDBExpression) null,
                mariaDBJoin_JoinType0);
        mariaDBJoin0.setType(mariaDBJoin_JoinType0);
        assertEquals(MariaDBJoin.JoinType.CROSS, mariaDBJoin0.getType());
    }

    @Test
    public void test15() throws Throwable {
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.CROSS;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin((MariaDBSchema.MariaDBTable) null, (MariaDBExpression) null,
                mariaDBJoin_JoinType0);
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = mariaDBJoin0.getTable();
        assertNull(mariaDBSchema_MariaDBTable0);
    }
}
