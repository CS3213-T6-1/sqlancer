/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:16:10 GMT 2025
 */

package sqlancer.evosuite.mariadb.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.mariadb.ast.MariaDBAggregate;
import sqlancer.mariadb.ast.MariaDBBinaryOperator;
import sqlancer.mariadb.ast.MariaDBColumnName;
import sqlancer.mariadb.ast.MariaDBConstant;
import sqlancer.mariadb.ast.MariaDBExpression;
import sqlancer.mariadb.ast.MariaDBFunction;
import sqlancer.mariadb.ast.MariaDBFunctionName;
import sqlancer.mariadb.ast.MariaDBInOperation;
import sqlancer.mariadb.ast.MariaDBJoin;
import sqlancer.mariadb.ast.MariaDBPostfixUnaryOperation;
import sqlancer.mariadb.ast.MariaDBSelectStatement;
import sqlancer.mariadb.ast.MariaDBStringVisitor;
import sqlancer.mariadb.ast.MariaDBTableReference;
import sqlancer.mariadb.ast.MariaDBText;
import sqlancer.mariadb.ast.MariaDBUnaryPrefixOperation;
import sqlancer.mariadb.MariaDBSchema;
import sqlancer.Randomly;

public class MariaDBStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.BOOLEAN;
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = new MariaDBSchema.MariaDBColumn("^%KLD/hY",
                mariaDBSchema_MariaDBDataType0, false, 1896);
        MariaDBColumnName mariaDBColumnName0 = new MariaDBColumnName(mariaDBSchema_MariaDBColumn0);
        mariaDBStringVisitor0.visit(mariaDBColumnName0);
        assertEquals("^%KLD/hY", mariaDBStringVisitor0.getString());
    }

    @Test
    public void test01() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant mariaDBConstant0 = MariaDBConstant.createBooleanConstant(true);
        mariaDBStringVisitor0.visit(mariaDBConstant0);
        assertEquals("true", mariaDBConstant0.toString());
    }

    @Test
    public void test02() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn
                .createDummy("f~rf!0!qL5<'Bie");
        MariaDBColumnName mariaDBColumnName0 = new MariaDBColumnName(mariaDBSchema_MariaDBColumn0);
        MariaDBText mariaDBText0 = new MariaDBText(mariaDBColumnName0, "f~rf!0!qL5<'Bie", false);
        mariaDBStringVisitor0.visit(mariaDBText0);
        assertEquals("f~rf!0!qL5<'Bief~rf!0!qL5<'Bie", mariaDBStringVisitor0.getString());
    }

    @Test
    public void test03() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[1];
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBColumnArray0);
        MariaDBSchema.MariaDBIndex[] mariaDBSchema_MariaDBIndexArray0 = new MariaDBSchema.MariaDBIndex[7];
        List<MariaDBSchema.MariaDBIndex> list1 = Randomly.nonEmptySubset(mariaDBSchema_MariaDBIndexArray0);
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.ARIA;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("Z", list0, list1,
                mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBTableReference mariaDBTableReference0 = new MariaDBTableReference(mariaDBSchema_MariaDBTable0);
        mariaDBStringVisitor0.visit(mariaDBTableReference0);
        assertEquals("Z", mariaDBStringVisitor0.getString());
    }

    @Test
    public void test04() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        MariaDBInOperation mariaDBInOperation0 = new MariaDBInOperation(mariaDBConstant_MariaDBNullConstant0,
                linkedList0, false);
        MariaDBBinaryOperator.MariaDBBinaryComparisonOperator mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0 = MariaDBBinaryOperator.MariaDBBinaryComparisonOperator.NOT_EQUAL;
        MariaDBBinaryOperator mariaDBBinaryOperator0 = new MariaDBBinaryOperator(mariaDBInOperation0,
                mariaDBInOperation0, mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0);
        mariaDBStringVisitor0.visit(mariaDBBinaryOperator0);
        assertEquals(MariaDBBinaryOperator.MariaDBBinaryComparisonOperator.NOT_EQUAL, mariaDBBinaryOperator0.getOp());
    }

    @Test
    public void test05() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBIntConstant mariaDBConstant_MariaDBIntConstant0 = new MariaDBConstant.MariaDBIntConstant(
                (-817L));
        MariaDBAggregate.MariaDBAggregateFunction mariaDBAggregate_MariaDBAggregateFunction0 = MariaDBAggregate.MariaDBAggregateFunction.COUNT;
        MariaDBAggregate mariaDBAggregate0 = new MariaDBAggregate(mariaDBConstant_MariaDBIntConstant0,
                mariaDBAggregate_MariaDBAggregateFunction0);
        mariaDBStringVisitor0.visit(mariaDBAggregate0);
        assertEquals(MariaDBAggregate.MariaDBAggregateFunction.COUNT, mariaDBAggregate0.getAggr());
    }

    @Test
    public void test06() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = MariaDBConstant.createNullConstant();
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.INNER;
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[0];
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.subset(mariaDBSchema_MariaDBColumnArray0);
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.ARIA;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("datetime(6)", list0,
                (List<MariaDBSchema.MariaDBIndex>) null, mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, mariaDBConstant_MariaDBNullConstant0,
                mariaDBJoin_JoinType0);
        mariaDBStringVisitor0.visit(mariaDBJoin0);
        String string0 = mariaDBStringVisitor0.getString();
        assertNotNull(string0);
    }

    @Test
    public void test07() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBUnaryPrefixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0 = MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.MINUS;
        MariaDBUnaryPrefixOperation mariaDBUnaryPrefixOperation0 = new MariaDBUnaryPrefixOperation(
                mariaDBSelectStatement0, mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBUnaryPrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBTableReference mariaDBTableReference0 = new MariaDBTableReference((MariaDBSchema.MariaDBTable) null);
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        List<MariaDBExpression> list0 = mariaDBSelectStatement0.getGroupByClause();
        MariaDBInOperation mariaDBInOperation0 = new MariaDBInOperation(mariaDBTableReference0, list0, false);
        MariaDBText mariaDBText0 = new MariaDBText(mariaDBInOperation0, "KSnz58", false);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBText0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBSelectStatement) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBPostfixUnaryOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0 = MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator.IS_NOT_NULL;
        MariaDBPostfixUnaryOperation mariaDBPostfixUnaryOperation0 = new MariaDBPostfixUnaryOperation(
                mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0, mariaDBSelectStatement0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBPostfixUnaryOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBInOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        MariaDBInOperation mariaDBInOperation0 = new MariaDBInOperation(mariaDBSelectStatement0, linkedList0, true);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBFunction) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    // @Test
    // public void test16() throws Throwable {
    // MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
    // MariaDBBinaryOperator.MariaDBBinaryComparisonOperator mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0 =
    // MariaDBBinaryOperator.MariaDBBinaryComparisonOperator.NOT_EQUAL;
    // MariaDBBinaryOperator mariaDBBinaryOperator0 = new MariaDBBinaryOperator((MariaDBExpression) null,
    // (MariaDBExpression) null, mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0);
    // // Undeclared exception!
    // try {
    // mariaDBStringVisitor0.visit(mariaDBBinaryOperator0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.mariadb.ast.MariaDBVisitor", e);
    // }
    // }

    @Test
    public void test17() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBFunctionName mariaDBFunctionName0 = MariaDBFunctionName.LENGTHB;
        MariaDBFunction mariaDBFunction0 = new MariaDBFunction(mariaDBFunctionName0, (List<MariaDBExpression>) null);
        MariaDBAggregate.MariaDBAggregateFunction mariaDBAggregate_MariaDBAggregateFunction0 = MariaDBAggregate.MariaDBAggregateFunction.COUNT;
        MariaDBAggregate mariaDBAggregate0 = new MariaDBAggregate(mariaDBFunction0,
                mariaDBAggregate_MariaDBAggregateFunction0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBAggregate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        linkedList0.addLast(mariaDBConstant_MariaDBNullConstant0);
        linkedList0.add((MariaDBExpression) mariaDBConstant_MariaDBNullConstant0);
        MariaDBInOperation mariaDBInOperation0 = new MariaDBInOperation(mariaDBConstant_MariaDBNullConstant0,
                linkedList0, false);
        mariaDBStringVisitor0.visit(mariaDBInOperation0);
        assertFalse(mariaDBInOperation0.isNegated());
    }

    @Test
    public void test19() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBColumnName mariaDBColumnName0 = new MariaDBColumnName((MariaDBSchema.MariaDBColumn) null);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBColumnName0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.CROSS;
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin((MariaDBSchema.MariaDBTable) null, mariaDBSelectStatement0,
                mariaDBJoin_JoinType0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBJoin0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.LEFT;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin((MariaDBSchema.MariaDBTable) null, mariaDBSelectStatement0,
                mariaDBJoin_JoinType0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBJoin0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.STRAIGHT;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin((MariaDBSchema.MariaDBTable) null,
                mariaDBConstant_MariaDBNullConstant0, mariaDBJoin_JoinType0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBJoin0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[3];
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.subset(mariaDBSchema_MariaDBColumnArray0);
        LinkedList<MariaDBSchema.MariaDBIndex> linkedList0 = new LinkedList<MariaDBSchema.MariaDBIndex>();
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.ARIA;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("k$gyC#W", list0,
                linkedList0, mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.INNER;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, (MariaDBExpression) null,
                mariaDBJoin_JoinType0);
        mariaDBStringVisitor0.visit(mariaDBJoin0);
        assertEquals(" INNER JOIN k$gyC#W", mariaDBStringVisitor0.getString());
    }

    @Test
    public void test24() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBSchema.MariaDBIndex[] mariaDBSchema_MariaDBIndexArray0 = new MariaDBSchema.MariaDBIndex[8];
        List<MariaDBSchema.MariaDBIndex> list0 = Randomly.subset(mariaDBSchema_MariaDBIndexArray0);
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[0];
        List<MariaDBSchema.MariaDBColumn> list1 = Randomly.subset(mariaDBSchema_MariaDBColumnArray0);
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.MY_ISAM;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable(".cq1[*", list1, list0,
                mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.RIGHT;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, mariaDBSelectStatement0,
                mariaDBJoin_JoinType0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBJoin0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[0];
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.subset(mariaDBSchema_MariaDBColumnArray0);
        MariaDBSchema.MariaDBIndex[] mariaDBSchema_MariaDBIndexArray0 = new MariaDBSchema.MariaDBIndex[4];
        List<MariaDBSchema.MariaDBIndex> list1 = Randomly.subset(mariaDBSchema_MariaDBIndexArray0);
        MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.INNO_DB;
        MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("Z}Ke7V", list0, list1,
                mariaDBSchema_MariaDBTable_MariaDBEngine0);
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBJoin.JoinType mariaDBJoin_JoinType0 = MariaDBJoin.JoinType.NATURAL;
        MariaDBJoin mariaDBJoin0 = new MariaDBJoin(mariaDBSchema_MariaDBTable0, mariaDBSelectStatement0,
                mariaDBJoin_JoinType0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBJoin0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test26() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        linkedList0.add((MariaDBExpression) mariaDBConstant_MariaDBNullConstant0);
        MariaDBInOperation mariaDBInOperation0 = new MariaDBInOperation(mariaDBConstant_MariaDBNullConstant0,
                linkedList0, true);
        mariaDBStringVisitor0.visit(mariaDBInOperation0);
        assertTrue(mariaDBInOperation0.isNegated());
    }

    @Test
    public void test27() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        linkedList0.add((MariaDBExpression) mariaDBConstant_MariaDBNullConstant0);
        linkedList0.add((MariaDBExpression) mariaDBConstant_MariaDBNullConstant0);
        MariaDBFunctionName mariaDBFunctionName0 = MariaDBFunctionName.ORD;
        MariaDBFunction mariaDBFunction0 = new MariaDBFunction(mariaDBFunctionName0, linkedList0);
        mariaDBStringVisitor0.visit(mariaDBFunction0);
        assertEquals(MariaDBFunctionName.ORD, mariaDBFunction0.getFunc());
    }

    @Test
    public void test28() throws Throwable {
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        List<MariaDBExpression> list0 = List.of((MariaDBExpression) mariaDBSelectStatement0);
        MariaDBFunctionName mariaDBFunctionName0 = MariaDBFunctionName.LOCATE1;
        MariaDBFunction mariaDBFunction0 = new MariaDBFunction(mariaDBFunctionName0, list0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        MariaDBText mariaDBText0 = new MariaDBText(mariaDBConstant_MariaDBNullConstant0, (String) null, true);
        mariaDBStringVisitor0.visit(mariaDBText0);
        assertTrue(mariaDBText0.isPrefix());
    }

    @Test
    public void test30() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBText mariaDBText0 = new MariaDBText(mariaDBSelectStatement0, "admin", false);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBText0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test31() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        linkedList0.addLast(mariaDBConstant_MariaDBNullConstant0);
        linkedList0.add((MariaDBExpression) mariaDBConstant_MariaDBNullConstant0);
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        mariaDBSelectStatement0.setGroupByClause(linkedList0);
        mariaDBSelectStatement0.setFromTables(linkedList0);
        mariaDBStringVisitor0.visit(mariaDBSelectStatement0);
        assertEquals(MariaDBSelectStatement.MariaDBSelectType.ALL, mariaDBSelectStatement0.getSelectType());
    }

    @Test
    public void test32() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        mariaDBSelectStatement0.setWhereClause((MariaDBExpression) mariaDBConstant_MariaDBNullConstant0);
        mariaDBSelectStatement0.setFromTables(linkedList0);
        mariaDBStringVisitor0.visit(mariaDBSelectStatement0);
        assertEquals(MariaDBSelectStatement.MariaDBSelectType.ALL, mariaDBSelectStatement0.getSelectType());
    }

    @Test
    public void test33() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        linkedList0.add((MariaDBExpression) mariaDBConstant_MariaDBNullConstant0);
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBConstant.MariaDBBooleanConstant mariaDBConstant_MariaDBBooleanConstant0 = new MariaDBConstant.MariaDBBooleanConstant(
                false);
        linkedList0.offerFirst(mariaDBConstant_MariaDBBooleanConstant0);
        mariaDBSelectStatement0.setFetchColumns(linkedList0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBSelectStatement0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test34() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBBinaryOperator.MariaDBBinaryComparisonOperator mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0 = MariaDBBinaryOperator.MariaDBBinaryComparisonOperator.BITWISE_XOR;
        MariaDBBinaryOperator mariaDBBinaryOperator0 = new MariaDBBinaryOperator(mariaDBConstant_MariaDBNullConstant0,
                mariaDBSelectStatement0, mariaDBBinaryOperator_MariaDBBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBBinaryOperator0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test35() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        String string0 = mariaDBStringVisitor0.getString();
        assertEquals("", string0);
    }

    @Test
    public void test36() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        MariaDBAggregate.MariaDBAggregateFunction mariaDBAggregate_MariaDBAggregateFunction0 = MariaDBAggregate.MariaDBAggregateFunction.COUNT;
        MariaDBAggregate mariaDBAggregate0 = new MariaDBAggregate(mariaDBSelectStatement0,
                mariaDBAggregate_MariaDBAggregateFunction0);
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit(mariaDBAggregate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test37() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn
                .createDummy("Unknown action: ");
        MariaDBColumnName mariaDBColumnName0 = new MariaDBColumnName(mariaDBSchema_MariaDBColumn0);
        MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0 = MariaDBUnaryPrefixOperation.MariaDBUnaryPrefixOperator.MINUS;
        MariaDBUnaryPrefixOperation mariaDBUnaryPrefixOperation0 = new MariaDBUnaryPrefixOperation(mariaDBColumnName0,
                mariaDBUnaryPrefixOperation_MariaDBUnaryPrefixOperator0);
        mariaDBStringVisitor0.visit(mariaDBUnaryPrefixOperation0);
        assertEquals("(- Unknown action: )", mariaDBStringVisitor0.getString());
    }

    @Test
    public void test38() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        MariaDBConstant.MariaDBNullConstant mariaDBConstant_MariaDBNullConstant0 = new MariaDBConstant.MariaDBNullConstant();
        LinkedList<MariaDBExpression> linkedList0 = new LinkedList<MariaDBExpression>();
        MariaDBInOperation mariaDBInOperation0 = new MariaDBInOperation(mariaDBConstant_MariaDBNullConstant0,
                linkedList0, false);
        MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0 = MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator.IS_NULL;
        MariaDBPostfixUnaryOperation mariaDBPostfixUnaryOperation0 = new MariaDBPostfixUnaryOperation(
                mariaDBPostfixUnaryOperation_MariaDBPostfixUnaryOperator0, mariaDBInOperation0);
        mariaDBStringVisitor0.visit(mariaDBPostfixUnaryOperation0);
        assertEquals(MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator.IS_NULL,
                mariaDBPostfixUnaryOperation0.getOperator());
    }

    @Test
    public void test39() throws Throwable {
        MariaDBStringVisitor mariaDBStringVisitor0 = new MariaDBStringVisitor();
        // Undeclared exception!
        try {
            mariaDBStringVisitor0.visit((MariaDBTableReference) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBStringVisitor", e);
        }
    }
}
