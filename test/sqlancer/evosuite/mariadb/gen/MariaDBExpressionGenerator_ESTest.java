/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:01:28 GMT 2025
 */

package sqlancer.evosuite.mariadb.gen;

import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.mariadb.ast.MariaDBExpression;
import sqlancer.mariadb.ast.MariaDBSelectStatement;
import sqlancer.mariadb.gen.MariaDBExpressionGenerator;
import sqlancer.mariadb.MariaDBSchema;
import sqlancer.Randomly;

public class MariaDBExpressionGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test00() throws Throwable { MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new
     * MariaDBExpressionGenerator((Randomly) null); MariaDBExpressionGenerator.getRandomConstant((Randomly) null);
     * MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn.createDummy(" as count");
     * List.of(mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn0,
     * mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn0,
     * mariaDBSchema_MariaDBColumn0); Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new
     * ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); randomly0.getDouble();
     * MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.INT; // Undeclared
     * exception! try { MariaDBExpressionGenerator.getRandomConstant((Randomly) null, mariaDBSchema_MariaDBDataType0);
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test01() throws Throwable { Supplier<String> supplier0 = (Supplier<String>)
     * mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0);
     * MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
     * MariaDBExpressionGenerator.getRandomConstant(randomly0); randomly0.getPositiveIntegerInt();
     * randomly0.getDouble(); MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 =
     * MariaDBSchema.MariaDBDataType.REAL; MariaDBExpressionGenerator.getRandomConstant(randomly0,
     * mariaDBSchema_MariaDBDataType0); mariaDBExpressionGenerator0.getRandomExpression(2);
     * mariaDBExpressionGenerator0.getTableRefs(); }
     */

    // @Test
    // public void test02() throws Throwable {
    // Randomly randomly0 = new Randomly(790L);
    // Randomly randomly1 = new Randomly(0L);
    // MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
    // int int0 = 368;
    // MariaDBExpressionGenerator mariaDBExpressionGenerator1 = mariaDBExpressionGenerator0
    // .setColumns((List<MariaDBSchema.MariaDBColumn>) null);
    // // Undeclared exception!
    // try {
    // mariaDBExpressionGenerator1.getRandomExpression(368);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // }
    // }

    // @Test
    // public void test03() throws Throwable {
    // Randomly randomly0 = new Randomly();
    // MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
    // MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.INT;
    // MariaDBExpressionGenerator.getRandomConstant(randomly0, mariaDBSchema_MariaDBDataType0);
    // MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType1 = MariaDBSchema.MariaDBDataType.VARCHAR;
    // MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = new MariaDBSchema.MariaDBColumn("e<u?%a):\"<ov",
    // mariaDBSchema_MariaDBDataType1, true, (-626));
    // MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn1 = MariaDBSchema.MariaDBColumn
    // .createDummy("p2`X^:74JHQjM");
    // MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn2 = MariaDBSchema.MariaDBColumn.createDummy("]q");
    // randomly0.getNonZeroInteger();
    // Randomly.getPercentage();
    // mariaDBSchema_MariaDBColumn1.getFullQualifiedName();
    // MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType2 = MariaDBSchema.MariaDBDataType.INT;
    // MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn3 = new MariaDBSchema.MariaDBColumn("p2`X^:74JHQjM",
    // mariaDBSchema_MariaDBDataType2, false, (-5272));
    // MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn4 = MariaDBSchema.MariaDBColumn
    // .createDummy("p2`X^:74JHQjM");
    // Randomly randomly1 = new Randomly(1520L);
    // randomly1.getString();
    // MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[4];
    // mariaDBSchema_MariaDBColumnArray0[0] = mariaDBSchema_MariaDBColumn4;
    // mariaDBSchema_MariaDBColumnArray0[1] = mariaDBSchema_MariaDBColumn2;
    // mariaDBSchema_MariaDBColumnArray0[2] = mariaDBSchema_MariaDBColumn3;
    // mariaDBSchema_MariaDBColumnArray0[3] = mariaDBSchema_MariaDBColumn2;
    // List<MariaDBSchema.MariaDBColumn> list0 = Randomly.subset(mariaDBSchema_MariaDBColumnArray0);
    // List<MariaDBSchema.MariaDBColumn> list1 = Randomly.extractNrRandomColumns(list0, (-626));
    // MariaDBExpressionGenerator mariaDBExpressionGenerator1 = mariaDBExpressionGenerator0.setColumns(list1);
    // mariaDBExpressionGenerator1.generateSelect();
    // mariaDBExpressionGenerator0.getRandomExpression(0);
    // mariaDBExpressionGenerator0.generateBooleanExpression();
    // mariaDBExpressionGenerator1.setColumns(list0);
    // }

    @Test
    public void test04() throws Throwable {
        Randomly randomly0 = new Randomly();
        MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
        MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
        // Undeclared exception!
        try {
            mariaDBExpressionGenerator0.generateUnoptimizedQueryString(mariaDBSelectStatement0,
                    (MariaDBExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.ast.MariaDBVisitor", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        Randomly randomly0 = new Randomly(833);
        MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
        MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[5];
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn
                .createDummy("m|MpqIVnR_");
        mariaDBSchema_MariaDBColumnArray0[0] = mariaDBSchema_MariaDBColumn0;
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn1 = MariaDBSchema.MariaDBColumn
                .createDummy("m|MpqIVnR_");
        mariaDBSchema_MariaDBColumnArray0[1] = mariaDBSchema_MariaDBColumn1;
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn2 = MariaDBSchema.MariaDBColumn.createDummy("");
        mariaDBSchema_MariaDBColumnArray0[2] = mariaDBSchema_MariaDBColumn2;
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn3 = MariaDBSchema.MariaDBColumn
                .createDummy("m|MpqIVnR_");
        mariaDBSchema_MariaDBColumnArray0[3] = mariaDBSchema_MariaDBColumn3;
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn4 = MariaDBSchema.MariaDBColumn
                .createDummy((String) null);
        mariaDBSchema_MariaDBColumnArray0[4] = mariaDBSchema_MariaDBColumn4;
        List<MariaDBSchema.MariaDBColumn> list0 = Randomly.subset(mariaDBSchema_MariaDBColumnArray0);
        MariaDBExpressionGenerator mariaDBExpressionGenerator1 = mariaDBExpressionGenerator0.setColumns(list0);
        mariaDBExpressionGenerator1.getRandomExpression(1);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test06() throws Throwable { MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 =
     * MariaDBSchema.MariaDBColumn.createDummy(" as count"); List<MariaDBSchema.MariaDBColumn> list0 =
     * List.of(mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn0,
     * mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn0,
     * mariaDBSchema_MariaDBColumn0); mariaDBSchema_MariaDBColumn0.getFullQualifiedName(); Supplier<String> supplier0 =
     * (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new
     * Randomly(supplier0); MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new
     * MariaDBExpressionGenerator(randomly0); MariaDBSchema.MariaDBTable[] mariaDBSchema_MariaDBTableArray0 = new
     * MariaDBSchema.MariaDBTable[8]; MariaDBSchema.MariaDBIndex[] mariaDBSchema_MariaDBIndexArray0 = new
     * MariaDBSchema.MariaDBIndex[1]; MariaDBSchema.MariaDBIndex mariaDBSchema_MariaDBIndex0 =
     * mock(MariaDBSchema.MariaDBIndex.class, new ViolatedAssumptionAnswer()); mariaDBSchema_MariaDBIndexArray0[0] =
     * mariaDBSchema_MariaDBIndex0; List<MariaDBSchema.MariaDBIndex> list1 =
     * Randomly.subset(mariaDBSchema_MariaDBIndexArray0); MariaDBSchema.MariaDBTable.MariaDBEngine
     * mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.MY_ISAM;
     * MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable(" as count", list0,
     * list1, mariaDBSchema_MariaDBTable_MariaDBEngine0); mariaDBSchema_MariaDBTableArray0[0] =
     * mariaDBSchema_MariaDBTable0; MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable1 = new
     * MariaDBSchema.MariaDBTable(" as count", list0, list1, mariaDBSchema_MariaDBTable_MariaDBEngine0);
     * mariaDBSchema_MariaDBTableArray0[1] = mariaDBSchema_MariaDBTable1; MariaDBSchema.MariaDBTable
     * mariaDBSchema_MariaDBTable2 = new MariaDBSchema.MariaDBTable("k>F", list0, list1,
     * mariaDBSchema_MariaDBTable_MariaDBEngine0); mariaDBSchema_MariaDBTableArray0[2] = mariaDBSchema_MariaDBTable2;
     * MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable3 = new MariaDBSchema.MariaDBTable("", list0, list1,
     * mariaDBSchema_MariaDBTable_MariaDBEngine0); mariaDBSchema_MariaDBTableArray0[3] = mariaDBSchema_MariaDBTable3;
     * MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable4 = new MariaDBSchema.MariaDBTable("", list0, list1,
     * mariaDBSchema_MariaDBTable_MariaDBEngine0); mariaDBSchema_MariaDBTableArray0[4] = mariaDBSchema_MariaDBTable4;
     * List<MariaDBSchema.MariaDBIndex> list2 = Randomly.subset((-1870), mariaDBSchema_MariaDBIndexArray0);
     * MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable5 = new MariaDBSchema.MariaDBTable("k>F", list0, list2,
     * mariaDBSchema_MariaDBTable_MariaDBEngine0); mariaDBSchema_MariaDBTableArray0[5] = mariaDBSchema_MariaDBTable5;
     * MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine1 =
     * MariaDBSchema.MariaDBTable.MariaDBEngine.INNO_DB; MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable6 = new
     * MariaDBSchema.MariaDBTable("", list0, list2, mariaDBSchema_MariaDBTable_MariaDBEngine1);
     * mariaDBSchema_MariaDBTableArray0[6] = mariaDBSchema_MariaDBTable6; MariaDBSchema.MariaDBTable.MariaDBEngine
     * mariaDBSchema_MariaDBTable_MariaDBEngine2 = MariaDBSchema.MariaDBTable.MariaDBEngine.MY_ISAM;
     * MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable7 = new MariaDBSchema.MariaDBTable(" as count", list0,
     * list1, mariaDBSchema_MariaDBTable_MariaDBEngine2); mariaDBSchema_MariaDBTableArray0[7] =
     * mariaDBSchema_MariaDBTable7; Randomly.fromOptions(mariaDBSchema_MariaDBTableArray0);
     * mariaDBExpressionGenerator0.getRandomExpression(); mariaDBExpressionGenerator0.setColumns(list0);
     * mariaDBExpressionGenerator0.getRandomExpression(5); }
     */

    // @Test
    // public void test07() throws Throwable {
    // Randomly randomly0 = null;
    // MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator((Randomly) null);
    // // Undeclared exception!
    // try {
    // mariaDBExpressionGenerator0.generateBooleanExpression();
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // }
    // }

    // @Test
    // public void test08() throws Throwable {
    // Randomly randomly0 = new Randomly(0L);
    // MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
    // mariaDBExpressionGenerator0.getTableRefs();
    // MariaDBExpression mariaDBExpression0 = mariaDBExpressionGenerator0.getRandomExpression(368);
    // MariaDBConstant.createBooleanConstant(true);
    // randomly0.getFiniteDouble();
    // MariaDBExpressionGenerator mariaDBExpressionGenerator1 = new MariaDBExpressionGenerator(randomly0);
    // MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
    // // Undeclared exception!
    // try {
    // mariaDBExpressionGenerator0.generateUnoptimizedQueryString(mariaDBSelectStatement0, mariaDBExpression0);
    // fail("Expecting exception: IllegalStateException");
    //
    // } catch (IllegalStateException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.common.ast.SelectBase", e);
    // }
    // }

    @Test
    public void test09() throws Throwable {
        Randomly randomly0 = new Randomly(790L);
        MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn.createDummy(" as count");
        MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.VARCHAR;
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn1 = new MariaDBSchema.MariaDBColumn(" as count",
                mariaDBSchema_MariaDBDataType0, false, (-1787));
        List<MariaDBSchema.MariaDBColumn> list0 = List.of(mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn1,
                mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn1, mariaDBSchema_MariaDBColumn0,
                mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn1);
        MariaDBExpressionGenerator mariaDBExpressionGenerator1 = mariaDBExpressionGenerator0.setColumns(list0);
        randomly0.getDouble();
        mariaDBSchema_MariaDBColumn1.getFullQualifiedName();
        MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType1 = MariaDBSchema.MariaDBDataType.BOOLEAN;
        MariaDBExpressionGenerator.getRandomConstant(randomly0, mariaDBSchema_MariaDBDataType1);
        mariaDBExpressionGenerator0.getRandomExpression((-1787));
        // Undeclared exception!
        try {
            mariaDBExpressionGenerator1.generateOptimizedQueryString((MariaDBSelectStatement) null,
                    (MariaDBExpression) null, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.gen.MariaDBExpressionGenerator", e);
        }
    }
}

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test10() throws Throwable { Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class,
 * new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.VARCHAR;
 * MariaDBExpressionGenerator.getRandomConstant(randomly0, mariaDBSchema_MariaDBDataType0); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); MariaDBSelectStatement
 * mariaDBSelectStatement0 = new MariaDBSelectStatement(); // Undeclared exception! try {
 * mariaDBExpressionGenerator0.generateUnoptimizedQueryString(mariaDBSelectStatement0, (MariaDBExpression)
 * mariaDBSelectStatement0); fail("Expecting exception: StackOverflowError");
 *
 * } catch (StackOverflowError e) { // // no message in exception (getMessage() returned null) // } }
 */

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test11() throws Throwable { Randomly randomly0 = new Randomly(); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); MariaDBSchema.MariaDBTable[]
 * mariaDBSchema_MariaDBTableArray0 = new MariaDBSchema.MariaDBTable[1]; MariaDBSchema.MariaDBColumn[]
 * mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[8]; MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.INT; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn0 = new MariaDBSchema.MariaDBColumn( "cI=2ZWwbM>ws9|G0Lw>",
 * mariaDBSchema_MariaDBDataType0, true, (-4381)); mariaDBSchema_MariaDBColumnArray0[0] = mariaDBSchema_MariaDBColumn0;
 * MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn1 = MariaDBSchema.MariaDBColumn.createDummy("");
 * mariaDBSchema_MariaDBColumnArray0[1] = mariaDBSchema_MariaDBColumn1; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn2 = MariaDBSchema.MariaDBColumn .createDummy("CF;Ua[Z5w/KVVq]");
 * mariaDBSchema_MariaDBColumnArray0[2] = mariaDBSchema_MariaDBColumn2; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn3 = new MariaDBSchema.MariaDBColumn("OYjt$/)#Us3*MwLU", mariaDBSchema_MariaDBDataType0,
 * true, (-4381)); mariaDBSchema_MariaDBColumnArray0[3] = mariaDBSchema_MariaDBColumn3; MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType1 = MariaDBSchema.MariaDBDataType.REAL; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn4 = new MariaDBSchema.MariaDBColumn("", mariaDBSchema_MariaDBDataType1, true, (-4381));
 * mariaDBSchema_MariaDBColumnArray0[4] = mariaDBSchema_MariaDBColumn4; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn5 = new MariaDBSchema.MariaDBColumn("DECFLOAT", mariaDBSchema_MariaDBDataType1, true,
 * (-4381)); mariaDBSchema_MariaDBColumnArray0[5] = mariaDBSchema_MariaDBColumn5; MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType2 = MariaDBSchema.MariaDBDataType.INT; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn6 = new MariaDBSchema.MariaDBColumn("i{fa=by^G|+:", mariaDBSchema_MariaDBDataType2, true,
 * (-4381)); mariaDBSchema_MariaDBColumnArray0[6] = mariaDBSchema_MariaDBColumn6; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn7 = new MariaDBSchema.MariaDBColumn("(swAJ`)co]", mariaDBSchema_MariaDBDataType2, false,
 * 51); mariaDBSchema_MariaDBColumnArray0[7] = mariaDBSchema_MariaDBColumn7; List<MariaDBSchema.MariaDBColumn> list0 =
 * Randomly.subset(mariaDBSchema_MariaDBColumnArray0); MariaDBSchema.MariaDBTable.MariaDBEngine
 * mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.ARIA; MariaDBSchema.MariaDBTable
 * mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("cI=2ZWwbM>ws9|G0Lw>", list0,
 * (List<MariaDBSchema.MariaDBIndex>) null, mariaDBSchema_MariaDBTable_MariaDBEngine0);
 * mariaDBSchema_MariaDBTableArray0[0] = mariaDBSchema_MariaDBTable0; List<MariaDBSchema.MariaDBTable> list1 =
 * Randomly.subset(mariaDBSchema_MariaDBTableArray0); List<MariaDBSchema.MariaDBTable> list2 =
 * Randomly.extractNrRandomColumns(list1, (-4381)); AbstractTables<MariaDBSchema.MariaDBTable,
 * MariaDBSchema.MariaDBColumn> abstractTables0 = new AbstractTables<MariaDBSchema.MariaDBTable,
 * MariaDBSchema.MariaDBColumn>( list2); mariaDBExpressionGenerator0.setTablesAndColumns(abstractTables0);
 * mariaDBExpressionGenerator0.generateBooleanExpression(); MariaDBSelectStatement mariaDBSelectStatement0 =
 * mariaDBExpressionGenerator0.generateSelect(); // Undeclared exception! try {
 * mariaDBExpressionGenerator0.generateUnoptimizedQueryString(mariaDBSelectStatement0, (MariaDBExpression)
 * mariaDBSelectStatement0); fail("Expecting exception: StackOverflowError");
 *
 * } catch (StackOverflowError e) { // // no message in exception (getMessage() returned null) // } }
 *
 * @Test public void test12() throws Throwable { Randomly randomly0 = new Randomly(); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); MariaDBSelectStatement
 * mariaDBSelectStatement0 = new MariaDBSelectStatement(); // Undeclared exception! try {
 * mariaDBExpressionGenerator0.generateUnoptimizedQueryString(mariaDBSelectStatement0, (MariaDBExpression)
 * mariaDBSelectStatement0); fail("Expecting exception: StackOverflowError");
 *
 * } catch (StackOverflowError e) { // // no message in exception (getMessage() returned null) // } }
 *
 * @Test public void test13() throws Throwable { Randomly randomly0 = new Randomly(); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); MariaDBSchema.MariaDBColumn[]
 * mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[8]; MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.BOOLEAN; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn0 = new MariaDBSchema.MariaDBColumn("", mariaDBSchema_MariaDBDataType0, false, 5);
 * mariaDBSchema_MariaDBColumnArray0[0] = mariaDBSchema_MariaDBColumn0; MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType1 = MariaDBSchema.MariaDBDataType.VARCHAR; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn1 = new MariaDBSchema.MariaDBColumn("", mariaDBSchema_MariaDBDataType1, true, (-67));
 * mariaDBSchema_MariaDBColumnArray0[1] = mariaDBSchema_MariaDBColumn1; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn2 = new MariaDBSchema.MariaDBColumn("", mariaDBSchema_MariaDBDataType0, true, 5);
 * mariaDBSchema_MariaDBColumnArray0[2] = mariaDBSchema_MariaDBColumn2; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn3 = MariaDBSchema.MariaDBColumn.createDummy(""); mariaDBSchema_MariaDBColumnArray0[3] =
 * mariaDBSchema_MariaDBColumn3; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn4 = new
 * MariaDBSchema.MariaDBColumn("", mariaDBSchema_MariaDBDataType1, true, 5); mariaDBSchema_MariaDBColumnArray0[4] =
 * mariaDBSchema_MariaDBColumn4; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn5 = new
 * MariaDBSchema.MariaDBColumn("", mariaDBSchema_MariaDBDataType1, false, 5); mariaDBSchema_MariaDBColumnArray0[5] =
 * mariaDBSchema_MariaDBColumn5; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn6 = new
 * MariaDBSchema.MariaDBColumn("", mariaDBSchema_MariaDBDataType0, true, 5); mariaDBSchema_MariaDBColumnArray0[6] =
 * mariaDBSchema_MariaDBColumn6; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn7 = new
 * MariaDBSchema.MariaDBColumn("", mariaDBSchema_MariaDBDataType1, true, 7); mariaDBSchema_MariaDBColumnArray0[7] =
 * mariaDBSchema_MariaDBColumn7; List<MariaDBSchema.MariaDBColumn> list0 =
 * Randomly.nonEmptySubset(mariaDBSchema_MariaDBColumnArray0); MariaDBExpressionGenerator mariaDBExpressionGenerator1 =
 * mariaDBExpressionGenerator0.setColumns(list0); LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new
 * LinkedList<MariaDBSchema.MariaDBTable>(); List<MariaDBSchema.MariaDBTable> list1 = Randomly
 * .extractNrRandomColumns((List<MariaDBSchema.MariaDBTable>) linkedList0, (-190));
 * AbstractTables<MariaDBSchema.MariaDBTable, MariaDBSchema.MariaDBColumn> abstractTables0 = new
 * AbstractTables<MariaDBSchema.MariaDBTable, MariaDBSchema.MariaDBColumn>( list1); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator2 = mariaDBExpressionGenerator1 .setTablesAndColumns(abstractTables0);
 * mariaDBExpressionGenerator2.getRandomExpression(); }
 *
 * @Test public void test14() throws Throwable { Randomly randomly0 = new Randomly(); randomly0.getLong((-275L), 0L);
 * MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.INT;
 * MariaDBExpressionGenerator.getRandomConstant(randomly0, mariaDBSchema_MariaDBDataType0); }
 *
 * @Test public void test15() throws Throwable { Randomly randomly0 = new Randomly(); randomly0.getPositiveIntegerInt();
 * MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.INT;
 * MariaDBExpressionGenerator.getRandomConstant(randomly0, mariaDBSchema_MariaDBDataType0); }
 *
 * @Test public void test16() throws Throwable { Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class,
 * new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.INT;
 * MariaDBExpressionGenerator.getRandomConstant(randomly0, mariaDBSchema_MariaDBDataType0); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); MariaDBConstant.createNullConstant();
 * MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement(); MariaDBSelectStatement
 * mariaDBSelectStatement1 = new MariaDBSelectStatement(); boolean boolean0 = true;
 * mariaDBSelectStatement0.clearHavingClause(); // Undeclared exception! try {
 * mariaDBExpressionGenerator0.generateOptimizedQueryString(mariaDBSelectStatement1, (MariaDBExpression)
 * mariaDBSelectStatement1, true); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test17() throws Throwable { Randomly randomly0 = new Randomly(5L); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); mariaDBExpressionGenerator0.getTableRefs();
 * }
 *
 * @Test public void test18() throws Throwable { Randomly randomly0 = null; MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator((Randomly) null);
 * mariaDBExpressionGenerator0.getTableRefs(); mariaDBExpressionGenerator0.getTableRefs();
 * mariaDBExpressionGenerator0.getTableRefs(); mariaDBExpressionGenerator0.generateSelect(); // Undeclared exception!
 * try { mariaDBExpressionGenerator0.getRandomExpression(); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
 *
 * @Test public void test19() throws Throwable { Randomly randomly0 = new Randomly(790L); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
 * mariaDBExpressionGenerator0.getRandomExpression(368); MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0
 * = new MariaDBSchema.MariaDBColumn[6]; randomly0.getFiniteDouble(); MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn.createDummy(".s"); mariaDBSchema_MariaDBColumnArray0[0] =
 * mariaDBSchema_MariaDBColumn0; MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 =
 * MariaDBSchema.MariaDBDataType.INT; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn1 = new
 * MariaDBSchema.MariaDBColumn(".s", mariaDBSchema_MariaDBDataType0, true, 368); mariaDBSchema_MariaDBColumnArray0[1] =
 * mariaDBSchema_MariaDBColumn1; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn2 =
 * MariaDBSchema.MariaDBColumn.createDummy(""); mariaDBSchema_MariaDBColumnArray0[2] = mariaDBSchema_MariaDBColumn2;
 * MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn3 = MariaDBSchema.MariaDBColumn.createDummy("");
 * randomly0.getNonZeroInteger(); Randomly.getPercentage(); mariaDBSchema_MariaDBColumn2.getFullQualifiedName();
 * mariaDBSchema_MariaDBColumnArray0[3] = mariaDBSchema_MariaDBColumn3; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn4 = new MariaDBSchema.MariaDBColumn("", mariaDBSchema_MariaDBDataType0, false, 368);
 * mariaDBSchema_MariaDBColumnArray0[4] = mariaDBSchema_MariaDBColumn4; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn5 = MariaDBSchema.MariaDBColumn.createDummy(""); randomly0.getString();
 * mariaDBSchema_MariaDBColumnArray0[5] = mariaDBSchema_MariaDBColumn5; List<MariaDBSchema.MariaDBColumn> list0 =
 * Randomly.subset(mariaDBSchema_MariaDBColumnArray0); List<MariaDBSchema.MariaDBColumn> list1 =
 * Randomly.extractNrRandomColumns(list0, (-4339)); MariaDBExpressionGenerator mariaDBExpressionGenerator1 =
 * mariaDBExpressionGenerator0.setColumns(list1); mariaDBExpressionGenerator1.generateSelect();
 * mariaDBExpressionGenerator0.getRandomExpression(0); }
 *
 * @Test public void test20() throws Throwable { Randomly randomly0 = new Randomly();
 * MariaDBExpressionGenerator.getRandomConstant(randomly0); MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new
 * MariaDBExpressionGenerator(randomly0); MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new
 * MariaDBSchema.MariaDBColumn[8]; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 =
 * MariaDBSchema.MariaDBColumn.createDummy("vE"); mariaDBSchema_MariaDBColumnArray0[0] = mariaDBSchema_MariaDBColumn0;
 * MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn1 = MariaDBSchema.MariaDBColumn.createDummy("]WbZl,V>");
 * mariaDBSchema_MariaDBColumnArray0[1] = mariaDBSchema_MariaDBColumn1; MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.VARCHAR; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn2 = new MariaDBSchema.MariaDBColumn("vE", mariaDBSchema_MariaDBDataType0, false, 0);
 * mariaDBSchema_MariaDBColumnArray0[2] = mariaDBSchema_MariaDBColumn2; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn3 = MariaDBSchema.MariaDBColumn.createDummy("d0P"); mariaDBSchema_MariaDBColumnArray0[3] =
 * mariaDBSchema_MariaDBColumn3; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn4 = new
 * MariaDBSchema.MariaDBColumn("BINARY_COMPARISON", mariaDBSchema_MariaDBDataType0, false, 0);
 * mariaDBSchema_MariaDBColumnArray0[4] = mariaDBSchema_MariaDBColumn4; MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType1 = MariaDBSchema.MariaDBDataType.BOOLEAN; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn5 = new MariaDBSchema.MariaDBColumn("cH9", mariaDBSchema_MariaDBDataType1, false, 793);
 * mariaDBSchema_MariaDBColumnArray0[5] = mariaDBSchema_MariaDBColumn5; MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType2 = MariaDBSchema.MariaDBDataType.BOOLEAN; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn6 = new MariaDBSchema.MariaDBColumn("BINARY_COMPARISON", mariaDBSchema_MariaDBDataType2,
 * false, 52); mariaDBSchema_MariaDBColumnArray0[6] = mariaDBSchema_MariaDBColumn6; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn7 = MariaDBSchema.MariaDBColumn.createDummy("cH9"); mariaDBSchema_MariaDBColumnArray0[7] =
 * mariaDBSchema_MariaDBColumn7; List<MariaDBSchema.MariaDBColumn> list0 =
 * Randomly.subset(mariaDBSchema_MariaDBColumnArray0); mariaDBExpressionGenerator0.setColumns(list0);
 * AbstractTables<MariaDBSchema.MariaDBTable, MariaDBSchema.MariaDBColumn> abstractTables0 = null; try { abstractTables0
 * = new AbstractTables<MariaDBSchema.MariaDBTable, MariaDBSchema.MariaDBColumn>( (List<MariaDBSchema.MariaDBTable>)
 * null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.schema.AbstractTables", e); } }
 *
 * @Test public void test21() throws Throwable { MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new
 * MariaDBExpressionGenerator((Randomly) null); mariaDBExpressionGenerator0.getRandomExpression(368);
 * MariaDBExpressionGenerator mariaDBExpressionGenerator1 = new MariaDBExpressionGenerator((Randomly) null); }
 *
 * @Test public void test22() throws Throwable { MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new
 * MariaDBExpressionGenerator((Randomly) null); // Undeclared exception! try {
 * mariaDBExpressionGenerator0.getRandomExpression(); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
 *
 * @Test public void test23() throws Throwable { MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new
 * MariaDBExpressionGenerator((Randomly) null); LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new
 * LinkedList<MariaDBSchema.MariaDBTable>(); List<MariaDBSchema.MariaDBTable> list0 = Randomly
 * .nonEmptySubsetLeast((List<MariaDBSchema.MariaDBTable>) linkedList0, (-2997));
 * AbstractTables<MariaDBSchema.MariaDBTable, MariaDBSchema.MariaDBColumn> abstractTables0 = new
 * AbstractTables<MariaDBSchema.MariaDBTable, MariaDBSchema.MariaDBColumn>( list0); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator1 = mariaDBExpressionGenerator0 .setTablesAndColumns(abstractTables0);
 * MariaDBSchema.MariaDBColumn[] mariaDBSchema_MariaDBColumnArray0 = new MariaDBSchema.MariaDBColumn[3];
 * MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn .createDummy((String) null);
 * mariaDBSchema_MariaDBColumnArray0[0] = mariaDBSchema_MariaDBColumn0; MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.BOOLEAN; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn1 = new MariaDBSchema.MariaDBColumn("_HDGAduZY6IqWQ^j9|", mariaDBSchema_MariaDBDataType0,
 * false, (-2997)); mariaDBSchema_MariaDBColumnArray0[1] = mariaDBSchema_MariaDBColumn1; MariaDBSchema.MariaDBColumn
 * mariaDBSchema_MariaDBColumn2 = new MariaDBSchema.MariaDBColumn((String) null, mariaDBSchema_MariaDBDataType0, false,
 * 0); mariaDBSchema_MariaDBColumnArray0[2] = mariaDBSchema_MariaDBColumn2; List<MariaDBSchema.MariaDBColumn> list1 =
 * Randomly.subset(mariaDBSchema_MariaDBColumnArray0); MariaDBExpressionGenerator mariaDBExpressionGenerator2 =
 * mariaDBExpressionGenerator1.setColumns(list1); AbstractTables<MariaDBSchema.MariaDBTable,
 * MariaDBSchema.MariaDBColumn> abstractTables1 = new AbstractTables<MariaDBSchema.MariaDBTable,
 * MariaDBSchema.MariaDBColumn>( list0); mariaDBExpressionGenerator2.setTablesAndColumns(abstractTables1); }
 *
 * @Test public void test24() throws Throwable { Randomly randomly0 = new Randomly(5L); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
 * mariaDBExpressionGenerator0.getRandomExpression(0); }
 *
 * @Test public void test25() throws Throwable { Randomly randomly0 = new Randomly((-3061L)); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); MariaDBSelectStatement
 * mariaDBSelectStatement0 = mariaDBExpressionGenerator0.generateSelect(); // Undeclared exception! try {
 * mariaDBExpressionGenerator0.generateOptimizedQueryString(mariaDBSelectStatement0, (MariaDBExpression)
 * mariaDBSelectStatement0, false); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
 * mariaDBExpressionGenerator0.generateSelect(); }
 *
 * @Test public void test27() throws Throwable { Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class,
 * new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); Randomly.getUncachedDouble();
 * MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
 * MariaDBSelectStatement mariaDBSelectStatement0 = mariaDBExpressionGenerator0.generateSelect(); // Undeclared
 * exception! try { mariaDBExpressionGenerator0.generateOptimizedQueryString(mariaDBSelectStatement0,
 * (MariaDBExpression) mariaDBSelectStatement0, false); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test28() throws Throwable { Randomly randomly0 = new Randomly(); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator1 = mariaDBExpressionGenerator0 .setColumns((List<MariaDBSchema.MariaDBColumn>) null); //
 * Undeclared exception! try { mariaDBExpressionGenerator1.generateOptimizedQueryString((MariaDBSelectStatement) null,
 * (MariaDBExpression) null, false); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.mariadb.gen.MariaDBExpressionGenerator", e); } }
 *
 * @Test public void test29() throws Throwable { Randomly randomly0 = new Randomly(); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); // Undeclared exception! try {
 * mariaDBExpressionGenerator0.setTablesAndColumns( (AbstractTables<MariaDBSchema.MariaDBTable,
 * MariaDBSchema.MariaDBColumn>) null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.mariadb.gen.MariaDBExpressionGenerator", e); } }
 *
 * @Test public void test30() throws Throwable { Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class,
 * new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); List<MariaDBSchema.MariaDBColumn> list0 =
 * null; MariaDBExpressionGenerator mariaDBExpressionGenerator1 = mariaDBExpressionGenerator0
 * .setColumns((List<MariaDBSchema.MariaDBColumn>) null); AbstractTables<MariaDBSchema.MariaDBTable,
 * MariaDBSchema.MariaDBColumn> abstractTables0 = null; // Undeclared exception! try {
 * mariaDBExpressionGenerator1.setTablesAndColumns( (AbstractTables<MariaDBSchema.MariaDBTable,
 * MariaDBSchema.MariaDBColumn>) null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.mariadb.gen.MariaDBExpressionGenerator", e); } }
 *
 * @Test public void test31() throws Throwable { Randomly randomly0 = new Randomly(); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); MariaDBSelectStatement
 * mariaDBSelectStatement0 = new MariaDBSelectStatement(); // Undeclared exception! try {
 * mariaDBExpressionGenerator0.generateOptimizedQueryString(mariaDBSelectStatement0, (MariaDBExpression)
 * mariaDBSelectStatement0, true); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test32() throws Throwable { Randomly randomly0 = new Randomly(); Randomly.getBoolean();
 * MariaDBExpressionGenerator mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
 * MariaDBSelectStatement mariaDBSelectStatement0 = new MariaDBSelectStatement();
 * mariaDBExpressionGenerator0.getRandomExpression((-616)); mariaDBExpressionGenerator0.getTableRefs();
 * mariaDBExpressionGenerator0.getRandomExpression((-430)); }
 *
 * @Test public void test33() throws Throwable { Randomly randomly0 = new Randomly(); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0); List<MariaDBJoin> list0 =
 * mariaDBExpressionGenerator0.getRandomJoinClauses(); assertEquals(0, list0.size()); }
 *
 * @Test public void test34() throws Throwable { Randomly randomly0 = new Randomly(5L); MariaDBSchema.MariaDBDataType
 * mariaDBSchema_MariaDBDataType0 = MariaDBSchema.MariaDBDataType.BOOLEAN; MariaDBConstant.MariaDBBooleanConstant
 * mariaDBConstant_MariaDBBooleanConstant0 = (MariaDBConstant.MariaDBBooleanConstant) MariaDBExpressionGenerator
 * .getRandomConstant(randomly0, mariaDBSchema_MariaDBDataType0);
 * assertFalse(mariaDBConstant_MariaDBBooleanConstant0.getValue()); }
 *
 * @Test public void test35() throws Throwable { Randomly randomly0 = new Randomly(); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
 * mariaDBExpressionGenerator0.getRandomExpression(); MariaDBPostfixUnaryOperation mariaDBPostfixUnaryOperation0 =
 * (MariaDBPostfixUnaryOperation) mariaDBExpressionGenerator0 .generateBooleanExpression();
 * assertEquals(MariaDBPostfixUnaryOperation.MariaDBPostfixUnaryOperator.IS_NULL,
 * mariaDBPostfixUnaryOperation0.getOperator()); }
 *
 * @Test public void test36() throws Throwable { Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class,
 * new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); MariaDBExpressionGenerator
 * mariaDBExpressionGenerator0 = new MariaDBExpressionGenerator(randomly0);
 * mariaDBExpressionGenerator0.getRandomJoinClauses(); mariaDBExpressionGenerator0.generateBooleanExpression();
 * MariaDBExpressionGenerator.getRandomConstant(randomly0); mariaDBExpressionGenerator0.generateBooleanExpression();
 * MariaDBSchema.MariaDBTable[] mariaDBSchema_MariaDBTableArray0 = new MariaDBSchema.MariaDBTable[3]; String string0 =
 * "is_nullable"; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn
 * .createDummy("4eU9H_+*3 Dcvx%Rp"); MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 =
 * MariaDBSchema.MariaDBDataType.REAL; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn1 = new
 * MariaDBSchema.MariaDBColumn("is_nullable", mariaDBSchema_MariaDBDataType0, false, 51);
 * List.of(mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn1, mariaDBSchema_MariaDBColumn0,
 * mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn1,
 * mariaDBSchema_MariaDBColumn0, mariaDBSchema_MariaDBColumn1, mariaDBSchema_MariaDBColumn1);
 * MariaDBSchema.MariaDBIndex[] mariaDBSchema_MariaDBIndexArray0 = new MariaDBSchema.MariaDBIndex[6];
 * MariaDBSchema.MariaDBIndex mariaDBSchema_MariaDBIndex0 = mock(MariaDBSchema.MariaDBIndex.class, new
 * ViolatedAssumptionAnswer()); mariaDBSchema_MariaDBIndexArray0[0] = mariaDBSchema_MariaDBIndex0;
 * mariaDBSchema_MariaDBIndexArray0[1] = mariaDBSchema_MariaDBIndex0; mariaDBSchema_MariaDBIndexArray0[2] =
 * mariaDBSchema_MariaDBIndex0; mariaDBSchema_MariaDBIndexArray0[3] = mariaDBSchema_MariaDBIndex0;
 * mariaDBSchema_MariaDBIndexArray0[4] = mariaDBSchema_MariaDBIndex0; mariaDBSchema_MariaDBIndexArray0[5] =
 * mariaDBSchema_MariaDBIndex0; // Undeclared exception! try { Randomly.subset(2575053,
 * mariaDBSchema_MariaDBIndexArray0); fail("Expecting exception: IndexOutOfBoundsException");
 *
 * } catch (IndexOutOfBoundsException e) { } } }
 */
