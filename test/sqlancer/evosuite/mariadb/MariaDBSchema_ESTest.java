/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:08:25 GMT 2025
 */

package sqlancer.evosuite.mariadb;

import static org.junit.jupiter.api.Assertions.*;

import java.util.function.Function;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.mariadb.MariaDBSchema;
import sqlancer.SQLConnection;

public class MariaDBSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test00() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("aria", "';").when(resultSet0).getString(anyString());
     * doReturn(true).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(statement0).when(connection0).createStatement(); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); // Undeclared exception! try { MariaDBSchema.fromConnection(sQLConnection0, "");
     * fail("Expecting exception: NoSuchElementException");
     *
     * } catch (NoSuchElementException e) { // // No value present // verifyException("java.util.Optional", e); } }
     */

    @Test
    public void test01() throws Throwable {
        MariaDBSchema mariaDBSchema0 = null;
        try {
            mariaDBSchema0 = new MariaDBSchema((List<MariaDBSchema.MariaDBTable>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new LinkedList<MariaDBSchema.MariaDBTable>();
        linkedList0.add((MariaDBSchema.MariaDBTable) null);
        MariaDBSchema.MariaDBTables mariaDBSchema_MariaDBTables0 = null;
        try {
            mariaDBSchema_MariaDBTables0 = new MariaDBSchema.MariaDBTables(linkedList0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.MariaDBSchema$MariaDBTables", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test03() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("myisam", "myisam").when(resultSet0).getString(anyString());
     * doReturn(true).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
     * null).when(connection0).createStatement(); SQLConnection sQLConnection0 = new SQLConnection(connection0); //
     * Undeclared exception! try { MariaDBSchema.fromConnection(sQLConnection0, "myisam");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.mariadb.MariaDBSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test04() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("myisam", "myisam").when(resultSet0).getString(anyString());
     * doReturn(true).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(statement0).executeQuery(anyString()); Statement
     * statement1 = mock(Statement.class, new ViolatedAssumptionAnswer()); doReturn((ResultSet)
     * null).when(statement1).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(statement0, statement1).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * MariaDBSchema.fromConnection(sQLConnection0, "O:"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.mariadb.MariaDBSchema", e); } }
     */

    @Test
    public void test05() throws Throwable {
        // Undeclared exception!
        try {
            MariaDBSchema.fromConnection((SQLConnection) null, "-5&vj2^o");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mariadb.MariaDBSchema", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test06() throws Throwable { Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * MariaDBSchema.fromConnection(sQLConnection0, "ARIA"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.mariadb.MariaDBSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test07() throws Throwable { Statement statement0 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn((ResultSet) null).when(statement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(statement0).when(connection0).createStatement(); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); // Undeclared exception! try { MariaDBSchema.fromConnection(sQLConnection0, "O:");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.mariadb.MariaDBSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test08() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn(false).when(resultSet0).next(); Statement statement0 =
     * mock(Statement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class,
     * new ViolatedAssumptionAnswer()); doReturn(statement0).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); MariaDBSchema mariaDBSchema0 =
     * MariaDBSchema.fromConnection(sQLConnection0, "=fO)'d[o{u;!c@>6&AV"); assertNotNull(mariaDBSchema0); }
     *
     * @Test public void test09() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("myisam", "myisam").when(resultSet0).getString(anyString());
     * doReturn(true).when(resultSet0).next(); Statement statement0 = mock(Statement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(statement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
     * null).when(connection0).createStatement(); SQLConnection sQLConnection0 = new SQLConnection(connection0); //
     * Undeclared exception! try { MariaDBSchema.fromConnection(sQLConnection0, "O:");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.mariadb.MariaDBSchema", e); } }
     *
     * @Test public void test10() throws Throwable { LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new
     * LinkedList<MariaDBSchema.MariaDBTable>(); LinkedList<MariaDBSchema.MariaDBColumn> linkedList1 = new
     * LinkedList<MariaDBSchema.MariaDBColumn>(); MariaDBSchema.MariaDBIndex mariaDBSchema_MariaDBIndex0 =
     * mock(MariaDBSchema.MariaDBIndex.class, new ViolatedAssumptionAnswer()); List<MariaDBSchema.MariaDBIndex> list0 =
     * List.of(mariaDBSchema_MariaDBIndex0, mariaDBSchema_MariaDBIndex0, mariaDBSchema_MariaDBIndex0,
     * mariaDBSchema_MariaDBIndex0, mariaDBSchema_MariaDBIndex0, mariaDBSchema_MariaDBIndex0,
     * mariaDBSchema_MariaDBIndex0); MariaDBSchema.MariaDBTable.MariaDBEngine mariaDBSchema_MariaDBTable_MariaDBEngine0
     * = MariaDBSchema.MariaDBTable.MariaDBEngine.ARIA; MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new
     * MariaDBSchema.MariaDBTable("", linkedList1, list0, mariaDBSchema_MariaDBTable_MariaDBEngine0);
     * linkedList0.push(mariaDBSchema_MariaDBTable0); MariaDBSchema mariaDBSchema0 = new MariaDBSchema(linkedList0);
     * MariaDBSchema.MariaDBTables mariaDBSchema_MariaDBTables0 = mariaDBSchema0.getRandomTableNonEmptyTables();
     * assertNotNull(mariaDBSchema_MariaDBTables0); }
     *
     * @Test public void test11() throws Throwable { LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new
     * LinkedList<MariaDBSchema.MariaDBTable>(); MariaDBSchema.MariaDBTables mariaDBSchema_MariaDBTables0 = new
     * MariaDBSchema.MariaDBTables(linkedList0); List<MariaDBSchema.MariaDBColumn> list0 =
     * mariaDBSchema_MariaDBTables0.getColumns(); MariaDBSchema.MariaDBIndex mariaDBSchema_MariaDBIndex0 =
     * mock(MariaDBSchema.MariaDBIndex.class, new ViolatedAssumptionAnswer()); List<MariaDBSchema.MariaDBIndex> list1 =
     * List.of(mariaDBSchema_MariaDBIndex0, mariaDBSchema_MariaDBIndex0, mariaDBSchema_MariaDBIndex0,
     * mariaDBSchema_MariaDBIndex0, mariaDBSchema_MariaDBIndex0); MariaDBSchema.MariaDBTable.MariaDBEngine
     * mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine.ARIA;
     * MariaDBSchema.MariaDBTable mariaDBSchema_MariaDBTable0 = new MariaDBSchema.MariaDBTable("-5vj2^o", list0,
     * list1, mariaDBSchema_MariaDBTable_MariaDBEngine0); MariaDBSchema.MariaDBTable.MariaDBEngine
     * mariaDBSchema_MariaDBTable_MariaDBEngine1 = mariaDBSchema_MariaDBTable0 .getEngine();
     * assertSame(mariaDBSchema_MariaDBTable_MariaDBEngine1, mariaDBSchema_MariaDBTable_MariaDBEngine0); }
     *
     * @Test public void test12() throws Throwable { MariaDBSchema.MariaDBColumn.CollateSequence
     * mariaDBSchema_MariaDBColumn_CollateSequence0 = MariaDBSchema.MariaDBColumn.CollateSequence .random();
     * assertEquals(MariaDBSchema.MariaDBColumn.CollateSequence.NOCASE, mariaDBSchema_MariaDBColumn_CollateSequence0); }
     *
     * @Test public void test13() throws Throwable { MariaDBSchema.MariaDBTable.MariaDBEngine
     * mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine .get("aria"); String string0
     * = mariaDBSchema_MariaDBTable_MariaDBEngine0.getTextRepresentation(); assertEquals("Aria", string0); }
     *
     * @Test public void test14() throws Throwable { MariaDBSchema.MariaDBTable.MariaDBEngine
     * mariaDBSchema_MariaDBTable_MariaDBEngine0 = MariaDBSchema.MariaDBTable.MariaDBEngine .getRandomEngine();
     * assertEquals(MariaDBSchema.MariaDBTable.MariaDBEngine.INNO_DB, mariaDBSchema_MariaDBTable_MariaDBEngine0); }
     *
     * @Test public void test15() throws Throwable { MariaDBSchema.MariaDBDataType mariaDBSchema_MariaDBDataType0 =
     * MariaDBSchema.MariaDBDataType.REAL; MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = new
     * MariaDBSchema.MariaDBColumn("^r`}<on$$^t^", mariaDBSchema_MariaDBDataType0, false, 0); boolean boolean0 =
     * mariaDBSchema_MariaDBColumn0.isPrimaryKey(); assertEquals(0, mariaDBSchema_MariaDBColumn0.getPrecision());
     * assertFalse(boolean0); }
     */

    @Test
    public void test16() throws Throwable {
        MariaDBSchema.MariaDBColumn mariaDBSchema_MariaDBColumn0 = MariaDBSchema.MariaDBColumn
                .createDummy("SELECT collname FROM pg_collation WHERE collname LIKE '%utf8' or collname = 'C';");
        int int0 = mariaDBSchema_MariaDBColumn0.getPrecision();
        assertFalse(mariaDBSchema_MariaDBColumn0.isPrimaryKey());
        assertEquals(1, int0);
    }

    @Test
    public void test17() throws Throwable {
        LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new LinkedList<MariaDBSchema.MariaDBTable>();
        MariaDBSchema.MariaDBTables mariaDBSchema_MariaDBTables0 = new MariaDBSchema.MariaDBTables(linkedList0);
        String string0 = mariaDBSchema_MariaDBTables0.tableNamesAsString();
        assertEquals("", string0);
    }

    @Test
    public void test18() throws Throwable {
        LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new LinkedList<MariaDBSchema.MariaDBTable>();
        MariaDBSchema.MariaDBTables mariaDBSchema_MariaDBTables0 = new MariaDBSchema.MariaDBTables(linkedList0);
        // Undeclared exception!
        try {
            mariaDBSchema_MariaDBTables0.columnNamesAsString((Function<MariaDBSchema.MariaDBColumn, String>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Objects", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new LinkedList<MariaDBSchema.MariaDBTable>();
        MariaDBSchema.MariaDBTables mariaDBSchema_MariaDBTables0 = new MariaDBSchema.MariaDBTables(linkedList0);
        List<MariaDBSchema.MariaDBTable> list0 = mariaDBSchema_MariaDBTables0.getTables();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test20() throws Throwable {
        LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new LinkedList<MariaDBSchema.MariaDBTable>();
        MariaDBSchema.MariaDBTables mariaDBSchema_MariaDBTables0 = new MariaDBSchema.MariaDBTables(linkedList0);
        String string0 = mariaDBSchema_MariaDBTables0.columnNamesAsString();
        assertEquals("", string0);
    }

    @Test
    public void test21() throws Throwable {
        LinkedList<MariaDBSchema.MariaDBTable> linkedList0 = new LinkedList<MariaDBSchema.MariaDBTable>();
        MariaDBSchema mariaDBSchema0 = new MariaDBSchema(linkedList0);
        // Undeclared exception!
        try {
            mariaDBSchema0.getRandomTableNonEmptyTables();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }
}
