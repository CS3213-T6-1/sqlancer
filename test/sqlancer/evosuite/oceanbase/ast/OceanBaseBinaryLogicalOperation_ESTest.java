/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 01:34:23 GMT 2025
 */

package sqlancer.evosuite.oceanbase.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.oceanbase.ast.OceanBaseBinaryLogicalOperation;
import sqlancer.oceanbase.ast.OceanBaseColumnName;
import sqlancer.oceanbase.ast.OceanBaseComputableFunction;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.ast.OceanBaseExpression;
import sqlancer.oceanbase.ast.OceanBaseSelect;
import sqlancer.oceanbase.ast.OceanBaseText;
import sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation;
import sqlancer.oceanbase.OceanBaseSchema;

public class OceanBaseBinaryLogicalOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstant(2405L, true);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.XOR;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseUnaryPrefixOperation0, oceanBaseConstant0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation0.getExpectedValue();
        assertNotNull(oceanBaseConstant1);
        assertFalse(oceanBaseConstant1.asBooleanNotNull());
    }

    // @Test
    // public void test01() throws Throwable {
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
    // oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 =
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
    // String string0 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0.getTextRepresentation();
    // assertEquals("AND", string0);
    // }

    @Test
    public void test02() throws Throwable {
        OceanBaseText oceanBaseText0 = new OceanBaseText((OceanBaseExpression) null, "", true);
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseText0, (OceanBaseExpression) null,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseExpression oceanBaseExpression0 = oceanBaseBinaryLogicalOperation0.getRight();
        assertNull(oceanBaseExpression0);
    }

    @Test
    public void test03() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.XOR;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                (OceanBaseExpression) null, (OceanBaseExpression) null,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseExpression oceanBaseExpression0 = oceanBaseBinaryLogicalOperation0.getLeft();
        assertNull(oceanBaseExpression0);
    }

    @Test
    public void test04() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
                .getRandom();
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-2944L), false);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseIntConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseConstant_OceanBaseIntConstant0, oceanBaseUnaryPrefixOperation0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            oceanBaseBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation$OceanBaseUnaryPrefixOperator$3", e);
        }
    }

    // @Test
    // public void test05() throws Throwable {
    // OceanBaseJoin oceanBaseJoin0 = new OceanBaseJoin();
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
    // oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 =
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
    // OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
    // oceanBaseJoin0, oceanBaseJoin0, oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
    // // Undeclared exception!
    // try {
    // oceanBaseBinaryLogicalOperation0.getExpectedValue();
    // fail("Expecting exception: UnsupportedOperationException");
    //
    // } catch (UnsupportedOperationException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.oceanbase.ast.OceanBaseJoin", e);
    // }
    // }

    @Test
    public void test06() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                (OceanBaseExpression) null, (OceanBaseExpression) null,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            oceanBaseBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseBinaryLogicalOperation", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
                .getRandom();
        OceanBaseColumnName oceanBaseColumnName0 = new OceanBaseColumnName((OceanBaseSchema.OceanBaseColumn) null);
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseColumnName0, oceanBaseColumnName0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            oceanBaseBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // PQS not supported for this operator
            //
        }
    }

    @Test
    public void test08() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
                .getRandom();
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IFNULL;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseComputableFunction0, oceanBaseComputableFunction0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            oceanBaseBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$4", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseSelect0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryLogicalOperation0.getExpectedValue();
        assertNull(oceanBaseConstant0);
    }

    @Test
    public void test10() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
                .getRandom();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseSelect0, oceanBaseSelect0, oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryLogicalOperation0.getExpectedValue();
        assertNull(oceanBaseConstant0);
    }

    @Test
    public void test11() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant oceanBaseConstant1 = OceanBaseConstant.createNullConstant();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.XOR;
        OceanBaseConstant oceanBaseConstant2 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
                .apply(oceanBaseConstant0, oceanBaseConstant1);
        assertFalse(oceanBaseConstant2.isString());
    }

    @Test
    public void test12() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.XOR;
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseConstant_OceanBaseNullConstant0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryLogicalOperation0.getExpectedValue();
        assertNull(oceanBaseConstant0.getType());
    }

    // @Test
    // public void test13() throws Throwable {
    // OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
    // OceanBaseConstant oceanBaseConstant1 = OceanBaseConstant.createTrue();
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
    // oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 =
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
    // OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
    // oceanBaseConstant0, oceanBaseConstant1,
    // oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
    // OceanBaseConstant oceanBaseConstant2 = oceanBaseBinaryLogicalOperation0.getExpectedValue();
    // assertNotNull(oceanBaseConstant2);
    // assertEquals("1", oceanBaseConstant2.getTextRepresentation());
    // }

    @Test
    public void test14() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseConstant0, oceanBaseConstant0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation0.getExpectedValue();
        assertNotNull(oceanBaseConstant1);
        assertEquals("0", oceanBaseConstant1.getTextRepresentation());
    }

    @Test
    public void test15() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
                .apply(oceanBaseConstant0, oceanBaseConstant0);
        assertFalse(oceanBaseConstant1.isString());
    }

    @Test
    public void test16() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createUnsignedIntConstant(0L);
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
                .apply(oceanBaseConstant0, oceanBaseConstant_OceanBaseNullConstant0);
        assertFalse(oceanBaseConstant1.equals((Object) oceanBaseConstant_OceanBaseNullConstant0));
    }

    @Test
    public void test17() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseConstant_OceanBaseNullConstant0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryLogicalOperation0.getExpectedValue();
        assertFalse(oceanBaseConstant0.isString());
    }

    @Test
    public void test18() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant oceanBaseConstant1 = OceanBaseConstant.createIntConstantNotAsBoolean((-2117L));
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
        OceanBaseConstant oceanBaseConstant2 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
                .apply(oceanBaseConstant1, oceanBaseConstant0);
        assertFalse(oceanBaseConstant2.asBooleanNotNull());
    }

    @Test
    public void test19() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
                .getRandom();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
                .apply(oceanBaseConstant0, oceanBaseConstant0);
        assertFalse(oceanBaseConstant1.asBooleanNotNull());
    }

    @Test
    public void test20() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant oceanBaseConstant1 = OceanBaseConstant.createNullConstant();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
        OceanBaseConstant oceanBaseConstant2 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
                .apply(oceanBaseConstant0, oceanBaseConstant1);
        assertFalse(oceanBaseConstant2.isNull());
    }

    @Test
    public void test21() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
                .getRandom();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
                .apply(oceanBaseConstant0, oceanBaseConstant_OceanBaseNullConstant0);
        assertTrue(oceanBaseConstant1.isNull());
    }

    // @Test
    // public void test22() throws Throwable {
    // OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
    // oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 =
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
    // .getRandom();
    // OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new
    // OceanBaseConstant.OceanBaseNullConstant();
    // OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
    // .apply(oceanBaseConstant_OceanBaseNullConstant0, oceanBaseConstant0);
    // assertEquals("0", oceanBaseConstant1.getTextRepresentation());
    // }

    @Test
    public void test23() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
                .getRandom();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-423.2));
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
                .apply(oceanBaseConstant0, oceanBaseConstant_OceanBaseDoubleConstant0);
        assertFalse(oceanBaseConstant1.isDouble());
    }

    @Test
    public void test24() throws Throwable {
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
                .getRandom();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
                .apply(oceanBaseConstant0, oceanBaseConstant0);
        assertEquals("NULL", oceanBaseConstant1.castAsString());
    }

    // @Test
    // public void test25() throws Throwable {
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
    // oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 =
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
    // .getRandom();
    // OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
    // OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0
    // .apply(oceanBaseConstant0, oceanBaseConstant0);
    // assertTrue(oceanBaseConstant1.asBooleanNotNull());
    // }

    @Test
    public void test26() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseConstant_OceanBaseNullConstant0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant1 = (OceanBaseConstant.OceanBaseNullConstant) oceanBaseBinaryLogicalOperation0
                .getRight();
        assertFalse(oceanBaseConstant_OceanBaseNullConstant1.isDouble());
    }

    @Test
    public void test27() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseConstant_OceanBaseNullConstant0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant1 = (OceanBaseConstant.OceanBaseNullConstant) oceanBaseBinaryLogicalOperation0
                .getLeft();
        assertEquals("NULL", oceanBaseConstant_OceanBaseNullConstant1.getTextRepresentation());
    }

    // @Test
    // public void test28() throws Throwable {
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
    // oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 =
    // OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
    // OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
    // (OceanBaseExpression) null, (OceanBaseExpression) null,
    // oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
    // String string0 = oceanBaseBinaryLogicalOperation0.getTextRepresentation();
    // assertEquals("OR", string0);
    // }

    @Test
    public void test29() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseSelect0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator1 = oceanBaseBinaryLogicalOperation0
                .getOp();
        assertSame(oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator1);
    }

    // @Test
    // public void test30() throws Throwable {
    // OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
    // OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = null;
    // try {
    // oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(oceanBaseConstant0,
    // oceanBaseConstant0, (OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator) null);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.oceanbase.ast.OceanBaseBinaryLogicalOperation", e);
    // }
    // }
}
