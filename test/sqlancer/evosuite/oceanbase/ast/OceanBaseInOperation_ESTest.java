/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:08:42 GMT 2025
 */

package sqlancer.evosuite.oceanbase.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.oceanbase.ast.OceanBaseBinaryComparisonOperation;
import sqlancer.oceanbase.ast.OceanBaseColumnName;
import sqlancer.oceanbase.ast.OceanBaseComputableFunction;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.ast.OceanBaseExpression;
import sqlancer.oceanbase.ast.OceanBaseInOperation;
import sqlancer.oceanbase.ast.OceanBaseJoin;
import sqlancer.oceanbase.ast.OceanBaseSelect;
import sqlancer.oceanbase.OceanBaseSchema;

public class OceanBaseInOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.0);
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        List<OceanBaseExpression> list0 = oceanBaseSelect0.getGroupByExpressions();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, list0, false);
        boolean boolean0 = oceanBaseInOperation0.isTrue();
        assertFalse(boolean0);
    }

    @Test
    public void test01() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                288L, "_zz$ ]2g1AuIX");
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseConstant_OceanBaseIntConstant0,
                (List<OceanBaseExpression>) null, true);
        oceanBaseInOperation0.getListElements();
        assertTrue(oceanBaseInOperation0.isTrue());
    }

    @Test
    public void test02() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1.0));
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, linkedList0, true);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseInOperation0.getExpectedValue();
        linkedList0.addLast(oceanBaseConstant0);
        assertEquals(0L, oceanBaseConstant0.getInt());

        oceanBaseInOperation0.getListElements();
        assertTrue(oceanBaseInOperation0.isTrue());
    }

    @Test
    public void test03() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        List<OceanBaseExpression> list0 = oceanBaseSelect0.getGroupByClause();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseConstant_OceanBaseNullConstant0,
                list0, false);
        oceanBaseInOperation0.getListElements();
        assertFalse(oceanBaseInOperation0.isTrue());
    }

    @Test
    public void test04() throws Throwable {
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation((OceanBaseExpression) null,
                (List<OceanBaseExpression>) null, true);
        oceanBaseInOperation0.getExpr();
        assertTrue(oceanBaseInOperation0.isTrue());
    }

    @Test
    public void test05() throws Throwable {
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("8/a~c%}g");
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant0, oceanBaseConstant0, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryComparisonOperation0.getExpectedValue();
        linkedList0.add((OceanBaseExpression) oceanBaseConstant1);
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseConstant0, linkedList0, true);
        // Undeclared exception!
        try {
            oceanBaseInOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        OceanBaseJoin oceanBaseJoin0 = new OceanBaseJoin();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseJoin0,
                (List<OceanBaseExpression>) null, true);
        // Undeclared exception!
        try {
            oceanBaseInOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseJoin", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation((OceanBaseExpression) null,
                (List<OceanBaseExpression>) null, false);
        // Undeclared exception!
        try {
            oceanBaseInOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseInOperation", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseColumnName oceanBaseColumnName0 = new OceanBaseColumnName((OceanBaseSchema.OceanBaseColumn) null);
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseColumnName0, linkedList0, false);
        // Undeclared exception!
        try {
            oceanBaseInOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // PQS not supported for this operator
            //
        }
    }

    @Test
    public void test09() throws Throwable {
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IF;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[1];
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "X}VG7H?t{8Ll+Wt=");
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                364.41422);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .isLessThan(oceanBaseConstant_OceanBaseTextConstant0);
        oceanBaseExpressionArray0[0] = (OceanBaseExpression) oceanBaseConstant0;
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseComputableFunction0, linkedList0,
                true);
        // Undeclared exception!
        try {
            oceanBaseInOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 1 out of bounds for length 1
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$3", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseConstant0, linkedList0, false);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseInOperation0.getExpectedValue();
        assertTrue(oceanBaseConstant1.asBooleanNotNull());
    }

    @Test
    public void test11() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1.0));
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, linkedList0, true);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseInOperation0.getExpectedValue();
        linkedList0.addLast(oceanBaseConstant0);
        OceanBaseInOperation oceanBaseInOperation1 = new OceanBaseInOperation(oceanBaseConstant0, linkedList0, true);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseInOperation1.getExpectedValue();
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertFalse(oceanBaseConstant0.asBooleanNotNull());
    }

    @Test
    public void test12() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1.0));
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, linkedList0, true);
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        linkedList0.add((OceanBaseExpression) oceanBaseConstant_OceanBaseNullConstant0);
        oceanBaseInOperation0.getExpectedValue();
        assertTrue(oceanBaseInOperation0.isTrue());
    }

    @Test
    public void test13() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseConstant0,
                (List<OceanBaseExpression>) null, false);
        oceanBaseInOperation0.getExpectedValue();
        assertFalse(oceanBaseInOperation0.isTrue());
    }

    @Test
    public void test14() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1.0));
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, linkedList0, true);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseInOperation0.getExpectedValue();
        linkedList0.addLast(oceanBaseConstant0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseInOperation0.getExpectedValue();
        assertFalse(oceanBaseConstant1.asBooleanNotNull());
    }

    @Test
    public void test15() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1.0));
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, linkedList0, true);
        boolean boolean0 = oceanBaseInOperation0.isTrue();
        assertTrue(boolean0);
    }

    @Test
    public void test16() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1.0));
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, linkedList0, true);
        oceanBaseInOperation0.getExpr();
        assertTrue(oceanBaseInOperation0.isTrue());
    }
}
