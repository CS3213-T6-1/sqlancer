/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:44:17 GMT 2025
 */

package sqlancer.evosuite.oceanbase.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;

import sqlancer.common.ast.JoinBase;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.ast.OceanBaseExpression;
import sqlancer.oceanbase.ast.OceanBaseSelect;
import sqlancer.oceanbase.ast.OceanBaseStringExpression;
import sqlancer.Randomly;

public class OceanBaseSelect_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        oceanBaseSelect0.setModifiers((List<String>) null);
        List<String> list0 = oceanBaseSelect0.getModifiers();
        assertNull(list0);
    }

    @Test
    public void test01() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        String[] stringArray0 = new String[3];
        List<String> list0 = Randomly.subset(0, stringArray0);
        oceanBaseSelect0.setModifiers(list0);
        List<String> list1 = oceanBaseSelect0.getModifiers();
        assertTrue(list1.isEmpty());
    }

    @Test
    public void test02() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        String[] stringArray0 = new String[9];
        List<String> list0 = Randomly.nonEmptySubset(stringArray0);
        oceanBaseSelect0.setModifiers(list0);
        List<String> list1 = oceanBaseSelect0.getModifiers();
        assertSame(list1, list0);
    }

    @Test
    public void test03() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        oceanBaseSelect0.setGroupByClause((List<OceanBaseExpression>) null);
        List<OceanBaseExpression> list0 = oceanBaseSelect0.getGroupByClause();
        assertNull(list0);
    }

    @Test
    public void test04() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        List<OceanBaseExpression> list0 = List.of((OceanBaseExpression) oceanBaseSelect0,
                (OceanBaseExpression) oceanBaseSelect0, (OceanBaseExpression) oceanBaseSelect0,
                (OceanBaseExpression) oceanBaseSelect0, (OceanBaseExpression) oceanBaseSelect0,
                (OceanBaseExpression) oceanBaseSelect0, (OceanBaseExpression) oceanBaseSelect0,
                (OceanBaseExpression) oceanBaseSelect0);
        oceanBaseSelect0.setFetchColumns(list0);
        // Undeclared exception!
        try {
            oceanBaseSelect0.asString();
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
        }
    }

    @Test
    public void test05() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[9];
        List<OceanBaseExpression> list0 = Randomly.nonEmptySubset(oceanBaseExpressionArray0);
        oceanBaseSelect0.setFetchColumns(list0);
        // Undeclared exception!
        try {
            oceanBaseSelect0.asString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test06() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseSelect.SelectType oceanBaseSelect_SelectType0 = oceanBaseSelect0.getFromOptions();
        oceanBaseSelect0.setFromOptions(oceanBaseSelect_SelectType0);
        assertEquals(OceanBaseSelect.SelectType.ALL, oceanBaseSelect0.getFromOptions());
    }

    @Test
    public void test07() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseStringExpression oceanBaseStringExpression0 = oceanBaseSelect0.getHint();
        assertNull(oceanBaseStringExpression0);
    }

    @Test
    public void test08() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        oceanBaseSelect0.setModifiers((List<String>) null);
        // Undeclared exception!
        try {
            oceanBaseSelect0.asString();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        List<JoinBase<OceanBaseExpression>> list0 = oceanBaseSelect0.getJoinClauses();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test10() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[1];
        List<OceanBaseExpression> list0 = Randomly.nonEmptySubset(oceanBaseExpressionArray0);
        oceanBaseSelect0.setGroupByClause(list0);
        List<OceanBaseExpression> list1 = oceanBaseSelect0.getGroupByClause();
        assertEquals(1, list1.size());
    }

    @Test
    public void test11() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createBoolean(true);
        OceanBaseStringExpression oceanBaseStringExpression0 = new OceanBaseStringExpression("", oceanBaseConstant0);
        oceanBaseSelect0.setHint(oceanBaseStringExpression0);
        OceanBaseStringExpression oceanBaseStringExpression1 = oceanBaseSelect0.getHint();
        assertEquals("", oceanBaseStringExpression1.getStr());
    }

    @Test
    public void test12() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        List<JoinBase<OceanBaseExpression>> linkedList0 = new LinkedList<>();
        oceanBaseSelect0.setJoinClauses(linkedList0);
        assertEquals(0, linkedList0.size());
    }

    @Test
    public void test13() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseConstant oceanBaseConstant0 = oceanBaseSelect0.getExpectedValue();
        assertNull(oceanBaseConstant0);
    }

    @Test
    public void test14() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        // Undeclared exception!
        try {
            oceanBaseSelect0.asString();
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        List<OceanBaseExpression> list0 = oceanBaseSelect0.getGroupByClause();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test16() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseSelect.SelectType oceanBaseSelect_SelectType0 = OceanBaseSelect.SelectType.ALL;
        oceanBaseSelect0.setSelectType(oceanBaseSelect_SelectType0);
        assertEquals(OceanBaseSelect.SelectType.ALL, oceanBaseSelect0.getFromOptions());
    }
}
