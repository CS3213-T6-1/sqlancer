/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 16:05:41 GMT 2025
 */

package sqlancer.evosuite.oceanbase.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.common.visitor.UnaryOperation;
import sqlancer.oceanbase.ast.OceanBaseComputableFunction;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.ast.OceanBaseExpression;
import sqlancer.oceanbase.ast.OceanBaseJoin;
import sqlancer.oceanbase.ast.OceanBaseStringExpression;
import sqlancer.oceanbase.ast.OceanBaseTableReference;
import sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation;
import sqlancer.oceanbase.OceanBaseSchema;

public class OceanBaseUnaryPrefixOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.NOT;
        String string0 = oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0.getTextRepresentation();
        assertEquals("!", string0);
    }

    @Test
    public void test01() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator1 = oceanBaseUnaryPrefixOperation0
                .getOp();
        assertSame(oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0,
                oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator1);
    }

    @Test
    public void test02() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator
                .getRandom();
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                (OceanBaseExpression) null, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseExpression oceanBaseExpression0 = oceanBaseUnaryPrefixOperation0.getExpr();
        assertNull(oceanBaseExpression0);
    }

    @Test
    public void test03() throws Throwable {
        OceanBaseJoin oceanBaseJoin0 = new OceanBaseJoin();
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.NOT;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(oceanBaseJoin0,
                oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            oceanBaseUnaryPrefixOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseJoin", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.NOT;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                (OceanBaseExpression) null, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            oceanBaseUnaryPrefixOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator
                .getRandom();
        OceanBaseTableReference oceanBaseTableReference0 = new OceanBaseTableReference(
                (OceanBaseSchema.OceanBaseTable) null);
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseTableReference0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            oceanBaseUnaryPrefixOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // PQS not supported for this operator
            //
        }
    }

    @Test
    public void test06() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator
                .getRandom();
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IF;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseComputableFunction0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            oceanBaseUnaryPrefixOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$3", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.NOT;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseUnaryPrefixOperation0.getExpectedValue();
        assertFalse(oceanBaseConstant1.isEmpty());
    }

    @Test
    public void test08() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.PLUS;
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.GREATEST;
        OceanBaseConstant[] oceanBaseConstantArray0 = new OceanBaseConstant[1];
        oceanBaseConstantArray0[0] = (OceanBaseConstant) oceanBaseConstant_OceanBaseNullConstant0;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseComputableFunction_OceanBaseFunction0
                .apply(oceanBaseConstantArray0, oceanBaseConstantArray0);
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseUnaryPrefixOperation0.getExpectedValue();
        assertEquals(OceanBaseSchema.OceanBaseDataType.VARCHAR, oceanBaseConstant1.getType());
    }

    @Test
    public void test09() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.PLUS;
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseUnaryPrefixOperation0.getExpectedValue();
        assertNotSame(oceanBaseConstant0, oceanBaseConstant_OceanBaseNullConstant0);
    }

    @Test
    public void test10() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("");
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.PLUS;
        OceanBaseStringExpression oceanBaseStringExpression0 = new OceanBaseStringExpression("", oceanBaseConstant0);
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseStringExpression0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseUnaryPrefixOperation0.getExpectedValue();
        assertEquals("", oceanBaseConstant1.castAsString());
    }

    @Test
    public void test11() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                1614.3);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0,
                oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseUnaryPrefixOperation0.getExpectedValue();
        assertEquals("-1614.3", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test12() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createUnsignedIntConstant(0L);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            oceanBaseUnaryPrefixOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation$OceanBaseUnaryPrefixOperator$3", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        // Undeclared exception!
        try {
            oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0.applyNotNull(oceanBaseConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // NULL
            //
        }
    }

    @Test
    public void test14() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "0JM:DWed*MVQPmGW_!");
        // Undeclared exception!
        try {
            oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0
                    .applyNotNull(oceanBaseConstant_OceanBaseTextConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation$OceanBaseUnaryPrefixOperator$3", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstantNotAsBoolean(0L);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseUnaryPrefixOperation0.getExpectedValue();
        assertNotSame(oceanBaseConstant1, oceanBaseConstant0);
    }

    @Test
    public void test16() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator
                .getRandom();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0
                .applyNotNull(oceanBaseConstant0);
        assertFalse(oceanBaseConstant1.asBooleanNotNull());
    }

    @Test
    public void test17() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator
                .getRandom();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0
                .applyNotNull(oceanBaseConstant0);
        assertEquals(1L, oceanBaseConstant1.getInt());
    }

    @Test
    public void test18() throws Throwable {
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.PLUS;
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0
                .applyNotNull(oceanBaseConstant0);
        assertSame(oceanBaseConstant1, oceanBaseConstant0);
    }

    @Test
    public void test19() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseNullConstant0,
                (OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator) null);
        oceanBaseUnaryPrefixOperation0.getOp();
    }

    @Test
    public void test20() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.0);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0,
                oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        UnaryOperation.OperatorKind unaryOperation_OperatorKind0 = oceanBaseUnaryPrefixOperation0.getOperatorKind();
        assertEquals(UnaryOperation.OperatorKind.PREFIX, unaryOperation_OperatorKind0);
    }

    @Test
    public void test21() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.0);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0,
                oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant1 = (OceanBaseConstant.OceanBaseDoubleConstant) oceanBaseUnaryPrefixOperation0
                .getExpr();
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant1.isString());
    }
}
