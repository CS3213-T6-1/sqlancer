/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:16:34 GMT 2025
 */

package sqlancer.evosuite.oceanbase.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.oceanbase.ast.OceanBaseCastOperation;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.OceanBaseSchema;

public class OceanBaseConstant_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test000() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                1L, true);
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createDoubleConstant(1L);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseIntConstant0.isLessThan(oceanBaseConstant0);
        assertEquals(1.0, oceanBaseConstant0.getDouble(), 0.01);
        assertEquals("1", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
        assertEquals("0", oceanBaseConstant1.getTextRepresentation());
        assertFalse(oceanBaseConstant0.isNull());
        assertTrue(oceanBaseConstant1.isSigned());
    }

    @Test
    public void test001() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = (OceanBaseConstant.OceanBaseTextConstant) OceanBaseConstant
                .createStringConstant("iaYW\"FfSPm8E");
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = (OceanBaseConstant.OceanBaseIntConstant) oceanBaseConstant_OceanBaseTextConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant1 = (OceanBaseConstant.OceanBaseIntConstant) oceanBaseConstant_OceanBaseTextConstant0
                .isLessThan(oceanBaseConstant_OceanBaseIntConstant0);
        assertFalse(oceanBaseConstant_OceanBaseIntConstant0.isNull());
        assertTrue(oceanBaseConstant_OceanBaseIntConstant1.isSigned());
        assertEquals("0", oceanBaseConstant_OceanBaseIntConstant1.getTextRepresentation());
        assertFalse(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
        assertEquals(0L, oceanBaseConstant_OceanBaseIntConstant0.getInt());
    }

    @Test
    public void test002() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant oceanBaseConstant1 = OceanBaseConstant.createTrue();
        OceanBaseConstant oceanBaseConstant2 = oceanBaseConstant0.isEquals(oceanBaseConstant1);
        assertTrue(oceanBaseConstant2.isSigned());
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
        assertEquals(0L, oceanBaseConstant0.getInt());
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertEquals("0", oceanBaseConstant2.getTextRepresentation());
    }

    @Test
    public void test003() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-1L), true);
        boolean boolean0 = oceanBaseConstant_OceanBaseIntConstant0.asBooleanNotNull();
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
        assertEquals((-1L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
        assertEquals("-1", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
        assertTrue(boolean0);
    }

    @Test
    public void test004() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                1338L, false);
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "-1385.09999999999990905052982270717620849609375");
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.isEquals(oceanBaseConstant_OceanBaseIntConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test005() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createDoubleConstant((-1L));
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "2");
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseTextConstant0.isEquals(oceanBaseConstant0);
        assertFalse(oceanBaseConstant0.isNull());
        assertEquals("0", oceanBaseConstant1.getTextRepresentation());
        assertEquals((-1.0), oceanBaseConstant0.getDouble(), 0.01);
        assertTrue(oceanBaseConstant1.isSigned());
    }

    @Test
    public void test006() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-2460.842525));
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseDoubleConstant0.isEquals(oceanBaseConstant0);
        assertFalse(oceanBaseConstant0.isNull());
        assertTrue(oceanBaseConstant1.isSigned());
        assertEquals("0", oceanBaseConstant1.getTextRepresentation());
        assertEquals("-2460.842525", oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant0.asBooleanNotNull());
    }

    @Test
    public void test007() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.5);
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant1 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-3525.4028410253));
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .isLessThan(oceanBaseConstant_OceanBaseDoubleConstant1);
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant1.isNull());
    }

    @Test
    public void test008() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.0);
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstantNotAsBoolean(0L);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseDoubleConstant0
                .isLessThan(oceanBaseConstant0);
        assertFalse(oceanBaseConstant0.isNull());
        assertEquals("0", oceanBaseConstant1.getTextRepresentation());
        assertTrue(oceanBaseConstant1.isSigned());
        assertEquals(0.0, oceanBaseConstant_OceanBaseDoubleConstant0.getDouble(), 0.01);
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test009() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                755.66);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        assertFalse(oceanBaseConstant0.isSigned());
        assertEquals("756", oceanBaseConstant0.getTextRepresentation());
        assertEquals(756L, oceanBaseConstant0.getInt());
    }

    @Test
    public void test010() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.5);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        assertEquals(1L, oceanBaseConstant0.getInt());
        assertEquals("1", oceanBaseConstant0.getTextRepresentation());
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test011() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "");
        boolean boolean0 = oceanBaseConstant_OceanBaseTextConstant0.isNull();
        assertFalse(boolean0);
    }

    @Test
    public void test012() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "");
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = oceanBaseConstant_OceanBaseTextConstant0
                .getType();
        assertEquals(OceanBaseSchema.OceanBaseDataType.VARCHAR, oceanBaseSchema_OceanBaseDataType0);
    }

    @Test
    public void test013() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "H");
        String string0 = oceanBaseConstant_OceanBaseTextConstant0.getTextRepresentation();
        assertEquals("\"H\"", string0);
    }

    @Test
    public void test014() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "1174");
        String string0 = oceanBaseConstant_OceanBaseTextConstant0.getString();
        assertEquals("1174", string0);
    }

    @Test
    public void test015() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "S_Av7y]h05`n");
        String string0 = oceanBaseConstant_OceanBaseTextConstant0.castAsString();
        assertEquals("S_Av7y]h05`n", string0);
    }

    @Test
    public void test016() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "\\");
        boolean boolean0 = oceanBaseConstant_OceanBaseTextConstant0.asBooleanNotNull();
        assertFalse(boolean0);
    }

    @Test
    public void test017() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        boolean boolean0 = oceanBaseConstant_OceanBaseNullConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test018() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        oceanBaseConstant_OceanBaseNullConstant0.getType();
    }

    @Test
    public void test019() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        String string0 = oceanBaseConstant_OceanBaseNullConstant0.getTextRepresentation();
        assertEquals("NULL", string0);
    }

    @Test
    public void test020() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        String string0 = oceanBaseConstant_OceanBaseNullConstant0.castAsString();
        assertEquals("NULL", string0);
    }

    @Test
    public void test021() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseNullConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        assertFalse(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test022() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseNullConstant0.asBooleanNotNull();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // NULL
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseNullConstant", e);
        }
    }

    @Test
    public void test023() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                3398.7845);
        String string0 = oceanBaseConstant_OceanBaseDoubleConstant0.castAsString();
        assertEquals("3398.78450000000020736479200422763824462890625", string0);
    }

    @Test
    public void test024() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1001.8186968900258));
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseDoubleConstant0.castAsDouble();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseNoPQSConstant", e);
        }
    }

    @Test
    public void test025() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1075L));
        boolean boolean0 = oceanBaseConstant_OceanBaseDoubleConstant0.asBooleanNotNull();
        assertTrue(boolean0);
        assertEquals("-1075.0", oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation());
    }

    @Test
    public void test026() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-1435L), "");
        boolean boolean0 = oceanBaseConstant_OceanBaseIntConstant0.isSigned();
        assertTrue(boolean0);
        assertEquals((-1435L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
    }

    @Test
    public void test027() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                1338L, false);
        oceanBaseConstant_OceanBaseIntConstant0.isInt();
        assertFalse(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
        assertEquals("1338", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
        assertEquals(1338L, oceanBaseConstant_OceanBaseIntConstant0.getInt());
    }

    @Test
    public void test028() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        oceanBaseConstant0.getType();
        assertEquals("1", oceanBaseConstant0.getTextRepresentation());
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals(1L, oceanBaseConstant0.getInt());
    }

    @Test
    public void test029() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-1435L), "");
        oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation();
        assertEquals((-1435L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
    }

    @Test
    public void test030() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                1L, true);
        String string0 = oceanBaseConstant_OceanBaseIntConstant0.castAsString();
        assertEquals("1", string0);
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
        assertEquals("1", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
    }

    @Test
    public void test031() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-1L), "(5^H\"NV=tts");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseIntConstant0.castAsDouble();
        assertEquals((-1L), oceanBaseConstant0.getInt());
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test032() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                1.0);
        oceanBaseConstant_OceanBaseDoubleConstant0.getType();
        assertEquals("1.0", oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation());
    }

    @Test
    public void test033() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-3745.81193734));
        String string0 = oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation();
        assertEquals("-3745.81193734", string0);
    }

    @Test
    public void test034() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.5);
        oceanBaseConstant_OceanBaseDoubleConstant0.getInt();
        assertEquals(0.5, oceanBaseConstant_OceanBaseDoubleConstant0.getDouble(), 0.01);
    }

    @Test
    public void test035() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-3745.81193734));
        double double0 = oceanBaseConstant_OceanBaseDoubleConstant0.getDouble();
        assertEquals((-3745.81193734), double0, 0.01);
    }

    @Test
    public void test036() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.0);
        oceanBaseConstant_OceanBaseDoubleConstant0.castAsString();
        assertEquals("0.0", oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation());
    }

    @Test
    public void test037() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-191L), (String) null);
        oceanBaseConstant_OceanBaseIntConstant0.toString();
        assertEquals((-191L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
    }

    @Test
    public void test038() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-1L), "");
        oceanBaseConstant_OceanBaseIntConstant0.toString();
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
        assertEquals((-1L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
    }

    @Test
    public void test039() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "\"P+0UMrPUM@`i-F_!");
        boolean boolean0 = oceanBaseConstant_OceanBaseTextConstant0.isString();
        assertTrue(boolean0);
    }

    @Test
    public void test040() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-2104.024951525403));
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "GfxSJ|e`PMD");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .isEquals(oceanBaseConstant_OceanBaseDoubleConstant0);
        boolean boolean0 = oceanBaseConstant0.isSigned();
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertTrue(boolean0);
        assertEquals((-2104.024951525403), oceanBaseConstant_OceanBaseDoubleConstant0.getDouble(), 0.01);
    }

    @Test
    public void test041() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-574L), false);
        oceanBaseConstant_OceanBaseIntConstant0.isInt();
        assertEquals((-574L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
        assertEquals("18446744073709551042", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
    }

    @Test
    public void test042() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                " ");
        boolean boolean0 = oceanBaseConstant_OceanBaseTextConstant0.isEmpty();
        assertTrue(boolean0);
    }

    @Test
    public void test043() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-3758.769));
        boolean boolean0 = oceanBaseConstant_OceanBaseDoubleConstant0.isDouble();
        assertTrue(boolean0);
        assertEquals("-3758.769", oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation());
    }

    @Test
    public void test044() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                0L, (String) null);
        oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation();
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
    }

    @Test
    public void test045() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant((String) null);
        String string0 = oceanBaseConstant0.getString();
        assertNull(string0);
    }

    @Test
    public void test046() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "");
        String string0 = oceanBaseConstant_OceanBaseTextConstant0.getString();
        assertEquals("", string0);
    }

    @Test
    public void test047() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        long long0 = oceanBaseConstant0.getInt();
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertEquals(0L, long0);
    }

    @Test
    public void test048() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstant(1L);
        long long0 = oceanBaseConstant0.getInt();
        assertEquals("1", oceanBaseConstant0.getTextRepresentation());
        assertEquals(1L, long0);
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test049() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseNullConstant0.getExpectedValue();
        assertFalse(oceanBaseConstant0.isEmpty());
    }

    @Test
    public void test050() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant0.getExpectedValue();
        assertTrue(oceanBaseConstant1.isSigned());
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
    }

    @Test
    public void test051() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                3000.983262871766);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0.getExpectedValue();
        assertEquals(3000.983262871766, oceanBaseConstant0.getDouble(), 0.01);
    }

    @Test
    public void test052() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createDoubleConstant(0.0);
        double double0 = oceanBaseConstant0.getDouble();
        assertEquals(0.0, double0, 0.01);
    }

    @Test
    public void test053() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                3000.983262871766);
        double double0 = oceanBaseConstant_OceanBaseDoubleConstant0.getDouble();
        assertEquals(3000.983262871766, double0, 0.01);
    }

    @Test
    public void test054() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createDoubleConstant((-1435.88912918));
        double double0 = oceanBaseConstant0.getDouble();
        assertEquals((-1435.88912918), double0, 0.01);
    }

    @Test
    public void test055() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("NULL");
        assertFalse(oceanBaseConstant0.isDouble());
    }

    @Test
    public void test056() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstant(2593L, false);
        assertEquals("2593", oceanBaseConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant0.isSigned());
        assertEquals(2593L, oceanBaseConstant0.getInt());
    }

    @Test
    public void test057() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("");
        String string0 = oceanBaseConstant0.castAsString();
        assertEquals("", string0);
    }

    @Test
    public void test058() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseNullConstant0.castAsDouble();
        assertEquals("NULL", oceanBaseConstant0.castAsString());
    }

    @Test
    public void test059() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "6");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0.castAsDouble();
        assertEquals(6.0, oceanBaseConstant0.getDouble(), 0.01);
    }

    @Test
    public void test060() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.0);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertEquals("0.0", oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation());
    }

    @Test
    public void test061() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                (String) null);
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.toString();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test062() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        // Undeclared exception!
        try {
            oceanBaseConstant0.isEquals((OceanBaseConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseIntConstant", e);
        }
    }

    @Test
    public void test063() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                (String) null);
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.getTextRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test064() throws Throwable {
        // Undeclared exception!
        try {
            OceanBaseConstant.createDoubleConstant(Double.NEGATIVE_INFINITY);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseDoubleConstant", e);
        }
    }

    @Test
    public void test065() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "\nwqz2CmX@>)A:OJw");
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.castAsDouble();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test066() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant((String) null);
        // Undeclared exception!
        try {
            oceanBaseConstant0.castAsDouble();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test067() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("\n ");
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        // Undeclared exception!
        try {
            oceanBaseConstant0.castAs(oceanBaseCastOperation_CastType0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test068() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant((String) null);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        // Undeclared exception!
        try {
            oceanBaseConstant0.castAs(oceanBaseCastOperation_CastType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
        }
    }

    @Test
    public void test069() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant((String) null);
        // Undeclared exception!
        try {
            oceanBaseConstant0.asBooleanNotNull();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test070() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createBoolean(false);
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test071() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                0L, false);
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                3000.983262871766);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseIntConstant0
                .isEquals(oceanBaseConstant_OceanBaseDoubleConstant0);
        assertEquals(3000.983262871766, oceanBaseConstant_OceanBaseDoubleConstant0.getDouble(), 0.01);
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test072() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-3745.81193734));
        oceanBaseConstant_OceanBaseDoubleConstant0.isString();
        assertEquals((-3745L), oceanBaseConstant_OceanBaseDoubleConstant0.getInt());
    }

    @Test
    public void test073() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        boolean boolean0 = oceanBaseConstant_OceanBaseNullConstant0.isInt();
        assertFalse(boolean0);
    }

    @Test
    public void test074() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-3745.81193734));
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        boolean boolean0 = oceanBaseConstant0.isNull();
        assertFalse(boolean0);
        assertEquals((-3745L), oceanBaseConstant0.getInt());
        assertEquals("18446744073709547871", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test075() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.5);
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "'");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .isLessThan(oceanBaseConstant_OceanBaseDoubleConstant0);
        assertEquals("1", oceanBaseConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
        assertEquals(1L, oceanBaseConstant0.getInt());
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test076() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "2");
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = (OceanBaseConstant.OceanBaseIntConstant) OceanBaseConstant
                .createFalse();
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseIntConstant0.isLessThan(oceanBaseConstant_OceanBaseTextConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseIntConstant", e);
        }
    }

    @Test
    public void test077() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = (OceanBaseConstant.OceanBaseIntConstant) OceanBaseConstant
                .createFalse();
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        oceanBaseConstant_OceanBaseIntConstant0.isLessThan(oceanBaseConstant_OceanBaseNullConstant0);
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
        assertEquals("0", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
    }

    @Test
    public void test078() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "k6\"V-/7");
        assertFalse(oceanBaseConstant_OceanBaseTextConstant0.asBooleanNotNull());

        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-574L), false);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseIntConstant0
                .isLessThan(oceanBaseConstant_OceanBaseTextConstant0);
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("18446744073709551042", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
        assertEquals((-574L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test079() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-1L), true);
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "\t");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseIntConstant0
                .isLessThan(oceanBaseConstant_OceanBaseTextConstant0);
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals(1L, oceanBaseConstant0.getInt());
        assertEquals("-1", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
        assertEquals("1", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test080() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-3745.81193734));
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-1877L), true);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseIntConstant0.isLessThan(oceanBaseConstant0);
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
        assertTrue(oceanBaseConstant1.isSigned());
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertEquals("18446744073709547871", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test081() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstant(783L, true);
        String string0 = oceanBaseConstant0.castAsString();
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("783", string0);
        assertEquals("783", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test082() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createDoubleConstant(0.0);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant0.castAs(oceanBaseCastOperation_CastType0);
        oceanBaseConstant1.castAsString();
        assertEquals("0", oceanBaseConstant1.getTextRepresentation());
        assertFalse(oceanBaseConstant1.isSigned());
        assertEquals(0.0, oceanBaseConstant0.getDouble(), 0.01);
    }

    @Test
    public void test083() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        // Undeclared exception!
        try {
            oceanBaseConstant0.castAs((OceanBaseCastOperation.CastType) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test084() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant0.castAs(oceanBaseCastOperation_CastType0);
        assertTrue(oceanBaseConstant1.isSigned());
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test085() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                1L, true);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseIntConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        assertFalse(oceanBaseConstant0.isSigned());
        assertEquals("1", oceanBaseConstant0.getTextRepresentation());
        assertEquals("1", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
    }

    @Test
    public void test086() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1L));
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstantNotAsBoolean((-1L));
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant0.isEquals(oceanBaseConstant_OceanBaseDoubleConstant0);
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("-1", oceanBaseConstant0.getTextRepresentation());
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
        assertFalse(oceanBaseConstant0.isNull());
        assertTrue(oceanBaseConstant1.isSigned());
    }

    @Test
    public void test087() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "55ve^~HH<co*E");
        // Undeclared exception!
        try {
            oceanBaseConstant0.isEquals(oceanBaseConstant_OceanBaseTextConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseIntConstant", e);
        }
    }

    @Test
    public void test088() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        OceanBaseConstant oceanBaseConstant1 = OceanBaseConstant.createBoolean(true);
        oceanBaseConstant1.isEquals(oceanBaseConstant0);
        assertTrue(oceanBaseConstant1.isSigned());
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
    }

    @Test
    public void test089() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstantNotAsBoolean(1016L);
        boolean boolean0 = oceanBaseConstant0.asBooleanNotNull();
        assertTrue(boolean0);
        assertEquals("1016", oceanBaseConstant0.getTextRepresentation());
        assertEquals(1016L, oceanBaseConstant0.getInt());
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test090() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "?1^:5wp");
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        boolean boolean0 = oceanBaseConstant0.asBooleanNotNull();
        assertFalse(oceanBaseConstant0.isSigned());
        assertFalse(boolean0);
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test091() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = (OceanBaseConstant.OceanBaseTextConstant) OceanBaseConstant
                .createStringConstant("J?{Vh3~.~;;b@'k");
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.isLessThan(oceanBaseConstant_OceanBaseTextConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test092() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = (OceanBaseConstant.OceanBaseTextConstant) OceanBaseConstant
                .createStringConstant("J?{Vh3~.~;;b@'k");
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = (OceanBaseConstant.OceanBaseIntConstant) oceanBaseConstant_OceanBaseTextConstant0
                .castAsDouble();
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant1 = (OceanBaseConstant.OceanBaseIntConstant) oceanBaseConstant_OceanBaseTextConstant0
                .isLessThan(oceanBaseConstant_OceanBaseIntConstant0);
        assertEquals("0", oceanBaseConstant_OceanBaseIntConstant1.getTextRepresentation());
        assertEquals("0", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant_OceanBaseIntConstant0.isNull());
        assertTrue(oceanBaseConstant_OceanBaseIntConstant1.isSigned());
    }

    @Test
    public void test093() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "55ve^~HH<co*E");
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.isLessThan(oceanBaseConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test094() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "7xrb0S)t_");
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseTextConstant0.isLessThan(oceanBaseConstant0);
        assertFalse(oceanBaseConstant1.isInt());
    }

    @Test
    public void test095() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("");
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "NULL");
        oceanBaseConstant_OceanBaseTextConstant0.isLessThan(oceanBaseConstant0);
        assertTrue(oceanBaseConstant_OceanBaseTextConstant0.isNull());
    }

    @Test
    public void test096() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "7xrb0S)t_");
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        assertFalse(oceanBaseConstant0.isSigned());
        assertEquals("7", oceanBaseConstant0.getTextRepresentation());
        assertEquals(7L, oceanBaseConstant0.getInt());
    }

    @Test
    public void test097() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "!1dstbBcq0K-X");
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.castAs((OceanBaseCastOperation.CastType) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test098() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "INT");
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant1 = new OceanBaseConstant.OceanBaseTextConstant(
                "");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant1
                .isEquals(oceanBaseConstant_OceanBaseTextConstant0);
        // // Unstable assertion: assertTrue(oceanBaseConstant0.isSigned());
        // // Unstable assertion: assertFalse(oceanBaseConstant_OceanBaseTextConstant1.isNull());
        // // Unstable assertion: assertFalse(oceanBaseConstant_OceanBaseTextConstant0.isEmpty());
        // // Unstable assertion: assertEquals("1", oceanBaseConstant0.getTextRepresentation());
        // // Unstable assertion: assertTrue(oceanBaseConstant_OceanBaseTextConstant1.isEmpty());
        // // Unstable assertion: assertEquals(1L, oceanBaseConstant0.getInt());
    }

    @Test
    public void test099() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "");
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant1 = new OceanBaseConstant.OceanBaseTextConstant(
                "J");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant1
                .isEquals(oceanBaseConstant_OceanBaseTextConstant0);
        // // Unstable assertion: assertEquals("1", oceanBaseConstant0.getTextRepresentation());
        // // Unstable assertion: assertFalse(oceanBaseConstant_OceanBaseTextConstant1.isEmpty());
        // // Unstable assertion: assertEquals(1L, oceanBaseConstant0.getInt());
        // // Unstable assertion: assertFalse(oceanBaseConstant_OceanBaseTextConstant0.isNull());
        // // Unstable assertion: assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test100() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                " ");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .isEquals(oceanBaseConstant_OceanBaseTextConstant0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant0.isEquals(oceanBaseConstant_OceanBaseTextConstant0);
        assertEquals("1", oceanBaseConstant0.getTextRepresentation());
        assertEquals("0", oceanBaseConstant1.getTextRepresentation());
        assertTrue(oceanBaseConstant1.isSigned());
        assertTrue(oceanBaseConstant_OceanBaseTextConstant0.isEmpty());
        assertEquals(1L, oceanBaseConstant0.getInt());
    }

    @Test
    public void test101() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "7xrb0SNt_");
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseTextConstant0.isEquals(oceanBaseConstant0);
        assertFalse(oceanBaseConstant1.equals((Object) oceanBaseConstant0));
    }

    @Test
    public void test102() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "NULL");
        oceanBaseConstant_OceanBaseTextConstant0.isEquals(oceanBaseConstant_OceanBaseTextConstant0);
        assertTrue(oceanBaseConstant_OceanBaseTextConstant0.isNull());
    }

    @Test
    public void test103() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "'");
        String string0 = oceanBaseConstant_OceanBaseTextConstant0.getTextRepresentation();
        assertEquals("\"'\"", string0);
    }

    @Test
    public void test104() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "\n0SR -");
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.isEquals(oceanBaseConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test105() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "null");
        boolean boolean0 = oceanBaseConstant_OceanBaseTextConstant0.isEmpty();
        assertFalse(boolean0);
    }

    @Test
    public void test106() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "7xrb0S)t_");
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.isEquals(oceanBaseConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test107() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                1L, true);
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "0.5");
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.isEquals(oceanBaseConstant_OceanBaseIntConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test108() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "\t");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0.castAsDouble();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseTextConstant0.isEquals(oceanBaseConstant0);
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant0.isNull());
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertTrue(oceanBaseConstant1.isSigned());
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
    }

    @Test
    public void test109() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.5);
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant1 = new OceanBaseConstant.OceanBaseDoubleConstant(
                441.8653572171109);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .isEquals(oceanBaseConstant_OceanBaseDoubleConstant1);
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals(441.8653572171109, oceanBaseConstant_OceanBaseDoubleConstant1.getDouble(), 0.01);
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant1.isNull());
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test110() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstantNotAsBoolean((-1047L));
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1047L));
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseDoubleConstant0.isEquals(oceanBaseConstant0);
        assertTrue(oceanBaseConstant1.isSigned());
        assertEquals("-1047", oceanBaseConstant0.getTextRepresentation());
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
        assertEquals(1L, oceanBaseConstant1.getInt());
    }

    @Test
    public void test111() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                3000.983262871766);
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "<`2.MTJn$u5Ow");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .isEquals(oceanBaseConstant_OceanBaseTextConstant0);
        assertTrue(oceanBaseConstant0.isSigned());
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertEquals(3000L, oceanBaseConstant_OceanBaseDoubleConstant0.getInt());
    }

    @Test
    public void test112() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                3000.983262871766);
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        oceanBaseConstant_OceanBaseDoubleConstant0.isEquals(oceanBaseConstant_OceanBaseNullConstant0);
        assertEquals(3000L, oceanBaseConstant_OceanBaseDoubleConstant0.getInt());
    }

    @Test
    public void test113() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.5);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .isEquals(oceanBaseConstant_OceanBaseDoubleConstant0);
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("1", oceanBaseConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
        assertEquals(1L, oceanBaseConstant0.getInt());
        assertEquals(0.5, oceanBaseConstant_OceanBaseDoubleConstant0.getDouble(), 0.01);
    }

    @Test
    public void test114() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-2012.9701734682387));
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .isLessThan(oceanBaseConstant_OceanBaseDoubleConstant0);
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals((-2012.9701734682387), oceanBaseConstant_OceanBaseDoubleConstant0.getDouble(), 0.01);
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
    }

    @Test
    public void test115() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = (OceanBaseConstant.OceanBaseDoubleConstant) OceanBaseConstant
                .createDoubleConstant((-1L));
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "2");
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = (OceanBaseConstant.OceanBaseIntConstant) oceanBaseConstant_OceanBaseDoubleConstant0
                .isLessThan(oceanBaseConstant_OceanBaseTextConstant0);
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
        assertEquals(1L, oceanBaseConstant_OceanBaseIntConstant0.getInt());
        assertEquals("1", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
    }

    @Test
    public void test116() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1154.05295043));
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseDoubleConstant0
                .isLessThan(oceanBaseConstant0);
        assertTrue(oceanBaseConstant1.isSigned());
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test117() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-463.2380313651022));
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        assertTrue(oceanBaseConstant0.isNull());

        oceanBaseConstant_OceanBaseDoubleConstant0.isLessThan(oceanBaseConstant0);
        assertEquals("-463.2380313651022", oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation());
    }

    @Test
    public void test118() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.5);
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "'");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .isLessThan(oceanBaseConstant_OceanBaseTextConstant0);
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test119() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.5);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "'");
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant_OceanBaseTextConstant0.isLessThan(oceanBaseConstant0);
        assertFalse(oceanBaseConstant0.isSigned());
        assertTrue(oceanBaseConstant1.isSigned());
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertEquals("1", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test120() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                1131.7);
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseDoubleConstant0.castAs((OceanBaseCastOperation.CastType) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test121() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                3000.983262871766);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        assertEquals("3001", oceanBaseConstant0.getTextRepresentation());
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals(3001L, oceanBaseConstant0.getInt());
    }

    @Test
    public void test122() throws Throwable {
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-3277L));
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        assertEquals((-3277L), oceanBaseConstant0.getInt());
        assertEquals("18446744073709548339", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test123() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1154.05295043));
        boolean boolean0 = oceanBaseConstant_OceanBaseDoubleConstant0.asBooleanNotNull();
        assertTrue(boolean0);
        assertEquals("-1154.05295043", oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation());
    }

    @Test
    public void test124() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                -0.0);
        boolean boolean0 = oceanBaseConstant_OceanBaseDoubleConstant0.asBooleanNotNull();
        assertFalse(boolean0);
        assertEquals(-0.0, oceanBaseConstant_OceanBaseDoubleConstant0.getDouble(), 0.01);
    }

    @Test
    public void test125() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = null;
        try {
            oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                    Double.NEGATIVE_INFINITY);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseDoubleConstant", e);
        }
    }

    @Test
    public void test126() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                769.0);
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseDoubleConstant0.castAsDouble();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseNoPQSConstant", e);
        }
    }

    @Test
    public void test127() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "null");
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant0.castAs(oceanBaseCastOperation_CastType0);
        assertSame(oceanBaseConstant1, oceanBaseConstant0);
    }

    @Test
    public void test128() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        boolean boolean0 = oceanBaseConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test129() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "'");
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseNullConstant0
                .isLessThan(oceanBaseConstant_OceanBaseTextConstant0);
        assertFalse(oceanBaseConstant0.isDouble());
    }

    @Test
    public void test130() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseNullConstant0.castAsDouble();
        assertFalse(oceanBaseConstant0.isInt());
    }

    @Test
    public void test131() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "null");
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        // Undeclared exception!
        try {
            oceanBaseConstant0.asBooleanNotNull();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // NULL
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseNullConstant", e);
        }
    }

    @Test
    public void test132() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "M+i4'FpG");
        String string0 = oceanBaseConstant_OceanBaseTextConstant0.getString();
        assertEquals("M+i4'FpG", string0);
    }

    @Test
    public void test133() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                (String) null);
        String string0 = oceanBaseConstant_OceanBaseTextConstant0.castAsString();
        assertNull(string0);
    }

    @Test
    public void test134() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "1dstb\"9Bcq0XO");
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = oceanBaseConstant_OceanBaseTextConstant0
                .getType();
        assertEquals(OceanBaseSchema.OceanBaseDataType.VARCHAR, oceanBaseSchema_OceanBaseDataType0);
    }

    @Test
    public void test135() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                " ");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0.getExpectedValue();
        assertFalse(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test136() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-574L), false);
        boolean boolean0 = oceanBaseConstant_OceanBaseIntConstant0.isEmpty();
        assertEquals((-574L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
        assertFalse(boolean0);
        assertEquals("18446744073709551042", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
    }

    @Test
    public void test137() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        // Undeclared exception!
        try {
            oceanBaseConstant0.getString();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant", e);
        }
    }

    @Test
    public void test138() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "H");
        // Undeclared exception!
        try {
            oceanBaseConstant_OceanBaseTextConstant0.getInt();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant", e);
        }
    }

    @Test
    public void test139() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        oceanBaseConstant_OceanBaseNullConstant0.isEquals(oceanBaseConstant0);
        assertTrue(oceanBaseConstant0.isSigned());
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
    }

    @Test
    public void test140() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        oceanBaseConstant0.getType();
    }

    @Test
    public void test141() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "S_Av7y]h05`n");
        boolean boolean0 = oceanBaseConstant_OceanBaseTextConstant0.isDouble();
        assertFalse(boolean0);
    }

    @Test
    public void test142() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-574L), false);
        String string0 = oceanBaseConstant_OceanBaseIntConstant0.toString();
        assertEquals((-574L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
        assertEquals("18446744073709551042", string0);
    }

    @Test
    public void test143() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant((String) null);
        boolean boolean0 = oceanBaseConstant0.isSigned();
        assertFalse(boolean0);
    }

    @Test
    public void test144() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "M+i4'FpG");
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        // Undeclared exception!
        try {
            oceanBaseConstant0.getDouble();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant", e);
        }
    }

    @Test
    public void test145() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createUnsignedIntConstant((-332L));
        assertEquals("18446744073709551284", oceanBaseConstant0.getTextRepresentation());
        assertEquals((-332L), oceanBaseConstant0.getInt());
    }

    @Test
    public void test146() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createDoubleConstant((-1435.88912918));
        long long0 = oceanBaseConstant0.getInt();
        assertEquals((-1435L), long0);
    }

    @Test
    public void test147() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-3277L));
        oceanBaseConstant_OceanBaseDoubleConstant0.getType();
        assertEquals("-3277.0", oceanBaseConstant_OceanBaseDoubleConstant0.getTextRepresentation());
    }

    @Test
    public void test148() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createDoubleConstant(0.0);
        boolean boolean0 = oceanBaseConstant0.isDouble();
        assertEquals("0.0", oceanBaseConstant0.getTextRepresentation());
        assertTrue(boolean0);
    }

    @Test
    public void test149() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                " ");
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-339.636682557411));
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isString());

        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .isLessThan(oceanBaseConstant_OceanBaseDoubleConstant0);
        assertEquals("0", oceanBaseConstant0.getTextRepresentation());
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant0.isNull());
        assertTrue(oceanBaseConstant0.isSigned());
    }

    @Test
    public void test150() throws Throwable {
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createBoolean(true);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseConstant0.castAsDouble();
        assertEquals(1L, oceanBaseConstant1.getInt());
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
        assertTrue(oceanBaseConstant1.isSigned());
    }

    @Test
    public void test151() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                " ");
        assertFalse(oceanBaseConstant_OceanBaseTextConstant0.asBooleanNotNull());
        assertFalse(oceanBaseConstant_OceanBaseTextConstant0.isInt());
        assertTrue(oceanBaseConstant_OceanBaseTextConstant0.isString());

        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = (OceanBaseConstant.OceanBaseIntConstant) OceanBaseConstant
                .createTrue();
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isInt());

        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant1 = (OceanBaseConstant.OceanBaseIntConstant) oceanBaseConstant_OceanBaseIntConstant0
                .isLessThan(oceanBaseConstant_OceanBaseTextConstant0);
        assertTrue(oceanBaseConstant_OceanBaseIntConstant1.isSigned());
        assertEquals("0", oceanBaseConstant_OceanBaseIntConstant1.getTextRepresentation());
        assertEquals("1", oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation());
        assertEquals(1L, oceanBaseConstant_OceanBaseIntConstant0.getInt());
    }

    @Test
    public void test152() throws Throwable {
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-2860L), "");
        oceanBaseConstant_OceanBaseIntConstant0.getTextRepresentation();
        assertTrue(oceanBaseConstant_OceanBaseIntConstant0.isSigned());
        assertEquals((-2860L), oceanBaseConstant_OceanBaseIntConstant0.getInt());
    }
}
