/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:51:34 GMT 2025
 */

package sqlancer.evosuite.oceanbase.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.oceanbase.ast.OceanBaseAggregate;
import sqlancer.oceanbase.ast.OceanBaseBinaryComparisonOperation;
import sqlancer.oceanbase.ast.OceanBaseCastOperation;
import sqlancer.oceanbase.ast.OceanBaseComputableFunction;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.ast.OceanBaseExpression;
import sqlancer.oceanbase.ast.OceanBaseSelect;
import sqlancer.oceanbase.ast.OceanBaseStringExpression;

public class OceanBaseBinaryComparisonOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-590.7626451201));
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                (-92L), "!J4hX");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant_OceanBaseIntConstant0, oceanBaseConstant_OceanBaseDoubleConstant0);
        assertEquals(0L, oceanBaseConstant0.getInt());
        assertNotNull(oceanBaseConstant0);
    }

    @Test
    public void test01() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "EQUALS");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0.castAsDouble();
        OceanBaseConstant oceanBaseConstant1 = OceanBaseConstant.createIntConstant(1L, false);
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.LESS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant0, oceanBaseConstant1, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseConstant oceanBaseConstant2 = oceanBaseBinaryComparisonOperation0.getExpectedValue();
        assertEquals(1L, oceanBaseConstant2.getInt());
    }

    @Test
    public void test02() throws Throwable {
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[7];
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.25);
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "uP'U2z4NsAhOi{U=&{#");
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .isEquals(oceanBaseConstant_OceanBaseDoubleConstant0);
        OceanBaseStringExpression oceanBaseStringExpression0 = new OceanBaseStringExpression("", oceanBaseConstant0);
        oceanBaseExpressionArray0[0] = (OceanBaseExpression) oceanBaseStringExpression0;
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseExpressionArray0[0],
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryComparisonOperation0.getExpectedValue();
        assertEquals("1", oceanBaseConstant1.getTextRepresentation());
    }

    @Test
    public void test03() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant_OceanBaseNullConstant0, oceanBaseConstant_OceanBaseNullConstant0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant0, oceanBaseConstant_OceanBaseNullConstant0);
        assertNotSame(oceanBaseConstant1, oceanBaseConstant_OceanBaseNullConstant0);
    }

    @Test
    public void test04() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                (OceanBaseExpression) null, oceanBaseSelect0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseExpression oceanBaseExpression0 = oceanBaseBinaryComparisonOperation0.getRight();
        assertSame(oceanBaseSelect0, oceanBaseExpression0);
    }

    @Test
    public void test05() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator
                .getRandom();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseSelect0, oceanBaseSelect0, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator1 = oceanBaseBinaryComparisonOperation0
                .getOp();
        assertSame(oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator1);
    }

    @Test
    public void test06() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                1.0);
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseConstant_OceanBaseDoubleConstant0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant1 = (OceanBaseConstant.OceanBaseDoubleConstant) oceanBaseBinaryComparisonOperation0
                .getLeft();
        assertFalse(oceanBaseConstant_OceanBaseDoubleConstant1.isInt());
    }

    @Test
    public void test07() throws Throwable {
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "M#FMec{BKM");
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant_OceanBaseTextConstant0, oceanBaseConstant_OceanBaseTextConstant0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            oceanBaseBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        OceanBaseAggregate.OceanBaseAggregateFunction oceanBaseAggregate_OceanBaseAggregateFunction0 = OceanBaseAggregate.OceanBaseAggregateFunction.COUNT;
        OceanBaseAggregate oceanBaseAggregate0 = new OceanBaseAggregate((OceanBaseExpression) null,
                oceanBaseAggregate_OceanBaseAggregateFunction0);
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseAggregate0, oceanBaseAggregate0, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            oceanBaseBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // PQS not supported for this operator
            //
        }
    }

    @Test
    public void test09() throws Throwable {
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.LEAST;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseComputableFunction0, oceanBaseComputableFunction0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            oceanBaseBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 1 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.25);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant_OceanBaseDoubleConstant0,
                        oceanBaseConstant_OceanBaseDoubleConstant0);
        OceanBaseConstant oceanBaseConstant1 = OceanBaseConstant.createFalse();
        OceanBaseConstant oceanBaseConstant2 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant0, oceanBaseConstant1);
        assertTrue(oceanBaseConstant2.asBooleanNotNull());
    }

    @Test
    public void test11() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseConstant_OceanBaseNullConstant0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation0.getExpectedValue();
        assertNull(oceanBaseConstant0.getType());
    }

    @Test
    public void test12() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                1.0);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant_OceanBaseDoubleConstant0,
                        oceanBaseConstant_OceanBaseDoubleConstant0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseConstant0);
        assertFalse(oceanBaseConstant0.asBooleanNotNull());
        assertEquals(1L, oceanBaseConstant1.getInt());
    }

    @Test
    public void test13() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createNullConstant();
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant0, oceanBaseConstant0, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryComparisonOperation0.getExpectedValue();
        assertEquals("NULL", oceanBaseConstant1.castAsString());
    }

    @Test
    public void test14() throws Throwable {
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseConstant_OceanBaseNullConstant0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation0.getExpectedValue();
        assertFalse(oceanBaseConstant0.isDouble());
    }

    @Test
    public void test15() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.25);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant_OceanBaseDoubleConstant0,
                        oceanBaseConstant_OceanBaseDoubleConstant0);
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator1 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator1
                .getExpectedValue(oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseConstant0);
        assertNotSame(oceanBaseConstant1, oceanBaseConstant0);
        assertNotNull(oceanBaseConstant1);
        assertEquals(1L, oceanBaseConstant1.getInt());
    }

    @Test
    public void test16() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant0, oceanBaseConstant0);
        assertFalse(oceanBaseConstant1.asBooleanNotNull());
    }

    @Test
    public void test17() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        String string0 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0.getTextRepresentation();
        assertEquals(">", string0);
    }

    // @Test
    // public void test18() throws Throwable {
    // OceanBaseBinaryComparisonOperation.BinaryComparisonOperator
    // oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 =
    // OceanBaseBinaryComparisonOperation.BinaryComparisonOperator
    // .getRandom();
    // OceanBaseJoin oceanBaseJoin0 = new OceanBaseJoin();
    // OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
    // oceanBaseJoin0, oceanBaseJoin0, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
    // // Undeclared exception!
    // try {
    // oceanBaseBinaryComparisonOperation0.getExpectedValue();
    // fail("Expecting exception: UnsupportedOperationException");
    //
    // } catch (UnsupportedOperationException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.oceanbase.ast.OceanBaseJoin", e);
    // }
    // }

    @Test
    public void test19() throws Throwable {
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-590.7626451201));
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "+S");
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseTextConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.EQUALS;
        OceanBaseConstant oceanBaseConstant1 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant0, oceanBaseConstant_OceanBaseDoubleConstant0);
        assertEquals("0", oceanBaseConstant1.getTextRepresentation());
    }

    @Test
    public void test20() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.25);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant_OceanBaseDoubleConstant0,
                        oceanBaseConstant_OceanBaseDoubleConstant0);
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant0, oceanBaseConstant_OceanBaseDoubleConstant0,
                (OceanBaseBinaryComparisonOperation.BinaryComparisonOperator) null);
        // Undeclared exception!
        try {
            oceanBaseBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseBinaryComparisonOperation", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.25);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant_OceanBaseDoubleConstant0,
                        oceanBaseConstant_OceanBaseDoubleConstant0);
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant0, oceanBaseConstant_OceanBaseDoubleConstant0,
                (OceanBaseBinaryComparisonOperation.BinaryComparisonOperator) null);
        oceanBaseBinaryComparisonOperation0.getOp();
    }

    @Test
    public void test22() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.25);
        OceanBaseConstant oceanBaseConstant0 = oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(oceanBaseConstant_OceanBaseDoubleConstant0,
                        oceanBaseConstant_OceanBaseDoubleConstant0);
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                (OceanBaseExpression) null, oceanBaseConstant0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseExpression oceanBaseExpression0 = oceanBaseBinaryComparisonOperation0.getLeft();
        assertNull(oceanBaseExpression0);
    }

    @Test
    public void test23() throws Throwable {
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.LESS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                (OceanBaseExpression) null, (OceanBaseExpression) null,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        OceanBaseExpression oceanBaseExpression0 = oceanBaseBinaryComparisonOperation0.getRight();
        assertNull(oceanBaseExpression0);
    }
}
