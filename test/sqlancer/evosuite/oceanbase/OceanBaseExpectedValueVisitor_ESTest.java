/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:24:49 GMT 2025
 */

package sqlancer.evosuite.oceanbase;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.oceanbase.ast.OceanBaseAggregate;
import sqlancer.oceanbase.ast.OceanBaseBinaryComparisonOperation;
import sqlancer.oceanbase.ast.OceanBaseBinaryLogicalOperation;
import sqlancer.oceanbase.ast.OceanBaseCastOperation;
import sqlancer.oceanbase.ast.OceanBaseColumnName;
import sqlancer.oceanbase.ast.OceanBaseColumnReference;
import sqlancer.oceanbase.ast.OceanBaseComputableFunction;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.ast.OceanBaseExists;
import sqlancer.oceanbase.ast.OceanBaseExpression;
import sqlancer.oceanbase.ast.OceanBaseInOperation;
import sqlancer.oceanbase.ast.OceanBaseOrderByTerm;
import sqlancer.oceanbase.ast.OceanBaseSelect;
import sqlancer.oceanbase.ast.OceanBaseStringExpression;
import sqlancer.oceanbase.ast.OceanBaseTableReference;
import sqlancer.oceanbase.ast.OceanBaseText;
import sqlancer.oceanbase.ast.OceanBaseUnaryPostfixOperation;
import sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation;
import sqlancer.oceanbase.OceanBaseExpectedValueVisitor;
import sqlancer.oceanbase.OceanBaseSchema;

public class OceanBaseExpectedValueVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "");
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.PLUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseTextConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseUnaryPrefixOperation0);
        assertEquals("(+ (\"\")) -- \"\"\n\t\"\" -- \"\"\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test01() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createBoolean(true);
        oceanBaseExpectedValueVisitor0.visit((OceanBaseExpression) oceanBaseConstant0);
        assertEquals("\t1 -- 1\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test02() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                0.0);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseConstant oceanBaseConstant0 = oceanBaseConstant_OceanBaseDoubleConstant0
                .castAs(oceanBaseCastOperation_CastType0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseConstant0);
        assertEquals("0 -- 0\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test03() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "");
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.PLUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseTextConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.BIT_COUNT;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[5];
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                1508L, "");
        oceanBaseExpressionArray0[0] = (OceanBaseExpression) oceanBaseConstant_OceanBaseIntConstant0;
        oceanBaseExpressionArray0[1] = (OceanBaseExpression) oceanBaseConstant_OceanBaseTextConstant0;
        oceanBaseExpressionArray0[2] = (OceanBaseExpression) oceanBaseUnaryPrefixOperation0;
        oceanBaseExpressionArray0[3] = (OceanBaseExpression) oceanBaseUnaryPrefixOperation0;
        oceanBaseExpressionArray0[4] = (OceanBaseExpression) oceanBaseUnaryPrefixOperation0;
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseComputableFunction0);
        assertEquals(
                "BIT_COUNT(, \"\", (+ (\"\")), (+ (\"\")), (+ (\"\"))) -- 6\n\t -- \n\t\"\" -- \"\"\n\t(+ (\"\")) -- \"\"\n\t\t\"\" -- \"\"\n\t(+ (\"\")) -- \"\"\n\t\t\"\" -- \"\"\n\t(+ (\"\")) -- \"\"\n\t\t\"\" -- \"\"\n",
                oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test04() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createBoolean(false);
        LinkedList<OceanBaseExpression> linkedList0 = new LinkedList<OceanBaseExpression>();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseConstant0, linkedList0, true);
        OceanBaseUnaryPostfixOperation.UnaryPostfixOperator oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0 = OceanBaseUnaryPostfixOperation.UnaryPostfixOperator.IS_NULL;
        OceanBaseUnaryPostfixOperation oceanBaseUnaryPostfixOperation0 = new OceanBaseUnaryPostfixOperation(
                oceanBaseInOperation0, oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0, false);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseUnaryPostfixOperation0);
        assertEquals("((0) IN ()) IS NULL -- 0\n\t(0) IN () -- 0\n\t\t0 -- 0\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test05() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "");
        OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseConstant_OceanBaseTextConstant0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseExists0);
        assertEquals(" EXISTS (\"\") -- \"\"\n\t\"\" -- \"\"\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test06() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.FLOAT;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn("c",
                oceanBaseSchema_OceanBaseDataType0, true, 730, true);
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseColumnReference oceanBaseColumnReference0 = new OceanBaseColumnReference(
                oceanBaseSchema_OceanBaseColumn0, oceanBaseConstant_OceanBaseNullConstant0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseColumnReference0);
        assertEquals("concat(c,'') -- NULL\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test07() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createBoolean(true);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseCastOperation oceanBaseCastOperation0 = new OceanBaseCastOperation(oceanBaseConstant0,
                oceanBaseCastOperation_CastType0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseCastOperation0);
        assertEquals("CAST(1 AS SIGNED) -- 1\n\t1 -- 1\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test08() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant(
                1000L, false);
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.XOR;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseConstant_OceanBaseIntConstant0, oceanBaseConstant_OceanBaseIntConstant0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseBinaryLogicalOperation0);
        assertEquals("(1000) XOR (1000) -- 0\n\t1000 -- 1000\n\t1000 -- 1000\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test09() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                (-1.0));
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseConstant_OceanBaseDoubleConstant0, oceanBaseConstant_OceanBaseDoubleConstant0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseBinaryComparisonOperation0);
        assertEquals("(-1.0) != (-1.0) -- 0\n\t-1.0 -- -1.0\n\t-1.0 -- -1.0\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test10() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        List<OceanBaseExpression> list0 = List.of();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseConstant0, list0, false);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseInOperation0);
        oceanBaseExpectedValueVisitor0.get();
        assertEquals("(1) NOT IN () -- 1\n\t1 -- 1\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test11() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        String string0 = oceanBaseExpectedValueVisitor0.get();
        assertEquals("", string0);
    }

    @Test
    public void test12() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                (String) null);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseTextConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseUnaryPrefixOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseSelect0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseUnaryPrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseUnaryPrefixOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test15() throws Throwable {
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IF;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseComputableFunction0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseUnaryPrefixOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$3", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseTableReference oceanBaseTableReference0 = new OceanBaseTableReference(
                (OceanBaseSchema.OceanBaseTable) null);
        OceanBaseUnaryPostfixOperation.UnaryPostfixOperator oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0 = OceanBaseUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        OceanBaseUnaryPostfixOperation oceanBaseUnaryPostfixOperation0 = new OceanBaseUnaryPostfixOperation(
                oceanBaseTableReference0, oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseUnaryPostfixOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseUnaryPostfixOperation.UnaryPostfixOperator oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0 = OceanBaseUnaryPostfixOperation.UnaryPostfixOperator.IS_NULL;
        OceanBaseUnaryPostfixOperation oceanBaseUnaryPostfixOperation0 = new OceanBaseUnaryPostfixOperation(
                oceanBaseSelect0, oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseUnaryPostfixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseUnaryPostfixOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test19() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createFalse();
        OceanBaseStringExpression oceanBaseStringExpression0 = new OceanBaseStringExpression((String) null,
                oceanBaseConstant0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseStringExpression0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseStringExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test21() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseExpectedValueVisitor", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseSelect0, oceanBaseSelect0, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        oceanBaseSelect0.setWhereClause(oceanBaseBinaryComparisonOperation0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IF;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[1];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        oceanBaseSelect0.setWhereClause(oceanBaseComputableFunction0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseSelect0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test24() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstantNotAsBoolean((-906L));
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseConstant0,
                (List<OceanBaseExpression>) null, true);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseInOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        List<OceanBaseExpression> list0 = oceanBaseSelect0.getGroupByClause();
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseSelect0, list0, true);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test26() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseInOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test27() throws Throwable {
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.BIT_COUNT;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        List<OceanBaseExpression> list0 = List.of((OceanBaseExpression) oceanBaseComputableFunction0,
                (OceanBaseExpression) oceanBaseComputableFunction0, (OceanBaseExpression) oceanBaseComputableFunction0);
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseComputableFunction0, list0,
                false);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseInOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$1", e);
        }
    }

    @Test
    public void test28() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                (String) null);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseExpression) oceanBaseConstant_OceanBaseTextConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test30() throws Throwable {
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.BIT_COUNT;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseExpression) oceanBaseComputableFunction0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$1", e);
        }
    }

    @Test
    public void test31() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        OceanBaseColumnReference oceanBaseColumnReference0 = OceanBaseColumnReference
                .create((OceanBaseSchema.OceanBaseColumn) null, oceanBaseConstant0);
        OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseColumnReference0, oceanBaseConstant0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseExists0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e);
        }
    }

    @Test
    public void test32() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 = new OceanBaseConstant.OceanBaseDoubleConstant(
                1666.2731440369905);
        OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseSelect0,
                oceanBaseConstant_OceanBaseDoubleConstant0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseExists0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test33() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseExists) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test34() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant((String) null);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test35() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("~3<)jWYGny#Fbsh");
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.GREATEST;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[3];
        oceanBaseExpressionArray0[0] = (OceanBaseExpression) oceanBaseConstant0;
        oceanBaseExpressionArray0[1] = (OceanBaseExpression) oceanBaseConstant0;
        oceanBaseExpressionArray0[2] = (OceanBaseExpression) oceanBaseConstant0;
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseComputableFunction0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test36() throws Throwable {
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                (OceanBaseComputableFunction.OceanBaseFunction) null, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseComputableFunction0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e);
        }
    }

    @Test
    public void test37() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.COALESCE;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[1];
        oceanBaseExpressionArray0[0] = (OceanBaseExpression) oceanBaseSelect0;
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseComputableFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test38() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseComputableFunction) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test39() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IF;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseComputableFunction0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$3", e);
        }
    }

    @Test
    public void test40() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createBoolean(true);
        OceanBaseColumnReference oceanBaseColumnReference0 = new OceanBaseColumnReference(
                (OceanBaseSchema.OceanBaseColumn) null, oceanBaseConstant0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseColumnReference0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e);
        }
    }

    @Test
    public void test41() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseTableReference oceanBaseTableReference0 = new OceanBaseTableReference(
                (OceanBaseSchema.OceanBaseTable) null);
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseCastOperation oceanBaseCastOperation0 = new OceanBaseCastOperation(oceanBaseTableReference0,
                oceanBaseCastOperation_CastType0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseCastOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e);
        }
    }

    @Test
    public void test42() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
        OceanBaseCastOperation oceanBaseCastOperation0 = new OceanBaseCastOperation(oceanBaseSelect0,
                oceanBaseCastOperation_CastType0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseCastOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test43() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseCastOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test44() throws Throwable {
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[1];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                (OceanBaseComputableFunction.OceanBaseFunction) null, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseComputableFunction0, oceanBaseComputableFunction0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseBinaryLogicalOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e);
        }
    }

    @Test
    public void test45() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.OR;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseSelect0, oceanBaseSelect0, oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseBinaryLogicalOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test46() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseBinaryLogicalOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test47() throws Throwable {
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.COALESCE;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                (String) null);
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.LESS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseComputableFunction0, oceanBaseConstant_OceanBaseTextConstant0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseBinaryComparisonOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test48() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseSelect0, oceanBaseSelect0, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseBinaryComparisonOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test49() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseBinaryComparisonOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test50() throws Throwable {
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IFNULL;
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseComputableFunction0, oceanBaseComputableFunction0,
                oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseBinaryComparisonOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$4", e);
        }
    }

    @Test
    public void test51() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseConstant) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test52() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstant(9223372036854775807L);
        OceanBaseText oceanBaseText0 = new OceanBaseText(oceanBaseConstant0, "i[0-9]+", true);
        OceanBaseOrderByTerm.OceanBaseOrder oceanBaseOrderByTerm_OceanBaseOrder0 = OceanBaseOrderByTerm.OceanBaseOrder.DESC;
        OceanBaseOrderByTerm oceanBaseOrderByTerm0 = new OceanBaseOrderByTerm(oceanBaseText0,
                oceanBaseOrderByTerm_OceanBaseOrder0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseOrderByTerm0);
        assertEquals(OceanBaseOrderByTerm.OceanBaseOrder.DESC, oceanBaseOrderByTerm0.getOrder());
    }

    @Test
    public void test53() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.FLOAT;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn("",
                oceanBaseSchema_OceanBaseDataType0, false, (-3289), false);
        OceanBaseColumnName oceanBaseColumnName0 = new OceanBaseColumnName(oceanBaseSchema_OceanBaseColumn0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseColumnName0);
        assertEquals("", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test54() throws Throwable {
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.COALESCE;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        List<OceanBaseExpression> list0 = List.of((OceanBaseExpression) oceanBaseComputableFunction0,
                (OceanBaseExpression) oceanBaseComputableFunction0, (OceanBaseExpression) oceanBaseComputableFunction0);
        OceanBaseInOperation oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseComputableFunction0, list0,
                false);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseInOperation0);
        assertEquals(
                "(COALESCE()) NOT IN (COALESCE(), COALESCE(), COALESCE()) -- NULL\n\tCOALESCE() -- NULL\n\tCOALESCE() -- NULL\n\tCOALESCE() -- NULL\n\tCOALESCE() -- NULL\n",
                oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test55() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        oceanBaseSelect0.setWhereClause(oceanBaseConstant_OceanBaseNullConstant0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseSelect0);
        assertEquals("\tNULL -- NULL\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test56() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        oceanBaseExpectedValueVisitor0.visit(oceanBaseSelect0);
        assertEquals("", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test57() throws Throwable {
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.COALESCE;
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        List<OceanBaseExpression> list0 = List.of((OceanBaseExpression) oceanBaseComputableFunction0,
                (OceanBaseExpression) oceanBaseSelect0, (OceanBaseExpression) oceanBaseSelect0,
                (OceanBaseExpression) oceanBaseSelect0, (OceanBaseExpression) oceanBaseComputableFunction0,
                (OceanBaseExpression) oceanBaseComputableFunction0);
        oceanBaseSelect0.setJoinList(list0);
        // Undeclared exception!
        oceanBaseExpectedValueVisitor0.visit(oceanBaseSelect0);
    }

    @Test
    public void test58() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        oceanBaseExpectedValueVisitor0.visit((OceanBaseAggregate) null);
        assertEquals("", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test59() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseTextConstant oceanBaseConstant_OceanBaseTextConstant0 = new OceanBaseConstant.OceanBaseTextConstant(
                "ySCq 9hWfVee!5");
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.MINUS;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseConstant_OceanBaseTextConstant0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseUnaryPrefixOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation$OceanBaseUnaryPrefixOperator$3", e);
        }
    }

    @Test
    public void test60() throws Throwable {
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.GREATEST;
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseUnaryPostfixOperation.UnaryPostfixOperator oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0 = OceanBaseUnaryPostfixOperation.UnaryPostfixOperator.IS_NULL;
        OceanBaseUnaryPostfixOperation oceanBaseUnaryPostfixOperation0 = new OceanBaseUnaryPostfixOperation(
                oceanBaseComputableFunction0, oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseUnaryPostfixOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 1 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction", e);
        }
    }

    @Test
    public void test61() throws Throwable {
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IF;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseComputableFunction0, oceanBaseComputableFunction0,
                oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseBinaryLogicalOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$3", e);
        }
    }

    @Test
    public void test62() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("~3<)jWYGny#Fbsh");
        OceanBaseStringExpression oceanBaseStringExpression0 = new OceanBaseStringExpression("~3<)jWYGny#Fbsh",
                oceanBaseConstant0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseStringExpression0);
        assertEquals("0 -- \"~3<)jWYGny#Fbsh\"\n", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test63() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        LinkedList<OceanBaseSchema.OceanBaseColumn> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseColumn>();
        LinkedList<OceanBaseSchema.OceanBaseIndex> linkedList1 = new LinkedList<OceanBaseSchema.OceanBaseIndex>();
        OceanBaseSchema.OceanBaseTable oceanBaseSchema_OceanBaseTable0 = new OceanBaseSchema.OceanBaseTable("",
                linkedList0, linkedList1);
        OceanBaseTableReference oceanBaseTableReference0 = new OceanBaseTableReference(oceanBaseSchema_OceanBaseTable0);
        oceanBaseExpectedValueVisitor0.visit(oceanBaseTableReference0);
        assertEquals("", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test64() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        oceanBaseExpectedValueVisitor0.visit((OceanBaseText) null);
        assertEquals("", oceanBaseExpectedValueVisitor0.get());
    }

    @Test
    public void test65() throws Throwable {
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IFNULL;
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseComputableFunction0,
                oceanBaseConstant_OceanBaseNullConstant0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseExists0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$4", e);
        }
    }

    @Test
    public void test66() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit((OceanBaseColumnReference) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test67() throws Throwable {
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("5*P}dZw");
        OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseConstant0, oceanBaseConstant0);
        OceanBaseBinaryComparisonOperation.BinaryComparisonOperator oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 = OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        OceanBaseBinaryComparisonOperation oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation(
                oceanBaseExists0, oceanBaseExists0, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseBinaryComparisonOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseConstant$OceanBaseTextConstant", e);
        }
    }

    @Test
    public void test68() throws Throwable {
        OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.IF;
        OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0];
        OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
                oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0);
        OceanBaseExpectedValueVisitor oceanBaseExpectedValueVisitor0 = new OceanBaseExpectedValueVisitor();
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseCastOperation oceanBaseCastOperation0 = new OceanBaseCastOperation(oceanBaseComputableFunction0,
                oceanBaseCastOperation_CastType0);
        // Undeclared exception!
        try {
            oceanBaseExpectedValueVisitor0.visit(oceanBaseCastOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.oceanbase.ast.OceanBaseComputableFunction$OceanBaseFunction$3", e);
        }
    }
}
