/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:54:10 GMT 2025
 */

package sqlancer.evosuite.oceanbase.gen;

import static org.junit.jupiter.api.Assertions.*;
import java.sql.Connection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.Random;
import org.junit.jupiter.api.Test;
import sqlancer.common.schema.AbstractTables;
import sqlancer.common.visitor.UnaryOperation;
import sqlancer.oceanbase.ast.OceanBaseBinaryLogicalOperation;
import sqlancer.oceanbase.ast.OceanBaseColumnReference;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.ast.OceanBaseExpression;
import sqlancer.oceanbase.ast.OceanBaseJoin;
import sqlancer.oceanbase.ast.OceanBaseSelect;
import sqlancer.oceanbase.ast.OceanBaseUnaryPostfixOperation;
import sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation;
import sqlancer.oceanbase.gen.OceanBaseExpressionGenerator;
import sqlancer.oceanbase.OceanBaseGlobalState;
import sqlancer.oceanbase.OceanBaseSchema;

public class OceanBaseExpressionGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseTable>();
        AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn> abstractTables0 = new AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn>(
                linkedList0);
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        List<OceanBaseExpression> list0 = oceanBaseExpressionGenerator1.getTableRefs();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test01() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseTable>();
        AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn> abstractTables0 = new AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn>(
                linkedList0);
        LinkedList<OceanBaseSchema.OceanBaseColumn> linkedList1 = new LinkedList<OceanBaseSchema.OceanBaseColumn>();
        LinkedList<OceanBaseSchema.OceanBaseIndex> linkedList2 = new LinkedList<OceanBaseSchema.OceanBaseIndex>();
        OceanBaseSchema.OceanBaseTable oceanBaseSchema_OceanBaseTable0 = new OceanBaseSchema.OceanBaseTable("*",
                linkedList1, linkedList2);
        linkedList0.add(oceanBaseSchema_OceanBaseTable0);
        oceanBaseExpressionGenerator0.setTablesAndColumns(abstractTables0);
        List<OceanBaseExpression> list0 = oceanBaseExpressionGenerator0.getTableRefs();
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test02() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.DECIMAL;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn("",
                oceanBaseSchema_OceanBaseDataType0, false, (-339), false);
        List<OceanBaseSchema.OceanBaseColumn> list0 = List.of(oceanBaseSchema_OceanBaseColumn0,
                oceanBaseSchema_OceanBaseColumn0, oceanBaseSchema_OceanBaseColumn0);
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0.setColumns(list0);
        List<OceanBaseExpression> list1 = oceanBaseExpressionGenerator1.generateFetchColumns(true);
        assertFalse(list1.isEmpty());
    }

    @Test
    public void test03() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.setTablesAndColumns(
                    (AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateUnoptimizedQueryString((OceanBaseSelect) null,
                    (OceanBaseExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateUnoptimizedQueryString(oceanBaseSelect0, (OceanBaseExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test06() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        OceanBaseSelect oceanBaseSelect0 = oceanBaseExpressionGenerator0.generateSelect();
        LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseTable>();
        AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn> abstractTables0 = new AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn>(
                linkedList0);
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator1.generateOptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseSelect0, false);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateExpression(72655);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateConstant();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseGlobalState", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseTable>();
        AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn> abstractTables0 = new AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn>(
                linkedList0);
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator1.generateColumn();
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test10() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateUnoptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseSelect0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test11() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateUnoptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseSelect0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test12() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateUnoptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseSelect0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test13() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateUnoptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseSelect0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test14() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateUnoptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseSelect0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test15() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateUnoptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseConstant0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.DECIMAL;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn(
                "sqlancer.cockroachdb.CockroachDBOracleFactory", oceanBaseSchema_OceanBaseDataType0, true, 3704893,
                false);
        List<OceanBaseSchema.OceanBaseColumn> list0 = List.of(oceanBaseSchema_OceanBaseColumn0,
                oceanBaseSchema_OceanBaseColumn0, oceanBaseSchema_OceanBaseColumn0);
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        oceanBaseExpressionGenerator0.setColumns(list0);
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 = OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND;
        OceanBaseBinaryLogicalOperation oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation(
                oceanBaseSelect0, oceanBaseSelect0, oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateOptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseBinaryLogicalOperation0, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.DECIMAL;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn(
                "{D_qmi", oceanBaseSchema_OceanBaseDataType0, false, (-349), false);
        List<OceanBaseSchema.OceanBaseColumn> list0 = List.of(oceanBaseSchema_OceanBaseColumn0,
                oceanBaseSchema_OceanBaseColumn0, oceanBaseSchema_OceanBaseColumn0);
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0.setColumns(list0);
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator1.generateOptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseSelect0, false);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateOptimizedQueryString(oceanBaseSelect0,
                    (OceanBaseExpression) oceanBaseSelect0, true);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.VARCHAR;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn(
                "float4_minmax_ops", oceanBaseSchema_OceanBaseDataType0, false, 3496350, false);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateConstant(oceanBaseSchema_OceanBaseColumn0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.FLOAT;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn("TRUE",
                oceanBaseSchema_OceanBaseDataType0, false, 2022338513, false);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateConstant(oceanBaseSchema_OceanBaseColumn0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.INT;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn("TRUE",
                oceanBaseSchema_OceanBaseDataType0, true, 2022338513, true);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateConstant(oceanBaseSchema_OceanBaseColumn0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.DOUBLE;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn(
                "HUGEINT", oceanBaseSchema_OceanBaseDataType0, false, 1011, false);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateConstant(oceanBaseSchema_OceanBaseColumn0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.DECIMAL;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn(
                ";4%M2IXQTT:6{2:m}", oceanBaseSchema_OceanBaseDataType0, true, 6, true);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateConstant(oceanBaseSchema_OceanBaseColumn0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.DECIMAL;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn("",
                oceanBaseSchema_OceanBaseDataType0, false, (-339), false);
        List<OceanBaseSchema.OceanBaseColumn> list0 = List.of(oceanBaseSchema_OceanBaseColumn0,
                oceanBaseSchema_OceanBaseColumn0, oceanBaseSchema_OceanBaseColumn0);
        oceanBaseExpressionGenerator0.setColumns(list0);
        OceanBaseColumnReference oceanBaseColumnReference0 = (OceanBaseColumnReference) oceanBaseExpressionGenerator0
                .generateColumn();
        assertFalse(oceanBaseColumnReference0.getRef());
    }

    @Test
    public void test25() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.INT;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn("aC{",
                oceanBaseSchema_OceanBaseDataType0, true, 72655, true);
        List<OceanBaseSchema.OceanBaseColumn> list0 = List.of(oceanBaseSchema_OceanBaseColumn0,
                oceanBaseSchema_OceanBaseColumn0, oceanBaseSchema_OceanBaseColumn0);
        oceanBaseExpressionGenerator0.setColumns(list0);
        OceanBaseSchema.OceanBaseRowValue oceanBaseSchema_OceanBaseRowValue0 = mock(
                OceanBaseSchema.OceanBaseRowValue.class, new ViolatedAssumptionAnswer());
        doReturn((Map) null).when(oceanBaseSchema_OceanBaseRowValue0).getValues();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0
                .setRowVal(oceanBaseSchema_OceanBaseRowValue0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator1.generateColumn();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test26() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0
                .setState(oceanBaseGlobalState0);
        assertSame(oceanBaseExpressionGenerator1, oceanBaseExpressionGenerator0);
    }

    @Test
    public void test27() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.getTableRefs();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test28() throws Throwable {
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                (OceanBaseGlobalState) null);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateBooleanExpression();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        LinkedList<OceanBaseSchema.OceanBaseColumn> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseColumn>();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0
                .setOceanBaseColumns(linkedList0);
        assertSame(oceanBaseExpressionGenerator1, oceanBaseExpressionGenerator0);
    }

    @Test
    public void test30() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseTable>();
        AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn> abstractTables0 = new AbstractTables<OceanBaseSchema.OceanBaseTable, OceanBaseSchema.OceanBaseColumn>(
                linkedList0);
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        List<OceanBaseExpression> list0 = oceanBaseExpressionGenerator1.generateFetchColumns(false);
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test31() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        List<OceanBaseJoin> list0 = oceanBaseExpressionGenerator0.getRandomJoinClauses();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test32() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseUnaryPostfixOperation oceanBaseUnaryPostfixOperation0 = (OceanBaseUnaryPostfixOperation) oceanBaseExpressionGenerator0
                .isNull((OceanBaseExpression) oceanBaseConstant_OceanBaseNullConstant0);
        assertFalse(oceanBaseUnaryPostfixOperation0.isNegated());
    }

    @Test
    public void test33() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator1 = oceanBaseExpressionGenerator0.setCon(connection0);
        assertSame(oceanBaseExpressionGenerator0, oceanBaseExpressionGenerator1);
    }

    @Test
    public void test34() throws Throwable {
        OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = (OceanBaseUnaryPrefixOperation) oceanBaseExpressionGenerator0
                .negatePredicate((OceanBaseExpression) oceanBaseSelect0);
        assertEquals(UnaryOperation.OperatorKind.PREFIX, oceanBaseUnaryPrefixOperation0.getOperatorKind());
    }

    @Test
    public void test35() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        OceanBaseExpressionGenerator oceanBaseExpressionGenerator0 = new OceanBaseExpressionGenerator(
                oceanBaseGlobalState0);
        // Undeclared exception!
        try {
            oceanBaseExpressionGenerator0.generateFetchColumns(false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.gen.OceanBaseExpressionGenerator", e);
        }
    }
}
