/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 16:23:44 GMT 2025
 */

package sqlancer.evosuite.oceanbase;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.oceanbase.ast.OceanBaseCastOperation;
import sqlancer.oceanbase.ast.OceanBaseColumnReference;
import sqlancer.oceanbase.ast.OceanBaseConstant;
import sqlancer.oceanbase.ast.OceanBaseExpression;
import sqlancer.oceanbase.ast.OceanBaseOrderByTerm;
import sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation;
import sqlancer.oceanbase.OceanBaseSchema;
import sqlancer.oceanbase.OceanBaseToStringVisitor;

public class OceanBaseToStringVisitor_ESTest {

    @Test
    public void test00() throws Throwable {
        OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor();
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        oceanBaseToStringVisitor0.visitSpecific((OceanBaseExpression) oceanBaseConstant_OceanBaseNullConstant0);
        assertEquals("NULL", oceanBaseConstant_OceanBaseNullConstant0.castAsString());
    }

    @Test
    public void test01() throws Throwable {
        OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor();
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createUnsignedIntConstant((-680L));
        oceanBaseToStringVisitor0.visit(oceanBaseConstant0);
        assertEquals(OceanBaseSchema.OceanBaseDataType.INT, oceanBaseConstant0.getType());
    }

    @Test
    public void test02() throws Throwable {
        OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor();
        OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
        OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED;
        OceanBaseCastOperation oceanBaseCastOperation0 = new OceanBaseCastOperation(
                oceanBaseConstant_OceanBaseNullConstant0, oceanBaseCastOperation_CastType0);
        oceanBaseToStringVisitor0.visit(oceanBaseCastOperation0);
        assertEquals("CAST(NULL AS UNSIGNED)", oceanBaseToStringVisitor0.get());
    }

    @Test
    public void test03() throws Throwable {
        OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor();
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.DECIMAL;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn("",
                oceanBaseSchema_OceanBaseDataType0, false, 8123, false);
        OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createStringConstant("");
        OceanBaseColumnReference oceanBaseColumnReference0 = OceanBaseColumnReference
                .create(oceanBaseSchema_OceanBaseColumn0, oceanBaseConstant0);
        OceanBaseOrderByTerm.OceanBaseOrder oceanBaseOrderByTerm_OceanBaseOrder0 = OceanBaseOrderByTerm.OceanBaseOrder.DESC;
        OceanBaseOrderByTerm oceanBaseOrderByTerm0 = new OceanBaseOrderByTerm(oceanBaseColumnReference0,
                oceanBaseOrderByTerm_OceanBaseOrder0);
        OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 = OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.NOT;
        OceanBaseUnaryPrefixOperation oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation(
                oceanBaseOrderByTerm0, oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0);
        oceanBaseToStringVisitor0.visit(oceanBaseUnaryPrefixOperation0);
        assertEquals("(!  DESC)", oceanBaseToStringVisitor0.get());
    }
}

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test04() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstant(2611L, true);
 * OceanBaseText oceanBaseText0 = new OceanBaseText(oceanBaseConstant0, "s~C{=c.cdi!Fq( ", false);
 * oceanBaseToStringVisitor0.visit(oceanBaseText0); assertEquals("s~C{=c.cdi!Fq( ", oceanBaseText0.getText()); }
 *
 * @Test public void test05() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); LinkedList<OceanBaseSchema.OceanBaseColumn> linkedList0 = new
 * LinkedList<OceanBaseSchema.OceanBaseColumn>(); OceanBaseSchema.OceanBaseIndex[] oceanBaseSchema_OceanBaseIndexArray0
 * = new OceanBaseSchema.OceanBaseIndex[4]; OceanBaseSchema.OceanBaseIndex oceanBaseSchema_OceanBaseIndex0 =
 * mock(OceanBaseSchema.OceanBaseIndex.class, new ViolatedAssumptionAnswer()); oceanBaseSchema_OceanBaseIndexArray0[0] =
 * oceanBaseSchema_OceanBaseIndex0; oceanBaseSchema_OceanBaseIndexArray0[1] = oceanBaseSchema_OceanBaseIndex0;
 * oceanBaseSchema_OceanBaseIndexArray0[2] = oceanBaseSchema_OceanBaseIndex0; oceanBaseSchema_OceanBaseIndexArray0[3] =
 * oceanBaseSchema_OceanBaseIndex0; List<OceanBaseSchema.OceanBaseIndex> list0 =
 * List.of(oceanBaseSchema_OceanBaseIndexArray0); OceanBaseSchema.OceanBaseTable oceanBaseSchema_OceanBaseTable0 = new
 * OceanBaseSchema.OceanBaseTable( (String) null, linkedList0, list0); OceanBaseTableReference oceanBaseTableReference0
 * = new OceanBaseTableReference(oceanBaseSchema_OceanBaseTable0);
 * oceanBaseToStringVisitor0.visit(oceanBaseTableReference0); assertEquals("null", oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test06() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseConstant oceanBaseConstant0 =
 * OceanBaseConstant.createIntConstantNotAsBoolean(0L); OceanBaseExists oceanBaseExists0 = new
 * OceanBaseExists(oceanBaseConstant0); oceanBaseToStringVisitor0.visit(oceanBaseExists0); assertEquals(" EXISTS (0)",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test07() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.INT; OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new
 * OceanBaseSchema.OceanBaseColumn( "sqlancer.clickhouse.ClickHouseSchema", oceanBaseSchema_OceanBaseDataType0, false,
 * 100000, false); OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstant((long) 100000);
 * OceanBaseColumnReference oceanBaseColumnReference0 = OceanBaseColumnReference
 * .create(oceanBaseSchema_OceanBaseColumn0, oceanBaseConstant0); oceanBaseColumnReference0.setRef(true);
 * LinkedList<OceanBaseSchema.OceanBaseColumn> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseColumn>();
 * OceanBaseSchema.OceanBaseTable oceanBaseSchema_OceanBaseTable0 = new OceanBaseSchema.OceanBaseTable(
 * "sqlancer.clickhouse.ClickHouseSchema", linkedList0, (List<OceanBaseSchema.OceanBaseIndex>) null);
 * oceanBaseSchema_OceanBaseColumn0.setTable(oceanBaseSchema_OceanBaseTable0);
 * oceanBaseToStringVisitor0.visit(oceanBaseColumnReference0); assertEquals(
 * "sqlancer.clickhouse.ClickHouseSchema.sqlancer.clickhouse.ClickHouseSchema AS sqlancer.clickhouse.ClickHouseSchemasqlancer.clickhouse.ClickHouseSchema"
 * , oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test08() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.FLOAT; OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new
 * OceanBaseSchema.OceanBaseColumn("[]", oceanBaseSchema_OceanBaseDataType0, false, 1469, false); OceanBaseColumnName
 * oceanBaseColumnName0 = new OceanBaseColumnName(oceanBaseSchema_OceanBaseColumn0);
 * oceanBaseToStringVisitor0.visit(oceanBaseColumnName0); assertEquals("[]", oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test09() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new
 * OceanBaseConstant.OceanBaseIntConstant( (-2295L), "DM5jt!`hleQ("); OceanBaseCastOperation.CastType
 * oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.UNSIGNED; OceanBaseCastOperation
 * oceanBaseCastOperation0 = new OceanBaseCastOperation( oceanBaseConstant_OceanBaseIntConstant0,
 * oceanBaseCastOperation_CastType0); OceanBaseAggregate.OceanBaseAggregateFunction
 * oceanBaseAggregate_OceanBaseAggregateFunction0 = OceanBaseAggregate.OceanBaseAggregateFunction.COUNT;
 * OceanBaseAggregate oceanBaseAggregate0 = new OceanBaseAggregate(oceanBaseCastOperation0,
 * oceanBaseAggregate_OceanBaseAggregateFunction0); oceanBaseToStringVisitor0.visit(oceanBaseAggregate0);
 * assertEquals("COUNT(CAST(DM5jt!`hleQ( AS UNSIGNED))", oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test10() throws Throwable { OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant(); OceanBaseToStringVisitor
 * oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor();
 * OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
 * oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 =
 * OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.XOR; OceanBaseBinaryLogicalOperation
 * oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation( oceanBaseConstant_OceanBaseNullConstant0,
 * oceanBaseConstant_OceanBaseNullConstant0, oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0);
 * oceanBaseToStringVisitor0.visit(oceanBaseBinaryLogicalOperation0); assertEquals("(NULL) XOR (NULL)",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test11() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createTrue();
 * OceanBaseBinaryComparisonOperation.BinaryComparisonOperator
 * oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 =
 * OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS; OceanBaseBinaryComparisonOperation
 * oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation( oceanBaseConstant0, oceanBaseConstant0,
 * oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0);
 * oceanBaseToStringVisitor0.visit(oceanBaseBinaryComparisonOperation0); assertEquals("(1) != (1)",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test12() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createUnsignedIntConstant(0L);
 * oceanBaseToStringVisitor0.visit((OceanBaseExpression) oceanBaseConstant0); String string0 =
 * oceanBaseToStringVisitor0.get(); assertEquals("0", string0); }
 *
 * @Test public void test13() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseJoin oceanBaseJoin0 = new OceanBaseJoin(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visitSpecific((OceanBaseExpression) oceanBaseJoin0);
 * fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // sqlancer.oceanbase.ast.OceanBaseJoin@3 // } }
 *
 * @Test public void test14() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit((OceanBaseUnaryPrefixOperation) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test15() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator
 * oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 =
 * OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.NOT; OceanBaseUnaryPrefixOperation
 * oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation( (OceanBaseExpression) null,
 * oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseUnaryPrefixOperation0); fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test16() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit((OceanBaseUnaryPostfixOperation) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test17() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseUnaryPostfixOperation.UnaryPostfixOperator oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0 =
 * OceanBaseUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE; OceanBaseUnaryPostfixOperation
 * oceanBaseUnaryPostfixOperation0 = new OceanBaseUnaryPostfixOperation( oceanBaseSelect0,
 * oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0, false); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseUnaryPostfixOperation0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test18() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseUnaryPostfixOperation.UnaryPostfixOperator
 * oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0 = OceanBaseUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
 * OceanBaseUnaryPostfixOperation oceanBaseUnaryPostfixOperation0 = new OceanBaseUnaryPostfixOperation(
 * (OceanBaseExpression) null, oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0, false); // Undeclared exception!
 * try { oceanBaseToStringVisitor0.visit(oceanBaseUnaryPostfixOperation0); fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test19() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit((OceanBaseText) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test20() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseText oceanBaseText0 = new OceanBaseText((OceanBaseExpression) null,
 * "DN)w>7D1RdW%j$iRS", false); // Undeclared exception! try { oceanBaseToStringVisitor0.visit(oceanBaseText0);
 * fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test21() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit((OceanBaseStringExpression) null, 1503);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test22() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit((OceanBaseStringExpression) null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test23() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit((OceanBaseSelect) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test24() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit((OceanBaseOrderByTerm)
 * null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test25() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseOrderByTerm.OceanBaseOrder oceanBaseOrderByTerm_OceanBaseOrder0 = OceanBaseOrderByTerm.OceanBaseOrder.DESC;
 * OceanBaseOrderByTerm oceanBaseOrderByTerm0 = new OceanBaseOrderByTerm(oceanBaseSelect0,
 * oceanBaseOrderByTerm_OceanBaseOrder0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseOrderByTerm0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test26() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseOrderByTerm.OceanBaseOrder oceanBaseOrderByTerm_OceanBaseOrder0 =
 * OceanBaseOrderByTerm.OceanBaseOrder.ASC; OceanBaseOrderByTerm oceanBaseOrderByTerm0 = new
 * OceanBaseOrderByTerm((OceanBaseExpression) null, oceanBaseOrderByTerm_OceanBaseOrder0); // Undeclared exception! try
 * { oceanBaseToStringVisitor0.visit(oceanBaseOrderByTerm0); fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test27() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit((OceanBaseInOperation)
 * null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test28() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect(); List<OceanBaseExpression> list0
 * = oceanBaseSelect0.getOrderByClauses(); OceanBaseInOperation oceanBaseInOperation0 = new
 * OceanBaseInOperation(oceanBaseSelect0, list0, true); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseInOperation0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test29() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit((OceanBaseExists) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test30() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseExists oceanBaseExists0 = new OceanBaseExists((OceanBaseExpression) null,
 * (OceanBaseConstant) null); // Undeclared exception! try { oceanBaseToStringVisitor0.visit(oceanBaseExists0);
 * fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test31() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit((OceanBaseComputableFunction) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test32() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseComputableFunction.OceanBaseFunction oceanBaseComputableFunction_OceanBaseFunction0 =
 * OceanBaseComputableFunction.OceanBaseFunction.IF; OceanBaseExpression[] oceanBaseExpressionArray0 = new
 * OceanBaseExpression[1]; oceanBaseExpressionArray0[0] = (OceanBaseExpression) oceanBaseSelect0;
 * OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
 * oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseComputableFunction0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test33() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit((OceanBaseCastOperation)
 * null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test34() throws Throwable { OceanBaseComputableFunction.OceanBaseFunction
 * oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.BIT_COUNT;
 * OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[1]; OceanBaseComputableFunction
 * oceanBaseComputableFunction0 = new OceanBaseComputableFunction( oceanBaseComputableFunction_OceanBaseFunction0,
 * oceanBaseExpressionArray0); OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor();
 * OceanBaseCastOperation.CastType oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED;
 * OceanBaseCastOperation oceanBaseCastOperation0 = new OceanBaseCastOperation(oceanBaseComputableFunction0,
 * oceanBaseCastOperation_CastType0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseCastOperation0); fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test35() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit((OceanBaseBinaryLogicalOperation) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test36() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseJoin oceanBaseJoin0 = new OceanBaseJoin();
 * OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
 * oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 =
 * OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.XOR; OceanBaseBinaryLogicalOperation
 * oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation( oceanBaseJoin0, oceanBaseJoin0,
 * oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseBinaryLogicalOperation0); fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // sqlancer.oceanbase.ast.OceanBaseJoin@3 // } }
 *
 * @Test public void test37() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit((OceanBaseBinaryComparisonOperation) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test38() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseBinaryComparisonOperation.BinaryComparisonOperator
 * oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 =
 * OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.LESS; OceanBaseBinaryComparisonOperation
 * oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation( (OceanBaseExpression) null,
 * (OceanBaseExpression) null, oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0); // Undeclared exception!
 * try { oceanBaseToStringVisitor0.visit(oceanBaseBinaryComparisonOperation0);
 * fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test39() throws Throwable { OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor();
 * OceanBaseAggregate.OceanBaseAggregateFunction oceanBaseAggregate_OceanBaseAggregateFunction0 =
 * OceanBaseAggregate.OceanBaseAggregateFunction.COUNT; OceanBaseAggregate oceanBaseAggregate0 = new
 * OceanBaseAggregate(oceanBaseSelect0, oceanBaseAggregate_OceanBaseAggregateFunction0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseAggregate0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test40() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseAggregate.OceanBaseAggregateFunction
 * oceanBaseAggregate_OceanBaseAggregateFunction0 = OceanBaseAggregate.OceanBaseAggregateFunction.COUNT;
 * OceanBaseAggregate oceanBaseAggregate0 = new OceanBaseAggregate((OceanBaseExpression) null,
 * oceanBaseAggregate_OceanBaseAggregateFunction0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseAggregate0); fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test41() throws Throwable { OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant(); OceanBaseToStringVisitor
 * oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); OceanBaseStringExpression oceanBaseStringExpression0 =
 * new OceanBaseStringExpression("", oceanBaseConstant_OceanBaseNullConstant0);
 * oceanBaseToStringVisitor0.visit(oceanBaseStringExpression0); assertEquals("0", oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test42() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseConstant.OceanBaseIntConstant oceanBaseConstant_OceanBaseIntConstant0 = new
 * OceanBaseConstant.OceanBaseIntConstant( (-1575L), false); OceanBaseStringExpression oceanBaseStringExpression0 = new
 * OceanBaseStringExpression("SELECT CAST(", oceanBaseConstant_OceanBaseIntConstant0);
 * oceanBaseToStringVisitor0.visit(oceanBaseStringExpression0); assertEquals("SELECT CAST(",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test43() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect(); OceanBaseSelect.SelectType
 * oceanBaseSelect_SelectType0 = OceanBaseSelect.SelectType.DISTINCT;
 * oceanBaseSelect0.setFromOptions(oceanBaseSelect_SelectType0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseSelect0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test44() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit((OceanBaseAggregate)
 * null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test45() throws Throwable { OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visitSpecific((OceanBaseExpression) oceanBaseSelect0);
 * fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test46() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new
 * OceanBaseConstant.OceanBaseNullConstant(); OceanBaseStringExpression oceanBaseStringExpression0 = new
 * OceanBaseStringExpression("SELECT", oceanBaseConstant_OceanBaseNullConstant0);
 * oceanBaseToStringVisitor0.visit(oceanBaseStringExpression0, 4); assertEquals("SELECT",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test47() throws Throwable { OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant(); OceanBaseToStringVisitor
 * oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); OceanBaseStringExpression oceanBaseStringExpression0 =
 * new OceanBaseStringExpression("B'", oceanBaseConstant_OceanBaseNullConstant0);
 * oceanBaseToStringVisitor0.visit(oceanBaseStringExpression0); assertEquals("0", oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test48() throws Throwable { OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant(); OceanBaseToStringVisitor
 * oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); OceanBaseOrderByTerm.OceanBaseOrder
 * oceanBaseOrderByTerm_OceanBaseOrder0 = OceanBaseOrderByTerm.OceanBaseOrder.ASC; OceanBaseOrderByTerm
 * oceanBaseOrderByTerm0 = new OceanBaseOrderByTerm(oceanBaseConstant_OceanBaseNullConstant0,
 * oceanBaseOrderByTerm_OceanBaseOrder0); oceanBaseToStringVisitor0.visit(oceanBaseOrderByTerm0);
 * assertEquals("NULL ASC", oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test49() throws Throwable { OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant(); OceanBaseToStringVisitor
 * oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); OceanBaseOrderByTerm.OceanBaseOrder
 * oceanBaseOrderByTerm_OceanBaseOrder0 = OceanBaseOrderByTerm.OceanBaseOrder.DESC; OceanBaseOrderByTerm
 * oceanBaseOrderByTerm0 = new OceanBaseOrderByTerm(oceanBaseConstant_OceanBaseNullConstant0,
 * oceanBaseOrderByTerm_OceanBaseOrder0); oceanBaseToStringVisitor0.visit(oceanBaseOrderByTerm0);
 * assertEquals("NULL DESC", oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test50() throws Throwable { OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant(); OceanBaseToStringVisitor
 * oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); LinkedList<OceanBaseExpression> linkedList0 = new
 * LinkedList<OceanBaseExpression>(); linkedList0.add((OceanBaseExpression) oceanBaseConstant_OceanBaseNullConstant0);
 * linkedList0.add((OceanBaseExpression) oceanBaseConstant_OceanBaseNullConstant0); OceanBaseInOperation
 * oceanBaseInOperation0 = new OceanBaseInOperation(oceanBaseConstant_OceanBaseNullConstant0, linkedList0, true);
 * oceanBaseToStringVisitor0.visit(oceanBaseInOperation0); assertEquals("(NULL) IN (NULL, NULL)",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test51() throws Throwable { OceanBaseConstant.OceanBaseIntConstant
 * oceanBaseConstant_OceanBaseIntConstant0 = new OceanBaseConstant.OceanBaseIntConstant( (-1040L), false);
 * OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[4]; List<OceanBaseExpression> list0 =
 * Randomly.nonEmptySubset(oceanBaseExpressionArray0); OceanBaseInOperation oceanBaseInOperation0 = new
 * OceanBaseInOperation(oceanBaseConstant_OceanBaseIntConstant0, list0, false); OceanBaseToStringVisitor
 * oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseInOperation0); fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test52() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseComputableFunction.OceanBaseFunction
 * oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.BIT_COUNT;
 * OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[2]; OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant();
 * oceanBaseExpressionArray0[0] = (OceanBaseExpression) oceanBaseConstant_OceanBaseNullConstant0;
 * OceanBaseComputableFunction oceanBaseComputableFunction0 = new OceanBaseComputableFunction(
 * oceanBaseComputableFunction_OceanBaseFunction0, oceanBaseExpressionArray0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseComputableFunction0); fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // null // } }
 *
 * @Test public void test53() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseComputableFunction.OceanBaseFunction
 * oceanBaseComputableFunction_OceanBaseFunction0 = OceanBaseComputableFunction.OceanBaseFunction.BIT_COUNT;
 * OceanBaseExpression[] oceanBaseExpressionArray0 = new OceanBaseExpression[0]; OceanBaseComputableFunction
 * oceanBaseComputableFunction0 = new OceanBaseComputableFunction( oceanBaseComputableFunction_OceanBaseFunction0,
 * oceanBaseExpressionArray0); oceanBaseToStringVisitor0.visit(oceanBaseComputableFunction0);
 * assertEquals("BIT_COUNT()", oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test54() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new
 * OceanBaseConstant.OceanBaseNullConstant(); OceanBaseUnaryPostfixOperation.UnaryPostfixOperator
 * oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0 = OceanBaseUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
 * OceanBaseUnaryPostfixOperation oceanBaseUnaryPostfixOperation0 = new OceanBaseUnaryPostfixOperation(
 * oceanBaseConstant_OceanBaseNullConstant0, oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0, true);
 * oceanBaseToStringVisitor0.visit(oceanBaseUnaryPostfixOperation0); assertEquals("(NULL) IS NOT TRUE",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test55() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseConstant.OceanBaseDoubleConstant oceanBaseConstant_OceanBaseDoubleConstant0 =
 * new OceanBaseConstant.OceanBaseDoubleConstant( 32.7131473); OceanBaseStringExpression oceanBaseStringExpression0 =
 * new OceanBaseStringExpression(
 * "SELECT name FROM SQLite_master WHERE type = 'index' UNION SELECT name FROM sqlite_temp_master WHERE type='index'",
 * oceanBaseConstant_OceanBaseDoubleConstant0); OceanBaseUnaryPostfixOperation.UnaryPostfixOperator
 * oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0 = OceanBaseUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
 * OceanBaseUnaryPostfixOperation oceanBaseUnaryPostfixOperation0 = new OceanBaseUnaryPostfixOperation(
 * oceanBaseStringExpression0, oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0, true);
 * oceanBaseToStringVisitor0.visit(oceanBaseUnaryPostfixOperation0); assertEquals(
 * "(SELECT name FROM SQLite_master WHERE type = 'index' UNION SELECT name FROM sqlite_temp_master WHERE type='index') IS NOT FALSE"
 * , oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test56() throws Throwable { OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant(); OceanBaseToStringVisitor
 * oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); OceanBaseUnaryPostfixOperation.UnaryPostfixOperator
 * oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0 = OceanBaseUnaryPostfixOperation.UnaryPostfixOperator.IS_NULL;
 * OceanBaseUnaryPostfixOperation oceanBaseUnaryPostfixOperation0 = new OceanBaseUnaryPostfixOperation(
 * oceanBaseConstant_OceanBaseNullConstant0, oceanBaseUnaryPostfixOperation_UnaryPostfixOperator0, false);
 * oceanBaseToStringVisitor0.visit(oceanBaseUnaryPostfixOperation0); assertEquals("(NULL) IS NULL",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test57() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.INT; OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new
 * OceanBaseSchema.OceanBaseColumn( "sqlancer.clickhouse.ClickHouseSchema", oceanBaseSchema_OceanBaseDataType0, false,
 * 100000, false); OceanBaseConstant oceanBaseConstant0 = OceanBaseConstant.createIntConstant((long) 100000);
 * OceanBaseColumnReference oceanBaseColumnReference0 = OceanBaseColumnReference
 * .create(oceanBaseSchema_OceanBaseColumn0, oceanBaseConstant0); oceanBaseColumnReference0.setRef(true); // Undeclared
 * exception! try { oceanBaseToStringVisitor0.visit(oceanBaseColumnReference0);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test58() throws Throwable { OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant(); OceanBaseToStringVisitor
 * oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); OceanBaseSchema.OceanBaseDataType
 * oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.INT; OceanBaseSchema.OceanBaseColumn
 * oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn("", oceanBaseSchema_OceanBaseDataType0, true,
 * 4446, true); OceanBaseColumnReference oceanBaseColumnReference0 = new OceanBaseColumnReference(
 * oceanBaseSchema_OceanBaseColumn0, oceanBaseConstant_OceanBaseNullConstant0);
 * oceanBaseToStringVisitor0.visit(oceanBaseColumnReference0); assertEquals("concat(,'')",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test59() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.FLOAT; OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new
 * OceanBaseSchema.OceanBaseColumn("_6l", oceanBaseSchema_OceanBaseDataType0, true, 3383, true); OceanBaseConstant
 * oceanBaseConstant0 = OceanBaseConstant.createDoubleConstant(3383); OceanBaseColumnReference oceanBaseColumnReference0
 * = new OceanBaseColumnReference( oceanBaseSchema_OceanBaseColumn0, oceanBaseConstant0);
 * oceanBaseToStringVisitor0.visit(oceanBaseColumnReference0); assertEquals("concat(_6l,'')",
 * oceanBaseToStringVisitor0.get()); }
 *
 * @Test public void test60() throws Throwable { OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect(); List<String>
 * list0 = List.of("nq'n", "nq'n", "nq'n", "", "", "nq'n", "n-:kd;c", "]MWF` !", "IS DISTINCT FROM",
 * "IS DISTINCT FROM"); oceanBaseSelect0.setModifiers(list0); OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit(oceanBaseSelect0);
 * fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test61() throws Throwable { OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseSelect.SelectType oceanBaseSelect_SelectType0 = OceanBaseSelect.SelectType.DISTINCT;
 * oceanBaseSelect0.setFromOptions(oceanBaseSelect_SelectType0); OceanBaseToStringVisitor oceanBaseToStringVisitor0 =
 * new OceanBaseToStringVisitor(); OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator
 * oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0 =
 * OceanBaseBinaryLogicalOperation.OceanBaseBinaryLogicalOperator.AND; OceanBaseBinaryLogicalOperation
 * oceanBaseBinaryLogicalOperation0 = new OceanBaseBinaryLogicalOperation( oceanBaseSelect0, oceanBaseSelect0,
 * oceanBaseBinaryLogicalOperation_OceanBaseBinaryLogicalOperator0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseBinaryLogicalOperation0);
 * fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test62() throws Throwable { OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor();
 * OceanBaseBinaryComparisonOperation.BinaryComparisonOperator
 * oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0 =
 * OceanBaseBinaryComparisonOperation.BinaryComparisonOperator.EQUALS; OceanBaseBinaryComparisonOperation
 * oceanBaseBinaryComparisonOperation0 = new OceanBaseBinaryComparisonOperation( oceanBaseSelect0, oceanBaseSelect0,
 * oceanBaseBinaryComparisonOperation_BinaryComparisonOperator0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseBinaryComparisonOperation0);
 * fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test63() throws Throwable { OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor();
 * OceanBaseConstant.OceanBaseNullConstant oceanBaseConstant_OceanBaseNullConstant0 = new
 * OceanBaseConstant.OceanBaseNullConstant(); OceanBaseExists oceanBaseExists0 = new OceanBaseExists(oceanBaseSelect0,
 * oceanBaseConstant_OceanBaseNullConstant0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseExists0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test64() throws Throwable { OceanBaseConstant.OceanBaseNullConstant
 * oceanBaseConstant_OceanBaseNullConstant0 = new OceanBaseConstant.OceanBaseNullConstant(); OceanBaseStringExpression
 * oceanBaseStringExpression0 = new OceanBaseStringExpression("", oceanBaseConstant_OceanBaseNullConstant0);
 * OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); OceanBaseSelect oceanBaseSelect0
 * = new OceanBaseSelect(); oceanBaseSelect0.setHint(oceanBaseStringExpression0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseSelect0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test65() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit((OceanBaseConstant) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test66() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseColumnName oceanBaseColumnName0 = new
 * OceanBaseColumnName((OceanBaseSchema.OceanBaseColumn) null); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseColumnName0); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test67() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); // Undeclared exception! try { oceanBaseToStringVisitor0.visit((OceanBaseTableReference)
 * null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseToStringVisitor", e); } }
 *
 * @Test public void test68() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); String string0 = oceanBaseToStringVisitor0.get(); assertEquals("", string0); }
 *
 * @Test public void test69() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseAggregate.OceanBaseAggregateFunction oceanBaseAggregate_OceanBaseAggregateFunction0 =
 * OceanBaseAggregate.OceanBaseAggregateFunction.COUNT; OceanBaseAggregate oceanBaseAggregate0 = new
 * OceanBaseAggregate(oceanBaseSelect0, oceanBaseAggregate_OceanBaseAggregateFunction0); OceanBaseText oceanBaseText0 =
 * new OceanBaseText(oceanBaseAggregate0, "Z_[}8NgA", true); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseText0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test70() throws Throwable { OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new OceanBaseToStringVisitor(); OceanBaseCastOperation.CastType
 * oceanBaseCastOperation_CastType0 = OceanBaseCastOperation.CastType.SIGNED; OceanBaseCastOperation
 * oceanBaseCastOperation0 = new OceanBaseCastOperation(oceanBaseSelect0, oceanBaseCastOperation_CastType0); //
 * Undeclared exception! try { oceanBaseToStringVisitor0.visit(oceanBaseCastOperation0);
 * fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } }
 *
 * @Test public void test71() throws Throwable { OceanBaseToStringVisitor oceanBaseToStringVisitor0 = new
 * OceanBaseToStringVisitor(); OceanBaseSelect oceanBaseSelect0 = new OceanBaseSelect();
 * OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator
 * oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0 =
 * OceanBaseUnaryPrefixOperation.OceanBaseUnaryPrefixOperator.PLUS; OceanBaseUnaryPrefixOperation
 * oceanBaseUnaryPrefixOperation0 = new OceanBaseUnaryPrefixOperation( oceanBaseSelect0,
 * oceanBaseUnaryPrefixOperation_OceanBaseUnaryPrefixOperator0); // Undeclared exception! try {
 * oceanBaseToStringVisitor0.visit(oceanBaseUnaryPrefixOperation0); fail("Expecting exception: IllegalStateException");
 *
 * } catch (IllegalStateException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.common.ast.SelectBase", e); } } }
 */
