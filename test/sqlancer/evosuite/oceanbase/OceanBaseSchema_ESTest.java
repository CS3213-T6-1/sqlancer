/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:50:34 GMT 2025
 */

package sqlancer.evosuite.oceanbase;

import static org.junit.jupiter.api.Assertions.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.oceanbase.OceanBaseGlobalState;
import sqlancer.oceanbase.OceanBaseSchema;
import sqlancer.SQLConnection;

public class OceanBaseSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 = OceanBaseSchema.OceanBaseDataType.FLOAT;
        OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new OceanBaseSchema.OceanBaseColumn(
                "UcHqdi$|", oceanBaseSchema_OceanBaseDataType0, true, (-1655), true);
        assertTrue(oceanBaseSchema_OceanBaseColumn0.isPartioned);

        oceanBaseSchema_OceanBaseColumn0.isPartioned = false;
        boolean boolean0 = oceanBaseSchema_OceanBaseColumn0.isZeroFill();
        assertTrue(boolean0);
    }

    @Test
    public void test01() throws Throwable {
        OceanBaseGlobalState oceanBaseGlobalState0 = new OceanBaseGlobalState();
        // Undeclared exception!
        try {
            OceanBaseSchema.OceanBaseDataType.getRandom(oceanBaseGlobalState0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.oceanbase.OceanBaseGlobalState", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseTable>();
        LinkedList<OceanBaseSchema.OceanBaseColumn> linkedList1 = new LinkedList<OceanBaseSchema.OceanBaseColumn>();
        OceanBaseSchema.OceanBaseTable oceanBaseSchema_OceanBaseTable0 = new OceanBaseSchema.OceanBaseTable(
                ">^s #:V*Yi+98V%", linkedList1, (List<OceanBaseSchema.OceanBaseIndex>) null);
        linkedList0.add(oceanBaseSchema_OceanBaseTable0);
        OceanBaseSchema oceanBaseSchema0 = new OceanBaseSchema(linkedList0);
        OceanBaseSchema.OceanBaseTables oceanBaseSchema_OceanBaseTables0 = oceanBaseSchema0
                .getRandomTableNonEmptyTables();
        assertNotNull(oceanBaseSchema_OceanBaseTables0);
    }

    @Test
    public void test03() throws Throwable {
        LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseTable>();
        linkedList0.add((OceanBaseSchema.OceanBaseTable) null);
        OceanBaseSchema oceanBaseSchema0 = new OceanBaseSchema(linkedList0);
        // Undeclared exception!
        try {
            oceanBaseSchema0.getRandomTableNonEmptyTables();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.schema.AbstractTables", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        OceanBaseSchema oceanBaseSchema0 = null;
        try {
            oceanBaseSchema0 = new OceanBaseSchema((List<OceanBaseSchema.OceanBaseTable>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test05() throws Throwable { OceanBaseSchema.OceanBaseColumn.CollateSequence.random();
 * LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseTable>();
 * OceanBaseSchema.OceanBaseTables oceanBaseSchema_OceanBaseTables0 = new OceanBaseSchema.OceanBaseTables( linkedList0);
 * List<OceanBaseSchema.OceanBaseTable> list0 = oceanBaseSchema_OceanBaseTables0.getTables(); OceanBaseSchema
 * oceanBaseSchema0 = new OceanBaseSchema(list0); ResultSet resultSet0 = mock(ResultSet.class, new
 * ViolatedAssumptionAnswer()); doReturn((String) null).when(resultSet0).getString(anyString());
 * doReturn(true).when(resultSet0).next(); PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new
 * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection
 * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
 * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
 * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement(""); Connection connection1 =
 * mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
 * null).when(connection1).createStatement(); SQLConnection sQLConnection1 = new SQLConnection(connection1); //
 * Undeclared exception! try { OceanBaseSchema.fromConnection(sQLConnection1, "");
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseSchema", e); } }
 */

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test06() throws Throwable { Connection connection0 = mock(Connection.class, new
 * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
 * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
 * OceanBaseSchema.fromConnection(sQLConnection0, "{V&MB*6C?2l7"); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseSchema", e); } }
 *
 * @Test public void test07() throws Throwable { PreparedStatement preparedStatement0 = mock(PreparedStatement.class,
 * new ViolatedAssumptionAnswer()); doReturn((ResultSet) null).when(preparedStatement0).executeQuery(anyString());
 * Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
 * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
 * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement(""); Connection connection1 =
 * mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0).when(connection1).createStatement();
 * SQLConnection sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
 * OceanBaseSchema.fromConnection(sQLConnection1, ""); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseSchema", e); } }
 *
 * @Test public void test08() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
 * ViolatedAssumptionAnswer()); doReturn(false).when(resultSet0).next(); PreparedStatement preparedStatement0 =
 * mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
 * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
 * mock(Connection.class, new ViolatedAssumptionAnswer());
 * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
 * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement(""); Connection connection1 =
 * mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0).when(connection1).createStatement();
 * SQLConnection sQLConnection1 = new SQLConnection(connection1); OceanBaseSchema oceanBaseSchema0 =
 * OceanBaseSchema.fromConnection(sQLConnection1, ""); assertNotNull(oceanBaseSchema0); }
 *
 * @Test public void test09() throws Throwable { SQLConnection sQLConnection0 = new SQLConnection((Connection) null); //
 * Undeclared exception! try { OceanBaseSchema.fromConnection(sQLConnection0, "");
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
 *
 * @Test public void test10() throws Throwable { LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new
 * LinkedList<OceanBaseSchema.OceanBaseTable>(); OceanBaseSchema.OceanBaseTables oceanBaseSchema_OceanBaseTables0 = new
 * OceanBaseSchema.OceanBaseTables( linkedList0); // Undeclared exception! try {
 * oceanBaseSchema_OceanBaseTables0.getRandomRowValue((SQLConnection) null);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseSchema$OceanBaseTables", e); } }
 *
 * @Test public void test11() throws Throwable { LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new
 * LinkedList<OceanBaseSchema.OceanBaseTable>(); OceanBaseSchema.OceanBaseTables oceanBaseSchema_OceanBaseTables0 = new
 * OceanBaseSchema.OceanBaseTables( linkedList0); Connection connection0 = mock(Connection.class, new
 * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
 * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
 * oceanBaseSchema_OceanBaseTables0.getRandomRowValue(sQLConnection0);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseSchema$OceanBaseTables", e); } }
 *
 * @Test public void test12() throws Throwable { OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.DECIMAL; boolean boolean0 = oceanBaseSchema_OceanBaseDataType0.isNumeric();
 * assertTrue(boolean0); }
 *
 * @Test public void test13() throws Throwable { OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.DOUBLE; boolean boolean0 = oceanBaseSchema_OceanBaseDataType0.isNumeric();
 * assertTrue(boolean0); }
 *
 * @Test public void test14() throws Throwable { OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.FLOAT; boolean boolean0 = oceanBaseSchema_OceanBaseDataType0.isNumeric();
 * assertTrue(boolean0); }
 *
 * @Test public void test15() throws Throwable { OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.VARCHAR; boolean boolean0 = oceanBaseSchema_OceanBaseDataType0.isNumeric();
 * assertFalse(boolean0); }
 *
 * @Test public void test16() throws Throwable { OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.INT; boolean boolean0 = oceanBaseSchema_OceanBaseDataType0.isNumeric();
 * assertTrue(boolean0); }
 *
 * @Test public void test17() throws Throwable { OceanBaseSchema.OceanBaseColumn.CollateSequence.random();
 * LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseTable>();
 * OceanBaseSchema.OceanBaseTables oceanBaseSchema_OceanBaseTables0 = new OceanBaseSchema.OceanBaseTables( linkedList0);
 * List<OceanBaseSchema.OceanBaseTable> list0 = oceanBaseSchema_OceanBaseTables0.getTables(); OceanBaseSchema
 * oceanBaseSchema0 = new OceanBaseSchema(list0); ResultSet resultSet0 = mock(ResultSet.class, new
 * ViolatedAssumptionAnswer()); doReturn("PRIMARY").when(resultSet0).getString(anyString());
 * doReturn(true).when(resultSet0).next(); ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
 * doReturn(false).when(resultSet1).next(); PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new
 * ViolatedAssumptionAnswer()); doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
 * Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
 * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
 * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement(""); Connection connection1 =
 * mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, statement0, (Statement)
 * null).when(connection1).createStatement(); SQLConnection sQLConnection1 = new SQLConnection(connection1); //
 * Undeclared exception! try { OceanBaseSchema.fromConnection(sQLConnection1, "");
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
 *
 * @Test public void test18() throws Throwable { OceanBaseSchema.OceanBaseIndex oceanBaseSchema_OceanBaseIndex0 =
 * OceanBaseSchema.OceanBaseIndex.create("("); assertEquals("(", oceanBaseSchema_OceanBaseIndex0.getIndexName()); }
 *
 * @Test public void test19() throws Throwable { OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.DECIMAL; OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new
 * OceanBaseSchema.OceanBaseColumn("(", oceanBaseSchema_OceanBaseDataType0, false, 38, true);
 * List<OceanBaseSchema.OceanBaseColumn> list0 = List.of(oceanBaseSchema_OceanBaseColumn0);
 * LinkedList<OceanBaseSchema.OceanBaseIndex> linkedList0 = new LinkedList<OceanBaseSchema.OceanBaseIndex>();
 * OceanBaseSchema.OceanBaseTable oceanBaseSchema_OceanBaseTable0 = new OceanBaseSchema.OceanBaseTable("DECIMAL", list0,
 * linkedList0); assertTrue(oceanBaseSchema_OceanBaseColumn0.isPartioned);
 * assertTrue(oceanBaseSchema_OceanBaseColumn0.isZeroFill());
 * assertFalse(oceanBaseSchema_OceanBaseColumn0.isPrimaryKey()); assertEquals(38,
 * oceanBaseSchema_OceanBaseColumn0.getPrecision()); }
 *
 * @Test public void test20() throws Throwable { OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.VARCHAR; OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new
 * OceanBaseSchema.OceanBaseColumn( "8_)QOz#\"51:D1FY", oceanBaseSchema_OceanBaseDataType0, false, 1313, false); boolean
 * boolean0 = oceanBaseSchema_OceanBaseColumn0.isPrimaryKey();
 * assertFalse(oceanBaseSchema_OceanBaseColumn0.isZeroFill()); assertFalse(boolean0); assertEquals(1313,
 * oceanBaseSchema_OceanBaseColumn0.getPrecision()); assertTrue(oceanBaseSchema_OceanBaseColumn0.isPartioned); }
 *
 * @Test public void test21() throws Throwable { OceanBaseSchema.OceanBaseDataType oceanBaseSchema_OceanBaseDataType0 =
 * OceanBaseSchema.OceanBaseDataType.DECIMAL; OceanBaseSchema.OceanBaseColumn oceanBaseSchema_OceanBaseColumn0 = new
 * OceanBaseSchema.OceanBaseColumn("(", oceanBaseSchema_OceanBaseDataType0, false, 38, true); int int0 =
 * oceanBaseSchema_OceanBaseColumn0.getPrecision(); assertTrue(oceanBaseSchema_OceanBaseColumn0.isPartioned);
 * assertFalse(oceanBaseSchema_OceanBaseColumn0.isPrimaryKey()); assertEquals(38, int0);
 * assertTrue(oceanBaseSchema_OceanBaseColumn0.isZeroFill()); }
 *
 * @Test public void test22() throws Throwable { LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new
 * LinkedList<OceanBaseSchema.OceanBaseTable>(); OceanBaseSchema.OceanBaseTables oceanBaseSchema_OceanBaseTables0 = new
 * OceanBaseSchema.OceanBaseTables( linkedList0); ResultSet resultSet0 = mock(ResultSet.class, new
 * ViolatedAssumptionAnswer()); doReturn(false).when(resultSet0).next(); PreparedStatement preparedStatement0 =
 * mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
 * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
 * mock(Connection.class, new ViolatedAssumptionAnswer());
 * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
 * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement(""); Connection connection1 =
 * mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0).when(connection1).createStatement();
 * SQLConnection sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
 * oceanBaseSchema_OceanBaseTables0.getRandomRowValue(sQLConnection1); fail("Expecting exception: RuntimeException");
 *
 * } catch (RuntimeException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.oceanbase.OceanBaseSchema$OceanBaseTables", e); } }
 *
 * @Test public void test23() throws Throwable { LinkedList<OceanBaseSchema.OceanBaseTable> linkedList0 = new
 * LinkedList<OceanBaseSchema.OceanBaseTable>(); OceanBaseSchema oceanBaseSchema0 = new OceanBaseSchema(linkedList0); //
 * Undeclared exception! try { oceanBaseSchema0.getRandomTableNonEmptyTables();
 * fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // [] 1 // } } }
 */
