/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:13:58 GMT 2025
 */

package sqlancer.evosuite.sqlite3.gen;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import org.junit.jupiter.api.Test;
import sqlancer.sqlite3.gen.SQLite3ColumnBuilder;
import sqlancer.sqlite3.schema.SQLite3Schema;
import sqlancer.sqlite3.SQLite3GlobalState;

public class SQLite3ColumnBuilder_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        SQLite3ColumnBuilder sQLite3ColumnBuilder0 = new SQLite3ColumnBuilder();
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        LinkedList<SQLite3Schema.SQLite3Column> linkedList0 = new LinkedList<SQLite3Schema.SQLite3Column>();
        // Undeclared exception!
        try {
            sQLite3ColumnBuilder0.createColumn("*3<|jEKC|Y$k'E", sQLite3GlobalState0, linkedList0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.gen.SQLite3ColumnBuilder", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        SQLite3ColumnBuilder sQLite3ColumnBuilder0 = new SQLite3ColumnBuilder();
        boolean boolean0 = sQLite3ColumnBuilder0.isConflictClauseInserted();
        assertFalse(boolean0);
    }

    @Test
    public void test2() throws Throwable {
        SQLite3ColumnBuilder sQLite3ColumnBuilder0 = new SQLite3ColumnBuilder();
        SQLite3ColumnBuilder sQLite3ColumnBuilder1 = sQLite3ColumnBuilder0.allowPrimaryKey(false);
        assertSame(sQLite3ColumnBuilder1, sQLite3ColumnBuilder0);
    }

    @Test
    public void test3() throws Throwable {
        SQLite3ColumnBuilder sQLite3ColumnBuilder0 = new SQLite3ColumnBuilder();
        SQLite3ColumnBuilder sQLite3ColumnBuilder1 = sQLite3ColumnBuilder0.allowCheck(false);
        assertSame(sQLite3ColumnBuilder0, sQLite3ColumnBuilder1);
    }

    @Test
    public void test4() throws Throwable {
        SQLite3ColumnBuilder sQLite3ColumnBuilder0 = new SQLite3ColumnBuilder();
        SQLite3ColumnBuilder sQLite3ColumnBuilder1 = sQLite3ColumnBuilder0.allowUnique(false);
        assertFalse(sQLite3ColumnBuilder1.isConflictClauseInserted());
    }

    @Test
    public void test5() throws Throwable {
        SQLite3ColumnBuilder sQLite3ColumnBuilder0 = new SQLite3ColumnBuilder();
        SQLite3ColumnBuilder sQLite3ColumnBuilder1 = sQLite3ColumnBuilder0.allowNotNull(false);
        assertSame(sQLite3ColumnBuilder1, sQLite3ColumnBuilder0);
    }

    @Test
    public void test6() throws Throwable {
        SQLite3ColumnBuilder sQLite3ColumnBuilder0 = new SQLite3ColumnBuilder();
        boolean boolean0 = sQLite3ColumnBuilder0.isContainsAutoIncrement();
        assertFalse(boolean0);
    }

    @Test
    public void test7() throws Throwable {
        SQLite3ColumnBuilder sQLite3ColumnBuilder0 = new SQLite3ColumnBuilder();
        SQLite3ColumnBuilder sQLite3ColumnBuilder1 = sQLite3ColumnBuilder0.allowDefaultValue(false);
        assertSame(sQLite3ColumnBuilder0, sQLite3ColumnBuilder1);
    }

    @Test
    public void test8() throws Throwable {
        SQLite3ColumnBuilder sQLite3ColumnBuilder0 = new SQLite3ColumnBuilder();
        boolean boolean0 = sQLite3ColumnBuilder0.isContainsPrimaryKey();
        assertFalse(boolean0);
    }
}
