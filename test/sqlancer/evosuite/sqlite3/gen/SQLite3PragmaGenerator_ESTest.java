/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 13:54:13 GMT 2025
 */

package sqlancer.evosuite.sqlite3.gen;

import static org.junit.jupiter.api.Assertions.*;
import java.util.function.Supplier;
import org.evosuite.runtime.Random;
import org.junit.jupiter.api.Test;
import sqlancer.common.query.SQLQueryAdapter;
import sqlancer.sqlite3.gen.SQLite3PragmaGenerator;
import sqlancer.sqlite3.SQLite3GlobalState;

public class SQLite3PragmaGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        // Undeclared exception!
        try {
            SQLite3PragmaGenerator.insertPragma((SQLite3GlobalState) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.gen.SQLite3PragmaGenerator", e);
        }
    }

    @Test
    public void test01() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        Random.setNextRandom((-1457));
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA legacy_file_format;PRAGMA mmap_size;", sQLQueryAdapter0.getLogString());
    }

    @Test
    public void test02() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        Random.setNextRandom((-1457));
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA journal_mode;PRAGMA journal_size_limit;PRAGMA journal_size_limit;PRAGMA optimize;",
                sQLQueryAdapter0.getQueryString());
    }

    @Test
    public void test03() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        Random.setNextRandom(29);
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA integrity_check;", sQLQueryAdapter0.getLogString());
    }

    @Test
    public void test04() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA auto_vacuum;", sQLQueryAdapter0.getQueryString());

        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter1 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals(
                "PRAGMA application_id;PRAGMA automatic_index;PRAGMA busy_timeout;PRAGMA busy_timeout;PRAGMA cache_size;PRAGMA cache_spill;",
                sQLQueryAdapter1.getLogString());
    }

    @Test
    public void test05() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        Random.setNextRandom(19);
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA default_cache_size;", sQLQueryAdapter0.getQueryString());
    }

    @Test
    public void test06() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        Random.setNextRandom(2571565);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA stats;PRAGMA short_column_names;PRAGMA threads;PRAGMA threads;PRAGMA wal_autocheckpoint;",
                sQLQueryAdapter0.getLogString());
    }

    @Test
    public void test07() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        Random.setNextRandom((-567));
        SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA cache_size;", sQLQueryAdapter0.getQueryString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter1 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA cache_spill;", sQLQueryAdapter1.getQueryString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter2 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA cell_size_check;", sQLQueryAdapter2.getQueryString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter3 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA checkpoint_fullfsync;", sQLQueryAdapter3.getLogString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter4 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA default_cache_size;", sQLQueryAdapter4.getQueryString());

        SQLQueryAdapter sQLQueryAdapter5 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA cache_spill;PRAGMA defer_foreign_keys;", sQLQueryAdapter5.getLogString());
    }

    @Test
    public void test08() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA auto_vacuum;", sQLQueryAdapter0.getQueryString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter1 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA automatic_index;", sQLQueryAdapter1.getLogString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter2 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA application_id;PRAGMA busy_timeout;", sQLQueryAdapter2.getQueryString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter3 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA cache_size;", sQLQueryAdapter3.getQueryString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter4 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA cache_spill;", sQLQueryAdapter4.getQueryString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter5 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA cache_spill;", sQLQueryAdapter5.getQueryString());

        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter6 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA application_id;PRAGMA busy_timeout;PRAGMA cell_size_check;PRAGMA checkpoint_fullfsync;",
                sQLQueryAdapter6.getLogString());
    }

    @Test
    public void test09() throws Throwable {
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA application_id;PRAGMA auto_vacuum;", sQLQueryAdapter0.getLogString());
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test10() throws Throwable { SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new
     * SQLite3PragmaGenerator(); Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new
     * ViolatedAssumptionAnswer()); sQLite3PragmaGenerator0.createPragma("", supplier0); }
     */

    @Test
    public void test11() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        Random.setNextRandom(4401);
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertFalse(sQLQueryAdapter0.couldAffectSchema());
    }

    @Test
    public void test12() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        Random.setNextRandom(2009382602);
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA soft_heap_limit;", sQLQueryAdapter0.getQueryString());
    }

    @Test
    public void test13() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        Random.setNextRandom((-3458));
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA shrink_memory;", sQLQueryAdapter0.getLogString());
    }

    @Test
    public void test14() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        Random.setNextRandom(1224);
        SQLQueryAdapter sQLQueryAdapter0 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA secure_delete;", sQLQueryAdapter0.getQueryString());
    }

    @Test
    public void test15() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        Random.setNextRandom((-1457));
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA reverse_unordered_selects;", sQLQueryAdapter0.getLogString());
    }

    @Test
    public void test16() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        Random.setNextRandom((-1457));
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter0 = SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        assertEquals("PRAGMA locking_mode;", sQLQueryAdapter0.getQueryString());

        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        SQLQueryAdapter sQLQueryAdapter1 = sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        assertEquals("PRAGMA journal_mode;PRAGMA legacy_file_format;PRAGMA reverse_unordered_selects;",
                sQLQueryAdapter1.getQueryString());
    }

    @Test
    public void test17() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        Random.setNextRandom(23);
        SQLite3PragmaGenerator sQLite3PragmaGenerator0 = new SQLite3PragmaGenerator();
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
        SQLite3PragmaGenerator.insertPragma(sQLite3GlobalState0);
        // Undeclared exception!
        try {
            sQLite3PragmaGenerator0.insert(sQLite3GlobalState0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.gen.SQLite3PragmaGenerator", e);
        }
    }
}
