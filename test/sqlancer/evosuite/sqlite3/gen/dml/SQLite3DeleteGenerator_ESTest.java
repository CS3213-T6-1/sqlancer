/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:10:26 GMT 2025
 */

package sqlancer.evosuite.sqlite3.gen.dml;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import org.junit.jupiter.api.Test;
import sqlancer.common.query.SQLQueryAdapter;
import sqlancer.sqlite3.gen.dml.SQLite3DeleteGenerator;
import sqlancer.sqlite3.schema.SQLite3Schema;
import sqlancer.sqlite3.SQLite3GlobalState;

public class SQLite3DeleteGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        // Undeclared exception!
        try {
            SQLite3DeleteGenerator.deleteContent(sQLite3GlobalState0, (SQLite3Schema.SQLite3Table) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.gen.dml.SQLite3DeleteGenerator", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        // Undeclared exception!
        try {
            SQLite3DeleteGenerator.deleteContent((SQLite3GlobalState) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.gen.dml.SQLite3DeleteGenerator", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        LinkedList<SQLite3Schema.SQLite3Column> linkedList0 = new LinkedList<SQLite3Schema.SQLite3Column>();
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.TEMP;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table(
                "SELECT mz_indexes.name, mz_databases.name FROM mz_indexes JOIN mz_relations ON mz_indexes.on_id = mz_relations.id JOIN mz_schemas ON mz_relations.schema_id = mz_schemas.id JOIN mz_databases ON mz_schemas.database_id = mz_databases.id WHERE mz_databases.name = '%s';",
                linkedList0, sQLite3Schema_SQLite3Table_TableKind0, false, false, false, true);
        SQLQueryAdapter sQLQueryAdapter0 = SQLite3DeleteGenerator.deleteContent(sQLite3GlobalState0,
                sQLite3Schema_SQLite3Table0);
        assertEquals(
                "DELETE FROM SELECT mz_indexes.name, mz_databases.name FROM mz_indexes JOIN mz_relations ON mz_indexes.on_id = mz_relations.id JOIN mz_schemas ON mz_relations.schema_id = mz_schemas.id JOIN mz_databases ON mz_schemas.database_id = mz_databases.id WHERE mz_databases.name = '%s';",
                sQLQueryAdapter0.getLogString());
    }

    @Test
    public void test3() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        // Undeclared exception!
        try {
            SQLite3DeleteGenerator.deleteContent(sQLite3GlobalState0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }
}
