/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 23:42:05 GMT 2025
 */

package sqlancer.evosuite.sqlite3.gen.dml;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.query.SQLQueryAdapter;
import sqlancer.Randomly;
import sqlancer.sqlite3.gen.dml.SQLite3UpdateGenerator;
import sqlancer.sqlite3.schema.SQLite3DataType;
import sqlancer.sqlite3.schema.SQLite3Schema;
import sqlancer.sqlite3.SQLite3GlobalState;

public class SQLite3UpdateGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        Randomly randomly0 = new Randomly();
        SQLite3UpdateGenerator sQLite3UpdateGenerator0 = new SQLite3UpdateGenerator(sQLite3GlobalState0, randomly0);
        // Undeclared exception!
        try {
            sQLite3UpdateGenerator0.updateValue((SQLite3Schema.SQLite3Column) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.gen.dml.SQLite3UpdateGenerator", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        LinkedList<SQLite3Schema.SQLite3Column> linkedList0 = new LinkedList<SQLite3Schema.SQLite3Column>();
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.TEMP;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("", linkedList0,
                sQLite3Schema_SQLite3Table_TableKind0, false, false, false, false);
        // Undeclared exception!
        try {
            SQLite3UpdateGenerator.updateRow(sQLite3GlobalState0, sQLite3Schema_SQLite3Table0);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 0, Size: 0
            //
            verifyException("java.util.LinkedList", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        List<SQLite3Schema.SQLite3Column> list0 = List.of();
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.TEMP;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("[SQLITE_CONSTRAINT]",
                list0, sQLite3Schema_SQLite3Table_TableKind0, false, false, false, false);
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        // Undeclared exception!
        try {
            SQLite3UpdateGenerator.updateRow(sQLite3GlobalState0, sQLite3Schema_SQLite3Table0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test3() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        // Undeclared exception!
        try {
            SQLite3UpdateGenerator.updateRow(sQLite3GlobalState0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

//    @Test
//    public void test4() throws Throwable {
//        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
//        SQLite3Schema.SQLite3Column[] sQLite3Schema_SQLite3ColumnArray0 = new SQLite3Schema.SQLite3Column[2];
//        SQLite3DataType sQLite3DataType0 = SQLite3DataType.NULL;
//        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
//        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("ECFOAT",
//                sQLite3DataType0, true, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0, true);
//        sQLite3Schema_SQLite3ColumnArray0[1] = sQLite3Schema_SQLite3Column0;
//        List<SQLite3Schema.SQLite3Column> list0 = Randomly.nonEmptySubset(sQLite3Schema_SQLite3ColumnArray0);
//        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.TEMP;
//        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("ECFOAT", list0,
//                sQLite3Schema_SQLite3Table_TableKind0, false, false, false, false);
//        sQLite3Schema_SQLite3Column0.setTable(sQLite3Schema_SQLite3Table0);
//        Randomly randomly0 = new Randomly();
//        SQLite3UpdateGenerator sQLite3UpdateGenerator0 = new SQLite3UpdateGenerator(sQLite3GlobalState0, randomly0);
//        sQLite3UpdateGenerator0.updateValue(sQLite3Schema_SQLite3Column0);
//        assertEquals("ECFOAT", sQLite3Schema_SQLite3Column0.getName());
//    }

//    @Test
//    public void test5() throws Throwable {
//        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
//        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = SQLite3Schema.SQLite3Column
//                .createDummy("!pq{ne cgz2A");
//        SQLite3Schema.SQLite3Column[] sQLite3Schema_SQLite3ColumnArray0 = new SQLite3Schema.SQLite3Column[3];
//        sQLite3Schema_SQLite3ColumnArray0[0] = sQLite3Schema_SQLite3Column0;
//        List<SQLite3Schema.SQLite3Column> list0 = Randomly.nonEmptySubset(sQLite3Schema_SQLite3ColumnArray0);
//        Randomly.subset(sQLite3Schema_SQLite3ColumnArray0);
//        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.TEMP;
//        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("!pq{ne cgz2A", list0,
//                sQLite3Schema_SQLite3Table_TableKind0, false, false, false, false);
//        SQLQueryAdapter sQLQueryAdapter0 = SQLite3UpdateGenerator.updateRow(sQLite3GlobalState0,
//                sQLite3Schema_SQLite3Table0);
//        assertEquals("UPDATE !pq{ne cgz2A SET !pq{ne cgz2A=NULL;", sQLQueryAdapter0.getLogString());
//    }

    @Test
    public void test6() throws Throwable {
        // Undeclared exception!
        try {
            SQLite3UpdateGenerator.updateRow((SQLite3GlobalState) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.gen.dml.SQLite3UpdateGenerator", e);
        }
    }

    @Test
    public void test7() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3Schema.SQLite3Column[] sQLite3Schema_SQLite3ColumnArray0 = new SQLite3Schema.SQLite3Column[3];
        List<SQLite3Schema.SQLite3Column> list0 = Randomly.nonEmptySubset(sQLite3Schema_SQLite3ColumnArray0);
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.TEMP;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("!pq{ne cgz2A", list0,
                sQLite3Schema_SQLite3Table_TableKind0, false, false, false, false);
        // Undeclared exception!
        try {
            SQLite3UpdateGenerator.updateRow(sQLite3GlobalState0, sQLite3Schema_SQLite3Table0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.gen.AbstractUpdateGenerator", e);
        }
    }
}
