/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 16:21:59 GMT 2025
 */

package sqlancer.evosuite.sqlite3;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import sqlancer.sqlite3.ast.SQLite3ColumnName;
import sqlancer.sqlite3.ast.SQLite3Constant;
import sqlancer.sqlite3.ast.SQLite3UnaryOperation;
import sqlancer.sqlite3.SQLite3CollateHelper;

public class SQLite3CollateHelper_ESTest {

    // @Test
    // public void test0() throws Throwable {
    // SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new
    // SQLite3Constant.SQLite3NullConstant();
    // SQLite3Cast sQLite3Expression_Cast0 = new SQLite3Cast(
    // (SQLite3TypeLiteral) null, sQLite3Constant_SQLite3NullConstant0);
    // boolean boolean0 = SQLite3CollateHelper.shouldGetSubexpressionAffinity(sQLite3Expression_Cast0);
    // assertTrue(boolean0);
    // }

    @Test
    public void test1() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 = SQLite3UnaryOperation.UnaryOperator.PLUS;
        SQLite3UnaryOperation sQLite3UnaryOperation0 = new SQLite3UnaryOperation(sQLite3UnaryOperation_UnaryOperator0,
                sQLite3Constant_SQLite3NullConstant0);
        boolean boolean0 = SQLite3CollateHelper.shouldGetSubexpressionAffinity(sQLite3UnaryOperation0);
        assertTrue(boolean0);
    }

    @Test
    public void test2() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 = SQLite3UnaryOperation.UnaryOperator.NOT;
        SQLite3UnaryOperation sQLite3UnaryOperation0 = new SQLite3UnaryOperation(sQLite3UnaryOperation_UnaryOperator0,
                sQLite3Constant_SQLite3NullConstant0);
        boolean boolean0 = SQLite3CollateHelper.shouldGetSubexpressionAffinity(sQLite3UnaryOperation0);
        assertFalse(boolean0);
    }

    @Test
    public void test3() throws Throwable {
        SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = SQLite3ColumnName.createDummy("?");
        boolean boolean0 = SQLite3CollateHelper.shouldGetSubexpressionAffinity(sQLite3Expression_SQLite3ColumnName0);
        assertTrue(boolean0);
    }
}
