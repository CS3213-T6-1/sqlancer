/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 14:34:43 GMT 2025
 */

package sqlancer.evosuite.sqlite3.oracle;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.Test;

import sqlancer.common.query.SQLQueryAdapter;
import sqlancer.sqlite3.SQLite3GlobalState;
import sqlancer.sqlite3.ast.SQLite3Constant;
import sqlancer.sqlite3.ast.SQLite3Expression;
import sqlancer.sqlite3.ast.SQLite3Function;
import sqlancer.sqlite3.ast.SQLite3Select;
import sqlancer.sqlite3.ast.SQLite3WindowFunctionExpression;
import sqlancer.sqlite3.oracle.SQLite3PivotedQuerySynthesisOracle;

public class SQLite3PivotedQuerySynthesisOracle_ESTest {

    @Test
    public void test0() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                sQLite3GlobalState0);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        String string0 = sQLite3PivotedQuerySynthesisOracle0.getExpectedValues(sQLite3Constant_SQLite3NullConstant0);
        assertEquals("\tNULL -- (NULL) NULL explicit collate: null implicit collate: null\n", string0);
    }

    @Test
    public void test1() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                sQLite3GlobalState0);
        SQLite3WindowFunctionExpression sQLite3WindowFunctionExpression0 = new SQLite3WindowFunctionExpression(
                (SQLite3Expression) null);
        String string0 = sQLite3PivotedQuerySynthesisOracle0.getExpectedValues(sQLite3WindowFunctionExpression0);
        assertEquals("", string0);
    }

    @Test
    public void test2() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                sQLite3GlobalState0);
        // Undeclared exception!
        try {
            sQLite3PivotedQuerySynthesisOracle0.getRectifiedQuery();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test3() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                sQLite3GlobalState0);
        // Undeclared exception!
        try {
            sQLite3PivotedQuerySynthesisOracle0.getQuery();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test4() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                sQLite3GlobalState0);
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        // Undeclared exception!
        try {
            sQLite3PivotedQuerySynthesisOracle0.getExpectedValues(sQLite3Select0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test5() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                sQLite3GlobalState0);
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UNLIKELY;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        // Undeclared exception!
        try {
            sQLite3PivotedQuerySynthesisOracle0.getExpectedValues(sQLite3Function0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$13", e);
        }
    }

    @Test
    public void test6() throws Throwable {
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                (SQLite3GlobalState) null);
        // Undeclared exception!
        try {
            sQLite3PivotedQuerySynthesisOracle0.getQuery();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.oracle.SQLite3PivotedQuerySynthesisOracle", e);
        }
    }

    @Test
    public void test7() throws Throwable {
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                (SQLite3GlobalState) null);
        // Undeclared exception!
        try {
            sQLite3PivotedQuerySynthesisOracle0.getRectifiedQuery();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.oracle.SQLite3PivotedQuerySynthesisOracle", e);
        }
    }

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test8() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLQueryAdapter sQLQueryAdapter0 = new SQLQueryAdapter("ON clause references tables to its right");
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                sQLite3GlobalState0);
        // Undeclared exception!
        try {
            sQLite3PivotedQuerySynthesisOracle0.getContainmentCheckQuery(sQLQueryAdapter0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.oracle.SQLite3PivotedQuerySynthesisOracle", e);
        }
    }

    @Test
    public void test9() throws Throwable {
        SQLite3GlobalState sQLite3GlobalState0 = new SQLite3GlobalState();
        SQLite3PivotedQuerySynthesisOracle sQLite3PivotedQuerySynthesisOracle0 = new SQLite3PivotedQuerySynthesisOracle(
                sQLite3GlobalState0);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant((String) null);
        // Undeclared exception!
        try {
            sQLite3PivotedQuerySynthesisOracle0.getExpectedValues(sQLite3Constant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
        }
    }
}
