/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 23:29:26 GMT 2025
 */

package sqlancer.evosuite.sqlite3;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.Randomly;
import sqlancer.common.ast.JoinBase;
import sqlancer.sqlite3.ast.SQLite3Aggregate;
import sqlancer.sqlite3.ast.SQLite3BetweenOperation;
import sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation;
import sqlancer.sqlite3.ast.SQLite3BinaryOperation;
import sqlancer.sqlite3.ast.SQLite3Case;
import sqlancer.sqlite3.ast.SQLite3Cast;
import sqlancer.sqlite3.ast.SQLite3CollateOperation;
import sqlancer.sqlite3.ast.SQLite3ColumnName;
import sqlancer.sqlite3.ast.SQLite3Constant;
import sqlancer.sqlite3.ast.SQLite3Distinct;
import sqlancer.sqlite3.ast.SQLite3Exist;
import sqlancer.sqlite3.ast.SQLite3Expression;
import sqlancer.sqlite3.ast.SQLite3Function;
import sqlancer.sqlite3.ast.SQLite3InOperation;
import sqlancer.sqlite3.ast.SQLite3Join;
import sqlancer.sqlite3.ast.SQLite3MatchOperation;
import sqlancer.sqlite3.ast.SQLite3OrderingTerm;
import sqlancer.sqlite3.ast.SQLite3PostfixText;
import sqlancer.sqlite3.ast.SQLite3PostfixUnaryOperation;
import sqlancer.sqlite3.ast.SQLite3RowValueExpression;
import sqlancer.sqlite3.ast.SQLite3Select;
import sqlancer.sqlite3.ast.SQLite3SetClause;
import sqlancer.sqlite3.ast.SQLite3Subquery;
import sqlancer.sqlite3.ast.SQLite3TableReference;
import sqlancer.sqlite3.ast.SQLite3Text;
import sqlancer.sqlite3.ast.SQLite3TypeLiteral;
import sqlancer.sqlite3.ast.SQLite3UnaryOperation;
import sqlancer.sqlite3.ast.SQLite3WindowFunction;
import sqlancer.sqlite3.ast.SQLite3WindowFunctionExpression;
import sqlancer.sqlite3.schema.SQLite3DataType;
import sqlancer.sqlite3.schema.SQLite3Schema;
import sqlancer.sqlite3.SQLite3ExpectedValueVisitor;

public class SQLite3ExpectedValueVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test000() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 = SQLite3UnaryOperation.UnaryOperator.NEGATE;
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        Randomly randomly0 = new Randomly();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3TextConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3UnaryOperation sQLite3UnaryOperation0 = new SQLite3UnaryOperation(sQLite3UnaryOperation_UnaryOperator0,
                sQLite3Constant1);
        sQLite3ExpectedValueVisitor0.visit((SQLite3Expression) sQLite3UnaryOperation0);
        assertEquals(
                "\t(~ (1)) -- (INT) -2 explicit collate: null implicit collate: null\n\t\t1 -- (INT) 1 explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test001() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Expression sQLite3Expression0 = SQLite3Subquery.create("");
        SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_TRUE;
        SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0, sQLite3Expression0);
        SQLite3BinaryOperation.BinaryOperator sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0 = SQLite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3BinaryOperation sQLite3Expression_SQLite3BinaryOperation0 = SQLite3BinaryOperation.create(
                sQLite3Expression0, sQLite3Expression_SQLite3PostfixUnaryOperation0,
                sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3BinaryOperation0);
        assertEquals(
                "(()<<((() IS TRUE))) -- null explicit collate: null implicit collate: null\n\t -- null explicit collate: null implicit collate: null\n\t(() IS TRUE) -- null explicit collate: null implicit collate: null\n\t\t -- null explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    // @Test
    // public void test002() throws Throwable {
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
    // (-1L), true);
    // SQLite3Distinct sQLite3Expression_SQLite3Distinct0 = new SQLite3Distinct(sQLite3Constant_SQLite3IntConstant0);
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3Distinct0);
    // assertEquals(
    // "DISTINCT 0Xffffffffffffffff -- (INT) -1 explicit collate: null implicit collate: null\n\t0Xffffffffffffffff --
    // (INT) -1 explicit collate: null implicit collate: null\n",
    // sQLite3ExpectedValueVisitor0.get());
    // }

    // @Test
    // public void test003() throws Throwable {
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3DataType sQLite3DataType0 = SQLite3DataType.TEXT;
    // SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 =
    // SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
    // SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("", sQLite3DataType0,
    // true, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0, true);
    // SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3ColumnName(sQLite3Schema_SQLite3Column0,
    // (SQLite3Constant) null);
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3ColumnName0);
    // assertEquals(" -- null explicit collate: null implicit collate: BINARY\n", sQLite3ExpectedValueVisitor0.get());
    // }

    @Test
    public void test004() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        SQLite3BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3BinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        SQLite3BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3TextConstant0, sQLite3Constant_SQLite3TextConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_BinaryComparisonOperation0);
        assertEquals(
                "(('')LIKE('')) -- (INT) 1 explicit collate: null implicit collate: null\n\t'' -- (TEXT)  explicit collate: null implicit collate: null\n\t'' -- (TEXT)  explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test005() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        byte[] byteArray0 = new byte[4];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant((long) (byte) (-1));
        SQLite3BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3BetweenOperation(sQLite3Constant0,
                false, sQLite3Constant_SQLite3BinaryConstant0, sQLite3Constant0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_BetweenOperation0);
        assertEquals(
                "((-1) BETWEEN (x'00000000') AND (-1)) -- (INT) 0 explicit collate: null implicit collate: null\n\t((((-1)>=(x'00000000')))AND(((-1)<=(-1)))) -- (INT) 0 explicit collate: null implicit collate: null\n\t\t((-1)>=(x'00000000')) -- (INT) 0 explicit collate: null implicit collate: null\n\t\t\t-1 -- (INT) -1 explicit collate: null implicit collate: null\n\t\t\tx'00000000' -- (BINARY) x'00000000' explicit collate: null implicit collate: null\n\t\t((-1)<=(-1)) -- (INT) 1 explicit collate: null implicit collate: null\n\t\t\t-1 -- (INT) -1 explicit collate: null implicit collate: null\n\t\t\t-1 -- (INT) -1 explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test006() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 = SQLite3UnaryOperation.UnaryOperator.NEGATE;
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        Randomly randomly0 = new Randomly();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3TextConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3UnaryOperation sQLite3UnaryOperation0 = new SQLite3UnaryOperation(sQLite3UnaryOperation_UnaryOperator0,
                sQLite3Constant1);
        sQLite3ExpectedValueVisitor0.visit(sQLite3UnaryOperation0);
        assertEquals(
                "(~ (1)) -- (INT) -2 explicit collate: null implicit collate: null\n\t1 -- (INT) 1 explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test007() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3BetweenOperation(sQLite3Select0, true,
                sQLite3Select0, sQLite3Select0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_BetweenOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test008() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3BinaryOperation.BinaryOperator sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0 = SQLite3BinaryOperation.BinaryOperator.ARITHMETIC_OR;
        SQLite3BinaryOperation sQLite3Expression_SQLite3BinaryOperation0 = new SQLite3BinaryOperation(sQLite3Constant0,
                sQLite3Constant0, sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0);
        SQLite3SetClause.SQLite3ClauseType sQLite3SetClause_SQLite3ClauseType0 = SQLite3SetClause.SQLite3ClauseType.UNION_ALL;
        SQLite3SetClause sQLite3SetClause0 = new SQLite3SetClause(sQLite3Expression_SQLite3BinaryOperation0,
                sQLite3Expression_SQLite3BinaryOperation0, sQLite3SetClause_SQLite3ClauseType0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3SetClause0);
        assertEquals(
                "((0)|(0)) UNION ALL ((0)|(0)) -- null explicit collate: null implicit collate: null\n\t((0)|(0)) -- (INT) 0 explicit collate: null implicit collate: null\n\t\t0 -- (INT) 0 explicit collate: null implicit collate: null\n\t\t0 -- (INT) 0 explicit collate: null implicit collate: null\n\t((0)|(0)) -- (INT) 0 explicit collate: null implicit collate: null\n\t\t0 -- (INT) 0 explicit collate: null implicit collate: null\n\t\t0 -- (INT) 0 explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test009() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                2016L, false);
        SQLite3Text sQLite3Expression_SQLite3Text0 = new SQLite3Text("3m,MD\"O|\u0007W{K^X#",
                sQLite3Constant_SQLite3IntConstant0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3Text0);
        assertEquals("3m,MD\"O|\u0007W{K^X# -- (INT) 2016 explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test010() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOTNULL;
        SQLite3Expression sQLite3Expression0 = SQLite3Subquery.create("");
        SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0, sQLite3Expression0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3PostfixUnaryOperation0);
        assertEquals(
                "(() NOTNULL) -- null explicit collate: null implicit collate: null\n\t -- null explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test011() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3OrderingTerm.Ordering sQLite3Expression_SQLite3OrderingTerm_Ordering0 = SQLite3OrderingTerm.Ordering.ASC;
        SQLite3OrderingTerm sQLite3Expression_SQLite3OrderingTerm0 = new SQLite3OrderingTerm(sQLite3Constant0,
                sQLite3Expression_SQLite3OrderingTerm_Ordering0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3OrderingTerm0);
        assertEquals(
                "(0 ASC -- null explicit collate: null implicit collate: null\n\t0 -- (INT) 0 explicit collate: null implicit collate: null\n)",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test012() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Subquery sQLite3Expression_Subquery0 = new SQLite3Subquery("(");
        SQLite3Exist sQLite3Expression_SQLite3Exist0 = new SQLite3Exist(sQLite3Expression_Subquery0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3Exist0);
        assertEquals(
                " EXISTS ( -- null explicit collate: null implicit collate: null\n\t( -- null explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test013() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = SQLite3ColumnName.createDummy("xDsH");
        SQLite3MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3MatchOperation(
                sQLite3Expression_SQLite3ColumnName0, sQLite3Expression_SQLite3ColumnName0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_MatchOperation0);
        assertEquals(
                "xDsH MATCH xDsH -- null explicit collate: null implicit collate: null\n\txDsH -- null explicit collate: null implicit collate: null\n\txDsH -- null explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test014() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3CollateOperation(
                sQLite3Constant_SQLite3NullConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_CollateOperation0);
        assertEquals(
                "NULL COLLATE NOCASE -- (NULL) NULL explicit collate: NOCASE implicit collate: null\n\tNULL -- (NULL) NULL explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    // @Test
    // public void test015() throws Throwable {
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3TypeLiteral.Type.TEXT;
    // SQLite3TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3TypeLiteral(
    // sQLite3Expression_TypeLiteral_Type0);
    // SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new
    // SQLite3Constant.SQLite3RealConstant(
    // 0.0);
    // SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3RealConstant0.castToBoolean();
    // SQLite3Cast sQLite3Expression_Cast0 = new SQLite3Cast(sQLite3Expression_TypeLiteral0,
    // sQLite3Constant0);
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Cast0);
    // assertEquals(
    // "CAST(0 AS TEXT) -- (TEXT) 0 explicit collate: null implicit collate: null\n\t0 -- (INT) 0 explicit collate: null
    // implicit collate: null\n",
    // sQLite3ExpectedValueVisitor0.get());
    // }

    @Test
    public void test016() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Expression sQLite3Expression0 = SQLite3Subquery.create("^o)");
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[1];
        SQLite3Case.CasePair sQLite3Case_CasePair0 = new SQLite3Case.CasePair(sQLite3Expression0, sQLite3Expression0);
        sQLite3Case_CasePairArray0[0] = sQLite3Case_CasePair0;
        SQLite3Case.SQLite3CaseWithoutBaseExpression sQLite3Case_SQLite3CaseWithoutBaseExpression0 = new SQLite3Case.SQLite3CaseWithoutBaseExpression(
                sQLite3Case_CasePairArray0, (SQLite3Expression) null);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithoutBaseExpression0);
        assertEquals(
                "^o) -- null explicit collate: null implicit collate: null\n\t^o) -- null explicit collate: null implicit collate: null\n^o) -- null explicit collate: null implicit collate: null\n\t^o) -- null explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test017() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = SQLite3ColumnName.createDummy("xDsH");
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[3];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Expression_SQLite3ColumnName0;
        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
        SQLite3Aggregate.SQLite3AggregateFunction sQLite3Aggregate_SQLite3AggregateFunction0 = SQLite3Aggregate.SQLite3AggregateFunction.COUNT;
        SQLite3Aggregate sQLite3Aggregate0 = new SQLite3Aggregate(list0, sQLite3Aggregate_SQLite3AggregateFunction0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Aggregate0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    // @Test
    // public void test018() throws Throwable {
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = SQLite3ColumnName
    // .createDummy("xDsH");
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[3];
    // sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Expression_SQLite3ColumnName0;
    // sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Expression_SQLite3ColumnName0;
    // sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Expression_SQLite3ColumnName0;
    // SQLite3Function sQLite3Expression_Function0 = new SQLite3Function("xDsH",
    // sQLite3ExpressionArray0);
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Function0);
    // sQLite3ExpectedValueVisitor0.get();
    // assertEquals(
    // "xDsH(xDsH, xDsH, xDsH) -- null explicit collate: null implicit collate: null\n\txDsH -- null explicit collate:
    // null implicit collate: null\n\txDsH -- null explicit collate: null implicit collate: null\n\txDsH -- null
    // explicit collate: null implicit collate: null\n",
    // sQLite3ExpectedValueVisitor0.get());
    // }

//    @Test
//    public void test019() throws Throwable {
//        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
//        SQLite3Select sQLite3Select0 = new SQLite3Select();
//        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[9];
//        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Select0;
//        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
//        sQLite3Select0.setGroupByClause(list0);
//        SQLite3WindowFunction.WindowFunction sQLite3WindowFunction_WindowFunction0 = SQLite3WindowFunction.WindowFunction.LAG;
//        SQLite3WindowFunction sQLite3WindowFunction0 = new SQLite3WindowFunction(sQLite3WindowFunction_WindowFunction0,
//                sQLite3ExpressionArray0);
//        // Undeclared exception!
//        try {
//            sQLite3ExpectedValueVisitor0.visit(sQLite3WindowFunction0);
//            fail("Expecting exception: StackOverflowError");
//
//        } catch (StackOverflowError e) {
//            //
//            // no message in exception (getMessage() returned null)
//            //
//        }
//    }

    @Test
    public void test020() throws Throwable {
        SQLite3WindowFunction.WindowFunction sQLite3WindowFunction_WindowFunction0 = SQLite3WindowFunction.WindowFunction.LAST_VALUE;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[2];
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                (String) null);
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3TextConstant0;
        SQLite3WindowFunction sQLite3WindowFunction0 = new SQLite3WindowFunction(sQLite3WindowFunction_WindowFunction0,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3WindowFunction0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test021() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[9];
        SQLite3Case.SQLite3CaseWithBaseExpression sQLite3Case_SQLite3CaseWithBaseExpression0 = new SQLite3Case.SQLite3CaseWithBaseExpression(
                sQLite3Constant0, sQLite3Case_CasePairArray0, sQLite3Constant0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 = SQLite3UnaryOperation.UnaryOperator.MINUS;
        SQLite3UnaryOperation sQLite3UnaryOperation0 = new SQLite3UnaryOperation(sQLite3UnaryOperation_UnaryOperator0,
                sQLite3Case_SQLite3CaseWithBaseExpression0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3UnaryOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
        }
    }

    @Test
    public void test022() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3UnaryOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test023() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Aggregate.SQLite3AggregateFunction sQLite3Aggregate_SQLite3AggregateFunction0 = SQLite3Aggregate.SQLite3AggregateFunction.MIN;
        SQLite3Aggregate sQLite3Aggregate0 = new SQLite3Aggregate((List<SQLite3Expression>) null,
                sQLite3Aggregate_SQLite3AggregateFunction0);
        SQLite3SetClause.SQLite3ClauseType sQLite3SetClause_SQLite3ClauseType0 = SQLite3SetClause.SQLite3ClauseType.INTERSECT;
        SQLite3SetClause sQLite3SetClause0 = new SQLite3SetClause(sQLite3Aggregate0, sQLite3Aggregate0,
                sQLite3SetClause_SQLite3ClauseType0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3SetClause0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test024() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3SetClause.SQLite3ClauseType sQLite3SetClause_SQLite3ClauseType0 = SQLite3SetClause.SQLite3ClauseType.UNION;
        SQLite3SetClause sQLite3SetClause0 = new SQLite3SetClause((SQLite3Expression) null, (SQLite3Expression) null,
                sQLite3SetClause_SQLite3ClauseType0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3SetClause0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test025() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        byte[] byteArray0 = new byte[21];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3BetweenOperation(
                sQLite3Constant_SQLite3BinaryConstant0, true, sQLite3Constant0, sQLite3Select0);
        sQLite3Select0.setWhereClause((SQLite3Expression) sQLite3Expression_BetweenOperation0);
        // Undeclared exception!
        sQLite3ExpectedValueVisitor0.visit(sQLite3Select0, false);
    }

    @Test
    public void test026() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3RowValueExpression sQLite3RowValueExpression0 = new SQLite3RowValueExpression(
                (List<SQLite3Expression>) null);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3RowValueExpression0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test027() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3RowValueExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test028() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        byte[] byteArray0 = new byte[6];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.ABS;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3BinaryConstant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Function0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$1", e);
        }
    }

    @Test
    public void test029() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LOWER;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[7];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Select0;
        sQLite3Select0.setWhereClause(sQLite3ExpressionArray0[0]);
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Function0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test030() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function((SQLite3Function.ComputableFunction) null,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Function0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function", e);
        }
    }

    @Test
    public void test031() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.ABS;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Function0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$1", e);
        }
    }

    @Test
    public void test032() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Aggregate.SQLite3AggregateFunction sQLite3Aggregate_SQLite3AggregateFunction0 = SQLite3Aggregate.SQLite3AggregateFunction.GROUP_CONCAT;
        SQLite3Aggregate sQLite3Aggregate0 = new SQLite3Aggregate((List<SQLite3Expression>) null,
                sQLite3Aggregate_SQLite3AggregateFunction0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3Expression) sQLite3Aggregate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test033() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3Expression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test034() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3Subquery) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test035() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[2];
        SQLite3Case.SQLite3CaseWithBaseExpression sQLite3Case_SQLite3CaseWithBaseExpression0 = new SQLite3Case.SQLite3CaseWithBaseExpression(
                sQLite3Constant_SQLite3NullConstant0, sQLite3Case_CasePairArray0, sQLite3Constant_SQLite3NullConstant0);
        SQLite3Subquery sQLite3Expression_Subquery0 = new SQLite3Subquery("");
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3BinaryOperation.BinaryOperator sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0 = SQLite3BinaryOperation.BinaryOperator.MINUS;
        SQLite3BinaryOperation sQLite3Expression_SQLite3BinaryOperation0 = new SQLite3BinaryOperation(
                sQLite3Expression_Subquery0, sQLite3Case_SQLite3CaseWithBaseExpression0,
                sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3BinaryOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
        }
    }

    @Test
    public void test036() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOTNULL;
        SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0, (SQLite3Expression) null);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3PostfixUnaryOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    // @Test
    // public void test037() throws Throwable {
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3Select sQLite3Select0 = new SQLite3Select();
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[6];
    // sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Select0;
    // sQLite3ExpressionArray0[4] = (SQLite3Expression) sQLite3Select0;
    // Randomly randomly0 = new Randomly();
    // SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
    // List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
    // sQLite3Select0.setFetchColumns(list0);
    // SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3PostfixText(sQLite3ExpressionArray0[4],
    // "l>Y:g[vZzX", sQLite3Constant0);
    // // Undeclared exception!
    // try {
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3PostfixText0);
    // fail("Expecting exception: StackOverflowError");
    //
    // } catch (StackOverflowError e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // }
    // }

    @Test
    public void test038() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                (String) null);
        SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3PostfixText(
                sQLite3Constant_SQLite3TextConstant0, (String) null, sQLite3Constant_SQLite3TextConstant0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3PostfixText0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test039() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3PostfixText) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test040() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3OrderingTerm) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test041() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[7];
        SQLite3Case.SQLite3CaseWithoutBaseExpression sQLite3Case_SQLite3CaseWithoutBaseExpression0 = new SQLite3Case.SQLite3CaseWithoutBaseExpression(
                sQLite3Case_CasePairArray0, sQLite3Constant_SQLite3NullConstant0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Exist sQLite3Expression_SQLite3Exist0 = new SQLite3Exist(sQLite3Case_SQLite3CaseWithoutBaseExpression0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3Exist0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
        }
    }

    @Test
    public void test042() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Exist sQLite3Expression_SQLite3Exist0 = new SQLite3Exist(sQLite3Function0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3Exist0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$8", e);
        }
    }

    @Test
    public void test043() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant((String) null);
        SQLite3Distinct sQLite3Expression_SQLite3Distinct0 = new SQLite3Distinct(sQLite3Constant0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3Distinct0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test044() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3Distinct) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test045() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant(543.5773177095906);
        SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3ColumnName(
                (SQLite3Schema.SQLite3Column) null, sQLite3Constant0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3ColumnName0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test046() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3ColumnName(
                (SQLite3Schema.SQLite3Column) null, (SQLite3Constant) null);
        SQLite3MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3MatchOperation(
                sQLite3Expression_SQLite3ColumnName0, (SQLite3Expression) null);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_MatchOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test047() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3MatchOperation((SQLite3Expression) null,
                (SQLite3Expression) null);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_MatchOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test048() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Join.JoinType.NATURAL;
        SQLite3Join sQLite3Expression_Join0 = new SQLite3Join((SQLite3Schema.SQLite3Table) null,
                sQLite3Expression_Join_JoinType0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Join0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
        }
    }

    @Test
    public void test049() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3Join) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test050() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3InOperation sQLite3Expression_InOperation0 = new SQLite3InOperation(sQLite3Constant0, sQLite3Constant0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_InOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Expression$InOperation", e);
        }
    }

    @Test
    public void test051() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3InOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test052() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.ABS;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3InOperation sQLite3Expression_InOperation0 = new SQLite3InOperation(sQLite3Function0, sQLite3Function0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_InOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$1", e);
        }
    }

    // @Test
    // public void test053() throws Throwable {
    // SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new
    // SQLite3Constant.SQLite3NullConstant();
    // SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[1];
    // SQLite3Case.SQLite3CaseWithBaseExpression sQLite3Case_SQLite3CaseWithBaseExpression0 = new
    // SQLite3Case.SQLite3CaseWithBaseExpression(
    // sQLite3Constant_SQLite3NullConstant0, sQLite3Case_CasePairArray0, sQLite3Constant_SQLite3NullConstant0);
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
    // sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Case_SQLite3CaseWithBaseExpression0;
    // SQLite3Function sQLite3Expression_Function0 = new SQLite3Function((String) null,
    // sQLite3ExpressionArray0);
    // // Undeclared exception!
    // try {
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Function0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
    // }
    // }

    @Test
    public void test054() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function((SQLite3Function.ComputableFunction) null,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3CollateOperation(sQLite3Function0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_CollateOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function", e);
        }
    }

    @Test
    public void test055() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3CollateOperation(
                (SQLite3Expression) null, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_CollateOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test056() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3Cast) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    // @Test
    // public void test057() throws Throwable {
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
    // SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 =
    // SQLite3Function.ComputableFunction.UPPER;
    // SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
    // sQLite3ExpressionArray0);
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3TypeLiteral.Type.INTEGER;
    // SQLite3TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3TypeLiteral(
    // sQLite3Expression_TypeLiteral_Type0);
    // SQLite3Cast sQLite3Expression_Cast0 = new SQLite3Cast(sQLite3Expression_TypeLiteral0,
    // sQLite3Function0);
    // // Undeclared exception!
    // try {
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Cast0);
    // fail("Expecting exception: ArrayIndexOutOfBoundsException");
    //
    // } catch (ArrayIndexOutOfBoundsException e) {
    // //
    // // Index 0 out of bounds for length 0
    // //
    // verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$8", e);
    // }
    // }

    @Test
    public void test058() throws Throwable {
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[1];
        SQLite3Case.SQLite3CaseWithoutBaseExpression sQLite3Case_SQLite3CaseWithoutBaseExpression0 = new SQLite3Case.SQLite3CaseWithoutBaseExpression(
                sQLite3Case_CasePairArray0, (SQLite3Expression) null);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3BinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        SQLite3BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3BinaryComparisonOperation
                .create(sQLite3Case_SQLite3CaseWithoutBaseExpression0, (SQLite3Expression) null,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_BinaryComparisonOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
        }
    }

    @Test
    public void test059() throws Throwable {
        SQLite3Subquery sQLite3Expression_Subquery0 = new SQLite3Subquery("#{ue]R");
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LOWER;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3BinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        SQLite3BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3BinaryComparisonOperation
                .create(sQLite3Expression_Subquery0, sQLite3Function0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_BinaryComparisonOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$4", e);
        }
    }

    @Test
    public void test060() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 = SQLite3UnaryOperation.UnaryOperator.MINUS;
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                2519L, true);
        SQLite3InOperation sQLite3Expression_InOperation0 = new SQLite3InOperation(sQLite3Constant_SQLite3IntConstant0,
                sQLite3Constant_SQLite3IntConstant0);
        SQLite3UnaryOperation sQLite3UnaryOperation0 = new SQLite3UnaryOperation(sQLite3UnaryOperation_UnaryOperator0,
                sQLite3Expression_InOperation0);
        SQLite3BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3BetweenOperation(
                sQLite3UnaryOperation0, true, sQLite3UnaryOperation0, sQLite3UnaryOperation0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_BetweenOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Expression$InOperation", e);
        }
    }

    @Test
    public void test061() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.ABS;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3BetweenOperation(sQLite3Function0,
                true, sQLite3Function0, sQLite3Function0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_BetweenOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$1", e);
        }
    }

    @Test
    public void test062() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3Constant) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test063() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Exist sQLite3Expression_SQLite3Exist0 = new SQLite3Exist(sQLite3Select0);
        sQLite3Select0.setWhereClause((SQLite3Expression) sQLite3Expression_SQLite3Exist0);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[1];
        SQLite3Case.CasePair sQLite3Case_CasePair0 = new SQLite3Case.CasePair(sQLite3Select0,
                sQLite3Constant_SQLite3NullConstant0);
        sQLite3Case_CasePairArray0[0] = sQLite3Case_CasePair0;
        SQLite3Case.SQLite3CaseWithoutBaseExpression sQLite3Case_SQLite3CaseWithoutBaseExpression0 = new SQLite3Case.SQLite3CaseWithoutBaseExpression(
                sQLite3Case_CasePairArray0, sQLite3Select0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithoutBaseExpression0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test064() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[0];
        SQLite3Case.SQLite3CaseWithoutBaseExpression sQLite3Case_SQLite3CaseWithoutBaseExpression0 = new SQLite3Case.SQLite3CaseWithoutBaseExpression(
                sQLite3Case_CasePairArray0, sQLite3Select0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithoutBaseExpression0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test065() throws Throwable {
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Case.SQLite3CaseWithoutBaseExpression sQLite3Case_SQLite3CaseWithoutBaseExpression0 = new SQLite3Case.SQLite3CaseWithoutBaseExpression(
                sQLite3Case_CasePairArray0, sQLite3Function0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithoutBaseExpression0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$8", e);
        }
    }

    @Test
    public void test066() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        List<SQLite3Expression> list0 = List.of((SQLite3Expression) sQLite3Select0, (SQLite3Expression) sQLite3Select0,
                (SQLite3Expression) sQLite3Select0, (SQLite3Expression) sQLite3Select0,
                (SQLite3Expression) sQLite3Select0, (SQLite3Expression) sQLite3Select0,
                (SQLite3Expression) sQLite3Select0);
        sQLite3Select0.setFetchColumns(list0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[7];
        SQLite3InOperation sQLite3Expression_InOperation0 = new SQLite3InOperation(sQLite3Select0, list0);
        SQLite3Case.SQLite3CaseWithBaseExpression sQLite3Case_SQLite3CaseWithBaseExpression0 = new SQLite3Case.SQLite3CaseWithBaseExpression(
                sQLite3Select0, sQLite3Case_CasePairArray0, sQLite3Expression_InOperation0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithBaseExpression0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test067() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[1];
        SQLite3Case.SQLite3CaseWithBaseExpression sQLite3Case_SQLite3CaseWithBaseExpression0 = new SQLite3Case.SQLite3CaseWithBaseExpression(
                sQLite3Constant0, sQLite3Case_CasePairArray0, sQLite3Constant0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithBaseExpression0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
        }
    }

    @Test
    public void test068() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3Case.SQLite3CaseWithBaseExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test069() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[1];
        SQLite3Case.CasePair sQLite3Case_CasePair0 = new SQLite3Case.CasePair(sQLite3Function0, sQLite3Function0);
        sQLite3Case_CasePairArray0[0] = sQLite3Case_CasePair0;
        SQLite3Case.SQLite3CaseWithBaseExpression sQLite3Case_SQLite3CaseWithBaseExpression0 = new SQLite3Case.SQLite3CaseWithBaseExpression(
                sQLite3Function0, sQLite3Case_CasePairArray0, sQLite3Function0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithBaseExpression0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$8", e);
        }
    }

    @Test
    public void test070() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Aggregate.SQLite3AggregateFunction sQLite3Aggregate_SQLite3AggregateFunction0 = SQLite3Aggregate.SQLite3AggregateFunction.SUM;
        SQLite3Aggregate sQLite3Aggregate0 = new SQLite3Aggregate((List<SQLite3Expression>) null,
                sQLite3Aggregate_SQLite3AggregateFunction0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Aggregate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test071() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.HEX;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Function0);
        assertEquals("HEX() -- null explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test072() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Subquery sQLite3Expression_Subquery0 = new SQLite3Subquery("$n,?rh^T`lF");
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Subquery0);
        assertEquals("$n,?rh^T`lF -- null explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test073() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm.SQLite3WindowFunctionFrameSpecTermKind sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm_SQLite3WindowFunctionFrameSpecTermKind0 = SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm.SQLite3WindowFunctionFrameSpecTermKind.CURRENT_ROW;
        SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm0 = new SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm(
                sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm_SQLite3WindowFunctionFrameSpecTermKind0);
        SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecBetween sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecBetween0 = new SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecBetween(
                sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm0,
                sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecBetween0);
        assertEquals("", sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test074() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3BinaryComparisonOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test075() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        sQLite3ExpectedValueVisitor0.visit((SQLite3Constant) sQLite3Constant_SQLite3NullConstant0);
        assertEquals("NULL -- (NULL) NULL explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test076() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm.SQLite3WindowFunctionFrameSpecTermKind sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm_SQLite3WindowFunctionFrameSpecTermKind0 = SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm.SQLite3WindowFunctionFrameSpecTermKind.EXPR_PRECEDING;
        SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm0 = new SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm(
                sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm_SQLite3WindowFunctionFrameSpecTermKind0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm0);
        assertEquals("", sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test077() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3WindowFunctionExpression sQLite3WindowFunctionExpression0 = new SQLite3WindowFunctionExpression(
                (SQLite3Expression) null);
        sQLite3ExpectedValueVisitor0.visit(sQLite3WindowFunctionExpression0);
        assertNull(sQLite3WindowFunctionExpression0.getExclude());
    }

    @Test
    public void test078() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Exist sQLite3Expression_SQLite3Exist0 = new SQLite3Exist((SQLite3Expression) null);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3Exist0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test079() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3BinaryOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test080() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3MatchOperation(sQLite3Function0,
                sQLite3Function0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_MatchOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$8", e);
        }
    }

    @Test
    public void test081() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        List<SQLite3Expression> list0 = List.of((SQLite3Expression) sQLite3Constant_SQLite3NullConstant0);
        SQLite3RowValueExpression sQLite3RowValueExpression0 = new SQLite3RowValueExpression(list0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3RowValueExpression0);
        assertEquals(
                "(NULL) -- null explicit collate: null implicit collate: null\n\tNULL -- (NULL) NULL explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test082() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3WindowFunction.WindowFunction sQLite3WindowFunction_WindowFunction0 = SQLite3WindowFunction.WindowFunction.PERCENT_RANK;
        SQLite3WindowFunction sQLite3WindowFunction0 = new SQLite3WindowFunction(sQLite3WindowFunction_WindowFunction0,
                sQLite3ExpressionArray0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3WindowFunction0);
        assertEquals("PERCENT_RANK() -- null explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test083() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3WindowFunction.WindowFunction sQLite3WindowFunction_WindowFunction0 = SQLite3WindowFunction.WindowFunction.RANK;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Select0;
        SQLite3WindowFunction sQLite3WindowFunction0 = new SQLite3WindowFunction(sQLite3WindowFunction_WindowFunction0,
                sQLite3ExpressionArray0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3WindowFunction0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test084() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[1];
        SQLite3Case.CasePair sQLite3Case_CasePair0 = new SQLite3Case.CasePair(sQLite3Constant0, sQLite3Constant0);
        sQLite3Case_CasePairArray0[0] = sQLite3Case_CasePair0;
        SQLite3Case.SQLite3CaseWithBaseExpression sQLite3Case_SQLite3CaseWithBaseExpression0 = new SQLite3Case.SQLite3CaseWithBaseExpression(
                sQLite3Constant0, sQLite3Case_CasePairArray0, sQLite3Constant0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithBaseExpression0);
        assertEquals(
                "CASE NULL  WHEN NULL THEN NULL ELSE NULL END -- (NULL) NULL explicit collate: null implicit collate: null\n\tNULL -- (NULL) NULL explicit collate: null implicit collate: null\nNULL -- (NULL) NULL explicit collate: null implicit collate: null\n\tNULL -- (NULL) NULL explicit collate: null implicit collate: null\nNULL -- (NULL) NULL explicit collate: null implicit collate: null\n\tNULL -- (NULL) NULL explicit collate: null implicit collate: null\nNULL -- (NULL) NULL explicit collate: null implicit collate: null\n\tNULL -- (NULL) NULL explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test085() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[0];
        SQLite3Case.SQLite3CaseWithoutBaseExpression sQLite3Case_SQLite3CaseWithoutBaseExpression0 = new SQLite3Case.SQLite3CaseWithoutBaseExpression(
                sQLite3Case_CasePairArray0, (SQLite3Expression) null);
        SQLite3Case.SQLite3CaseWithBaseExpression sQLite3Case_SQLite3CaseWithBaseExpression0 = new SQLite3Case.SQLite3CaseWithBaseExpression(
                sQLite3Case_SQLite3CaseWithoutBaseExpression0, sQLite3Case_CasePairArray0, (SQLite3Expression) null);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithBaseExpression0);
        assertEquals("CASE CASE END  END -- (NULL) NULL explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test086() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Case.CasePair[] sQLite3Case_CasePairArray0 = new SQLite3Case.CasePair[3];
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                0.0);
        SQLite3Case.SQLite3CaseWithoutBaseExpression sQLite3Case_SQLite3CaseWithoutBaseExpression0 = new SQLite3Case.SQLite3CaseWithoutBaseExpression(
                sQLite3Case_CasePairArray0, sQLite3Constant_SQLite3RealConstant0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Case_SQLite3CaseWithoutBaseExpression0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ExpectedValueVisitor", e);
        }
    }

    @Test
    public void test087() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Select0;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant0;
        sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Select0;
        sQLite3ExpressionArray0[3] = (SQLite3Expression) sQLite3Select0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Function0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    // @Test
    // public void test088() throws Throwable {
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
    // (-1L), true);
    // SQLite3Distinct sQLite3Expression_SQLite3Distinct0 = new SQLite3Distinct(sQLite3Constant_SQLite3IntConstant0);
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
    // sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Expression_SQLite3Distinct0;
    // List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
    // SQLite3InOperation sQLite3Expression_InOperation0 = new SQLite3InOperation(sQLite3Expression_SQLite3Distinct0,
    // list0);
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_InOperation0);
    // assertEquals(
    // "(DISTINCT 0Xffffffffffffffff IN (DISTINCT 0Xffffffffffffffff)) -- (INT) 1 explicit collate: null implicit
    // collate: null\n\tDISTINCT 0Xffffffffffffffff -- (INT) -1 explicit collate: null implicit collate:
    // null\n\t\t0Xffffffffffffffff -- (INT) -1 explicit collate: null implicit collate: null\n\tDISTINCT
    // 0Xffffffffffffffff -- (INT) -1 explicit collate: null implicit collate: null\n\t\t0Xffffffffffffffff -- (INT) -1
    // explicit collate: null implicit collate: null\n",
    // sQLite3ExpectedValueVisitor0.get());
    // }

    @Test
    public void test089() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.HEX;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3InOperation sQLite3Expression_InOperation0 = new SQLite3InOperation(sQLite3Function0, sQLite3Function0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_InOperation0);
        assertEquals(
                "(HEX() IN (HEX())) -- null explicit collate: null implicit collate: null\n\tHEX() -- null explicit collate: null implicit collate: null\n\tHEX() -- null explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test090() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setHavingClause((SQLite3Expression) sQLite3Constant0);
        sQLite3Select0.setWhereClause((SQLite3Expression) sQLite3Constant0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        sQLite3ExpectedValueVisitor0.visit(sQLite3Select0, false);
        assertEquals(
                "\t1 -- (INT) 1 explicit collate: null implicit collate: null\n\t1 -- (INT) 1 explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test091() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Join.JoinType.OUTER;
        SQLite3Join sQLite3Expression_Join0 = new SQLite3Join((SQLite3Schema.SQLite3Table) null, sQLite3Select0,
                sQLite3Expression_Join_JoinType0);
        List<JoinBase<SQLite3Expression>> list0 = List.of(sQLite3Expression_Join0);
        sQLite3Select0.setJoinClauses(list0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Select0, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
        }
    }

    @Test
    public void test092() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3NullConstant0;
        List<SQLite3Expression> list0 = List.of(sQLite3ExpressionArray0);
        sQLite3Select0.setFetchColumns(list0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Select0, true);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    // @Test
    // public void test093() throws Throwable {
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3Subquery sQLite3Expression_Subquery0 = new SQLite3Subquery("");
    // SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3PostfixText(
    // sQLite3Expression_Subquery0, "", (SQLite3Constant) null);
    // SQLite3Select sQLite3Select0 = new SQLite3Select();
    // sQLite3Select0.setWhereClause((SQLite3Expression) sQLite3Expression_SQLite3PostfixText0);
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
    // sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Select0;
    // SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
    // sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant0;
    // sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Select0;
    // sQLite3ExpressionArray0[3] = (SQLite3Expression) sQLite3Select0;
    // SQLite3Function sQLite3Expression_Function0 = new SQLite3Function("",
    // sQLite3ExpressionArray0);
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Function0);
    // assertEquals(
    // "((SELECT ALL FROM WHERE ( )), 0, (SELECT FROM WHERE ( )), (SELECT ALL FROM WHERE ( ))) -- null explicit collate:
    // null implicit collate: null\n\t\t -- null explicit collate: null implicit collate: null\n\t\t\t -- null explicit
    // collate: null implicit collate: null\n\t0 -- (INT) 0 explicit collate: null implicit collate: null\n\t\t -- null
    // explicit collate: null implicit collate: null\n\t\t\t -- null explicit collate: null implicit collate: null\n\t\t
    // -- null explicit collate: null implicit collate: null\n\t\t\t -- null explicit collate: null implicit collate:
    // null\n",
    // sQLite3ExpectedValueVisitor0.get());
    // }

    // @Test
    // public void test094() throws Throwable {
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3Select sQLite3Select0 = new SQLite3Select();
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
    // sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Select0;
    // SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
    // sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant0;
    // sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Select0;
    // sQLite3ExpressionArray0[3] = (SQLite3Expression) sQLite3Select0;
    // SQLite3Function sQLite3Expression_Function0 = new SQLite3Function("",
    // sQLite3ExpressionArray0);
    // // Undeclared exception!
    // try {
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Function0);
    // fail("Expecting exception: AssertionError");
    //
    // } catch (AssertionError e) {
    // //
    // // null
    // //
    // }
    // }

    @Test
    public void test095() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        LinkedList<SQLite3Schema.SQLite3Column> linkedList0 = new LinkedList<SQLite3Schema.SQLite3Column>();
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.TEMP;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("", linkedList0,
                sQLite3Schema_SQLite3Table_TableKind0, false, false, false, false);
        SQLite3Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Join.JoinType.INNER;
        SQLite3Join sQLite3Expression_Join0 = new SQLite3Join(sQLite3Schema_SQLite3Table0, sQLite3Constant0,
                sQLite3Expression_Join_JoinType0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Join0);
        assertEquals(
                " INNER JOIN  ON 1 -- null explicit collate: null implicit collate: null\n\t1 -- (INT) 1 explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test096() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Exist sQLite3Expression_SQLite3Exist0 = new SQLite3Exist(sQLite3Select0);
        sQLite3Select0.setWhereClause((SQLite3Expression) sQLite3Expression_SQLite3Exist0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Select0, false);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test097() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant((-2745L));
        SQLite3WindowFunctionExpression sQLite3WindowFunctionExpression0 = new SQLite3WindowFunctionExpression(
                sQLite3Constant0);
        SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3PostfixText(
                sQLite3WindowFunctionExpression0, (String) null, sQLite3Constant0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3PostfixText0);
        assertEquals("-2745 OVER () null -- (INT) -2745 explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test098() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3ColumnName) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test099() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3TableReference sQLite3Expression_SQLite3TableReference0 = new SQLite3TableReference("ub@!*&e'<^7o",
                (SQLite3Schema.SQLite3Table) null);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3TableReference0);
        assertEquals("", sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test100() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UNLIKELY;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3CollateOperation(sQLite3Function0,
                (SQLite3Schema.SQLite3Column.SQLite3CollateSequence) null);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_CollateOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$13", e);
        }
    }

    @Test
    public void test101() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3SetClause.SQLite3ClauseType sQLite3SetClause_SQLite3ClauseType0 = SQLite3SetClause.SQLite3ClauseType.EXCEPT;
        SQLite3SetClause sQLite3SetClause0 = new SQLite3SetClause(sQLite3Function0, sQLite3Function0,
                sQLite3SetClause_SQLite3ClauseType0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3SetClause0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$10", e);
        }
    }

    @Test
    public void test102() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit((SQLite3Text) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test103() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3MatchOperation(sQLite3Function0,
                sQLite3Function0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant("8f<:4L'!L T");
        SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3PostfixText(
                sQLite3Expression_MatchOperation0, ";l", sQLite3Constant0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3PostfixText0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$8", e);
        }
    }

    @Test
    public void test104() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LIKELY;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Distinct sQLite3Expression_SQLite3Distinct0 = new SQLite3Distinct(sQLite3Function0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3Distinct0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$5", e);
        }
    }

    @Test
    public void test105() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        String string0 = sQLite3ExpectedValueVisitor0.get();
        assertEquals("", string0);
    }

    @Test
    public void test106() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3PostfixUnaryOperation.PostfixUnaryOperator.ISNULL;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3InOperation sQLite3Expression_InOperation0 = new SQLite3InOperation(sQLite3Constant0, sQLite3Constant0);
        SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0, sQLite3Expression_InOperation0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3PostfixUnaryOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Expression$InOperation", e);
        }
    }

    // @Test
    // public void test107() throws Throwable {
    // SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
    // SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new
    // SQLite3Constant.SQLite3NullConstant();
    // SQLite3Cast sQLite3Expression_Cast0 = new SQLite3Cast(
    // (SQLite3TypeLiteral) null, sQLite3Constant_SQLite3NullConstant0);
    // // Undeclared exception!
    // try {
    // sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_Cast0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
    // }
    // }

    @Test
    public void test108() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        byte[] byteArray0 = new byte[21];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3BetweenOperation(sQLite3Constant0,
                false, sQLite3Constant0, sQLite3Constant_SQLite3BinaryConstant0);
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setWhereClause((SQLite3Expression) sQLite3Expression_BetweenOperation0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Select0, false);
        assertEquals(
                "\t((0) BETWEEN (0) AND (x'000000000000000000000000000000000000000000')) -- (INT) 1 explicit collate: null implicit collate: null\n\t\t((((0)>=(0)))AND(((0)<=(x'000000000000000000000000000000000000000000')))) -- (INT) 1 explicit collate: null implicit collate: null\n\t\t\t((0)>=(0)) -- (INT) 1 explicit collate: null implicit collate: null\n\t\t\t\t0 -- (INT) 0 explicit collate: null implicit collate: null\n\t\t\t\t0 -- (INT) 0 explicit collate: null implicit collate: null\n\t\t\t((0)<=(x'000000000000000000000000000000000000000000')) -- (INT) 1 explicit collate: null implicit collate: null\n\t\t\t\t0 -- (INT) 0 explicit collate: null implicit collate: null\n\t\t\t\tx'000000000000000000000000000000000000000000' -- (BINARY) x'000000000000000000000000000000000000000000' explicit collate: null implicit collate: null\n",
                sQLite3ExpectedValueVisitor0.get());
    }

    @Test
    public void test109() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LOWER;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 = SQLite3UnaryOperation.UnaryOperator.PLUS;
        SQLite3UnaryOperation sQLite3UnaryOperation0 = new SQLite3UnaryOperation(sQLite3UnaryOperation_UnaryOperator0,
                sQLite3Function0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3UnaryOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$4", e);
        }
    }

    @Test
    public void test110() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3InOperation sQLite3Expression_InOperation0 = new SQLite3InOperation(sQLite3Function0, sQLite3Function0);
        SQLite3OrderingTerm.Ordering sQLite3Expression_SQLite3OrderingTerm_Ordering0 = SQLite3OrderingTerm.Ordering.DESC;
        SQLite3OrderingTerm sQLite3Expression_SQLite3OrderingTerm0 = new SQLite3OrderingTerm(
                sQLite3Expression_InOperation0, sQLite3Expression_SQLite3OrderingTerm_Ordering0);
        // Undeclared exception!
        try {
            sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_SQLite3OrderingTerm0);
            // fail("Expecting exception: ArrayIndexOutOfBoundsException");
            // Unstable assertion
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$11", e);
        }
    }

    @Test
    public void test111() throws Throwable {
        SQLite3ExpectedValueVisitor sQLite3ExpectedValueVisitor0 = new SQLite3ExpectedValueVisitor();
        SQLite3TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3TypeLiteral.Type.BLOB;
        SQLite3TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3TypeLiteral(sQLite3Expression_TypeLiteral_Type0);
        sQLite3ExpectedValueVisitor0.visit(sQLite3Expression_TypeLiteral0);
        assertEquals(SQLite3TypeLiteral.Type.BLOB, sQLite3Expression_TypeLiteral0.getType());
    }
}
