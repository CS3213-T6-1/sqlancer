/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 13:44:09 GMT 2025
 */

package sqlancer.evosuite.sqlite3.ast;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.Test;

import sqlancer.sqlite3.ast.SQLite3BetweenOperation;
import sqlancer.sqlite3.ast.SQLite3CollateOperation;
import sqlancer.sqlite3.ast.SQLite3ColumnName;
import sqlancer.sqlite3.ast.SQLite3Constant;
import sqlancer.sqlite3.ast.SQLite3Expression;
import sqlancer.sqlite3.ast.SQLite3Function;
import sqlancer.sqlite3.ast.SQLite3TypeAffinity;
import sqlancer.sqlite3.schema.SQLite3DataType;
import sqlancer.sqlite3.schema.SQLite3Schema;

public class SQLite3CollateOperation_ESTest {

    @Test
    public void test00() throws Throwable {
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation((SQLite3Expression) null,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression sQLite3Expression0 = sQLite3CollateOperation0.getExpression();
        assertNull(sQLite3Expression0);
    }

    @Test
    public void test01() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant(0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3CollateOperation sQLite3CollateOperation1 = new SQLite3CollateOperation(sQLite3CollateOperation0,
                (SQLite3Schema.SQLite3Column.SQLite3CollateSequence) null);
        sQLite3CollateOperation1.getExplicitCollateSequence();
    }

    @Test
    public void test02() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.HEX;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = sQLite3Function0
                .getImplicitCollateSequence();
        SQLite3BetweenOperation sQLite3BetweenOperation0 = new SQLite3BetweenOperation(sQLite3Function0, false,
                sQLite3Function0, sQLite3Function0);
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3BetweenOperation0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant sQLite3Constant0 = sQLite3CollateOperation0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test03() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant(0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3CollateOperation sQLite3CollateOperation1 = new SQLite3CollateOperation(sQLite3CollateOperation0,
                (SQLite3Schema.SQLite3Column.SQLite3CollateSequence) null);
        sQLite3CollateOperation1.getCollate();
    }

    @Test
    public void test04() throws Throwable {
        byte[] byteArray0 = new byte[7];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = SQLite3Schema.SQLite3Column
                .createDummy("sqlancer.sqlite3.ast.SQLite3CollateOperation");
        SQLite3ColumnName sQLite3ColumnName0 = new SQLite3ColumnName(sQLite3Schema_SQLite3Column0,
                sQLite3Constant_SQLite3BinaryConstant0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3ColumnName0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3TypeAffinity sQLite3TypeAffinity0 = sQLite3CollateOperation0.getAffinity();
        assertEquals(SQLite3TypeAffinity.INTEGER, sQLite3TypeAffinity0);
    }

    @Test
    public void test05() throws Throwable {
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation((SQLite3Expression) null,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        // Undeclared exception!
        try {
            sQLite3CollateOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3CollateOperation", e);
        }
    }

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test06() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                871L, true);
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3IntConstant0.applyTextAffinity();
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.NULL;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("", sQLite3DataType0,
                true, true, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3ColumnName sQLite3ColumnName0 = new SQLite3ColumnName(sQLite3Schema_SQLite3Column0,
                sQLite3Constant_SQLite3IntConstant0);
        SQLite3BetweenOperation sQLite3BetweenOperation0 = new SQLite3BetweenOperation(sQLite3Constant0, true,
                sQLite3Constant0, sQLite3ColumnName0);
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3BetweenOperation0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        // Undeclared exception!
        try {
            sQLite3CollateOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // : NULL
            //
        }
    }

    @Test
    public void test07() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3Function0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        // Undeclared exception!
        try {
            sQLite3CollateOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$8", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation((SQLite3Expression) null,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        // Undeclared exception!
        try {
            sQLite3CollateOperation0.getAffinity();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3CollateOperation", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant(0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = (SQLite3Constant.SQLite3IntConstant) sQLite3CollateOperation0
                .getExpression();
        assertFalse(sQLite3Constant_SQLite3IntConstant0.isNull());
    }

    @Test
    public void test10() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant(0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3TypeAffinity sQLite3TypeAffinity0 = sQLite3CollateOperation0.getAffinity();
        assertFalse(sQLite3TypeAffinity0.isNumeric());
    }

    @Test
    public void test11() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant(0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant sQLite3Constant1 = sQLite3CollateOperation0.getExpectedValue();
        assertNull(sQLite3Constant1.getExplicitCollateSequence());
    }

    @Test
    public void test12() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant(0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence1 = sQLite3CollateOperation0
                .getExplicitCollateSequence();
        assertEquals(SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence1);
    }

    @Test
    public void test13() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant(0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence1 = sQLite3CollateOperation0
                .getCollate();
        assertSame(sQLite3Schema_SQLite3Column_SQLite3CollateSequence1,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
    }

    @Test
    public void test14() throws Throwable {
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.NULL;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("", sQLite3DataType0,
                false, false, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3ColumnName sQLite3ColumnName0 = new SQLite3ColumnName(sQLite3Schema_SQLite3Column0,
                sQLite3Constant_SQLite3NullConstant0);
        SQLite3CollateOperation sQLite3CollateOperation0 = new SQLite3CollateOperation(sQLite3ColumnName0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        // Undeclared exception!
        try {
            sQLite3CollateOperation0.getAffinity();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // : NULL
            //
        }
    }
}
