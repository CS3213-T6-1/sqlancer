/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:07:59 GMT 2025
 */

package sqlancer.evosuite.sqlite3.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.Randomly;
import sqlancer.common.ast.JoinBase;
import sqlancer.sqlite3.ast.SQLite3Constant;
import sqlancer.sqlite3.ast.SQLite3Expression;
import sqlancer.sqlite3.ast.SQLite3Select;

public class SQLite3Select_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        byte[] byteArray0 = new byte[7];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        sQLite3Select0.setWhereClause((SQLite3Expression) sQLite3Constant_SQLite3BinaryConstant0);
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant1 = (SQLite3Constant.SQLite3BinaryConstant) sQLite3Select0
                .getWhereClause();
        assertFalse(sQLite3Constant_SQLite3BinaryConstant1.isNull());
    }

    @Test
    public void test01() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setOrderByClauses((List<SQLite3Expression>) null);
        List<SQLite3Expression> list0 = sQLite3Select0.getOrderByClauses();
        assertNull(list0);
    }

    @Test
    public void test02() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Select sQLite3Select1 = new SQLite3Select(sQLite3Select0);
        List<SQLite3Expression> list0 = sQLite3Select1.getOrderByClauses();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test03() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[3];
        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
        sQLite3Select0.setOrderByClauses(list0);
        List<SQLite3Expression> list1 = sQLite3Select0.getOrderByClauses();
        assertSame(list1, list0);
    }

    @Test
    public void test04() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        Randomly randomly0 = new Randomly(0L);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        sQLite3Select0.setOffsetClause((SQLite3Expression) sQLite3Constant0);
        SQLite3Expression sQLite3Expression0 = sQLite3Select0.getOffsetClause();
        assertNull(sQLite3Expression0.getExplicitCollateSequence());
    }

    @Test
    public void test05() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setLimitClause((SQLite3Expression) sQLite3Select0);
        SQLite3Expression sQLite3Expression0 = sQLite3Select0.getLimitClause();
        assertNull(sQLite3Expression0.getExplicitCollateSequence());
    }

    @Test
    public void test06() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setJoinClauses((List<JoinBase<SQLite3Expression>>) null);
        List<JoinBase<SQLite3Expression>> list0 = sQLite3Select0.getJoinClauses();
        assertNull(list0);
    }

    @Test
    public void test07() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Select sQLite3Select1 = new SQLite3Select(sQLite3Select0);
        List<JoinBase<SQLite3Expression>> list0 = sQLite3Select1.getJoinClauses();
        assertTrue(list0.isEmpty());
    }

    // @Test
    // public void test08() throws Throwable {
    // SQLite3Select sQLite3Select0 = new SQLite3Select();
    // JoinBase<SQLite3Expression>[] sQLite3Expression_JoinArray0 = new JoinBase<SQLite3Expression>[7];
    // List<JoinBase<SQLite3Expression>> list0 = Randomly.nonEmptySubset(sQLite3Expression_JoinArray0);
    // sQLite3Select0.setJoinClauses(list0);
    // List<JoinBase<SQLite3Expression>> list1 = sQLite3Select0.getJoinClauses();
    // assertSame(list1, list0);
    // }

    @Test
    public void test09() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        sQLite3Select0.setHavingClause((SQLite3Expression) sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression sQLite3Expression0 = sQLite3Select0.getHavingClause();
        assertSame(sQLite3Expression0, sQLite3Constant_SQLite3NullConstant0);
    }

    @Test
    public void test10() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setGroupByClause((List<SQLite3Expression>) null);
        List<SQLite3Expression> list0 = sQLite3Select0.getGroupByClause();
        assertNull(list0);
    }

    @Test
    public void test11() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        List<SQLite3Expression> list0 = Randomly.subset(sQLite3ExpressionArray0);
        sQLite3Select0.setGroupByClause(list0);
        List<SQLite3Expression> list1 = sQLite3Select0.getGroupByClause();
        assertEquals(0, list1.size());
    }

    @Test
    public void test12() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[9];
        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
        sQLite3Select0.setGroupByClause(list0);
        List<SQLite3Expression> list1 = sQLite3Select0.getGroupByClause();
        assertFalse(list1.isEmpty());
    }

    @Test
    public void test13() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setFromList((List<SQLite3Expression>) null);
        List<SQLite3Expression> list0 = sQLite3Select0.getFromList();
        assertNull(list0);
    }

    @Test
    public void test14() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Select sQLite3Select1 = new SQLite3Select(sQLite3Select0);
        List<SQLite3Expression> list0 = sQLite3Select1.getFromList();
        assertEquals(0, list0.size());
    }

    // @Test
    // public void test15() throws Throwable {
    // SQLite3Select sQLite3Select0 = new SQLite3Select();
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[2];
    // List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
    // sQLite3Select0.setFromList(list0);
    // List<SQLite3Expression> list1 = sQLite3Select0.getFromList();
    // assertEquals(1, list1.size());
    // }

    @Test
    public void test16() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setFetchColumns((List<SQLite3Expression>) null);
        List<SQLite3Expression> list0 = sQLite3Select0.getFetchColumns();
        assertNull(list0);
    }

    @Test
    public void test17() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setLimitClause((SQLite3Expression) sQLite3Select0);
        // Undeclared exception!
        try {
            sQLite3Select0.asString();
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test18() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setOrderByClauses((List<SQLite3Expression>) null);
        // Undeclared exception!
        try {
            sQLite3Select0.asString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test19() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression sQLite3Expression0 = sQLite3Select0.getHavingClause();
        assertNull(sQLite3Expression0);
    }

    @Test
    public void test20() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression sQLite3Expression0 = sQLite3Select0.getOffsetClause();
        assertNull(sQLite3Expression0);
    }

    @Test
    public void test21() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression sQLite3Expression0 = sQLite3Select0.getWhereClause();
        assertNull(sQLite3Expression0);
    }

    @Test
    public void test22() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Select.SelectType sQLite3Select_SelectType0 = sQLite3Select0.getFromOptions();
        assertEquals(SQLite3Select.SelectType.ALL, sQLite3Select_SelectType0);
    }

    @Test
    public void test23() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression sQLite3Expression0 = sQLite3Select0.getLimitClause();
        assertNull(sQLite3Expression0);
    }

    @Test
    public void test24() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Select sQLite3Select1 = new SQLite3Select(sQLite3Select0);
        List<SQLite3Expression> list0 = sQLite3Select1.getFetchColumns();
        assertTrue(list0.isEmpty());
    }

    // @Test
    // public void test25() throws Throwable {
    // SQLite3Select sQLite3Select0 = new SQLite3Select();
    // JoinBase<SQLite3Expression>[] sQLite3Expression_JoinArray0 = new JoinBase<SQLite3Expression>[7];
    // List<JoinBase<SQLite3Expression>> list0 = Randomly.nonEmptySubset(sQLite3Expression_JoinArray0);
    // sQLite3Select0.setJoinClauses(list0);
    // SQLite3Select sQLite3Select1 = null;
    // try {
    // sQLite3Select1 = new SQLite3Select(sQLite3Select0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.sqlite3.ast.SQLite3Expression$Join", e);
    // }
    // }

    @Test
    public void test26() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setGroupByClause((List<SQLite3Expression>) null);
        // Undeclared exception!
        try {
            sQLite3Select0.asString();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.SQLite3ToStringVisitor", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[6];
        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
        sQLite3Select0.setFetchColumns(list0);
        List<SQLite3Expression> list1 = sQLite3Select0.getFetchColumns();
        assertFalse(list1.isEmpty());
    }

    @Test
    public void test28() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Select.SelectType sQLite3Select_SelectType0 = SQLite3Select.SelectType.ALL;
        sQLite3Select0.setSelectType(sQLite3Select_SelectType0);
        assertNull(sQLite3Select0.getExplicitCollateSequence());
    }

    @Test
    public void test29() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.getExplicitCollateSequence();
    }

    @Test
    public void test30() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Select.SelectType sQLite3Select_SelectType0 = SQLite3Select.SelectType.ALL;
        sQLite3Select0.setFromOptions(sQLite3Select_SelectType0);
        assertNull(sQLite3Select0.getExplicitCollateSequence());
    }

    @Test
    public void test31() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        sQLite3Select0.setOrderByClauses((List<SQLite3Expression>) null);
        // Undeclared exception!
        try {
            sQLite3Select0.getHavingClause();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test32() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        String string0 = sQLite3Select0.asString();
        assertEquals("SELECT ALL  FROM ", string0);
    }
}
