/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 14:16:12 GMT 2025
 */

package sqlancer.evosuite.sqlite3.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.visitor.UnaryOperation;
import sqlancer.Randomly;
import sqlancer.sqlite3.ast.SQLite3Aggregate;
import sqlancer.sqlite3.ast.SQLite3Constant;
import sqlancer.sqlite3.ast.SQLite3Expression;
import sqlancer.sqlite3.ast.SQLite3RowValueExpression;
import sqlancer.sqlite3.ast.SQLite3Select;
import sqlancer.sqlite3.ast.SQLite3UnaryOperation;
import sqlancer.sqlite3.ast.SQLite3WindowFunctionExpression;
import sqlancer.sqlite3.schema.SQLite3DataType;
import sqlancer.sqlite3.schema.SQLite3Schema;

public class SQLite3Expression_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test000() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_RIGHT;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = SQLite3Expression.Sqlite3BinaryOperation
                .create((SQLite3Expression) null, (SQLite3Expression) null,
                        sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Expression_Sqlite3BinaryOperation0
                .getAffinity();
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.INTEGER;
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                816L);
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3IntConstant0.applyTextAffinity();
        SQLite3Expression.ConstantTuple sQLite3Expression_ConstantTuple0 = SQLite3Expression.applyAffinities(
                sQLite3Expression_TypeAffinity0, sQLite3Expression_TypeAffinity1, sQLite3Constant0, sQLite3Constant0);
        assertNotNull(sQLite3Expression_ConstantTuple0);
    }

    @Test
    public void test001() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.TEXT;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.INTEGER;
        Randomly randomly0 = new Randomly();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        // Undeclared exception!
        try {
            SQLite3Expression.applyAffinities(sQLite3Expression_TypeAffinity0, sQLite3Expression_TypeAffinity1,
                    (SQLite3Constant) null, sQLite3Constant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Expression", e);
        }
    }

    @Test
    public void test002() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-9223372036854775808L), true);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.ARITHMETIC_OR;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant0);
        assertEquals((-9223372036854775807L), sQLite3Constant1.asInt());
    }

    @Test
    public void test003() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.ARITHMETIC_OR;
        SQLite3Constant sQLite3Constant2 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant1);
        assertEquals(1L, sQLite3Constant2.asInt());
    }

    @Test
    public void test004() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-9223372036854775808L), true);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.ARITHMETIC_AND;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant_SQLite3IntConstant0);
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test005() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (byte) (-49));
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0);
        assertEquals((-1L), sQLite3Constant0.asInt());
    }

    @Test
    public void test006() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                64L, false);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_RIGHT;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant_SQLite3IntConstant0);
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test007() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                64L, false);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_RIGHT;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0);
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test008() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "gg6GX!wXrS");
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOT_NULL;
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0,
                sQLite3Constant_SQLite3TextConstant0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3PostfixUnaryOperation0.getExpectedValue();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant0);
        assertEquals(2L, sQLite3Constant1.asInt());
    }

    @Test
    public void test009() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-1076), false);
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                ",RAjx{f<0D");
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3TextConstant0);
        assertEquals((-1076L), sQLite3Constant0.asInt());
    }

    @Test
    public void test010() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                64L);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0);
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test011() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NONE;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.TEXT;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .applyOperand(sQLite3Constant0, sQLite3Expression_TypeAffinity0, sQLite3Constant_SQLite3NullConstant0,
                        sQLite3Expression_TypeAffinity1, sQLite3Constant0, sQLite3Constant_SQLite3NullConstant0, true);
        assertTrue(sQLite3Constant1.isNull());
    }

    @Test
    public void test012() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Constant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotNull(sQLite3Constant1);
        assertEquals(1L, sQLite3Constant1.asInt());
    }

    @Test
    public void test013() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "Q{qPpte+XmSLt");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.TEXT;
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                2449.2837901);
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant1 = new SQLite3Constant.SQLite3RealConstant(
                0.0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .applyOperand(sQLite3Constant_SQLite3RealConstant1, sQLite3Expression_TypeAffinity0,
                        sQLite3Constant_SQLite3RealConstant0, sQLite3Expression_TypeAffinity0,
                        sQLite3Constant_SQLite3RealConstant0, sQLite3Constant0, true);
        assertNotNull(sQLite3Constant1);
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test014() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-1076), false);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.EQUALS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = new SQLite3Expression.BinaryComparisonOperation(
                sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3NullConstant0,
                sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotSame(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant0);
    }

    @Test
    public void test015() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.createBoolean(true);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.SMALLER;
        SQLite3Constant sQLite3Constant2 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .apply(sQLite3Constant1, sQLite3Constant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant2.isNull());
    }

    @Test
    public void test016() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        Randomly randomly0 = new Randomly(49L);
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        SQLite3Expression.MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3Expression.MatchOperation(
                sQLite3Constant1, sQLite3Constant0);
        assertNull(sQLite3Expression_MatchOperation0.getExplicitCollateSequence());
    }

    @Test
    public void test017() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-1L));
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_TRUE;
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0,
                sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation0, false, sQLite3Constant_SQLite3IntConstant0,
                sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = (SQLite3Expression.Sqlite3BinaryOperation) sQLite3Expression_BetweenOperation0
                .getTopNode();
        assertFalse(sQLite3Expression_BetweenOperation0.isNegated());

        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = (SQLite3Expression.BinaryComparisonOperation) sQLite3Expression_Sqlite3BinaryOperation0
                .getLeft();
        assertEquals(SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS,
                sQLite3Expression_BinaryComparisonOperation0.getOperator());
    }

    @Test
    public void test018() throws Throwable {
        SQLite3Expression.Subquery sQLite3Expression_Subquery0 = new SQLite3Expression.Subquery("");
        sQLite3Expression_Subquery0.getExplicitCollateSequence();
    }

    @Test
    public void test019() throws Throwable {
        SQLite3Expression.SQLite3TableReference sQLite3Expression_SQLite3TableReference0 = new SQLite3Expression.SQLite3TableReference(
                (SQLite3Schema.SQLite3Table) null);
        sQLite3Expression_SQLite3TableReference0.getExplicitCollateSequence();
    }

    @Test
    public void test020() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "gt:Z{+cWFf-");
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_TRUE;
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0,
                sQLite3Constant_SQLite3TextConstant0);
        UnaryOperation.OperatorKind unaryOperation_OperatorKind0 = sQLite3Expression_SQLite3PostfixUnaryOperation0
                .getOperatorKind();
        assertEquals(UnaryOperation.OperatorKind.POSTFIX, unaryOperation_OperatorKind0);
    }

    @Test
    public void test021() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "\"]+,w&8,");
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOTNULL;
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0,
                sQLite3Constant_SQLite3TextConstant0);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_SQLite3PostfixUnaryOperation0.getExpression();
        assertSame(sQLite3Constant_SQLite3TextConstant0, sQLite3Expression0);
    }

    @Test
    public void test022() throws Throwable {
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOTNULL;
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-984L));
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0,
                sQLite3Constant_SQLite3IntConstant0);
        sQLite3Expression_SQLite3PostfixUnaryOperation0.getExplicitCollateSequence();
    }

    @Test
    public void test023() throws Throwable {
        SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm.SQLite3WindowFunctionFrameSpecTermKind sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm_SQLite3WindowFunctionFrameSpecTermKind0 = SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm.SQLite3WindowFunctionFrameSpecTermKind.UNBOUNDED_PRECEDING;
        SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm0 = new SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm(
                sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm_SQLite3WindowFunctionFrameSpecTermKind0);
        byte[] byteArray0 = new byte[1];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm0, "*",
                sQLite3Constant_SQLite3BinaryConstant0);
        String string0 = sQLite3Expression_SQLite3PostfixText0.getText();
        assertEquals("*", string0);
    }

    @Test
    public void test024() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                "", sQLite3Constant0);
        sQLite3Expression_SQLite3PostfixText0.getExplicitCollateSequence();
    }

    @Test
    public void test025() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                "KV^{z0CYJb\u0005Lu", sQLite3Constant_SQLite3NullConstant0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3PostfixText0.getExpectedValue();
        assertSame(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant0);
    }

    @Test
    public void test026() throws Throwable {
        SQLite3RowValueExpression sQLite3RowValueExpression0 = new SQLite3RowValueExpression(
                (List<SQLite3Expression>) null);
        SQLite3Expression.SQLite3Exist sQLite3Expression_SQLite3Exist0 = new SQLite3Expression.SQLite3Exist(
                sQLite3RowValueExpression0);
        sQLite3Expression_SQLite3Exist0.getExplicitCollateSequence();
    }

    @Test
    public void test027() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-6970L), true);
        SQLite3Expression.SQLite3Distinct sQLite3Expression_SQLite3Distinct0 = new SQLite3Expression.SQLite3Distinct(
                sQLite3Constant_SQLite3IntConstant0);
        sQLite3Expression_SQLite3Distinct0.getImplicitCollateSequence();
    }

    @Test
    public void test028() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression.SQLite3Distinct sQLite3Expression_SQLite3Distinct0 = new SQLite3Expression.SQLite3Distinct(
                sQLite3Select0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3Distinct0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test029() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "Q{qPpte+XmSLt");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3Expression.SQLite3ColumnName(
                (SQLite3Schema.SQLite3Column) null, sQLite3Constant0);
        // Undeclared exception!
        try {
            sQLite3Expression_SQLite3ColumnName0.getImplicitCollateSequence();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Expression$SQLite3ColumnName", e);
        }
    }

    @Test
    public void test030() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "Q{qPpte+XmSLt");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3Expression.SQLite3ColumnName(
                (SQLite3Schema.SQLite3Column) null, sQLite3Constant0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_SQLite3ColumnName0.getExpectedValue();
        assertFalse(sQLite3Constant1.isNull());
    }

    @Test
    public void test031() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Constant0, sQLite3Constant0);
        List<SQLite3Expression> list0 = sQLite3Expression_InOperation0.getRightExpressionList();
        assertNull(list0);
    }

    @Test
    public void test032() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "jmt_Y06km=1");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Constant_SQLite3TextConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_CollateOperation0.getExpectedValue();
        assertFalse(sQLite3Constant0.isNull());
    }

    @Test
    public void test033() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-1683.1477));
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Constant_SQLite3RealConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Expression_CollateOperation0
                .getAffinity();
        assertEquals(SQLite3Expression.TypeAffinity.NONE, sQLite3Expression_TypeAffinity0);
    }

    @Test
    public void test034() throws Throwable {
        Randomly randomly0 = new Randomly(5L);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.getExpectedValue();
        assertFalse(sQLite3Constant1.isNull());
    }

    @Test
    public void test035() throws Throwable {
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.INTEGER;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-1160L), false);
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Constant_SQLite3IntConstant0, true, sQLite3Constant_SQLite3IntConstant0,
                sQLite3Constant_SQLite3IntConstant0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Expression_BetweenOperation0);
        sQLite3Expression_Cast0.getAffinity();
        assertTrue(sQLite3Expression_BetweenOperation0.isNegated());
    }

    @Test
    public void test036() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_RIGHT;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = new SQLite3Expression.Sqlite3BinaryOperation(
                (SQLite3Expression) null, (SQLite3Expression) null,
                sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        // Undeclared exception!
        try {
            sQLite3Expression_Sqlite3BinaryOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Expression$Sqlite3BinaryOperation", e);
        }
    }

    @Test
    public void test037() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.TEXT;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.NONE;
        SQLite3Expression.ConstantTuple sQLite3Expression_ConstantTuple0 = SQLite3Expression.applyAffinities(
                sQLite3Expression_TypeAffinity0, sQLite3Expression_TypeAffinity1, sQLite3Constant0, sQLite3Constant0);
        assertNotNull(sQLite3Expression_ConstantTuple0);
    }

    @Test
    public void test038() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "\"]+,w&8,");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Constant_SQLite3TextConstant0, false, sQLite3Constant0, sQLite3Constant0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BetweenOperation0.getExpectedValue();
        assertEquals(0L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test039() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "NOT NULL");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                0.0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3RealConstant0.applyEquals(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[7];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant1;
        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Constant_SQLite3RealConstant0, list0);
        SQLite3Constant sQLite3Constant2 = sQLite3Expression_InOperation0.getExpectedValue();
        assertFalse(sQLite3Constant2.isHex());
    }

    @Test
    public void test040() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.REAL;
        boolean boolean0 = sQLite3Expression_TypeAffinity0.isNumeric();
        assertTrue(boolean0);
    }

    @Test
    public void test041() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.INTEGER;
        boolean boolean0 = sQLite3Expression_TypeAffinity0.isNumeric();
        assertTrue(boolean0);
    }

    @Test
    public void test042() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NUMERIC;
        boolean boolean0 = sQLite3Expression_TypeAffinity0.isNumeric();
        assertTrue(boolean0);
    }

    @Test
    public void test043() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "KBg598Vi+gkfr");
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Constant_SQLite3TextConstant0
                .getAffinity();
        boolean boolean0 = sQLite3Expression_TypeAffinity0.isNumeric();
        assertFalse(boolean0);
    }

    @Test
    public void test044() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Constant sQLite3Constant0 = sQLite3Select0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test045() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        sQLite3Constant0.getImplicitCollateSequence();
    }

    @Test
    public void test046() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                sQLite3Constant_SQLite3TextConstant0, "1k?)}oTRXj2H", sQLite3Constant0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = new SQLite3Expression.BinaryComparisonOperation(
                sQLite3Expression_SQLite3PostfixText0, sQLite3Expression_SQLite3PostfixText0,
                sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(1L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test047() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-2087.21));
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.TEXT;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.NONE;
        // Undeclared exception!
        try {
            SQLite3Expression.applyAffinities(sQLite3Expression_TypeAffinity1, sQLite3Expression_TypeAffinity0,
                    sQLite3Constant_SQLite3RealConstant0, sQLite3Constant_SQLite3RealConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Expression", e);
        }
    }

    @Test
    public void test048() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NONE;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.TEXT;
        SQLite3Expression.ConstantTuple sQLite3Expression_ConstantTuple0 = SQLite3Expression.applyAffinities(
                sQLite3Expression_TypeAffinity0, sQLite3Expression_TypeAffinity1, sQLite3Constant0, sQLite3Constant0);
        assertNotNull(sQLite3Expression_ConstantTuple0);
    }

    @Test
    public void test049() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.TEXT;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.NONE;
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                1143.416345514133);
        // Undeclared exception!
        try {
            SQLite3Expression.applyAffinities(sQLite3Expression_TypeAffinity0, sQLite3Expression_TypeAffinity1,
                    sQLite3Constant_SQLite3RealConstant0, sQLite3Constant_SQLite3RealConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Expression", e);
        }
    }

    @Test
    public void test050() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "labels must be TEXT");
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.TEXT;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column(
                "labels must be TEXT", sQLite3DataType0, true, false,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3Expression.SQLite3ColumnName(
                sQLite3Schema_SQLite3Column0, sQLite3Constant_SQLite3TextConstant0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS_NOT;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Expression_SQLite3ColumnName0, sQLite3Constant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(1L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test051() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NUMERIC;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.BLOB;
        SQLite3Expression.ConstantTuple sQLite3Expression_ConstantTuple0 = SQLite3Expression.applyAffinities(
                sQLite3Expression_TypeAffinity1, sQLite3Expression_TypeAffinity0, sQLite3Constant0, sQLite3Constant0);
        assertNotNull(sQLite3Expression_ConstantTuple0);
    }

    @Test
    public void test052() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NUMERIC;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.NONE;
        SQLite3Expression.ConstantTuple sQLite3Expression_ConstantTuple0 = SQLite3Expression.applyAffinities(
                sQLite3Expression_TypeAffinity0, sQLite3Expression_TypeAffinity1, sQLite3Constant0, sQLite3Constant0);
        assertNotNull(sQLite3Expression_ConstantTuple0);
    }

    @Test
    public void test053() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (byte) 10, true);
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3IntConstant0.applyTextAffinity();
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NUMERIC;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.BLOB;
        SQLite3Expression.ConstantTuple sQLite3Expression_ConstantTuple0 = SQLite3Expression.applyAffinities(
                sQLite3Expression_TypeAffinity0, sQLite3Expression_TypeAffinity1, sQLite3Constant_SQLite3IntConstant0,
                sQLite3Constant0);
        assertNotNull(sQLite3Expression_ConstantTuple0);
    }

    @Test
    public void test054() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.TEXT;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.REAL;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.ConstantTuple sQLite3Expression_ConstantTuple0 = SQLite3Expression.applyAffinities(
                sQLite3Expression_TypeAffinity1, sQLite3Expression_TypeAffinity0, sQLite3Constant0, sQLite3Constant0);
        assertNotNull(sQLite3Expression_ConstantTuple0);
    }

    @Test
    public void test055() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.NULL;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("timetz_minmax_ops",
                sQLite3DataType0, false, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0, false);
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3Expression.SQLite3ColumnName(
                sQLite3Schema_SQLite3Column0, sQLite3Constant0);
        // Undeclared exception!
        try {
            sQLite3Expression_SQLite3ColumnName0.getAffinity();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // timetz_minmax_ops: NULL
            //
        }
    }

    @Test
    public void test056() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.REAL;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("", sQLite3DataType0,
                false, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0, true);
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3Expression.SQLite3ColumnName(
                sQLite3Schema_SQLite3Column0, sQLite3Constant0);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Expression_SQLite3ColumnName0
                .getAffinity();
        assertEquals(SQLite3Expression.TypeAffinity.REAL, sQLite3Expression_TypeAffinity0);
    }

    @Test
    public void test057() throws Throwable {
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = SQLite3Expression.SQLite3ColumnName
                .createDummy("`~&h_{UpGBR%Jy{Zj;M");
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Expression_SQLite3ColumnName0
                .getAffinity();
        assertEquals(SQLite3Expression.TypeAffinity.INTEGER, sQLite3Expression_TypeAffinity0);
    }

    @Test
    public void test058() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = new SQLite3Expression.Sqlite3BinaryOperation(
                sQLite3Select0, sQLite3Select0, sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test059() throws Throwable {
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.NUMERIC;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Select0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Expression_Cast0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression.SQLite3Distinct sQLite3Expression_SQLite3Distinct0 = new SQLite3Expression.SQLite3Distinct(
                sQLite3Expression_CollateOperation0);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = new SQLite3Expression.Sqlite3BinaryOperation(
                sQLite3Expression_SQLite3Distinct0, sQLite3Select0,
                sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence1 = sQLite3Expression_Sqlite3BinaryOperation0
                .getExplicitCollateSequence();
        assertSame(sQLite3Schema_SQLite3Column_SQLite3CollateSequence1,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
    }

    @Test
    public void test060() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-9223372036854775808L));
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = SQLite3Expression.Sqlite3BinaryOperation
                .create(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0,
                        sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3IntConstant0, sQLite3Expression_Sqlite3BinaryOperation0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotNull(sQLite3Constant0);
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test061() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.ARITHMETIC_AND;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant_SQLite3NullConstant0);
        assertNull(sQLite3Constant1.getExplicitCollateSequence());
    }

    @Test
    public void test062() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0);
        assertTrue(sQLite3Constant0.isNull());
    }

    @Test
    public void test063() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.OR;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant0);
        assertNotSame(sQLite3Constant1, sQLite3Constant_SQLite3NullConstant0);
    }

    @Test
    public void test064() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.OR;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant0);
        assertEquals(1L, sQLite3Constant1.asInt());
    }

    @Test
    public void test065() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.OR;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test066() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.OR;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant0);
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test067() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NONE;
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.OR;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0.applyOperand(
                sQLite3Constant0, sQLite3Expression_TypeAffinity0, sQLite3Constant0, sQLite3Expression_TypeAffinity0);
        assertEquals(SQLite3DataType.NULL, sQLite3Constant1.getDataType());
    }

    @Test
    public void test068() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.AND;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0);
        assertEquals(SQLite3DataType.NULL, sQLite3Constant0.getDataType());
    }

    @Test
    public void test069() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.AND;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant0);
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test070() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                1000L);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_RIGHT;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = SQLite3Expression.Sqlite3BinaryOperation
                .create(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0,
                        sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Expression_Sqlite3BinaryOperation0, sQLite3Expression_Sqlite3BinaryOperation0);
        // Undeclared exception!
        try {
            sQLite3Expression_InOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
        }
    }

    @Test
    public void test071() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_RIGHT;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant0);
        assertEquals(SQLite3DataType.INT, sQLite3Constant1.getDataType());
    }

    @Test
    public void test072() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-1475L));
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0);
        assertEquals((-1L), sQLite3Constant0.asInt());
    }

    @Test
    public void test073() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_LEFT;
        Randomly randomly0 = new Randomly();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant0);
        assertFalse(sQLite3Constant1.isNull());
    }

    @Test
    public void test074() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_RIGHT;
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-1475L));
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0);
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test075() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        byte[] byteArray0 = new byte[4];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.CONCATENATE;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant_SQLite3BinaryConstant0);
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test076() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.CONCATENATE;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant(1.0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant0);
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test077() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "6#B$77^");
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.CONCATENATE;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3TextConstant0, sQLite3Constant_SQLite3NullConstant0);
        assertTrue(sQLite3Constant0.isNull());
    }

    @Test
    public void test078() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                0L);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.CONCATENATE;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3IntConstant0);
        assertNotSame(sQLite3Constant0, sQLite3Constant_SQLite3NullConstant0);
    }

    @Test
    public void test079() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.CONCATENATE;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant0);
        assertNull(sQLite3Constant1.getExplicitCollateSequence());
    }

    @Test
    public void test080() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Constant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Expression_CollateOperation0, sQLite3Expression_CollateOperation0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence1 = sQLite3Expression_BinaryComparisonOperation0
                .getExplicitCollateSequence();
        assertSame(sQLite3Schema_SQLite3Column_SQLite3CollateSequence1,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
    }

    @Test
    public void test081() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "EbS]A==?-R{MKr{");
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3TextConstant0, sQLite3Constant_SQLite3TextConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotNull(sQLite3Constant0);
        assertEquals(1L, sQLite3Constant0.asInt());
    }

    @Test
    public void test082() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Constant_SQLite3TextConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(0L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test083() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                1942.030090239);
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3TextConstant0, sQLite3Constant_SQLite3RealConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test084() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                28L);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBinaryConstant("");
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Constant_SQLite3IntConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test085() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotSame(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant0);
    }

    @Test
    public void test086() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-2087.21));
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0.apply(
                (SQLite3Constant) null, sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test087() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "=sGV;");
        byte[] byteArray0 = new byte[4];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0.apply(
                sQLite3Constant_SQLite3TextConstant0, sQLite3Constant_SQLite3BinaryConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test088() throws Throwable {
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        Randomly randomly0 = new Randomly();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .apply(sQLite3Constant0, sQLite3Constant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test089() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Constant_SQLite3NullConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNull(sQLite3Constant1.getExplicitCollateSequence());
    }

    @Test
    public void test090() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(SQLite3DataType.NULL, sQLite3Constant0.getDataType());
    }

    @Test
    public void test091() throws Throwable {
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0.apply(
                (SQLite3Constant) null, (SQLite3Constant) null, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test092() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-2667L));
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS_NOT;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = new SQLite3Expression.BinaryComparisonOperation(
                sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3NullConstant0,
                sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(1L, sQLite3Constant0.asInt());
        assertNotNull(sQLite3Constant0);
    }

    @Test
    public void test093() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                3L);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS_NOT;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3IntConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotNull(sQLite3Constant0);
        assertEquals(1L, sQLite3Constant0.asInt());
    }

    @Test
    public void test094() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-9223372036854775808L));
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3NullConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(0L, sQLite3Constant0.asInt());
        assertNotNull(sQLite3Constant0);
    }

    @Test
    public void test095() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotNull(sQLite3Constant1);
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test096() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-2087.21));
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NUMERIC;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .applyOperand((SQLite3Constant) null, sQLite3Expression_TypeAffinity0,
                        sQLite3Constant_SQLite3RealConstant0, sQLite3Expression_TypeAffinity0,
                        sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0, false);
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test097() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Constant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotNull(sQLite3Constant1);
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test098() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-3582L));
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3NullConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNull(sQLite3Constant0.getExplicitCollateSequence());
    }

    @Test
    public void test099() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "h");
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Constant_SQLite3TextConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(1L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test100() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NONE;
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                (String) null);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .applyOperand(sQLite3Constant_SQLite3TextConstant0, sQLite3Expression_TypeAffinity0,
                        (SQLite3Constant) null, sQLite3Expression_TypeAffinity0, sQLite3Select0, sQLite3Select0, true);
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test101() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(SQLite3DataType.NULL, sQLite3Constant0.getDataType());
    }

    @Test
    public void test102() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-9223372036854775808L));
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation1 = new SQLite3Expression.BinaryComparisonOperation(
                sQLite3Constant_SQLite3IntConstant0, sQLite3Expression_BinaryComparisonOperation0,
                sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation1.getExpectedValue();
        assertNotNull(sQLite3Constant0);
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test103() throws Throwable {
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNull(sQLite3Constant0.getExplicitCollateSequence());
    }

    @Test
    public void test104() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                1L, false);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.SMALLER_EQUALS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Constant_SQLite3IntConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotSame(sQLite3Constant1, sQLite3Constant_SQLite3IntConstant0);
        assertEquals(1L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test105() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[6];
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant_SQLite3NullConstant0;
        Randomly randomly0 = new Randomly(868L);
        SQLite3Constant.getRandomBinaryConstant(randomly0);
        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Constant0, list0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_InOperation0.getExpectedValue();
        assertTrue(sQLite3Constant1.isNull());
    }

    @Test
    public void test106() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[6];
        SQLite3WindowFunctionExpression sQLite3WindowFunctionExpression0 = new SQLite3WindowFunctionExpression(
                sQLite3Constant0);
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3WindowFunctionExpression0;
        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Constant0, list0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_InOperation0.getExpectedValue();
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test107() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[2];
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant0;
        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3ExpressionArray0[1], list0);
        SQLite3Expression.InOperation sQLite3Expression_InOperation1 = new SQLite3Expression.InOperation(
                sQLite3Expression_InOperation0, list0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_InOperation1.getExpectedValue();
        assertNotNull(sQLite3Constant1);
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test108() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[2];
        List<SQLite3Expression> list0 = Randomly.nonEmptySubset(sQLite3ExpressionArray0);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Constant_SQLite3NullConstant0, list0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_InOperation0.getExpectedValue();
        assertNotSame(sQLite3Constant0, sQLite3Constant_SQLite3NullConstant0);
    }

    @Test
    public void test109() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3WindowFunctionExpression sQLite3WindowFunctionExpression0 = new SQLite3WindowFunctionExpression(
                sQLite3Constant0);
        List<SQLite3Expression> list0 = sQLite3WindowFunctionExpression0.getOrderBy();
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Constant0, list0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_InOperation0.getExpectedValue();
        assertNotSame(sQLite3Constant1, sQLite3Constant0);
    }

    @Test
    public void test110() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-2738.277201532813));
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Constant_SQLite3RealConstant0, (SQLite3Expression) null);
        sQLite3Expression_InOperation0.getExplicitCollateSequence();
    }

    @Test
    public void test111() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_TRUE;
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0, sQLite3Select0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3PostfixUnaryOperation0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test112() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_FALSE;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0
                .apply(sQLite3Constant_SQLite3NullConstant0);
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test113() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_TRUE;
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0,
                sQLite3Constant_SQLite3NullConstant0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3PostfixUnaryOperation0.getExpectedValue();
        assertNotNull(sQLite3Constant0);
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test114() throws Throwable {
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_TRUE;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0
                .apply(sQLite3Constant0);
        assertEquals(1L, sQLite3Constant1.asInt());
    }

    @Test
    public void test115() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOTNULL;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0
                .apply(sQLite3Constant_SQLite3NullConstant0);
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test116() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOTNULL;
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0, sQLite3Constant0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = new SQLite3Expression.BinaryComparisonOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation0, sQLite3Constant0,
                sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNotNull(sQLite3Constant1);
        assertEquals(1L, sQLite3Constant1.asInt());
    }

    @Test
    public void test117() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOT_NULL;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0
                .apply(sQLite3Constant_SQLite3NullConstant0);
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test118() throws Throwable {
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.ISNULL;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0
                .apply(sQLite3Constant_SQLite3NullConstant0);
        assertEquals(1L, sQLite3Constant0.asInt());
    }

    @Test
    public void test119() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator
                .getRandomOperator();
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0
                .apply(sQLite3Constant0);
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test120() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[5];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Select0;
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Select0;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Select0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Expression_CollateOperation0;
        SQLite3Expression.Function sQLite3Expression_Function0 = new SQLite3Expression.Function((String) null,
                sQLite3ExpressionArray0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence1 = sQLite3Expression_Function0
                .getExplicitCollateSequence();
        assertSame(sQLite3Schema_SQLite3Column_SQLite3CollateSequence1,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
    }

    @Test
    public void test121() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Select0;
        SQLite3Expression.Function sQLite3Expression_Function0 = new SQLite3Expression.Function((String) null,
                sQLite3ExpressionArray0);
        sQLite3Expression_Function0.getExplicitCollateSequence();
    }

    @Test
    public void test122() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Expression.Function sQLite3Expression_Function0 = new SQLite3Expression.Function("3/D",
                sQLite3ExpressionArray0);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Expression_Function0.getAffinity();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS_NOT;
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        List<SQLite3Expression> list0 = sQLite3Select0.getFetchColumns();
        SQLite3Aggregate.SQLite3AggregateFunction sQLite3Aggregate_SQLite3AggregateFunction0 = SQLite3Aggregate.SQLite3AggregateFunction.COUNT_ALL;
        SQLite3Aggregate sQLite3Aggregate0 = new SQLite3Aggregate(list0, sQLite3Aggregate_SQLite3AggregateFunction0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .applyOperand((SQLite3Constant) null, sQLite3Expression_TypeAffinity0, (SQLite3Constant) null,
                        sQLite3Expression_TypeAffinity0, sQLite3Expression_Function0, sQLite3Aggregate0, true);
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test123() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Constant0, false, sQLite3Constant_SQLite3NullConstant0, sQLite3Constant0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BetweenOperation0.getExpectedValue();
        assertFalse(sQLite3Expression_BetweenOperation0.isNegated());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test124() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "gg6GX!wXrS");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Constant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Constant0, true, sQLite3Expression_CollateOperation0, sQLite3Constant_SQLite3TextConstant0);
        sQLite3Expression_BetweenOperation0.getExplicitCollateSequence();
        assertTrue(sQLite3Expression_BetweenOperation0.isNegated());
    }

    @Test
    public void test125() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                64L, false);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.TEXT;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 = SQLite3UnaryOperation.UnaryOperator.PLUS;
        SQLite3UnaryOperation sQLite3UnaryOperation0 = new SQLite3UnaryOperation(sQLite3UnaryOperation_UnaryOperator0,
                sQLite3Constant_SQLite3IntConstant0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3UnaryOperation0);
        sQLite3Expression_Cast0.getImplicitCollateSequence();
    }

    @Test
    public void test126() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.TEXT;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Constant0);
        sQLite3Expression_Cast0.getImplicitCollateSequence();
    }

    @Test
    public void test127() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.BLOB;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Constant0);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Expression_Cast0.getAffinity();
        assertEquals(SQLite3Expression.TypeAffinity.BLOB, sQLite3Expression_TypeAffinity0);
    }

    @Test
    public void test128() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.NUMERIC;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Constant0);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Expression_Cast0.getAffinity();
        assertTrue(sQLite3Expression_TypeAffinity0.isNumeric());
    }

    @Test
    public void test129() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.REAL;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Constant0);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Expression_Cast0.getAffinity();
        assertEquals(SQLite3Expression.TypeAffinity.REAL, sQLite3Expression_TypeAffinity0);
    }

    @Test
    public void test130() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.TEXT;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Constant0);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Expression_Cast0.getAffinity();
        assertFalse(sQLite3Expression_TypeAffinity0.isNumeric());
    }

    @Test
    public void test131() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.BLOB;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Select0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Cast0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test132() throws Throwable {
        SQLite3Expression.Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Expression.Join.JoinType.CROSS;
        SQLite3Expression.Join sQLite3Expression_Join0 = null;
        try {
            sQLite3Expression_Join0 = new SQLite3Expression.Join((SQLite3Schema.SQLite3Table) null,
                    sQLite3Expression_Join_JoinType0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test133() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.TEXT;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.REAL;
        SQLite3Expression.ConstantTuple sQLite3Expression_ConstantTuple0 = SQLite3Expression.applyAffinities(
                sQLite3Expression_TypeAffinity0, sQLite3Expression_TypeAffinity1, sQLite3Constant0, sQLite3Constant0);
        assertNotNull(sQLite3Expression_ConstantTuple0);
    }

    @Test
    public void test134() throws Throwable {
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NUMERIC;
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity1 = SQLite3Expression.TypeAffinity.INTEGER;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.ConstantTuple sQLite3Expression_ConstantTuple0 = SQLite3Expression.applyAffinities(
                sQLite3Expression_TypeAffinity0, sQLite3Expression_TypeAffinity1, sQLite3Constant_SQLite3NullConstant0,
                sQLite3Constant_SQLite3NullConstant0);
        assertNotNull(sQLite3Expression_ConstantTuple0);
    }

    @Test
    public void test135() throws Throwable {
        SQLite3Expression.SQLite3OrderingTerm.Ordering sQLite3Expression_SQLite3OrderingTerm_Ordering0 = SQLite3Expression.SQLite3OrderingTerm.Ordering
                .getRandomValue();
        assertEquals(SQLite3Expression.SQLite3OrderingTerm.Ordering.ASC,
                sQLite3Expression_SQLite3OrderingTerm_Ordering0);
    }

    @Test
    public void test136() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NUMERIC;
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.NULL;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("IS_NOT",
                sQLite3DataType0, false, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0, false);
        List<SQLite3Schema.SQLite3Column> list0 = List.of(sQLite3Schema_SQLite3Column0, sQLite3Schema_SQLite3Column0,
                sQLite3Schema_SQLite3Column0, sQLite3Schema_SQLite3Column0);
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.MAIN;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("!zT>", list0,
                sQLite3Schema_SQLite3Table_TableKind0, false, false, false, false);
        SQLite3Expression.SQLite3TableReference sQLite3Expression_SQLite3TableReference0 = new SQLite3Expression.SQLite3TableReference(
                sQLite3Schema_SQLite3Table0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .applyOperand(sQLite3Constant0, sQLite3Expression_TypeAffinity0, sQLite3Constant0,
                        sQLite3Expression_TypeAffinity0, sQLite3Expression_SQLite3TableReference0, sQLite3Constant0,
                        false);
        assertNotNull(sQLite3Constant1);
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test137() throws Throwable {
        LinkedList<SQLite3Schema.SQLite3Column> linkedList0 = new LinkedList<SQLite3Schema.SQLite3Column>();
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.MAIN;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("XH", linkedList0,
                sQLite3Schema_SQLite3Table_TableKind0, false, false, false, false);
        SQLite3Expression.SQLite3TableReference sQLite3Expression_SQLite3TableReference0 = new SQLite3Expression.SQLite3TableReference(
                "XH", sQLite3Schema_SQLite3Table0);
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table1 = sQLite3Expression_SQLite3TableReference0.getTable();
        assertEquals(SQLite3Schema.SQLite3Table.TableKind.MAIN, sQLite3Schema_SQLite3Table1.getTableType());
    }

    @Test
    public void test138() throws Throwable {
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = SQLite3Schema.SQLite3Column
                .createDummy("VW`S4>3>y42r%>w");
        List<SQLite3Schema.SQLite3Column> list0 = List.of(sQLite3Schema_SQLite3Column0, sQLite3Schema_SQLite3Column0,
                sQLite3Schema_SQLite3Column0, sQLite3Schema_SQLite3Column0);
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.MAIN;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("VW`S4>3>y42r%>w",
                list0, sQLite3Schema_SQLite3Table_TableKind0, false, true, true, true);
        SQLite3Expression.SQLite3TableReference sQLite3Expression_SQLite3TableReference0 = new SQLite3Expression.SQLite3TableReference(
                sQLite3Schema_SQLite3Table0);
        String string0 = sQLite3Expression_SQLite3TableReference0.getIndexedBy();
        assertNull(string0);
    }

    @Test
    public void test139() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3Text sQLite3Expression_SQLite3Text0 = new SQLite3Expression.SQLite3Text(
                "KBg598Vi+gkfr", sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression.SQLite3OrderingTerm.Ordering sQLite3Expression_SQLite3OrderingTerm_Ordering0 = SQLite3Expression.SQLite3OrderingTerm.Ordering.ASC;
        SQLite3Expression.SQLite3OrderingTerm sQLite3Expression_SQLite3OrderingTerm0 = new SQLite3Expression.SQLite3OrderingTerm(
                sQLite3Expression_SQLite3Text0, sQLite3Expression_SQLite3OrderingTerm_Ordering0);
        SQLite3Expression.SQLite3Text sQLite3Expression_SQLite3Text1 = (SQLite3Expression.SQLite3Text) sQLite3Expression_SQLite3OrderingTerm0
                .getExpression();
        assertEquals("KBg598Vi+gkfr", sQLite3Expression_SQLite3Text1.getText());
    }

    @Test
    public void test140() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3Text sQLite3Expression_SQLite3Text0 = new SQLite3Expression.SQLite3Text(
                "KBg598Vi+gkfr", sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression.SQLite3OrderingTerm.Ordering sQLite3Expression_SQLite3OrderingTerm_Ordering0 = SQLite3Expression.SQLite3OrderingTerm.Ordering.ASC;
        SQLite3Expression.SQLite3OrderingTerm sQLite3Expression_SQLite3OrderingTerm0 = new SQLite3Expression.SQLite3OrderingTerm(
                sQLite3Expression_SQLite3Text0, sQLite3Expression_SQLite3OrderingTerm_Ordering0);
        sQLite3Expression_SQLite3OrderingTerm0.getExplicitCollateSequence();
    }

    @Test
    public void test141() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3Text sQLite3Expression_SQLite3Text0 = new SQLite3Expression.SQLite3Text(
                "KBg598Vi+gkfr", sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression.SQLite3OrderingTerm.Ordering sQLite3Expression_SQLite3OrderingTerm_Ordering0 = SQLite3Expression.SQLite3OrderingTerm.Ordering.DESC;
        SQLite3Expression.SQLite3OrderingTerm sQLite3Expression_SQLite3OrderingTerm0 = new SQLite3Expression.SQLite3OrderingTerm(
                sQLite3Expression_SQLite3Text0, sQLite3Expression_SQLite3OrderingTerm_Ordering0);
        SQLite3Expression.SQLite3OrderingTerm.Ordering sQLite3Expression_SQLite3OrderingTerm_Ordering1 = sQLite3Expression_SQLite3OrderingTerm0
                .getOrdering();
        assertSame(sQLite3Expression_SQLite3OrderingTerm_Ordering0, sQLite3Expression_SQLite3OrderingTerm_Ordering1);
    }

    @Test
    public void test142() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3Expression.MatchOperation(
                sQLite3Constant0, sQLite3Constant0);
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Constant0, true, sQLite3Expression_MatchOperation0, sQLite3Expression_MatchOperation0);
        sQLite3Expression_BetweenOperation0.getExplicitCollateSequence();
        assertTrue(sQLite3Expression_BetweenOperation0.isNegated());
    }

    @Test
    public void test143() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3Expression.MatchOperation(
                sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_MatchOperation0.getRight();
        assertSame(sQLite3Constant_SQLite3NullConstant0, sQLite3Expression0);
    }

    @Test
    public void test144() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3Expression.MatchOperation(
                sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant1 = (SQLite3Constant.SQLite3NullConstant) sQLite3Expression_MatchOperation0
                .getLeft();
        assertEquals(SQLite3DataType.NULL, sQLite3Constant_SQLite3NullConstant1.getDataType());
    }

    @Test
    public void test145() throws Throwable {
        SQLite3Expression.SQLite3Distinct sQLite3Expression_SQLite3Distinct0 = new SQLite3Expression.SQLite3Distinct(
                (SQLite3Expression) null);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_SQLite3Distinct0.getExpression();
        assertNull(sQLite3Expression0);
    }

    @Test
    public void test146() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                sQLite3Constant0, "p/w&],U&?K*[BbtFe", sQLite3Constant0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Expression_SQLite3PostfixText0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence1 = sQLite3Expression_CollateOperation0
                .getCollate();
        assertSame(sQLite3Schema_SQLite3Column_SQLite3CollateSequence0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence1);
    }

    @Test
    public void test147() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS_NOT;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Constant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Expression_CollateOperation0, sQLite3Constant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(0L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test148() throws Throwable {
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Constant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_CollateOperation0.getExpression();
        assertSame(sQLite3Expression0, sQLite3Constant0);
    }

    @Test
    public void test149() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.MULTIPLY;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant0, sQLite3Constant0);
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test150() throws Throwable {
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.TEXT;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type1 = sQLite3Expression_TypeLiteral0
                .getType();
        assertSame(sQLite3Expression_TypeLiteral_Type1, sQLite3Expression_TypeLiteral_Type0);
    }

    @Test
    public void test151() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3Exist sQLite3Expression_SQLite3Exist0 = new SQLite3Expression.SQLite3Exist(
                sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_SQLite3Exist0.getExpression();
        assertSame(sQLite3Constant_SQLite3NullConstant0, sQLite3Expression0);
    }

    @Test
    public void test152() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.REMAINDER;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = SQLite3Expression.Sqlite3BinaryOperation
                .create(sQLite3Constant0, sQLite3Constant0, sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Expression_Sqlite3BinaryOperation0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test153() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS_NOT;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Expression_BinaryComparisonOperation0;
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.BINARY;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("", sQLite3DataType0,
                true, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0, true);
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3Expression.SQLite3ColumnName(
                sQLite3Schema_SQLite3Column0, sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.DIVIDE;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = new SQLite3Expression.Sqlite3BinaryOperation(
                sQLite3Expression_SQLite3ColumnName0, sQLite3ExpressionArray0[1],
                sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test154() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.MINUS;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = SQLite3Expression.Sqlite3BinaryOperation
                .create(sQLite3Constant0, sQLite3Constant0, sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Expression_Sqlite3BinaryOperation0, sQLite3Constant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test155() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                1L);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.PLUS;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0
                .apply(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0);
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test156() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "NOT NULL");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Expression.SQLite3Text sQLite3Expression_SQLite3Text0 = new SQLite3Expression.SQLite3Text("",
                sQLite3Constant0);
        sQLite3Expression_SQLite3Text0.getExplicitCollateSequence();
    }

    @Test
    public void test157() throws Throwable {
        SQLite3Expression.SQLite3Text sQLite3Expression_SQLite3Text0 = new SQLite3Expression.SQLite3Text("",
                (SQLite3Constant) null);
        String string0 = sQLite3Expression_SQLite3Text0.getText();
        assertEquals("", string0);
    }

    @Test
    public void test158() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                0.0);
        SQLite3Expression.SQLite3Text sQLite3Expression_SQLite3Text0 = new SQLite3Expression.SQLite3Text("UTF-16le",
                sQLite3Constant_SQLite3RealConstant0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3Text0.getExpectedValue();
        assertFalse(sQLite3Constant0.isNull());
    }

    @Test
    public void test159() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.TEXT;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Constant0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_Cast0.getExpectedValue();
        assertEquals(SQLite3DataType.TEXT, sQLite3Constant1.getDataType());
    }

    @Test
    public void test160() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.INTEGER;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_TypeLiteral_Type0.apply(sQLite3Constant0);
        assertSame(sQLite3Constant0, sQLite3Constant1);
    }

    @Test
    public void test161() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.REAL;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_TypeLiteral_Type0.apply(sQLite3Constant0);
        assertEquals(SQLite3DataType.REAL, sQLite3Constant1.getDataType());
    }

    @Test
    public void test162() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.BLOB;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_TypeLiteral_Type0.apply(sQLite3Constant0);
        assertFalse(sQLite3Constant1.isNull());
    }

    @Test
    public void test163() throws Throwable {
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.NUMERIC;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_TypeLiteral_Type0
                .apply(sQLite3Constant_SQLite3NullConstant0);
        assertTrue(sQLite3Constant0.isNull());
    }

    @Test
    public void test164() throws Throwable {
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_TRUE;
        String string0 = sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0.toString();
        assertEquals("IS TRUE", string0);
    }

    @Test
    public void test165() throws Throwable {
        SQLite3Expression.Subquery sQLite3Expression_Subquery0 = new SQLite3Expression.Subquery("(INT) 1");
        String string0 = sQLite3Expression_Subquery0.getQuery();
        assertEquals("(INT) 1", string0);
    }

    @Test
    public void test166() throws Throwable {
        SQLite3Expression sQLite3Expression0 = SQLite3Expression.Subquery.create("");
        assertNull(sQLite3Expression0.getExplicitCollateSequence());
    }

    @Test
    public void test167() throws Throwable {
        Randomly randomly0 = new Randomly();
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        SQLite3Expression.Subquery sQLite3Expression_Subquery0 = new SQLite3Expression.Subquery("");
        SQLite3Expression.TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3Expression.TypeAffinity.NONE;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.SMALLER_EQUALS;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .applyOperand(sQLite3Constant_SQLite3NullConstant0, sQLite3Expression_TypeAffinity0, sQLite3Constant0,
                        sQLite3Expression_TypeAffinity0, sQLite3Expression_Subquery0, sQLite3Constant0, false);
        assertNotSame(sQLite3Constant1, sQLite3Constant_SQLite3NullConstant0);
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test168() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-1847L));
        SQLite3Expression.MatchOperation sQLite3Expression_MatchOperation0 = new SQLite3Expression.MatchOperation(
                sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.ARITHMETIC_AND;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = SQLite3Expression.Sqlite3BinaryOperation
                .create(sQLite3Constant_SQLite3IntConstant0, sQLite3Expression_MatchOperation0,
                        sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Expression_Sqlite3BinaryOperation0, sQLite3Constant_SQLite3IntConstant0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_InOperation0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test169() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "X-sTF4aU}i(");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Constant0, false, sQLite3Constant_SQLite3TextConstant0, sQLite3Constant0);
        sQLite3Expression_BetweenOperation0.getLeft();
        assertFalse(sQLite3Expression_BetweenOperation0.isNegated());
    }

    @Test
    public void test170() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant((-496L), false);
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Constant0, false, sQLite3Constant0, sQLite3Constant0);
        boolean boolean0 = sQLite3Expression_BetweenOperation0.isNegated();
        assertFalse(boolean0);
    }

    @Test
    public void test171() throws Throwable {
        byte[] byteArray0 = new byte[0];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3BinaryConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3BinaryConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                sQLite3Constant_SQLite3TextConstant0, "sqlancer.tidb.TiDBOptions",
                sQLite3Constant_SQLite3TextConstant0);
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Expression_SQLite3PostfixText0, false, sQLite3Constant_SQLite3TextConstant0, sQLite3Constant0);
        sQLite3Expression_BetweenOperation0.getExpression();
        assertFalse(sQLite3Expression_BetweenOperation0.isNegated());
    }

    @Test
    public void test172() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant(330.78105);
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Constant0, false, sQLite3Constant0, sQLite3Constant0);
        sQLite3Expression_BetweenOperation0.getRight();
        assertFalse(sQLite3Expression_BetweenOperation0.isNegated());
    }

    @Test
    public void test173() throws Throwable {
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_FALSE;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0, sQLite3Constant0);
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator1 = sQLite3Expression_SQLite3PostfixUnaryOperation0
                .getOperation();
        assertSame(sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0,
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator1);
    }

    @Test
    public void test174() throws Throwable {
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOTNULL;
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-984L));
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0,
                sQLite3Constant_SQLite3IntConstant0);
        String string0 = sQLite3Expression_SQLite3PostfixUnaryOperation0.getOperatorRepresentation();
        assertEquals("NOTNULL", string0);
    }

    @Test
    public void test175() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "\"]+,w&8,");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.OR;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = new SQLite3Expression.Sqlite3BinaryOperation(
                sQLite3Constant0, sQLite3Constant0, sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator1 = sQLite3Expression_Sqlite3BinaryOperation0
                .getOperator();
        assertSame(sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator1,
                sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
    }

    @Test
    public void test176() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.DIVIDE;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = new SQLite3Expression.Sqlite3BinaryOperation(
                sQLite3Select0, sQLite3Select0, sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        String string0 = sQLite3Expression_Sqlite3BinaryOperation0.getOperatorRepresentation();
        assertEquals("/", string0);
    }

    @Test
    public void test177() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "\"]+,w&8,");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.castToBoolean();
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                "sqlancer.sqlite3.ast.SQLite3Expression$Cast", sQLite3Constant0);
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.DIVIDE;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = SQLite3Expression.Sqlite3BinaryOperation
                .create(sQLite3Expression_SQLite3PostfixText0, sQLite3Constant0,
                        sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = (SQLite3Constant.SQLite3IntConstant) sQLite3Expression_Sqlite3BinaryOperation0
                .getRight();
        assertFalse(sQLite3Constant_SQLite3IntConstant0.isHex());
    }

    @Test
    public void test178() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-9223372036854775808L));
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.SHIFT_RIGHT;
        SQLite3Expression.Sqlite3BinaryOperation sQLite3Expression_Sqlite3BinaryOperation0 = SQLite3Expression.Sqlite3BinaryOperation
                .create(sQLite3Constant_SQLite3IntConstant0, sQLite3Constant_SQLite3IntConstant0,
                        sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0);
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Expression_Sqlite3BinaryOperation0, sQLite3Constant_SQLite3IntConstant0);
        // Undeclared exception!
        try {
            sQLite3Expression_InOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
        }
    }

    @Test
    public void test179() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0 = SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.OR;
        String string0 = sQLite3Expression_Sqlite3BinaryOperation_BinaryOperator0.getTextRepresentation();
        assertEquals("OR", string0);
    }

    @Test
    public void test180() throws Throwable {
        SQLite3Expression.Sqlite3BinaryOperation.BinaryOperator.getRandomOperator();
    }

    @Test
    public void test181() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.TEXT;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Constant0);
        sQLite3Expression_Cast0.getExplicitCollateSequence();
    }

    @Test
    public void test182() throws Throwable {
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.BLOB;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral1 = sQLite3Expression_Cast0.getType();
        assertEquals(SQLite3Expression.TypeLiteral.Type.BLOB, sQLite3Expression_TypeLiteral1.getType());
    }

    @Test
    public void test183() throws Throwable {
        SQLite3Expression.TypeLiteral.Type sQLite3Expression_TypeLiteral_Type0 = SQLite3Expression.TypeLiteral.Type.INTEGER;
        SQLite3Expression.TypeLiteral sQLite3Expression_TypeLiteral0 = new SQLite3Expression.TypeLiteral(
                sQLite3Expression_TypeLiteral_Type0);
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-1683.1477));
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Constant_SQLite3RealConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression.SQLite3Distinct sQLite3Expression_SQLite3Distinct0 = new SQLite3Expression.SQLite3Distinct(
                sQLite3Expression_CollateOperation0);
        SQLite3Expression.Cast sQLite3Expression_Cast0 = new SQLite3Expression.Cast(sQLite3Expression_TypeLiteral0,
                sQLite3Expression_SQLite3Distinct0);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_Cast0.getExpression();
        assertSame(sQLite3Expression_SQLite3Distinct0, sQLite3Expression0);
    }

    @Test
    public void test184() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[9];
        SQLite3Expression.Function sQLite3Expression_Function0 = new SQLite3Expression.Function("",
                sQLite3ExpressionArray0);
        String string0 = sQLite3Expression_Function0.getName();
        assertEquals("", string0);
    }

    @Test
    public void test185() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Expression.Function sQLite3Expression_Function0 = new SQLite3Expression.Function("",
                sQLite3ExpressionArray0);
        SQLite3Expression[] sQLite3ExpressionArray1 = sQLite3Expression_Function0.getArguments();
        assertNotSame(sQLite3ExpressionArray0, sQLite3ExpressionArray1);
    }

    @Test
    public void test186() throws Throwable {
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = SQLite3Expression.SQLite3ColumnName
                .createDummy("[E>");
        LinkedList<SQLite3Expression> linkedList0 = new LinkedList<SQLite3Expression>();
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Expression_SQLite3ColumnName0, linkedList0);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_InOperation0.getLeft();
        assertSame(sQLite3Expression0, sQLite3Expression_SQLite3ColumnName0);
    }

    @Test
    public void test187() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_InOperation0.getRightSelect();
        assertNull(sQLite3Expression0.getExplicitCollateSequence());
    }

    @Test
    public void test188() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Constant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(1L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test189() throws Throwable {
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.IS_FALSE;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant("7");
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0, sQLite3Constant0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.NONE;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("", sQLite3DataType0,
                true, true, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3Expression.SQLite3ColumnName(
                sQLite3Schema_SQLite3Column0, sQLite3Constant0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS_NOT;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Expression_SQLite3PostfixUnaryOperation0, sQLite3Expression_SQLite3ColumnName0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(1L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test190() throws Throwable {
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = SQLite3Expression.SQLite3ColumnName
                .createDummy("`~&h_{UpGBR%Jy{Zj;M");
        sQLite3Expression_SQLite3ColumnName0.getExplicitCollateSequence();
    }

    @Test
    public void test191() throws Throwable {
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = SQLite3Expression.SQLite3ColumnName
                .createDummy("[E>");
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = sQLite3Expression_SQLite3ColumnName0.getColumn();
        assertFalse(sQLite3Schema_SQLite3Column0.isPrimaryKey());
    }

    @Test
    public void test192() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = new SQLite3Expression.BinaryComparisonOperation(
                sQLite3Constant_SQLite3NullConstant0, sQLite3Constant_SQLite3NullConstant0,
                sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_BinaryComparisonOperation0.getLeft();
        assertSame(sQLite3Expression0, sQLite3Constant_SQLite3NullConstant0);
    }

    @Test
    public void test193() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = SQLite3Expression.SQLite3ColumnName
                .createDummy("==");
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = new SQLite3Expression.BinaryComparisonOperation(
                sQLite3Expression_SQLite3ColumnName0, sQLite3Constant0,
                sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = (SQLite3Constant.SQLite3IntConstant) sQLite3Expression_BinaryComparisonOperation0
                .getRight();
        assertFalse(sQLite3Constant_SQLite3IntConstant0.isHex());
    }

    @Test
    public void test194() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS_NOT;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = new SQLite3Expression.BinaryComparisonOperation(
                sQLite3Constant_SQLite3TextConstant0, sQLite3Constant_SQLite3NullConstant0,
                sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator1 = sQLite3Expression_BinaryComparisonOperation0
                .getOperator();
        assertSame(sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator1,
                sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
    }

    @Test
    public void test195() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "$9k;f'8l IbZ*lMk~");
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.GLOB;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant_SQLite3TextConstant0, sQLite3Constant_SQLite3TextConstant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(1L, sQLite3Constant0.asInt());
        assertNotNull(sQLite3Constant0);
    }

    @Test
    public void test196() throws Throwable {
        SQLite3Expression.Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Expression.Join.JoinType.NATURAL;
        SQLite3Expression.Join sQLite3Expression_Join0 = new SQLite3Expression.Join((SQLite3Schema.SQLite3Table) null,
                sQLite3Expression_Join_JoinType0);
        sQLite3Expression_Join0.setOnClause((SQLite3Expression) null);
        assertEquals(SQLite3Expression.Join.JoinType.NATURAL, sQLite3Expression_Join0.getType());
    }

    @Test
    public void test197() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                9223372036854775807L);
        SQLite3Expression.Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Expression.Join.JoinType.FULL;
        SQLite3Expression.Join sQLite3Expression_Join0 = new SQLite3Expression.Join((SQLite3Schema.SQLite3Table) null,
                sQLite3Constant_SQLite3IntConstant0, sQLite3Expression_Join_JoinType0);
        sQLite3Expression_Join0.getExplicitCollateSequence();
    }

    @Test
    public void test198() throws Throwable {
        SQLite3Expression.Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Expression.Join.JoinType.NATURAL;
        SQLite3Expression.Join sQLite3Expression_Join0 = new SQLite3Expression.Join((SQLite3Schema.SQLite3Table) null,
                sQLite3Expression_Join_JoinType0);
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = sQLite3Expression_Join0.getTable();
        assertNull(sQLite3Schema_SQLite3Table0);
    }

    @Test
    public void test199() throws Throwable {
        SQLite3Schema.SQLite3Column[] sQLite3Schema_SQLite3ColumnArray0 = new SQLite3Schema.SQLite3Column[3];
        List<SQLite3Schema.SQLite3Column> list0 = Randomly.subset(sQLite3Schema_SQLite3ColumnArray0);
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.TEMP;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table((String) null, list0,
                sQLite3Schema_SQLite3Table_TableKind0, true, false, false, false);
        SQLite3Expression.Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Expression.Join.JoinType.NATURAL;
        SQLite3Expression.Join sQLite3Expression_Join0 = new SQLite3Expression.Join(sQLite3Schema_SQLite3Table0,
                sQLite3Expression_Join_JoinType0);
        sQLite3Expression_Join0.setType(sQLite3Expression_Join_JoinType0);
        assertNull(sQLite3Expression_Join0.getExplicitCollateSequence());
    }

    @Test
    public void test200() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                9223372036854775807L);
        SQLite3Expression.Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Expression.Join.JoinType.FULL;
        SQLite3Expression.Join sQLite3Expression_Join0 = new SQLite3Expression.Join((SQLite3Schema.SQLite3Table) null,
                sQLite3Constant_SQLite3IntConstant0, sQLite3Expression_Join_JoinType0);
        SQLite3Expression.Join sQLite3Expression_Join1 = new SQLite3Expression.Join(sQLite3Expression_Join0);
        assertEquals(SQLite3Expression.Join.JoinType.FULL, sQLite3Expression_Join1.getType());
    }

    @Test
    public void test201() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Expression.InOperation sQLite3Expression_InOperation0 = new SQLite3Expression.InOperation(
                sQLite3Constant0, sQLite3Constant0);
        SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm.SQLite3WindowFunctionFrameSpecTermKind sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm_SQLite3WindowFunctionFrameSpecTermKind0 = SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm.SQLite3WindowFunctionFrameSpecTermKind.UNBOUNDED_PRECEDING;
        SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm0 = new SQLite3WindowFunctionExpression.SQLite3WindowFunctionFrameSpecTerm(
                sQLite3Expression_InOperation0,
                sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm_SQLite3WindowFunctionFrameSpecTermKind0);
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.INT;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("PQS",
                sQLite3DataType0, true, false, (SQLite3Schema.SQLite3Column.SQLite3CollateSequence) null);
        List<SQLite3Schema.SQLite3Column> list0 = List.of(sQLite3Schema_SQLite3Column0, sQLite3Schema_SQLite3Column0,
                sQLite3Schema_SQLite3Column0, sQLite3Schema_SQLite3Column0, sQLite3Schema_SQLite3Column0,
                sQLite3Schema_SQLite3Column0, sQLite3Schema_SQLite3Column0, sQLite3Schema_SQLite3Column0);
        SQLite3Schema.SQLite3Table.TableKind sQLite3Schema_SQLite3Table_TableKind0 = SQLite3Schema.SQLite3Table.TableKind.TEMP;
        SQLite3Schema.SQLite3Table sQLite3Schema_SQLite3Table0 = new SQLite3Schema.SQLite3Table("PQS", list0,
                sQLite3Schema_SQLite3Table_TableKind0, false, false, false, true);
        SQLite3Expression.Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Expression.Join.JoinType.RIGHT;
        SQLite3Expression.Join sQLite3Expression_Join0 = new SQLite3Expression.Join(sQLite3Schema_SQLite3Table0,
                sQLite3WindowFunctionExpression_SQLite3WindowFunctionFrameSpecTerm0, sQLite3Expression_Join_JoinType0);
        SQLite3Expression.Join.JoinType sQLite3Expression_Join_JoinType1 = sQLite3Expression_Join0.getType();
        assertEquals(SQLite3Expression.Join.JoinType.RIGHT, sQLite3Expression_Join_JoinType1);
    }

    @Test
    public void test202() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "gg6GX!wXrS");
        SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0 = SQLite3Expression.SQLite3PostfixUnaryOperation.PostfixUnaryOperator.NOT_NULL;
        SQLite3Expression.SQLite3PostfixUnaryOperation sQLite3Expression_SQLite3PostfixUnaryOperation0 = new SQLite3Expression.SQLite3PostfixUnaryOperation(
                sQLite3Expression_SQLite3PostfixUnaryOperation_PostfixUnaryOperator0,
                sQLite3Constant_SQLite3TextConstant0);
        SQLite3Expression.Join.JoinType sQLite3Expression_Join_JoinType0 = SQLite3Expression.Join.JoinType.OUTER;
        SQLite3Expression.Join sQLite3Expression_Join0 = new SQLite3Expression.Join((SQLite3Schema.SQLite3Table) null,
                sQLite3Expression_SQLite3PostfixUnaryOperation0, sQLite3Expression_Join_JoinType0);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_Join0.getOnClause();
        assertSame(sQLite3Expression0, sQLite3Expression_SQLite3PostfixUnaryOperation0);
    }

    @Test
    public void test203() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "KBg598Vi+gkfr");
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                "KBg598Vi+gkfr", sQLite3Constant_SQLite3TextConstant0);
        boolean boolean0 = sQLite3Expression_SQLite3PostfixText0.omitBracketsWhenPrinting();
        assertTrue(boolean0);
    }

    @Test
    public void test204() throws Throwable {
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                "", (SQLite3Constant) null);
        SQLite3Expression sQLite3Expression0 = sQLite3Expression_SQLite3PostfixText0.getExpression();
        assertNull(sQLite3Expression0);
    }

    @Test
    public void test205() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "Q{qPpte+XmSLt");
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                "Q{qPpte+XmSLt", sQLite3Constant_SQLite3TextConstant0);
        UnaryOperation.OperatorKind unaryOperation_OperatorKind0 = sQLite3Expression_SQLite3PostfixText0
                .getOperatorKind();
        assertEquals(UnaryOperation.OperatorKind.POSTFIX, unaryOperation_OperatorKind0);
    }

    @Test
    public void test206() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Expression.SQLite3PostfixText sQLite3Expression_SQLite3PostfixText0 = new SQLite3Expression.SQLite3PostfixText(
                (SQLite3Expression) null, ",RAjx{f<0D", sQLite3Constant_SQLite3NullConstant0);
        String string0 = sQLite3Expression_SQLite3PostfixText0.getOperatorRepresentation();
        assertEquals(",RAjx{f<0D", string0);
    }

    @Test
    public void test207() throws Throwable {
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.getRandomOperator();
    }

    @Test
    public void test208() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Expression.BetweenOperation sQLite3Expression_BetweenOperation0 = new SQLite3Expression.BetweenOperation(
                sQLite3Constant0, true, sQLite3Constant0, sQLite3Constant0);
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.IS_NOT;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Expression_BetweenOperation0, sQLite3Constant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_BinaryComparisonOperation0.getExpectedValue();
        assertEquals(1L, sQLite3Constant1.asInt());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test209() throws Throwable {
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.getRandomRowValueOperator();
    }

    @Test
    public void test210() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3Expression.BinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        SQLite3Expression.BinaryComparisonOperation sQLite3Expression_BinaryComparisonOperation0 = SQLite3Expression.BinaryComparisonOperation
                .create(sQLite3Constant0, sQLite3Constant0,
                        sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0);
        String string0 = sQLite3Expression_BinaryComparisonOperation0.getOperatorRepresentation();
        assertEquals("LIKE", string0);
    }
}
