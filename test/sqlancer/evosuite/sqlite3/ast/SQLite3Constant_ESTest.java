/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:51:38 GMT 2025
 */

package sqlancer.evosuite.sqlite3.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import sqlancer.Randomly;
import sqlancer.sqlite3.ast.SQLite3Constant;
import sqlancer.sqlite3.schema.SQLite3DataType;
import sqlancer.sqlite3.schema.SQLite3Schema;

public class SQLite3Constant_ESTest {

    private void verifyException(String s, Exception e) {
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test000() throws Throwable { byte[] byteArray0 = new byte[6];
     * SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new
     * SQLite3Constant.SQLite3BinaryConstant( byteArray0); Supplier<String> supplier0 = (Supplier<String>)
     * mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0);
     * SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
     * SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 =
     * SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM; SQLite3Constant sQLite3Constant1 =
     * sQLite3Constant_SQLite3BinaryConstant0.applyLess(sQLite3Constant0,
     * sQLite3Schema_SQLite3Column_SQLite3CollateSequence0); assertEquals(0L, sQLite3Constant1.asInt());
     * assertFalse(sQLite3Constant1.isHex()); }
     */

    @Test
    public void test001() throws Throwable {
        byte[] byteArray0 = new byte[6];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBinaryConstant(byteArray0);
        byte[] byteArray1 = new byte[6];
        byteArray1[0] = (byte) 97;
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray1);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3BinaryConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test002() throws Throwable {
        Randomly randomly0 = new Randomly(0L);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        byte[] byteArray0 = new byte[3];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3BinaryConstant0.applyNumericAffinity();
        SQLite3Constant sQLite3Constant2 = sQLite3Constant0.applyEquals(sQLite3Constant1);
        assertFalse(sQLite3Constant2.isHex());
        assertEquals(0L, sQLite3Constant2.asInt());
    }

    @Test
    public void test003() throws Throwable {
        byte[] byteArray0 = new byte[3];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        boolean boolean0 = sQLite3Constant_SQLite3BinaryConstant0.isPrintableChar((byte) 32);
        assertTrue(boolean0);
    }

    @Test
    public void test004() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant("INT");
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                477L);
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3IntConstant0.applyTextAffinity();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant2 = sQLite3Constant0.applyLess(sQLite3Constant1,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals("477", sQLite3Constant1.asString());
        assertFalse(sQLite3Constant1.isNull());
        assertFalse(sQLite3Constant2.isHex());
        assertEquals(0L, sQLite3Constant2.asInt());
    }

    @Test
    public void test005() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "Rm~yl2*H#(!}2DK`p");
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant1 = new SQLite3Constant.SQLite3TextConstant(
                "");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0
                .applyLess(sQLite3Constant_SQLite3TextConstant1, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant_SQLite3TextConstant1.isNull());
        assertFalse(sQLite3Constant0.isHex());
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test006() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant("");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "3gM6Z\"");
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3TextConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant_SQLite3TextConstant0.isNull());
    }

    @Test
    public void test007() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant(",");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertFalse(sQLite3Constant0.isNull());
    }

    @Test
    public void test008() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant.trimLeading("\n");
        assertEquals("\n", string0);
    }

    @Test
    public void test009() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant
                .toUpper("sqlancer.sqlite3.ast.SQLite3Constant$SQLite3NullConstant");
        assertEquals("SQLANCER.SQLITE3.AST.SQLITE3CONSTANT$SQLITE3NULLCONSTANT", string0);
    }

    @Test
    public void test010() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                " 3jS;(C,NX$].}5={");
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant1 = new SQLite3Constant.SQLite3TextConstant(
                "2`Z]I!fm");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant1.applyTextAffinity();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3TextConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertFalse(sQLite3Constant0.isNull());
    }

    @Test
    public void test011() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "p1j");
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant1 = new SQLite3Constant.SQLite3TextConstant(
                "vFNiSW$aWYGEA`x7N.");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3TextConstant1,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        // // Unstable assertion: assertFalse(sQLite3Constant_SQLite3TextConstant1.isNull());
        // // Unstable assertion: assertEquals(1L, sQLite3Constant0.asInt());
        // // Unstable assertion: assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test012() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                2297.038192);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3RealConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant1.isNull());
    }

    @Test
    public void test013() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.NEGATIVE_INFINITY);
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant1 = new SQLite3Constant.SQLite3RealConstant(
                0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3RealConstant1
                .applyLess(sQLite3Constant_SQLite3RealConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
        assertFalse(sQLite3Constant_SQLite3RealConstant1.isNull());
    }

    @Test
    public void test014() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                0.0);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant("0");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3RealConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant sQLite3Constant2 = sQLite3Constant_SQLite3RealConstant0.applyEquals(sQLite3Constant1);
        assertFalse(sQLite3Constant2.isHex());
        assertEquals(0L, sQLite3Constant2.asInt());
        assertEquals(1L, sQLite3Constant1.asInt());
        assertEquals(0.0, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
        assertFalse(sQLite3Constant0.isNull());
    }

    @Test
    public void test015() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.NEGATIVE_INFINITY);
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant1 = new SQLite3Constant.SQLite3RealConstant(
                0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3RealConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3RealConstant1,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0.0, sQLite3Constant_SQLite3RealConstant1.asDouble(), 0.01);
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test016() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                0.0);
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3IntConstant0
                .applyLess(sQLite3Constant_SQLite3RealConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant0.asInt());
        assertEquals(0.0, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
        assertFalse(sQLite3Constant_SQLite3RealConstant0.isNull());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test017() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                1938L);
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                1938L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "A-");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3IntConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertNotSame(sQLite3Constant1, sQLite3Constant0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(0L, sQLite3Constant0.asInt());
        assertEquals(1938L, sQLite3Constant_SQLite3IntConstant0.asInt());
        assertEquals(1938.0, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
    }

    @Test
    public void test018() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-9223372036854775808L));
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0
                .applyEquals((SQLite3Constant) sQLite3Constant_SQLite3IntConstant0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(1L, sQLite3Constant0.asInt());
    }

    @Test
    public void test019() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (byte) 32);
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-3836L));
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3IntConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals((-3836L), sQLite3Constant_SQLite3IntConstant0.asInt());
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
        assertEquals(32.0, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
    }

    @Test
    public void test020() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant.trimTrailing("[nVoAvtX'*");
        assertEquals("[nVoAvtX'*", string0);
    }

    @Test
    public void test021() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "*:");
        boolean boolean0 = sQLite3Constant_SQLite3TextConstant0.isNull();
        assertFalse(boolean0);
    }

    @Test
    public void test022() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        Object object0 = sQLite3Constant_SQLite3TextConstant0.getValue();
        assertEquals("", object0);
    }

    @Test
    public void test023() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "1*aoo_`:K");
        String string0 = sQLite3Constant_SQLite3TextConstant0.getStringRepresentation();
        assertEquals("1*aoo_`:K", string0);
    }

    @Test
    public void test024() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "Rm~yl2*H#(!}2DK`p");
        SQLite3DataType sQLite3DataType0 = sQLite3Constant_SQLite3TextConstant0.getDataType();
        assertEquals(SQLite3DataType.TEXT, sQLite3DataType0);
    }

    @Test
    public void test025() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                1007.167346521417);
        boolean boolean0 = sQLite3Constant_SQLite3RealConstant0.isNull();
        assertFalse(boolean0);
        assertEquals(1007.167346521417, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
    }

    @Test
    public void test026() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-1L));
        Object object0 = sQLite3Constant_SQLite3RealConstant0.getValue();
        assertEquals((-1.0), object0);
    }

    @Test
    public void test027() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                2389.2050105);
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3RealConstant0.castToBoolean();
        assertEquals(2389.2050105, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test028() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                3144.88773081874);
        double double0 = sQLite3Constant_SQLite3RealConstant0.asDouble();
        assertEquals(3144.88773081874, double0, 0.01);
    }

    @Test
    public void test029() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        Object object0 = sQLite3Constant_SQLite3NullConstant0.getValue();
        assertNull(object0);
    }

    @Test
    public void test030() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3DataType sQLite3DataType0 = sQLite3Constant_SQLite3NullConstant0.getDataType();
        assertEquals(SQLite3DataType.NULL, sQLite3DataType0);
    }

    @Test
    public void test031() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3NullConstant0.castToBoolean();
        assertNull(sQLite3Constant0.getExplicitCollateSequence());
    }

    @Test
    public void test032() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3NullConstant0.applyTextAffinity();
        assertSame(sQLite3Constant0, sQLite3Constant_SQLite3NullConstant0);
    }

    @Test
    public void test033() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3NullConstant0.applyNumericAffinity();
        assertSame(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant0);
    }

    @Test
    public void test034() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                0L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        sQLite3Constant_SQLite3NullConstant0.applyLess(sQLite3Constant_SQLite3IntConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant_SQLite3IntConstant0.isHex());
    }

    @Test
    public void test035() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3NullConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3NullConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertNull(sQLite3Constant0.getExplicitCollateSequence());
    }

    @Test
    public void test036() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                0L, false);
        boolean boolean0 = sQLite3Constant_SQLite3IntConstant0.isNull();
        assertFalse(sQLite3Constant_SQLite3IntConstant0.isHex());
        assertFalse(boolean0);
    }

    @Test
    public void test037() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        boolean boolean0 = sQLite3Constant0.isHex();
        assertFalse(boolean0);
        assertEquals(1L, sQLite3Constant0.asInt());
    }

    @Test
    public void test038() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "Rm~yl2*H#(!}2DK`p");
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = (SQLite3Constant.SQLite3IntConstant) sQLite3Constant_SQLite3TextConstant0
                .castToBoolean();
        String string0 = sQLite3Constant_SQLite3IntConstant0.getStringRepresentation();
        assertEquals("0", string0);
        assertFalse(sQLite3Constant_SQLite3IntConstant0.isHex());
    }

    @Test
    public void test039() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                173L);
        sQLite3Constant_SQLite3IntConstant0.getDataType();
        assertFalse(sQLite3Constant_SQLite3IntConstant0.isHex());
        assertEquals(173L, sQLite3Constant_SQLite3IntConstant0.asInt());
    }

    @Test
    public void test040() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                0L);
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3IntConstant0.applyNumericAffinity();
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test041() throws Throwable {
        byte[] byteArray0 = new byte[2];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        boolean boolean0 = sQLite3Constant_SQLite3BinaryConstant0.isNull();
        assertFalse(boolean0);
    }

    @Test
    public void test042() throws Throwable {
        byte[] byteArray0 = new byte[6];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        Object object0 = sQLite3Constant_SQLite3BinaryConstant0.getValue();
        assertNotSame(byteArray0, object0);
    }

    @Test
    public void test043() throws Throwable {
        Randomly randomly0 = new Randomly(0L);
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = (SQLite3Constant.SQLite3BinaryConstant) SQLite3Constant
                .getRandomBinaryConstant(randomly0);
        String string0 = sQLite3Constant_SQLite3BinaryConstant0.getStringRepresentation();
        assertEquals("x''", string0);
    }

    @Test
    public void test044() throws Throwable {
        byte[] byteArray0 = new byte[3];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        byte[] byteArray1 = sQLite3Constant_SQLite3BinaryConstant0.asBinary();
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test
    public void test045() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        boolean boolean0 = sQLite3Constant_SQLite3NullConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test046() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        boolean boolean0 = sQLite3Constant0.isNull();
        assertFalse(boolean0);
        assertFalse(sQLite3Constant0.isHex());
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test047() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant((-2847L), true);
        boolean boolean0 = sQLite3Constant0.isHex();
        assertTrue(boolean0);
        assertEquals((-2847L), sQLite3Constant0.asInt());
    }

    @Test
    public void test048() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant((-1442L), true);
        sQLite3Constant0.getDataType();
        assertEquals((-1442L), sQLite3Constant0.asInt());
        assertTrue(sQLite3Constant0.isHex());
    }

    @Test
    public void test049() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBinaryConstant(",");
        assertFalse(sQLite3Constant0.isNull());
    }

    @Test
    public void test050() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                (String) null);
        String string0 = sQLite3Constant_SQLite3TextConstant0.asString();
        assertNull(string0);
    }

    @Test
    public void test051() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "rm~yl2*h#(!}2dk`p");
        String string0 = sQLite3Constant_SQLite3TextConstant0.asString();
        assertEquals("rm~yl2*h#(!}2dk`p", string0);
    }

    @Test
    public void test052() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant("");
        String string0 = sQLite3Constant0.asString();
        assertEquals("", string0);
    }

    @Test
    public void test053() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        long long0 = sQLite3Constant0.asInt();
        assertFalse(sQLite3Constant0.isHex());
        assertEquals(0L, long0);
    }

    @Test
    public void test054() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        long long0 = sQLite3Constant0.asInt();
        assertEquals(1L, long0);
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test055() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant((-1893L));
        long long0 = sQLite3Constant0.asInt();
        assertEquals((-1893L), long0);
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test056() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                0L);
        double double0 = sQLite3Constant_SQLite3RealConstant0.asDouble();
        assertEquals(0.0, double0, 0.01);
    }

    @Test
    public void test057() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                50.0);
        double double0 = sQLite3Constant_SQLite3RealConstant0.asDouble();
        assertEquals(50.0, double0, 0.01);
    }

    @Test
    public void test058() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.NEGATIVE_INFINITY);
        double double0 = sQLite3Constant_SQLite3RealConstant0.asDouble();
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test
    public void test059() throws Throwable {
        byte[] byteArray0 = new byte[8];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBinaryConstant(byteArray0);
        byte[] byteArray1 = sQLite3Constant0.asBinary();
        assertEquals(8, byteArray1.length);
    }

    @Test
    public void test060() throws Throwable {
        Randomly randomly0 = new Randomly(1L);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        byte[] byteArray0 = sQLite3Constant0.asBinary();
        assertEquals(0, byteArray0.length);
    }

    @Test
    public void test061() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-433.77603995936437));
        sQLite3Constant0.applyTextAffinity();
        assertEquals((-433.77603995936437), sQLite3Constant0.asDouble(), 0.01);
    }

    @Test
    public void test062() throws Throwable {
        // Undeclared exception!
        try {
            SQLite3Constant.getRandomBinaryConstant((Randomly) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Constant", e);
        }
    }

    @Test
    public void test063() throws Throwable {
        // Undeclared exception!
        try {
            SQLite3Constant.createBinaryConstant((byte[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Constant$SQLite3BinaryConstant", e);
        }
    }

    @Test
    public void test064() throws Throwable {
        // Undeclared exception!
        try {
            SQLite3Constant.createBinaryConstant("I)\"1f");
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"I)\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test
    public void test065() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                (String) null);
        // Undeclared exception!
        try {
            sQLite3Constant_SQLite3TextConstant0.applyNumericAffinity();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Constant$SQLite3TextConstant", e);
        }
    }

    @Test
    public void test066() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        // Undeclared exception!
        try {
            sQLite3Constant0.applyLess((SQLite3Constant) null, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Constant$SQLite3IntConstant", e);
        }
    }

    @Test
    public void test067() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "jSkKYn}");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        // Undeclared exception!
        try {
            sQLite3Constant_SQLite3TextConstant0.applyEquals((SQLite3Constant) null,
                    sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Constant$SQLite3TextConstant", e);
        }
    }

    @Test
    public void test068() throws Throwable {
        byte[] byteArray0 = new byte[0];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        // Undeclared exception!
        try {
            sQLite3Constant_SQLite3BinaryConstant0.applyEquals((SQLite3Constant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Constant$SQLite3BinaryConstant", e);
        }
    }

    @Test
    public void test069() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test070() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(false);
        assertFalse(sQLite3Constant0.isHex());
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test071() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-52.984));
        boolean boolean0 = sQLite3Constant_SQLite3RealConstant0.isReal();
        assertEquals((-52.984), sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
        assertTrue(boolean0);
    }

    @Test
    public void test072() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "yW~mA>VZDM");
        boolean boolean0 = sQLite3Constant_SQLite3TextConstant0.isReal();
        assertFalse(boolean0);
    }

    @Test
    public void test073() throws Throwable {
        byte[] byteArray0 = new byte[2];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        byte[] byteArray1 = new byte[13];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBinaryConstant(byteArray1);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3BinaryConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test074() throws Throwable {
        byte[] byteArray0 = new byte[6];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBinaryConstant(byteArray0);
        byte[] byteArray1 = new byte[6];
        byteArray1[0] = (byte) 97;
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray1);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3BinaryConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test075() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[0] = (byte) 90;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBinaryConstant(byteArray0);
        byte[] byteArray1 = new byte[6];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray1);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3BinaryConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(1L, sQLite3Constant1.asInt());
    }

    @Test
    public void test076() throws Throwable {
        byte[] byteArray0 = new byte[10];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant(50.0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3BinaryConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(50.0, sQLite3Constant0.asDouble(), 0.01);
        assertFalse(sQLite3Constant0.isNull());
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test077() throws Throwable {
        byte[] byteArray0 = new byte[10];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        Randomly randomly0 = new Randomly(796L);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3BinaryConstant0.applyEquals(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test078() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "jSkKYn}");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        byte[] byteArray0 = new byte[9];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3BinaryConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant_SQLite3TextConstant0.isNull());
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test079() throws Throwable {
        byte[] byteArray0 = new byte[10];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3BinaryConstant0.applyEquals(sQLite3Constant0);
        assertNull(sQLite3Constant1.getExplicitCollateSequence());
    }

    @Test
    public void test080() throws Throwable {
        byte[] byteArray0 = new byte[1];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        boolean boolean0 = sQLite3Constant_SQLite3BinaryConstant0.isPrintableChar((byte) 100);
        assertTrue(boolean0);
    }

    @Test
    public void test081() throws Throwable {
        byte[] byteArray0 = new byte[16];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        boolean boolean0 = sQLite3Constant_SQLite3BinaryConstant0.isPrintableChar((byte) (-21));
        assertFalse(boolean0);
    }

    @Test
    public void test082() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "p1j");
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createIntConstant((-1L));
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3TextConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals((-1L), sQLite3Constant0.asInt());
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test083() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "yW~mA>VZDM");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant1 = new SQLite3Constant.SQLite3TextConstant(
                "sqlancer.common.schema.AbstractTableColumn");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant1
                .applyLess(sQLite3Constant_SQLite3TextConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant_SQLite3TextConstant1.isNull());
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test084() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "jSkKYn}");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0
                .applyLess(sQLite3Constant_SQLite3TextConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant_SQLite3TextConstant0.isNull());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test085() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                ",");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0
                .applyLess(sQLite3Constant_SQLite3TextConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
        assertFalse(sQLite3Constant_SQLite3TextConstant0.isNull());
    }

    @Test
    public void test086() throws Throwable {
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                0.0);
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "p1j");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0
                .applyLess(sQLite3Constant_SQLite3RealConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant_SQLite3RealConstant0.isNull());
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
        assertEquals(0.0, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
    }

    @Test
    public void test087() throws Throwable {
        byte[] byteArray0 = new byte[12];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                (String) null);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0
                .applyLess(sQLite3Constant_SQLite3BinaryConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test088() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "jSkKYn}");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0
                .applyLess(sQLite3Constant_SQLite3NullConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertSame(sQLite3Constant_SQLite3NullConstant0, sQLite3Constant0);
    }

    @Test
    public void test089() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "1");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.applyNumericAffinity();
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test090() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.applyNumericAffinity();
        assertSame(sQLite3Constant0, sQLite3Constant_SQLite3TextConstant0);
    }

    @Test
    public void test091() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "jSkKYn}");
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.applyNumericAffinity();
        assertSame(sQLite3Constant_SQLite3TextConstant0, sQLite3Constant0);
    }

    @Test
    public void test092() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "i=1an)y8 hCOOTqn");
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant1 = new SQLite3Constant.SQLite3TextConstant(
                "/|nm5h6;Zhl+ ");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant1
                .applyLess(sQLite3Constant_SQLite3TextConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant_SQLite3TextConstant1.isNull());
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test093() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant.trim((String) null);
        assertEquals("", string0);
    }

    @Test
    public void test094() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant.trim(" 3jx;(,NHX].={");
        assertEquals("3jx;(,NHX].={", string0);
    }

    @Test
    public void test095() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant.trim("");
        assertEquals("", string0);
    }

    @Test
    public void test096() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant.trimLeading((String) null);
        assertEquals("", string0);
    }

    @Test
    public void test097() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant.toUpper("v*'~rQ");
        assertEquals("V*'~RQ", string0);
    }

    @Test
    public void test098() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant.toUpper("b&h/H(^\"j+g;z&ub");
        assertEquals("B&H/H(^\"J+G;Z&UB", string0);
    }

    @Test
    public void test099() throws Throwable {
        String string0 = SQLite3Constant.SQLite3TextConstant.toLower("E\"Sf-.[}:I,");
        assertEquals("e\"sf-.[}:i,", string0);
    }

    @Test
    public void test100() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "jSkKYn}");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant0.isHex());
        assertFalse(sQLite3Constant_SQLite3TextConstant0.isNull());
        assertEquals(1L, sQLite3Constant0.asInt());
    }

    @Test
    public void test101() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "jSkKYn}");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
        assertFalse(sQLite3Constant_SQLite3TextConstant0.isNull());
    }

    @Test
    public void test102() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "[+-]?dd*");
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3TextConstant0.applyEquals(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(SQLite3DataType.NULL, sQLite3Constant1.getDataType());
    }

    @Test
    public void test103() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-1.0));
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3RealConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant0.asInt());
        assertEquals(1L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test104() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.NEGATIVE_INFINITY);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3RealConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant0.asInt());
        assertEquals(1L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test105() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.POSITIVE_INFINITY);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3RealConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(1L, sQLite3Constant0.asInt());
    }

    @Test
    public void test106() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-2271.139905));
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-708.811237));
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3RealConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant0.isNull());
        assertEquals(1L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertEquals((-708.811237), sQLite3Constant0.asDouble(), 0.01);
    }

    @Test
    public void test107() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                647L);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant(647L);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyLess(sQLite3Constant_SQLite3IntConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(647L, sQLite3Constant_SQLite3IntConstant0.asInt());
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test108() throws Throwable {
        byte[] byteArray0 = new byte[10];
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-227.59551092));
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBinaryConstant(byteArray0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3RealConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant1.asInt());
        assertEquals((-227.59551092), sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test109() throws Throwable {
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                1102.427);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        sQLite3Constant_SQLite3RealConstant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1102.427, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
    }

    @Test
    public void test110() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.NEGATIVE_INFINITY);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        sQLite3Constant_SQLite3RealConstant0.applyEquals(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(Double.NEGATIVE_INFINITY, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
    }

    @Test
    public void test111() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.createRealConstant(1426.2);
        SQLite3Constant sQLite3Constant2 = sQLite3Constant1.applyEquals(sQLite3Constant0);
        assertEquals(1426.2, sQLite3Constant1.asDouble(), 0.01);
        assertFalse(sQLite3Constant2.isHex());
        assertEquals(0L, sQLite3Constant2.asInt());
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test112() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                647L);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant(647L);
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0
                .applyEquals((SQLite3Constant) sQLite3Constant_SQLite3IntConstant0);
        assertEquals(1L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test113() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.POSITIVE_INFINITY);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3RealConstant0.applyEquals(sQLite3Constant0);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertEquals(0L, sQLite3Constant1.asInt());
        assertEquals(Double.POSITIVE_INFINITY, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test114() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                2.0);
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant1 = new SQLite3Constant.SQLite3RealConstant(
                2178.6658497379017);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3RealConstant1.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(2178.6658497379017, sQLite3Constant_SQLite3RealConstant1.asDouble(), 0.01);
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test115() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                2.0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3RealConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(2.0, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test116() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-3439.853046808694));
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyEquals((SQLite3Constant) null);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertEquals((-3439.853046808694), sQLite3Constant0.asDouble(), 0.01);
    }

    @Test
    public void test117() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                27.716729362388257);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyLess(sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertFalse(sQLite3Constant_SQLite3RealConstant0.isNull());
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test118() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.NEGATIVE_INFINITY);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyLess(sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant_SQLite3RealConstant0.isNull());
    }

    @Test
    public void test119() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.POSITIVE_INFINITY);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyLess(sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant_SQLite3RealConstant0.isNull());
        assertEquals(1L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(0L, sQLite3Constant0.asInt());
    }

    @Test
    public void test120() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.createFalse();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant2 = sQLite3Constant1.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant2.isNull());
        assertEquals(1L, sQLite3Constant0.asInt());
        assertEquals(1L, sQLite3Constant2.asInt());
        assertFalse(sQLite3Constant2.isHex());
    }

    @Test
    public void test121() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test122() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createFalse();
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-1.0));
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyLess(sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant_SQLite3RealConstant0.isNull());
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test123() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.createTextConstant("");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant2 = sQLite3Constant0.applyLess(sQLite3Constant1,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant1.isNull());
        assertEquals(1L, sQLite3Constant2.asInt());
        assertFalse(sQLite3Constant2.isHex());
    }

    @Test
    public void test124() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        sQLite3Constant0.applyLess(sQLite3Constant_SQLite3NullConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test125() throws Throwable {
        byte[] byteArray0 = new byte[10];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3BinaryConstant0
                .applyEquals((SQLite3Constant) sQLite3Constant_SQLite3BinaryConstant0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyLess(sQLite3Constant_SQLite3BinaryConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test126() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        sQLite3Constant0.applyEquals((SQLite3Constant) sQLite3Constant_SQLite3NullConstant0);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertFalse(sQLite3Constant0.isHex());
    }

    @Test
    public void test127() throws Throwable {
        SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
                (-2974L), true);
        byte[] byteArray0 = new byte[3];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3BinaryConstant0
                .applyLess(sQLite3Constant_SQLite3BinaryConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant sQLite3Constant1 = sQLite3Constant_SQLite3IntConstant0.applyEquals(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(0L, sQLite3Constant0.asInt());
        assertEquals((-2974L), sQLite3Constant_SQLite3IntConstant0.asInt());
        assertTrue(sQLite3Constant_SQLite3IntConstant0.isHex());
    }

    @Test
    public void test128() throws Throwable {
        byte[] byteArray0 = new byte[2];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBinaryConstant(byteArray0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyLess(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertFalse(sQLite3Constant0.isNull());

        SQLite3Constant sQLite3Constant2 = sQLite3Constant1.applyEquals(sQLite3Constant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(0L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant2.isHex());
        assertEquals(0L, sQLite3Constant2.asInt());
    }

    @Test
    public void test129() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                1.0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3RealConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(1L, sQLite3Constant1.asInt());
        assertFalse(sQLite3Constant1.isHex());
    }

    @Test
    public void test130() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.createRealConstant(-0.0);
        SQLite3Constant sQLite3Constant2 = sQLite3Constant0.applyEquals(sQLite3Constant1);
        assertFalse(sQLite3Constant2.isHex());
        assertEquals(0L, sQLite3Constant2.asInt());
        assertEquals(1L, sQLite3Constant0.asInt());
        assertEquals(-0.0, sQLite3Constant1.asDouble(), 0.01);
    }

    @Test
    public void test131() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                Double.NEGATIVE_INFINITY);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0
                .applyEquals((SQLite3Constant) sQLite3Constant_SQLite3RealConstant0);
        assertEquals(1L, sQLite3Constant0.asInt());
        assertEquals(Double.NEGATIVE_INFINITY, sQLite3Constant_SQLite3RealConstant0.asDouble(), 0.01);
        assertFalse(sQLite3Constant1.isHex());
        assertEquals(0L, sQLite3Constant1.asInt());
    }

    @Test
    public void test132() throws Throwable {
        Randomly randomly0 = new Randomly(1L);
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.createNullConstant();
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant2 = sQLite3Constant0.applyLess(sQLite3Constant1,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        assertEquals(SQLite3DataType.NULL, sQLite3Constant2.getDataType());
    }

    @Test
    public void test133() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyTextAffinity();
        assertNull(sQLite3Constant1.getExplicitCollateSequence());
    }

    @Test
    public void test134() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        String string0 = sQLite3Constant0.toString();
        assertEquals("(NULL) NULL", string0);
    }

    @Test
    public void test135() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        Object object0 = sQLite3Constant0.getValue();
        assertNull(object0);
    }

    @Test
    public void test136() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.applyNumericAffinity();
        assertNull(sQLite3Constant1.getExplicitCollateSequence());
    }

    @Test
    public void test137() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        SQLite3Constant sQLite3Constant1 = sQLite3Constant0.castToBoolean();
        assertEquals(SQLite3DataType.NULL, sQLite3Constant1.getDataType());
    }
