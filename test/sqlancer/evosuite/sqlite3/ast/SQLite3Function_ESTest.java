/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:36:00 GMT 2025
 */

package sqlancer.evosuite.sqlite3.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.sqlite3.ast.SQLite3BinaryComparisonOperation;
import sqlancer.sqlite3.ast.SQLite3BinaryOperation;
import sqlancer.sqlite3.ast.SQLite3CollateOperation;
import sqlancer.sqlite3.ast.SQLite3ColumnName;
import sqlancer.sqlite3.ast.SQLite3Constant;
import sqlancer.sqlite3.ast.SQLite3Expression;
import sqlancer.sqlite3.ast.SQLite3Function;
import sqlancer.sqlite3.ast.SQLite3Subquery;
import sqlancer.sqlite3.ast.SQLite3TypeAffinity;
import sqlancer.sqlite3.ast.SQLite3TypeLiteral;
import sqlancer.sqlite3.ast.SQLite3UnaryOperation;
import sqlancer.sqlite3.ast.SQLite3WindowFunction;
import sqlancer.sqlite3.schema.SQLite3DataType;
import sqlancer.sqlite3.schema.SQLite3Schema;

public class SQLite3Function_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "T%*ZK<r+a");
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LOWER;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ExpressionArray0[3] = (SQLite3Expression) sQLite3Constant_SQLite3TextConstant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        assertEquals("t%*zk<r+a", sQLite3Constant0.asString());
    }

    @Test
    public void test01() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.IFNULL;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[1];
        sQLite3ConstantArray0[0] = sQLite3Constant0;
        SQLite3Constant sQLite3Constant1 = sQLite3Function_ComputableFunction0.apply(sQLite3ConstantArray0,
                (SQLite3Schema.SQLite3Column.SQLite3CollateSequence) null);
        assertNotSame(sQLite3Constant1, sQLite3Constant0);
    }

    @Test
    public void test02() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Expression[] sQLite3ExpressionArray1 = sQLite3Function0.getArgs();
        assertEquals(0, sQLite3ExpressionArray1.length);
    }

    @Test
    public void test03() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LIKELY;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Function0.getAffinity();
        assertEquals(SQLite3TypeAffinity.NONE, sQLite3Expression_TypeAffinity0);
    }

    @Test
    public void test04() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.ABS;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        // Undeclared exception!
        try {
            sQLite3Function0.getExplicitCollateSequence();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction
                .getRandomFunction();
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[2];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ConstantArray0);
        // Undeclared exception!
        try {
            sQLite3Function0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function", e);
        }
    }

    // @Test
    // public void test06() throws Throwable {
    // SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 =
    // SQLite3Function.ComputableFunction.IFNULL;
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[7];
    // SQLite3DataType sQLite3DataType0 = SQLite3DataType.NULL;
    // SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 =
    // SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
    // SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column(".9",
    // sQLite3DataType0, true, true, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
    // SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
    // 0L);
    // SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3ColumnName(sQLite3Schema_SQLite3Column0,
    // sQLite3Constant_SQLite3IntConstant0);
    // sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Expression_SQLite3ColumnName0;
    // SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant(".9");
    // sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant0;
    // SQLite3BinaryOperation.BinaryOperator sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0 =
    // SQLite3BinaryOperation.BinaryOperator.OR;
    // SQLite3BinaryOperation sQLite3Expression_SQLite3BinaryOperation0 = new SQLite3BinaryOperation(
    // sQLite3ExpressionArray0[0], sQLite3Constant0, sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0);
    // sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Expression_SQLite3BinaryOperation0;
    // SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
    // sQLite3ExpressionArray0);
    // // Undeclared exception!
    // try {
    // sQLite3Function0.getExpectedValue();
    // fail("Expecting exception: AssertionError");
    //
    // } catch (AssertionError e) {
    // //
    // // .9: NULL
    // //
    // }
    // }

    // @Test
    // public void test07() throws Throwable {
    // SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 =
    // SQLite3Function.ComputableFunction.LIKELIHOOD;
    // SQLite3Function sQLite3Function0 = null;
    // try {
    // sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0, (SQLite3Expression[]) null);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.sqlite3.ast.SQLite3Function", e);
    // }
    // }

    @Test
    public void test08() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.NULLIF;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
        SQLite3WindowFunction.WindowFunction sQLite3WindowFunction_WindowFunction0 = SQLite3WindowFunction.WindowFunction.CUME_DIST;
        SQLite3WindowFunction sQLite3WindowFunction0 = new SQLite3WindowFunction(sQLite3WindowFunction_WindowFunction0,
                sQLite3ExpressionArray0);
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3WindowFunction0;
        SQLite3TypeLiteral.Type sQLite3Expression_SQLite3TypeLiteral_Type0 = SQLite3TypeLiteral.Type.INTEGER;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTextConstant("");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Constant sQLite3Constant1 = sQLite3Expression_SQLite3TypeLiteral_Type0.apply(sQLite3Constant0);
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant1;
        SQLite3CollateOperation sQLite3Expression_SQLite3CollateOperation0 = new SQLite3CollateOperation(
                sQLite3Constant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Expression_SQLite3CollateOperation0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence1 = sQLite3Function0
                .getExplicitCollateSequence();
        assertEquals(SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence1);
    }

    @Test
    public void test09() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.IFNULL;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-4013.705189365881));
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        sQLite3Function0.getExplicitCollateSequence();
    }

    @Test
    public void test10() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction
                .getRandomFunction();
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[2];
        SQLite3TypeAffinity sQLite3Expression_TypeAffinity0 = sQLite3Function_ComputableFunction0
                .getAffinity(sQLite3ConstantArray0);
        assertFalse(sQLite3Expression_TypeAffinity0.isNumeric());
    }

    @Test
    public void test11() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TYPEOF;
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[9];
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        // Undeclared exception!
        try {
            sQLite3Function_ComputableFunction0.apply(sQLite3ConstantArray0,
                    sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$12", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Subquery subquery0 = new SQLite3Subquery("X");
        sQLite3ExpressionArray0[0] = (SQLite3Expression) subquery0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test13() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-888.3790695));
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TYPEOF;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertEquals("real", sQLite3Constant1.asString());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test14() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "<`yUeA");
        SQLite3TypeAffinity sQLite3Expression_TypeAffinity0 = SQLite3TypeAffinity.NONE;
        SQLite3BinaryComparisonOperation.BinaryComparisonOperator sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0 = SQLite3BinaryComparisonOperation.BinaryComparisonOperator.SMALLER_EQUALS;
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_BinaryComparisonOperation_BinaryComparisonOperator0
                .applyOperand(sQLite3Constant_SQLite3TextConstant0, sQLite3Expression_TypeAffinity0,
                        sQLite3Constant_SQLite3TextConstant0, sQLite3Expression_TypeAffinity0,
                        sQLite3Constant_SQLite3TextConstant0, sQLite3Constant_SQLite3TextConstant0, false);
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[3];
        sQLite3ConstantArray0[0] = (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ConstantArray0[1] = (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ConstantArray0[2] = sQLite3Constant0;
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TYPEOF;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ConstantArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertEquals("text", sQLite3Constant1.asString());
        assertNotNull(sQLite3Constant1);
    }

    @Test
    public void test15() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TYPEOF;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertNotNull(sQLite3Constant1);
        assertEquals("integer", sQLite3Constant1.asString());
    }

    @Test
    public void test16() throws Throwable {
        byte[] byteArray0 = new byte[0];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TYPEOF;
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[1];
        sQLite3ConstantArray0[0] = (SQLite3Constant) sQLite3Constant_SQLite3BinaryConstant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ConstantArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        assertNotNull(sQLite3Constant0);
        assertEquals("blob", sQLite3Constant0.asString());
    }

    @Test
    public void test17() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TYPEOF;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createNullConstant();
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertNotNull(sQLite3Constant1);
        assertEquals("null", sQLite3Constant1.asString());
    }

    // @Test
    // public void test18() throws Throwable {
    // SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new
    // SQLite3Constant.SQLite3TextConstant(
    // "R*`[6(Yt<2F+I4^I");
    // SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
    // SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 =
    // SQLite3UnaryOperation.UnaryOperator.NEGATE;
    // SQLite3Constant sQLite3Constant0 = sQLite3UnaryOperation_UnaryOperator0
    // .apply(sQLite3Constant_SQLite3TextConstant0);
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
    // sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
    // SQLite3Constant sQLite3Constant1 = sQLite3Constant0.castToBoolean();
    // sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant1;
    // sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Constant_SQLite3TextConstant0;
    // sQLite3ExpressionArray0[3] = (SQLite3Expression) sQLite3Constant0;
    // SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
    // sQLite3ExpressionArray0);
    // SQLite3Constant sQLite3Constant2 = sQLite3Function0.getExpectedValue();
    // // // Unstable assertion: assertEquals("-", sQLite3Constant2.asString());
    // // // Unstable assertion: assertNotNull(sQLite3Constant2);
    // }

    // @Test
    // public void test19() throws Throwable {
    // SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new
    // SQLite3Constant.SQLite3RealConstant(
    // (-84.88371555082465));
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[3];
    // SQLite3Constant.SQLite3IntConstant sQLite3Constant_SQLite3IntConstant0 = new SQLite3Constant.SQLite3IntConstant(
    // 239L);
    // sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3IntConstant0;
    // sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
    // sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
    // SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
    // SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
    // sQLite3ExpressionArray0);
    // SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
    // // // Unstable assertion: assertNull(sQLite3Constant0);
    // }

    @Test
    public void test20() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-4013.705189365881));
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[2];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test21() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "R*`[6(Yt<2F+I4^I");
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        SQLite3UnaryOperation.UnaryOperator sQLite3UnaryOperation_UnaryOperator0 = SQLite3UnaryOperation.UnaryOperator.NEGATE;
        SQLite3Constant sQLite3Constant0 = sQLite3UnaryOperation_UnaryOperator0
                .apply(sQLite3Constant_SQLite3TextConstant0);
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant0;
        sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ExpressionArray0[3] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertNull(sQLite3Constant1.getExplicitCollateSequence());
    }

    @Test
    public void test22() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3NullConstant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        assertEquals(SQLite3DataType.NULL, sQLite3Constant0.getDataType());
    }

    @Test
    public void test23() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "USE ");
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.RTRIM;
        SQLite3Constant sQLite3Constant0 = sQLite3Constant_SQLite3TextConstant0.applyEquals(
                (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[8];
        sQLite3ConstantArray0[0] = (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0;
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.createNullConstant();
        sQLite3ConstantArray0[1] = sQLite3Constant1;
        sQLite3ConstantArray0[2] = (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ConstantArray0[3] = sQLite3Constant0;
        sQLite3ConstantArray0[4] = (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ConstantArray0[5] = (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ConstantArray0[6] = (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0;
        sQLite3ConstantArray0[7] = (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0;
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ConstantArray0);
        SQLite3Constant sQLite3Constant2 = sQLite3Function0.getExpectedValue();
        assertEquals(SQLite3DataType.TEXT, sQLite3Constant2.getDataType());
    }

    @Test
    public void test24() throws Throwable {
        byte[] byteArray0 = new byte[0];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[1];
        sQLite3ConstantArray0[0] = (SQLite3Constant) sQLite3Constant_SQLite3BinaryConstant0;
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        SQLite3Constant sQLite3Constant0 = sQLite3Function_ComputableFunction0.apply(sQLite3ConstantArray0);
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test25() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.NULLIF;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-888.6903464831659));
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[1];
        sQLite3ConstantArray0[0] = sQLite3Constant0;
        // Undeclared exception!
        try {
            sQLite3Function_ComputableFunction0.apply(sQLite3ConstantArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 1 out of bounds for length 1
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$9", e);
        }
    }

    @Test
    public void test26() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.NULLIF;
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-888.379));
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[2];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertEquals(SQLite3DataType.NULL, sQLite3Constant1.getDataType());
    }

    @Test
    public void test27() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "EAs4W");
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.NULLIF;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[2];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3TextConstant0;
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant_SQLite3NullConstant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        assertNull(sQLite3Constant0.getExplicitCollateSequence());
    }

    @Test
    public void test28() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.NULLIF;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[2];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Constant sQLite3Constant1 = SQLite3Constant.createTextConstant(",jBC(&");
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant1;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant2 = sQLite3Function0.getExpectedValue();
        assertSame(sQLite3Constant2, sQLite3Constant0);
    }

    @Test
    public void test29() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.NULLIF;
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[8];
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        // Undeclared exception!
        try {
            sQLite3Function_ComputableFunction0.apply(sQLite3ConstantArray0,
                    sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$9", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertFalse(sQLite3Constant1.isNull());
    }

    @Test
    public void test31() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                (-888.3790695));
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test32() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.IFNULL;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[2];
        SQLite3BinaryOperation.BinaryOperator sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0 = SQLite3BinaryOperation.BinaryOperator.ARITHMETIC_AND;
        SQLite3BinaryOperation sQLite3Expression_SQLite3BinaryOperation0 = SQLite3BinaryOperation
                .create(sQLite3Function0, sQLite3Function0, sQLite3Expression_SQLite3BinaryOperation_BinaryOperator0);
        SQLite3Constant sQLite3Constant0 = sQLite3Expression_SQLite3BinaryOperation0.getExpectedValue();
        sQLite3ConstantArray0[0] = sQLite3Constant0;
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction1 = SQLite3Function.ComputableFunction.UPPER;
        SQLite3Constant sQLite3Constant1 = sQLite3Function_ComputableFunction1.apply(sQLite3ConstantArray0);
        assertEquals(SQLite3DataType.NULL, sQLite3Constant1.getDataType());
    }

    @Test
    public void test33() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.IFNULL;
        byte[] byteArray0 = new byte[0];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[1];
        sQLite3ConstantArray0[0] = (SQLite3Constant) sQLite3Constant_SQLite3BinaryConstant0;
        SQLite3Constant sQLite3Constant0 = sQLite3Function_ComputableFunction0.apply(sQLite3ConstantArray0);
        assertFalse(sQLite3Constant0.isNull());
    }

    @Test
    public void test34() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LOWER;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3NullConstant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        assertNull(sQLite3Constant0.getExplicitCollateSequence());
    }

    @Test
    public void test35() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-888.3790695));
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LOWER;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertNull(sQLite3Constant1);
    }

    @Test
    public void test36() throws Throwable {
        SQLite3Constant.SQLite3TextConstant sQLite3Constant_SQLite3TextConstant0 = new SQLite3Constant.SQLite3TextConstant(
                "<`yUeA");
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LOWER;
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[3];
        sQLite3ConstantArray0[0] = (SQLite3Constant) sQLite3Constant_SQLite3TextConstant0;
        SQLite3Constant sQLite3Constant0 = sQLite3Function_ComputableFunction0.apply(sQLite3ConstantArray0);
        assertNotNull(sQLite3Constant0);
        assertEquals("<`yuea", sQLite3Constant0.asString());
    }

    @Test
    public void test37() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.COALESCE;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[1];
        sQLite3ConstantArray0[0] = sQLite3Constant0;
        SQLite3Constant sQLite3Constant1 = sQLite3Function_ComputableFunction0.apply(sQLite3ConstantArray0);
        assertNotSame(sQLite3Constant1, sQLite3Constant0);
    }

    @Test
    public void test38() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.COALESCE;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createTrue();
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertFalse(sQLite3Constant1.isNull());
    }

    @Test
    public void test39() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.ABS;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[2];
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createRealConstant((-2112.90254676305));
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3CollateOperation sQLite3Expression_SQLite3CollateOperation0 = new SQLite3CollateOperation(
                sQLite3Constant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Expression_SQLite3CollateOperation0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertNotNull(sQLite3Constant1);
        assertEquals(2112.90254676305, sQLite3Constant1.asDouble(), 0.01);
    }

    @Test
    public void test40() throws Throwable {
        SQLite3Constant sQLite3Constant0 = SQLite3Constant.createBoolean(true);
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.ABS;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant1 = sQLite3Function0.getExpectedValue();
        assertNotNull(sQLite3Constant1);
        assertEquals(1L, sQLite3Constant1.asInt());
    }

    // @Test
    // public void test41() throws Throwable {
    // SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction
    // .getRandomFunction();
    // SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
    // Randomly randomly0 = new Randomly();
    // SQLite3Constant sQLite3Constant0 = SQLite3Constant.getRandomBinaryConstant(randomly0);
    // sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant0;
    // SQLite3Constant sQLite3Constant1 = SQLite3Constant.createFalse();
    // sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant1;
    // SQLite3Constant sQLite3Constant2 = sQLite3Constant1.applyTextAffinity();
    // sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Constant2;
    // SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new
    // SQLite3Constant.SQLite3RealConstant(
    // (-1L));
    // sQLite3ExpressionArray0[3] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
    // SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
    // sQLite3ExpressionArray0);
    // // Undeclared exception!
    // try {
    // sQLite3Function0.getExpectedValue();
    // fail("Expecting exception: RuntimeException");
    //
    // } catch (RuntimeException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$1", e);
    // }
    // }

    @Test
    public void test42() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction
                .getRandomFunction();
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[1];
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3NullConstant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        assertFalse(sQLite3Constant0.equals((Object) sQLite3Constant_SQLite3NullConstant0));
    }

    @Test
    public void test43() throws Throwable {
        SQLite3Constant.SQLite3RealConstant sQLite3Constant_SQLite3RealConstant0 = new SQLite3Constant.SQLite3RealConstant(
                0.25);
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.HEX;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[9];
        sQLite3ExpressionArray0[0] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
        sQLite3ExpressionArray0[1] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
        SQLite3DataType sQLite3DataType0 = SQLite3DataType.NULL;
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.NOCASE;
        SQLite3Schema.SQLite3Column sQLite3Schema_SQLite3Column0 = new SQLite3Schema.SQLite3Column("?}A&vp0)#=4o",
                sQLite3DataType0, false, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0, false);
        SQLite3ColumnName sQLite3Expression_SQLite3ColumnName0 = new SQLite3ColumnName(sQLite3Schema_SQLite3Column0,
                sQLite3Constant_SQLite3RealConstant0);
        sQLite3ExpressionArray0[2] = (SQLite3Expression) sQLite3Expression_SQLite3ColumnName0;
        sQLite3ExpressionArray0[3] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
        sQLite3ExpressionArray0[4] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
        sQLite3ExpressionArray0[5] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
        sQLite3ExpressionArray0[6] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
        sQLite3ExpressionArray0[7] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
        sQLite3ExpressionArray0[8] = (SQLite3Expression) sQLite3Constant_SQLite3RealConstant0;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Constant sQLite3Constant0 = sQLite3Function0.getExpectedValue();
        assertNull(sQLite3Constant0);
    }

    @Test
    public void test44() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LIKELY;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        // Undeclared exception!
        try {
            sQLite3Function0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$5", e);
        }
    }

    @Test
    public void test45() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.LIKELIHOOD;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        // Undeclared exception!
        try {
            sQLite3Function0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$6", e);
        }
    }

    @Test
    public void test46() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        String string0 = sQLite3Function_ComputableFunction0.toString();
        assertEquals("TRIM", string0);
    }

    // @Test
    // public void test47() throws Throwable {
    // SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction
    // .getRandomFunction();
    // boolean boolean0 = sQLite3Function_ComputableFunction0.isVariadic();
    // assertFalse(boolean0);
    // }

    // @Test
    // public void test48() throws Throwable {
    // SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction
    // .getRandomFunction();
    // int int0 = sQLite3Function_ComputableFunction0.getNrArgs();
    // assertEquals(1, int0);
    // }

    @Test
    public void test49() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[0];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.UNLIKELY;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        // Undeclared exception!
        try {
            sQLite3Function0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3Function$ComputableFunction$13", e);
        }
    }

    @Test
    public void test50() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.COALESCE;
        boolean boolean0 = sQLite3Function_ComputableFunction0.isVariadic();
        assertTrue(boolean0);
    }

    @Test
    public void test51() throws Throwable {
        SQLite3Constant[] sQLite3ConstantArray0 = new SQLite3Constant[1];
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.HEX;
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ConstantArray0);
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction1 = sQLite3Function0.getFunc();
        assertSame(sQLite3Function_ComputableFunction1, sQLite3Function_ComputableFunction0);
    }

    @Test
    public void test52() throws Throwable {
        SQLite3Function.ComputableFunction sQLite3Function_ComputableFunction0 = SQLite3Function.ComputableFunction.TRIM;
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
        SQLite3Function sQLite3Function0 = new SQLite3Function(sQLite3Function_ComputableFunction0,
                sQLite3ExpressionArray0);
        SQLite3Expression[] sQLite3ExpressionArray1 = sQLite3Function0.getArgs();
        assertFalse(sQLite3ExpressionArray1.equals((Object) sQLite3ExpressionArray0));
    }
}
