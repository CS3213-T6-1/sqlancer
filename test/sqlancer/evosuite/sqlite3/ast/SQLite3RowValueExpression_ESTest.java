/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 13:46:39 GMT 2025
 */

package sqlancer.evosuite.sqlite3.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.Randomly;
import sqlancer.sqlite3.ast.SQLite3Constant;
import sqlancer.sqlite3.ast.SQLite3Expression;
import sqlancer.sqlite3.ast.SQLite3RowValueExpression;
import sqlancer.sqlite3.ast.SQLite3Select;
import sqlancer.sqlite3.ast.SQLite3WindowFunctionExpression;
import sqlancer.sqlite3.schema.SQLite3Schema;

public class SQLite3RowValueExpression_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        SQLite3RowValueExpression sQLite3RowValueExpression0 = new SQLite3RowValueExpression(
                (List<SQLite3Expression>) null);
        List<SQLite3Expression> list0 = sQLite3RowValueExpression0.getExpressions();
        assertNull(list0);
    }

    @Test
    public void test1() throws Throwable {
        SQLite3Select sQLite3Select0 = new SQLite3Select();
        SQLite3WindowFunctionExpression sQLite3WindowFunctionExpression0 = new SQLite3WindowFunctionExpression(
                sQLite3Select0);
        List<SQLite3Expression> list0 = sQLite3WindowFunctionExpression0.getOrderBy();
        SQLite3RowValueExpression sQLite3RowValueExpression0 = new SQLite3RowValueExpression(list0);
        List<SQLite3Expression> list1 = sQLite3RowValueExpression0.getExpressions();
        assertTrue(list1.isEmpty());
    }

    @Test
    public void test2() throws Throwable {
        SQLite3Expression[] sQLite3ExpressionArray0 = new SQLite3Expression[4];
        List<SQLite3Expression> list0 = Randomly.subset(1, sQLite3ExpressionArray0);
        SQLite3RowValueExpression sQLite3RowValueExpression0 = new SQLite3RowValueExpression(list0);
        List<SQLite3Expression> list1 = sQLite3RowValueExpression0.getExpressions();
        assertSame(list0, list1);
    }

    @Test
    public void test3() throws Throwable {
        LinkedList<SQLite3Expression> linkedList0 = new LinkedList<SQLite3Expression>();
        SQLite3RowValueExpression sQLite3RowValueExpression0 = new SQLite3RowValueExpression(linkedList0);
        sQLite3RowValueExpression0.getExplicitCollateSequence();
    }

    @Test
    public void test4() throws Throwable {
        SQLite3Constant.SQLite3NullConstant sQLite3Constant_SQLite3NullConstant0 = new SQLite3Constant.SQLite3NullConstant();
        byte[] byteArray0 = new byte[1];
        SQLite3Constant.SQLite3BinaryConstant sQLite3Constant_SQLite3BinaryConstant0 = new SQLite3Constant.SQLite3BinaryConstant(
                byteArray0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence0 = SQLite3Schema.SQLite3Column.SQLite3CollateSequence.BINARY;
        SQLite3Expression.CollateOperation sQLite3Expression_CollateOperation0 = new SQLite3Expression.CollateOperation(
                sQLite3Constant_SQLite3BinaryConstant0, sQLite3Schema_SQLite3Column_SQLite3CollateSequence0);
        List<SQLite3Expression> list0 = List.of((SQLite3Expression) sQLite3Constant_SQLite3NullConstant0,
                (SQLite3Expression) sQLite3Constant_SQLite3NullConstant0,
                (SQLite3Expression) sQLite3Constant_SQLite3NullConstant0,
                (SQLite3Expression) sQLite3Expression_CollateOperation0,
                (SQLite3Expression) sQLite3Constant_SQLite3BinaryConstant0,
                (SQLite3Expression) sQLite3Expression_CollateOperation0,
                (SQLite3Expression) sQLite3Constant_SQLite3BinaryConstant0,
                (SQLite3Expression) sQLite3Constant_SQLite3BinaryConstant0);
        SQLite3RowValueExpression sQLite3RowValueExpression0 = new SQLite3RowValueExpression(list0);
        SQLite3Schema.SQLite3Column.SQLite3CollateSequence sQLite3Schema_SQLite3Column_SQLite3CollateSequence1 = sQLite3RowValueExpression0
                .getExplicitCollateSequence();
        assertSame(sQLite3Schema_SQLite3Column_SQLite3CollateSequence0,
                sQLite3Schema_SQLite3Column_SQLite3CollateSequence1);
    }

    @Test
    public void test5() throws Throwable {
        SQLite3RowValueExpression sQLite3RowValueExpression0 = new SQLite3RowValueExpression(
                (List<SQLite3Expression>) null);
        // Undeclared exception!
        try {
            sQLite3RowValueExpression0.getExplicitCollateSequence();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.sqlite3.ast.SQLite3RowValueExpression", e);
        }
    }
}
