/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:33:14 GMT 2025
 */

package sqlancer.evosuite.datafusion;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.datafusion.ast.DataFusionBinaryOperation;
import sqlancer.datafusion.ast.DataFusionConstant;
import sqlancer.datafusion.ast.DataFusionExpression;
import sqlancer.datafusion.ast.DataFusionFunction;
import sqlancer.datafusion.ast.DataFusionJoin;
import sqlancer.datafusion.ast.DataFusionSelect;
import sqlancer.datafusion.ast.DataFusionTableReference;
import sqlancer.datafusion.DataFusionSchema;
import sqlancer.datafusion.DataFusionToStringVisitor;
import sqlancer.h2.H2ExpressionGenerator;

public class DataFusionToStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        LinkedList<DataFusionSchema.DataFusionColumn> linkedList0 = new LinkedList<DataFusionSchema.DataFusionColumn>();
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable("",
                linkedList0, false);
        DataFusionTableReference dataFusionTableReference0 = new DataFusionTableReference(
                dataFusionSchema_DataFusionTable0);
        String string0 = DataFusionToStringVisitor.asString((DataFusionExpression) dataFusionTableReference0);
        assertEquals("", string0);
    }

    @Test
    public void test01() throws Throwable {
        DataFusionExpression dataFusionExpression0 = DataFusionConstant.createNullConstant();
        DataFusionConstant.DataFusionBooleanConstant dataFusionConstant_DataFusionBooleanConstant0 = new DataFusionConstant.DataFusionBooleanConstant(
                true);
        List<DataFusionExpression> list0 = List.of(dataFusionExpression0, dataFusionExpression0, dataFusionExpression0,
                dataFusionExpression0, dataFusionExpression0,
                (DataFusionExpression) dataFusionConstant_DataFusionBooleanConstant0);
        String string0 = DataFusionToStringVisitor.asString(list0);
        assertNotNull(string0);
    }

    @Test
    public void test02() throws Throwable {
        // Undeclared exception!
        try {
            DataFusionToStringVisitor.asString((DataFusionExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.DataFusionToStringVisitor", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        // Undeclared exception!
        try {
            DataFusionToStringVisitor.asString((List<DataFusionExpression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        DataFusionSelect dataFusionSelect0 = new DataFusionSelect();
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator.PLUS;
        DataFusionBinaryOperation dataFusionBinaryOperation0 = new DataFusionBinaryOperation(dataFusionSelect0,
                dataFusionSelect0, h2ExpressionGenerator_H2UnaryPrefixOperator0);
        List<DataFusionExpression> list0 = List.of((DataFusionExpression) dataFusionBinaryOperation0,
                (DataFusionExpression) dataFusionBinaryOperation0, (DataFusionExpression) dataFusionBinaryOperation0);
        // Undeclared exception!
        try {
            DataFusionToStringVisitor.asString(list0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        DataFusionToStringVisitor dataFusionToStringVisitor0 = new DataFusionToStringVisitor();
        DataFusionSelect dataFusionSelect0 = new DataFusionSelect();
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator.PLUS;
        DataFusionBinaryOperation dataFusionBinaryOperation0 = new DataFusionBinaryOperation(dataFusionSelect0,
                dataFusionSelect0, h2ExpressionGenerator_H2UnaryPrefixOperator0);
        // Undeclared exception!
        try {
            dataFusionToStringVisitor0.visitSpecific((DataFusionExpression) dataFusionBinaryOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // class sqlancer.datafusion.ast.DataFusionBinaryOperation
            //
        }
    }

    @Test
    public void test06() throws Throwable {
        DataFusionSelect dataFusionSelect0 = new DataFusionSelect();
        DataFusionToStringVisitor dataFusionToStringVisitor0 = new DataFusionToStringVisitor();
        // Undeclared exception!
        try {
            dataFusionToStringVisitor0.visitSpecific((DataFusionExpression) dataFusionSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        DataFusionConstant.DataFusionBooleanConstant dataFusionConstant_DataFusionBooleanConstant0 = new DataFusionConstant.DataFusionBooleanConstant(
                false);
        DataFusionToStringVisitor dataFusionToStringVisitor0 = new DataFusionToStringVisitor();
        dataFusionToStringVisitor0.visitSpecific((DataFusionExpression) dataFusionConstant_DataFusionBooleanConstant0);
        assertEquals("false", dataFusionConstant_DataFusionBooleanConstant0.toString());
    }

    @Test
    public void test08() throws Throwable {
        DataFusionSelect dataFusionSelect0 = new DataFusionSelect();
        List<DataFusionExpression> list0 = dataFusionSelect0.getGroupByClause();
        dataFusionSelect0.setFromTables(list0);
        DataFusionConstant.DataFusionNullConstant dataFusionConstant_DataFusionNullConstant0 = new DataFusionConstant.DataFusionNullConstant();
        dataFusionSelect0.setOffsetClause(dataFusionConstant_DataFusionNullConstant0);
        dataFusionSelect0.setFetchColumnsString("_");
        String string0 = DataFusionToStringVisitor.asString((DataFusionExpression) dataFusionSelect0);
        assertNotNull(string0);
    }

    @Test
    public void test09() throws Throwable {
        DataFusionSelect dataFusionSelect0 = new DataFusionSelect();
        LinkedList<DataFusionExpression> linkedList0 = new LinkedList<DataFusionExpression>();
        dataFusionSelect0.setFromTables(linkedList0);
        DataFusionSelect dataFusionSelect1 = new DataFusionSelect();
        dataFusionSelect0.setHavingClause(dataFusionSelect1);
        dataFusionSelect0.setFetchColumnsString("5wx?a ewkQ~b=");
        // Undeclared exception!
        try {
            DataFusionToStringVisitor.asString((DataFusionExpression) dataFusionSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        DataFusionSelect dataFusionSelect0 = new DataFusionSelect();
        LinkedList<DataFusionExpression> linkedList0 = new LinkedList<DataFusionExpression>();
        DataFusionFunction<Object> dataFusionFunction0 = new DataFusionFunction<Object>(linkedList0, linkedList0);
        dataFusionSelect0.setWhereClause(dataFusionFunction0);
        dataFusionSelect0.setFromTables(linkedList0);
        dataFusionSelect0.setFetchColumnsString("MbG{N9 pQv");
        String string0 = DataFusionToStringVisitor.asString((DataFusionExpression) dataFusionSelect0);
        assertNotNull(string0);
    }

    @Test
    public void test11() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.DOUBLE;
        DataFusionSchema.DataFusionColumn dataFusionSchema_DataFusionColumn0 = new DataFusionSchema.DataFusionColumn(
                (String) null, dataFusionSchema_DataFusionDataType0, false);
        List<DataFusionSchema.DataFusionColumn> list0 = List.of(dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0);
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable(
                "[RL#Q,(@>$_P{", list0, false);
        DataFusionTableReference dataFusionTableReference0 = new DataFusionTableReference(
                dataFusionSchema_DataFusionTable0);
        DataFusionJoin dataFusionJoin0 = DataFusionJoin.createInnerJoin(dataFusionTableReference0,
                dataFusionTableReference0, (DataFusionExpression) null);
        String string0 = DataFusionToStringVisitor.asString((DataFusionExpression) dataFusionJoin0);
        assertEquals("[RL#Q,(@>$_P{ INNER  JOIN [RL#Q,(@>$_P{", string0);
    }

    @Test
    public void test12() throws Throwable {
        DataFusionToStringVisitor dataFusionToStringVisitor0 = new DataFusionToStringVisitor();
        DataFusionJoin dataFusionJoin0 = DataFusionJoin.createInnerJoin((DataFusionTableReference) null,
                (DataFusionTableReference) null, (DataFusionExpression) null);
        // Undeclared exception!
        try {
            dataFusionToStringVisitor0.visitSpecific((DataFusionExpression) dataFusionJoin0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.DataFusionToStringVisitor", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        DataFusionToStringVisitor dataFusionToStringVisitor0 = new DataFusionToStringVisitor();
        DataFusionSelect dataFusionSelect0 = new DataFusionSelect();
        LinkedList<DataFusionSchema.DataFusionColumn> linkedList0 = new LinkedList<DataFusionSchema.DataFusionColumn>();
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable(
                "sqlancer.datafusion.ast.DataFusionConstant$DataFusionBooleanConstant@0000000001", linkedList0, false);
        DataFusionTableReference dataFusionTableReference0 = new DataFusionTableReference(
                dataFusionSchema_DataFusionTable0);
        DataFusionJoin dataFusionJoin0 = DataFusionJoin.createInnerJoin(dataFusionTableReference0,
                dataFusionTableReference0, dataFusionSelect0);
        // Undeclared exception!
        try {
            dataFusionToStringVisitor0.visitSpecific((DataFusionExpression) dataFusionJoin0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        DataFusionSelect dataFusionSelect0 = new DataFusionSelect();
        LinkedList<DataFusionExpression> linkedList0 = new LinkedList<DataFusionExpression>();
        dataFusionSelect0.setFromTables(linkedList0);
        DataFusionConstant.DataFusionDoubleConstant dataFusionConstant_DataFusionDoubleConstant0 = new DataFusionConstant.DataFusionDoubleConstant(
                "5");
        dataFusionSelect0.setLimitClause(dataFusionConstant_DataFusionDoubleConstant0);
        dataFusionSelect0.setFetchColumnsString("5");
        String string0 = DataFusionToStringVisitor.asString((DataFusionExpression) dataFusionSelect0);
        assertNotNull(string0);
    }

    @Test
    public void test15() throws Throwable {
        DataFusionSelect dataFusionSelect0 = new DataFusionSelect();
        List<DataFusionExpression> list0 = dataFusionSelect0.getJoinList();
        String string0 = DataFusionToStringVisitor.asString(list0);
        assertEquals("", string0);
    }
}
