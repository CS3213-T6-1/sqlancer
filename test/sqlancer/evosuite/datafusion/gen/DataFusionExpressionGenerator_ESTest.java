/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:31:56 GMT 2025
 */

package sqlancer.evosuite.datafusion.gen;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.schema.AbstractTables;
import sqlancer.datafusion.ast.DataFusionConstant;
import sqlancer.datafusion.ast.DataFusionExpression;
import sqlancer.datafusion.ast.DataFusionJoin;
import sqlancer.datafusion.ast.DataFusionSelect;
import sqlancer.datafusion.DataFusionProvider;
import sqlancer.datafusion.DataFusionSchema;
import sqlancer.datafusion.gen.DataFusionBaseExpr;
import sqlancer.datafusion.gen.DataFusionExpressionGenerator;

public class DataFusionExpressionGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        LinkedList<DataFusionSchema.DataFusionColumn> linkedList0 = new LinkedList<DataFusionSchema.DataFusionColumn>();
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable("",
                linkedList0, true);
        List<DataFusionSchema.DataFusionTable> list0 = List.of(dataFusionSchema_DataFusionTable0,
                dataFusionSchema_DataFusionTable0, dataFusionSchema_DataFusionTable0);
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                list0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator1 = dataFusionExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        dataFusionExpressionGenerator1.setTablesAndColumns(abstractTables0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator2 = dataFusionExpressionGenerator1
                .setTablesAndColumns(abstractTables0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator3 = dataFusionExpressionGenerator2
                .setTablesAndColumns(abstractTables0);
        assertSame(dataFusionExpressionGenerator1, dataFusionExpressionGenerator3);
    }

    @Test
    public void test01() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExpr
                .createCommonNumericAggrFuncSingleArg("cEdW}B6qJMf2");
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BOOLEAN;
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateFunctionExpression(dataFusionSchema_DataFusionDataType0, 1,
                    dataFusionBaseExpr0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.NULL;
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionExpression dataFusionExpression0 = dataFusionExpressionGenerator0
                .generateColumn(dataFusionSchema_DataFusionDataType0);
        DataFusionSelect dataFusionSelect0 = dataFusionExpressionGenerator0.generateSelect();
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateUnoptimizedQueryString(dataFusionSelect0, dataFusionExpression0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    // @Test
    // public void test03() throws Throwable {
    // DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
    // (DataFusionProvider.DataFusionGlobalState) null);
    // DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 =
    // DataFusionSchema.DataFusionDataType.BOOLEAN;
    // List<DataFusionSchema.DataFusionColumn> list0 = dataFusionExpressionGenerator0
    // .filterColumns(dataFusionSchema_DataFusionDataType0);
    // DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable(
    // "b.iO7<#9`", list0, true);
    // List<DataFusionSchema.DataFusionTable> list1 = List.of(dataFusionSchema_DataFusionTable0,
    // dataFusionSchema_DataFusionTable0);
    // AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new
    // AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
    // list1);
    // dataFusionExpressionGenerator0.setTablesAndColumns(abstractTables0);
    // List<DataFusionExpression> list2 = dataFusionExpressionGenerator0.getTableRefs();
    // assertEquals(1, list2.size());
    // }

    @Test
    public void test04() throws Throwable {
        List<DataFusionSchema.DataFusionColumn> list0 = List.of();
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable(
                "a&P@k~sI_[%'qBKC", list0, true);
        List<DataFusionSchema.DataFusionTable> list1 = List.of(dataFusionSchema_DataFusionTable0,
                dataFusionSchema_DataFusionTable0, dataFusionSchema_DataFusionTable0, dataFusionSchema_DataFusionTable0,
                dataFusionSchema_DataFusionTable0, dataFusionSchema_DataFusionTable0);
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                list1);
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        dataFusionExpressionGenerator0.setTablesAndColumns(abstractTables0);
        List<DataFusionJoin> list2 = dataFusionExpressionGenerator0.getRandomJoinClauses();
        assertEquals(0, list2.size());
    }

    // @Test
    // public void test05() throws Throwable {
    // DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new
    // DataFusionProvider.DataFusionGlobalState();
    // DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
    // dataFusionProvider_DataFusionGlobalState0);
    // List<DataFusionExpression> list0 = dataFusionExpressionGenerator0.generateFetchColumns(false);
    // assertEquals(1, list0.size());
    // }

    @Test
    public void test06() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BIGINT;
        DataFusionSchema.DataFusionColumn dataFusionSchema_DataFusionColumn0 = new DataFusionSchema.DataFusionColumn(
                "AC\u0000~e*ftq8K_(i/22{", dataFusionSchema_DataFusionDataType0, false);
        List<DataFusionSchema.DataFusionColumn> list0 = List.of(dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0);
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable(
                "AC\u0000~e*ftq8K_(i/22{", list0, false);
        DataFusionSchema.DataFusionTable[] dataFusionSchema_DataFusionTableArray0 = new DataFusionSchema.DataFusionTable[1];
        dataFusionSchema_DataFusionTableArray0[0] = dataFusionSchema_DataFusionTable0;
        List<DataFusionSchema.DataFusionTable> list1 = List.of(dataFusionSchema_DataFusionTableArray0);
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                list1);
        DataFusionExpressionGenerator dataFusionExpressionGenerator1 = dataFusionExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        List<DataFusionSchema.DataFusionColumn> list2 = dataFusionExpressionGenerator1
                .filterColumns(dataFusionSchema_DataFusionDataType0);
        assertEquals(10, list2.size());
    }

    @Test
    public void test07() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.setTablesAndColumns(
                    (AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        LinkedList<DataFusionSchema.DataFusionTable> linkedList0 = new LinkedList<DataFusionSchema.DataFusionTable>();
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                linkedList0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.setTablesAndColumns(abstractTables0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    // @Test
    // public void test09() throws Throwable {
    // DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new
    // DataFusionProvider.DataFusionGlobalState();
    // DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
    // dataFusionProvider_DataFusionGlobalState0);
    // // Undeclared exception!
    // try {
    // dataFusionExpressionGenerator0.generateUnoptimizedQueryString((DataFusionSelect) null,
    // (DataFusionExpression) null);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.datafusion.DataFusionToStringVisitor", e);
    // }
    // }

    @Test
    public void test10() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateOptimizedQueryString((DataFusionSelect) null,
                    (DataFusionExpression) null, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        LinkedList<DataFusionSchema.DataFusionColumn> linkedList0 = new LinkedList<DataFusionSchema.DataFusionColumn>();
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable("9",
                linkedList0, false);
        List<DataFusionSchema.DataFusionTable> list0 = List.of(dataFusionSchema_DataFusionTable0,
                dataFusionSchema_DataFusionTable0, dataFusionSchema_DataFusionTable0);
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                list0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        dataFusionExpressionGenerator0.setTablesAndColumns(abstractTables0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateFetchColumns(false);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test12() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.NULL;
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateExpression(dataFusionSchema_DataFusionDataType0, 0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BIGINT;
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateConstant(dataFusionSchema_DataFusionDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.DataFusionSchema$DataFusionDataType", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                (DataFusionProvider.DataFusionGlobalState) null);
        LinkedList<DataFusionSchema.DataFusionColumn> linkedList0 = new LinkedList<DataFusionSchema.DataFusionColumn>();
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BOOLEAN;
        linkedList0.add((DataFusionSchema.DataFusionColumn) null);
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable(
                "l~xXa6K", linkedList0, true);
        List<DataFusionSchema.DataFusionTable> list0 = List.of(dataFusionSchema_DataFusionTable0);
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                list0);
        dataFusionExpressionGenerator0.setTablesAndColumns(abstractTables0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.filterColumns(dataFusionSchema_DataFusionDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    // @Test
    // public void test15() throws Throwable {
    // DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new
    // DataFusionProvider.DataFusionGlobalState();
    // DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
    // dataFusionProvider_DataFusionGlobalState0);
    // DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = dataFusionExpressionGenerator0
    // .getRandomType();
    // DataFusionConstant.DataFusionNullConstant dataFusionConstant_DataFusionNullConstant0 =
    // (DataFusionConstant.DataFusionNullConstant) dataFusionExpressionGenerator0
    // .generateConstant(dataFusionSchema_DataFusionDataType0);
    // assertEquals("NULL", dataFusionConstant_DataFusionNullConstant0.toString());
    // }

    @Test
    public void test16() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSelect dataFusionSelect0 = dataFusionExpressionGenerator0.generateSelect();
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateOptimizedQueryString(dataFusionSelect0,
                    (DataFusionExpression) dataFusionSelect0, true);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        List<DataFusionSchema.DataFusionColumn> list0 = List.of();
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable("<%)",
                list0, true);
        List<DataFusionSchema.DataFusionTable> list1 = List.of(dataFusionSchema_DataFusionTable0,
                dataFusionSchema_DataFusionTable0, dataFusionSchema_DataFusionTable0, dataFusionSchema_DataFusionTable0,
                dataFusionSchema_DataFusionTable0, dataFusionSchema_DataFusionTable0);
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                list1);
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator1 = dataFusionExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        dataFusionExpressionGenerator1.setTablesAndColumns(abstractTables0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator2 = dataFusionExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        assertSame(dataFusionExpressionGenerator0, dataFusionExpressionGenerator2);
    }

    @Test
    public void test18() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BIGINT;
        DataFusionSchema.DataFusionColumn dataFusionSchema_DataFusionColumn0 = new DataFusionSchema.DataFusionColumn(
                "AC\u0000~e*ftq8K_(i/22{", dataFusionSchema_DataFusionDataType0, false);
        List<DataFusionSchema.DataFusionColumn> list0 = List.of(dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0);
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable(
                "AC\u0000~e*ftq8K_(i/22{", list0, false);
        DataFusionSchema.DataFusionTable[] dataFusionSchema_DataFusionTableArray0 = new DataFusionSchema.DataFusionTable[1];
        dataFusionSchema_DataFusionTableArray0[0] = dataFusionSchema_DataFusionTable0;
        List<DataFusionSchema.DataFusionTable> list1 = List.of(dataFusionSchema_DataFusionTableArray0);
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                list1);
        DataFusionExpressionGenerator dataFusionExpressionGenerator1 = dataFusionExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        DataFusionExpression dataFusionExpression0 = dataFusionExpressionGenerator1
                .generateColumn(dataFusionSchema_DataFusionDataType0);
        assertNotNull(dataFusionExpression0);
    }

    @Test
    public void test19() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BIGINT;
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType1 = DataFusionSchema.DataFusionDataType.BOOLEAN;
        DataFusionSchema.DataFusionColumn dataFusionSchema_DataFusionColumn0 = new DataFusionSchema.DataFusionColumn(
                "AC\u0000~e*ftq8K_(i/22{", dataFusionSchema_DataFusionDataType1, false);
        List<DataFusionSchema.DataFusionColumn> list0 = List.of(dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0, dataFusionSchema_DataFusionColumn0,
                dataFusionSchema_DataFusionColumn0);
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable(
                "AC\u0000~e*ftq8K_(i/22{", list0, false);
        DataFusionSchema.DataFusionTable[] dataFusionSchema_DataFusionTableArray0 = new DataFusionSchema.DataFusionTable[1];
        dataFusionSchema_DataFusionTableArray0[0] = dataFusionSchema_DataFusionTable0;
        List<DataFusionSchema.DataFusionTable> list1 = List.of(dataFusionSchema_DataFusionTableArray0);
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                list1);
        DataFusionExpressionGenerator dataFusionExpressionGenerator1 = dataFusionExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator1.generateColumn(dataFusionSchema_DataFusionDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.DataFusionSchema$DataFusionDataType", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BOOLEAN;
        DataFusionBaseExpr.DataFusionBaseExprCategory dataFusionBaseExpr_DataFusionBaseExprCategory0 = DataFusionBaseExpr.DataFusionBaseExprCategory.BINARY;
        List<DataFusionSchema.DataFusionDataType> list0 = List.of(dataFusionSchema_DataFusionDataType0);
        LinkedList<DataFusionBaseExpr.ArgumentType> linkedList0 = new LinkedList<DataFusionBaseExpr.ArgumentType>();
        DataFusionBaseExpr dataFusionBaseExpr0 = new DataFusionBaseExpr("^>oqDzKC\"", (-2),
                dataFusionBaseExpr_DataFusionBaseExprCategory0, list0, linkedList0);
        DataFusionExpression dataFusionExpression0 = dataFusionExpressionGenerator0
                .generateFunctionExpression(dataFusionSchema_DataFusionDataType0, (-1), dataFusionBaseExpr0);
        assertNotNull(dataFusionExpression0);
    }

    @Test
    public void test21() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionBaseExpr.ArgumentType.SameAsFirstArgType dataFusionBaseExpr_ArgumentType_SameAsFirstArgType0 = new DataFusionBaseExpr.ArgumentType.SameAsFirstArgType();
        List<DataFusionBaseExpr.ArgumentType> list0 = List.of(
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_SameAsFirstArgType0,
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_SameAsFirstArgType0,
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_SameAsFirstArgType0);
        DataFusionBaseExpr.DataFusionBaseExprCategory dataFusionBaseExpr_DataFusionBaseExprCategory0 = DataFusionBaseExpr.DataFusionBaseExprCategory.BINARY;
        LinkedList<DataFusionSchema.DataFusionDataType> linkedList0 = new LinkedList<DataFusionSchema.DataFusionDataType>();
        DataFusionBaseExpr dataFusionBaseExpr0 = new DataFusionBaseExpr("", (-1),
                dataFusionBaseExpr_DataFusionBaseExprCategory0, linkedList0, list0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BIGINT;
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateFunctionExpression(dataFusionSchema_DataFusionDataType0, (-1),
                    dataFusionBaseExpr0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // First argument can't have argument type `SameAsFirstArgType`
            //
        }
    }

    @Test
    public void test22() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionBaseExpr.ArgumentType.SameAsReturnType dataFusionBaseExpr_ArgumentType_SameAsReturnType0 = new DataFusionBaseExpr.ArgumentType.SameAsReturnType();
        List<DataFusionBaseExpr.ArgumentType> list0 = List.of(
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_SameAsReturnType0,
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_SameAsReturnType0,
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_SameAsReturnType0);
        DataFusionBaseExpr.DataFusionBaseExprCategory dataFusionBaseExpr_DataFusionBaseExprCategory0 = DataFusionBaseExpr.DataFusionBaseExprCategory.BINARY;
        LinkedList<DataFusionSchema.DataFusionDataType> linkedList0 = new LinkedList<DataFusionSchema.DataFusionDataType>();
        DataFusionBaseExpr dataFusionBaseExpr0 = new DataFusionBaseExpr(
                "First argument can't have argument type `SameAsFirstArgType`", 1,
                dataFusionBaseExpr_DataFusionBaseExprCategory0, linkedList0, list0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.DOUBLE;
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateFunctionExpression(dataFusionSchema_DataFusionDataType0, 1,
                    dataFusionBaseExpr0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BOOLEAN;
        LinkedList<DataFusionSchema.DataFusionDataType> linkedList0 = new LinkedList<DataFusionSchema.DataFusionDataType>();
        DataFusionBaseExpr.ArgumentType.Fixed dataFusionBaseExpr_ArgumentType_Fixed0 = new DataFusionBaseExpr.ArgumentType.Fixed(
                linkedList0);
        List<DataFusionBaseExpr.ArgumentType> list0 = List.of(
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_Fixed0,
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_Fixed0,
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_Fixed0);
        DataFusionBaseExpr.DataFusionBaseExprCategory dataFusionBaseExpr_DataFusionBaseExprCategory0 = DataFusionBaseExpr.DataFusionBaseExprCategory.FUNC;
        DataFusionBaseExpr dataFusionBaseExpr0 = new DataFusionBaseExpr("", (-766),
                dataFusionBaseExpr_DataFusionBaseExprCategory0, linkedList0, list0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateFunctionExpression(dataFusionSchema_DataFusionDataType0, (-766),
                    dataFusionBaseExpr0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // possible types can't be an empty list
            //
        }
    }

    // @Test
    // public void test24() throws Throwable {
    // DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new
    // DataFusionProvider.DataFusionGlobalState();
    // DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
    // dataFusionProvider_DataFusionGlobalState0);
    // DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExpr
    // .createCommonNumericAggrFuncSingleArg("cEdW}B6qJMf2");
    // DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = dataFusionExpressionGenerator0
    // .getRandomType();
    // DataFusionExpression dataFusionExpression0 = dataFusionExpressionGenerator0
    // .generateFunctionExpression(dataFusionSchema_DataFusionDataType0, 1, dataFusionBaseExpr0);
    // assertNotNull(dataFusionExpression0);
    // }

    @Test
    public void test25() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.DOUBLE;
        DataFusionBaseExpr.DataFusionBaseExprCategory dataFusionBaseExpr_DataFusionBaseExprCategory0 = DataFusionBaseExpr.DataFusionBaseExprCategory.AGGREGATE;
        List<DataFusionSchema.DataFusionDataType> list0 = List.of(dataFusionSchema_DataFusionDataType0);
        DataFusionBaseExpr.ArgumentType.Fixed dataFusionBaseExpr_ArgumentType_Fixed0 = new DataFusionBaseExpr.ArgumentType.Fixed(
                list0);
        DataFusionBaseExpr.ArgumentType.SameAsFirstArgType dataFusionBaseExpr_ArgumentType_SameAsFirstArgType0 = new DataFusionBaseExpr.ArgumentType.SameAsFirstArgType();
        List<DataFusionBaseExpr.ArgumentType> list1 = List.of(
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_Fixed0,
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_SameAsFirstArgType0,
                (DataFusionBaseExpr.ArgumentType) dataFusionBaseExpr_ArgumentType_SameAsFirstArgType0);
        DataFusionBaseExpr dataFusionBaseExpr0 = new DataFusionBaseExpr("", 4,
                dataFusionBaseExpr_DataFusionBaseExprCategory0, dataFusionBaseExpr_ArgumentType_Fixed0.fixedType,
                list1);
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateFunctionExpression(dataFusionSchema_DataFusionDataType0, 4,
                    dataFusionBaseExpr0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    // @Test
    // public void test26() throws Throwable {
    // DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new
    // DataFusionProvider.DataFusionGlobalState();
    // DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
    // dataFusionProvider_DataFusionGlobalState0);
    // DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 =
    // DataFusionSchema.DataFusionDataType.NULL;
    // DataFusionBaseExpr.DataFusionBaseExprCategory dataFusionBaseExpr_DataFusionBaseExprCategory0 =
    // DataFusionBaseExpr.DataFusionBaseExprCategory.FUNC;
    // LinkedList<DataFusionSchema.DataFusionDataType> linkedList0 = new
    // LinkedList<DataFusionSchema.DataFusionDataType>();
    // LinkedList<DataFusionBaseExpr.ArgumentType> linkedList1 = new LinkedList<DataFusionBaseExpr.ArgumentType>();
    // DataFusionBaseExpr dataFusionBaseExpr0 = new DataFusionBaseExpr((String) null, 3,
    // dataFusionBaseExpr_DataFusionBaseExprCategory0, linkedList0, linkedList1, true);
    // DataFusionExpression dataFusionExpression0 = dataFusionExpressionGenerator0
    // .generateFunctionExpression(dataFusionSchema_DataFusionDataType0, 3, dataFusionBaseExpr0);
    // assertNotNull(dataFusionExpression0);
    // }

    @Test
    public void test27() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        LinkedList<DataFusionSchema.DataFusionColumn> linkedList0 = new LinkedList<DataFusionSchema.DataFusionColumn>();
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable("9",
                linkedList0, false);
        List<DataFusionSchema.DataFusionTable> list0 = List.of(dataFusionSchema_DataFusionTable0,
                dataFusionSchema_DataFusionTable0, dataFusionSchema_DataFusionTable0);
        AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn> abstractTables0 = new AbstractTables<DataFusionSchema.DataFusionTable, DataFusionSchema.DataFusionColumn>(
                list0);
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        dataFusionExpressionGenerator0.setTablesAndColumns(abstractTables0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = dataFusionExpressionGenerator0
                .getRandomType();
        assertEquals(DataFusionSchema.DataFusionDataType.BIGINT, dataFusionSchema_DataFusionDataType0);
    }

    @Test
    public void test28() throws Throwable {
        DataFusionConstant.DataFusionNullConstant dataFusionConstant_DataFusionNullConstant0 = new DataFusionConstant.DataFusionNullConstant();
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BOOLEAN;
        DataFusionExpressionGenerator.DataFusionCastOperation dataFusionExpressionGenerator_DataFusionCastOperation0 = new DataFusionExpressionGenerator.DataFusionCastOperation(
                dataFusionConstant_DataFusionNullConstant0, dataFusionSchema_DataFusionDataType0);
        String string0 = dataFusionExpressionGenerator_DataFusionCastOperation0.getOperatorRepresentation();
        assertEquals("::BOOLEAN", string0);
    }

    @Test
    public void test29() throws Throwable {
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                (DataFusionProvider.DataFusionGlobalState) null);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.getTableRefs();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.getRandomJoinClauses();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    @Test
    public void test31() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateFetchColumns(false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.DataFusionSchema$DataFusionTable", e);
        }
    }

    @Test
    public void test32() throws Throwable {
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                (DataFusionProvider.DataFusionGlobalState) null);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generatePredicate();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    @Test
    public void test33() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.NULL;
        boolean boolean0 = dataFusionExpressionGenerator0.canGenerateColumnOfType(dataFusionSchema_DataFusionDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test34() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionConstant.DataFusionNullConstant dataFusionConstant_DataFusionNullConstant0 = new DataFusionConstant.DataFusionNullConstant();
        DataFusionExpression dataFusionExpression0 = dataFusionExpressionGenerator0
                .isNull((DataFusionExpression) dataFusionConstant_DataFusionNullConstant0);
        assertNotNull(dataFusionExpression0);
    }

    @Test
    public void test35() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionSelect dataFusionSelect0 = dataFusionExpressionGenerator0.generateSelect();
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateOptimizedQueryString(dataFusionSelect0,
                    (DataFusionExpression) dataFusionSelect0, false);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test36() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        // Undeclared exception!
        try {
            dataFusionExpressionGenerator0.generateBooleanExpression();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionExpressionGenerator", e);
        }
    }

    @Test
    public void test37() throws Throwable {
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionExpressionGenerator dataFusionExpressionGenerator0 = new DataFusionExpressionGenerator(
                dataFusionProvider_DataFusionGlobalState0);
        DataFusionConstant.DataFusionNullConstant dataFusionConstant_DataFusionNullConstant0 = new DataFusionConstant.DataFusionNullConstant();
        DataFusionExpression dataFusionExpression0 = dataFusionExpressionGenerator0
                .negatePredicate((DataFusionExpression) dataFusionConstant_DataFusionNullConstant0);
        assertNotNull(dataFusionExpression0);
    }
}
