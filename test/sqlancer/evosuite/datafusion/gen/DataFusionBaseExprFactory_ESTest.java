/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:18:19 GMT 2025
 */

package sqlancer.evosuite.datafusion.gen;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.Optional;
import org.junit.jupiter.api.Test;
import sqlancer.datafusion.DataFusionSchema;
import sqlancer.datafusion.gen.DataFusionBaseExpr;
import sqlancer.datafusion.gen.DataFusionBaseExprFactory;

public class DataFusionBaseExprFactory_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        // Undeclared exception!
        try {
            DataFusionBaseExprFactory.getExprsWithReturnType((Optional<DataFusionSchema.DataFusionDataType>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionBaseExprFactory", e);
        }
    }

    @Test
    public void test01() throws Throwable {
        // Undeclared exception!
        try {
            DataFusionBaseExprFactory.createExpr((DataFusionBaseExpr.DataFusionBaseExprType) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.gen.DataFusionBaseExprFactory", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_NVL2;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(3, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test03() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.LESS_THAN_OR_EQUAL_TO;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test04() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.EQUAL2;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test05() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_TANH;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test06() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.AGGR_COUNT;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("COUNT", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test07() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_COALESCE;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("COALESCE", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test08() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.AGGR_MAX;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("MAX", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test09() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_SINH;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test10() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_POWER;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("POWER", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test11() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ROUND_WITH_DECIMAL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("ROUND", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test12() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ATANH;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test13() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_LOG_WITH_BASE;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test14() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_DEGREES;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test15() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ISZERO;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test16() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.ADD;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(2, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test17() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ABS;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test18() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.IS_DISTINCT_FROM;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test19() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.BITWISE_XOR;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test20() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ROUND;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test21() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.PLUS;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test22() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.BITWISE_SHIFT_RIGHT;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(">>", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test23() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_SIN;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("SIN", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test24() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_LOG;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test25() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_COS;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test26() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_NVL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("NVL", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test27() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.LESS_THAN;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("<", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test28() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.GREATER_THAN_OR_EQUAL_TO;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test29() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.AGGR_MIN;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test30() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ATAN2;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("ATAN2", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test31() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_LCM;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(2, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test32() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.IS_NOT_NULL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("IS NOT NULL", dataFusionBaseExpr0.getTextRepresentation());
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test33() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_CEIL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("CEIL", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test34() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.IS_NULL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
        assertEquals("IS NULL", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test35() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.BITWISE_SHIFT_LEFT;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test36() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.GREATER_THAN;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test37() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.NOT;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("NOT", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test38() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_IFNULL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(2, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test39() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_LN;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test40() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_SIGNUM;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("SIGNUM", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test41() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_FACTORIAL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test42() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ISNAN;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("ISNAN", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test43() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_CBRT;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test44() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_COSH;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("COSH", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test45() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ATAN;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("ATAN", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test46() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.BITWISE_OR;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("|", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test47() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.SUB;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(2, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test48() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.AGGR_AVG;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("AVG", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test49() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.MINUS;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test50() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.NOT_EQUAL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test51() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.AGGR_SUM;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test52() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_LOG10;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("LOG10", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test53() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_NULLIF;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test54() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_RADIANS;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("RADIANS", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test55() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_SQRT;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("SQRT", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test56() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ACOS;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test57() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.BITWISE_AND;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("&", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test58() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_POW;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test59() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_LOG2;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("LOG2", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test60() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_TRUNC_WITH_DECIMAL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(2, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test61() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.IS_NOT_DISTINCT_FROM;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("IS NOT DISTINCT FROM", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test62() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.EQUAL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test63() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_TAN;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("TAN", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test64() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_GCD;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("GCD", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test65() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ASINH;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("ASINH", dataFusionBaseExpr0.toString());
    }

    @Test
    public void test66() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.MULTIPLICATION;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test67() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_EXP;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test68() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.AND;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(2, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test69() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.MODULO;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("%", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test70() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ACOSH;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("ACOSH", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test71() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_PI;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(0, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test72() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_FLOOR;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test73() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.DIVISION;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(2, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test74() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.OR;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(2, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test75() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_ASIN;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertFalse(dataFusionBaseExpr0.isVariadic);
    }

    @Test
    public void test76() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_TRUNC;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals(1, dataFusionBaseExpr0.nArgs);
    }

    @Test
    public void test77() throws Throwable {
        DataFusionBaseExpr.DataFusionBaseExprType dataFusionBaseExpr_DataFusionBaseExprType0 = DataFusionBaseExpr.DataFusionBaseExprType.FUNC_NANVL;
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory
                .createExpr(dataFusionBaseExpr_DataFusionBaseExprType0);
        assertEquals("NANVL", dataFusionBaseExpr0.getTextRepresentation());
    }

    @Test
    public void test78() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.DOUBLE;
        Optional<DataFusionSchema.DataFusionDataType> optional0 = Optional
                .ofNullable(dataFusionSchema_DataFusionDataType0);
        List<DataFusionBaseExpr> list0 = DataFusionBaseExprFactory.getExprsWithReturnType(optional0);
        assertEquals(16, list0.size());
    }

    @Test
    public void test79() throws Throwable {
        Optional<DataFusionSchema.DataFusionDataType> optional0 = Optional.empty();
        List<DataFusionBaseExpr> list0 = DataFusionBaseExprFactory.getExprsWithReturnType(optional0);
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test80() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.NULL;
        Optional<DataFusionSchema.DataFusionDataType> optional0 = Optional.of(dataFusionSchema_DataFusionDataType0);
        List<DataFusionBaseExpr> list0 = DataFusionBaseExprFactory.getExprsWithReturnType(optional0);
        assertEquals(0, list0.size());
    }

    @Test
    public void test81() throws Throwable {
        DataFusionBaseExpr dataFusionBaseExpr0 = DataFusionBaseExprFactory.getRandomAggregateExpr();
        assertEquals("MIN", dataFusionBaseExpr0.getTextRepresentation());
    }
}
