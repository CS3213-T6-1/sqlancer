/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 02:29:50 GMT 2025
 */

package sqlancer.evosuite.datafusion;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.datafusion.ast.DataFusionConstant;
import sqlancer.datafusion.DataFusionProvider;
import sqlancer.datafusion.DataFusionSchema;
import sqlancer.SQLConnection;

public class DataFusionSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        LinkedList<DataFusionSchema.DataFusionTable> linkedList0 = new LinkedList<DataFusionSchema.DataFusionTable>();
        // Undeclared exception!
        try {
            DataFusionSchema.DataFusionTable.getRandomColumns(linkedList0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test01() throws Throwable {
     * DataFusionSchema.DataFusionDataType.parseFromDataFusionCatalog("Float64"); DataFusionSchema.DataFusionDataType
     * dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BOOLEAN;
     * DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new
     * DataFusionProvider.DataFusionGlobalState();
     * dataFusionSchema_DataFusionDataType0.getRandomConstant(dataFusionProvider_DataFusionGlobalState0); ResultSet
     * resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn((String)
     * null).when(resultSet0).getString(anyInt()); doReturn(true, false).when(resultSet0).next(); PreparedStatement
     * preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
     * mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("vq0G"); Connection
     * connection1 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
     * null).when(connection1).createStatement(); SQLConnection sQLConnection1 = new SQLConnection(connection1); //
     * Undeclared exception! try { DataFusionSchema.fromConnection(sQLConnection1, "vq0G");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.datafusion.DataFusionSchema", e); } }
     */

    @Test
    public void test02() throws Throwable {
        DataFusionSchema dataFusionSchema0 = null;
        try {
            dataFusionSchema0 = new DataFusionSchema((List<DataFusionSchema.DataFusionTable>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        // Undeclared exception!
        try {
            DataFusionSchema.DataFusionDataType.parseFromDataFusionCatalog("aWU~rc<*OzL");
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // Unreachable. All branches should be eovered
            //
        }
    }

    @Test
    public void test04() throws Throwable {
        LinkedList<DataFusionSchema.DataFusionTable> linkedList0 = new LinkedList<DataFusionSchema.DataFusionTable>();
        DataFusionSchema dataFusionSchema0 = new DataFusionSchema(linkedList0);
    }

    @Test
    public void test05() throws Throwable {
        LinkedList<DataFusionSchema.DataFusionTable> linkedList0 = new LinkedList<DataFusionSchema.DataFusionTable>();
        List<DataFusionSchema.DataFusionColumn> list0 = DataFusionSchema.DataFusionTable.getAllColumns(linkedList0);
        DataFusionSchema.DataFusionTable dataFusionSchema_DataFusionTable0 = new DataFusionSchema.DataFusionTable(
                "SPLIT", list0, false);
        assertFalse(dataFusionSchema_DataFusionTable0.isView());
    }

    @Test
    public void test06() throws Throwable {
        DataFusionSchema.DataFusionDataType.getRandomWithoutNull();
        List<DataFusionSchema.DataFusionColumn> list0 = DataFusionSchema.DataFusionTable
                .getRandomColumns((List<DataFusionSchema.DataFusionTable>) null);
        assertEquals(1, list0.size());
    }

    @Test
    public void test07() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.NULL;
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionConstant.DataFusionNullConstant dataFusionConstant_DataFusionNullConstant0 = (DataFusionConstant.DataFusionNullConstant) dataFusionSchema_DataFusionDataType0
                .getRandomConstant(dataFusionProvider_DataFusionGlobalState0);
        assertEquals("NULL", dataFusionConstant_DataFusionNullConstant0.toString());
    }

    @Test
    public void test08() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.DOUBLE;
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        // Undeclared exception!
        try {
            dataFusionSchema_DataFusionDataType0.getRandomConstant(dataFusionProvider_DataFusionGlobalState0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.DataFusionSchema$DataFusionDataType", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BIGINT;
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        // Undeclared exception!
        try {
            dataFusionSchema_DataFusionDataType0.getRandomConstant(dataFusionProvider_DataFusionGlobalState0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.DataFusionSchema$DataFusionDataType", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType
                .getRandomWithoutNull();
        DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new DataFusionProvider.DataFusionGlobalState();
        DataFusionConstant.DataFusionNullConstant dataFusionConstant_DataFusionNullConstant0 = (DataFusionConstant.DataFusionNullConstant) dataFusionSchema_DataFusionDataType0
                .getRandomConstant(dataFusionProvider_DataFusionGlobalState0);
        assertEquals("NULL", dataFusionConstant_DataFusionNullConstant0.toString());
    }

    @Test
    public void test11() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType
                .parseFromDataFusionCatalog("Boolean");
        assertEquals(DataFusionSchema.DataFusionDataType.BOOLEAN, dataFusionSchema_DataFusionDataType0);
    }

    @Test
    public void test12() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType
                .parseFromDataFusionCatalog("Int64");
        assertEquals(DataFusionSchema.DataFusionDataType.BIGINT, dataFusionSchema_DataFusionDataType0);
    }

    @Test
    public void test13() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType
                .getRandomWithoutNull();
        assertEquals(DataFusionSchema.DataFusionDataType.BOOLEAN, dataFusionSchema_DataFusionDataType0);

        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType1 = DataFusionSchema.DataFusionDataType
                .getRandomWithoutNull();
        assertEquals(DataFusionSchema.DataFusionDataType.BIGINT, dataFusionSchema_DataFusionDataType1);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test14() throws Throwable {
     * DataFusionSchema.DataFusionDataType.parseFromDataFusionCatalog("Float64"); ResultSet resultSet0 =
     * mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn("Float64",
     * "1A#<w0J9RB").when(resultSet0).getString(anyInt()); doReturn(true, true, false).when(resultSet0).next();
     * ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn("SELECT COUNT(*) FROM ",
     * "Float64", "1A#<w0J9RB").when(resultSet1).getString(anyString()); doReturn(true, false).when(resultSet1).next();
     * PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
     * mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("1A#<w0J9RB"); Connection
     * connection1 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, statement0,
     * (Statement) null).when(connection1).createStatement(); SQLConnection sQLConnection1 = new
     * SQLConnection(connection1); // Undeclared exception! try { DataFusionSchema.fromConnection(sQLConnection1,
     * "1A#<w0J9RB"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.datafusion.DataFusionSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test15() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("Float64", "Float64", "Float64").when(resultSet0).getString(anyInt());
     * doReturn(true, true, true, false).when(resultSet0).next(); PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer()); doReturn(resultSet0, (ResultSet)
     * null).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
     * sQLConnection0.prepareStatement("DOUBLE"); Connection connection1 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(statement0, statement0).when(connection1).createStatement(); SQLConnection
     * sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
     * DataFusionSchema.fromConnection(sQLConnection1, ""); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.datafusion.DataFusionSchema", e); } }
     */

    @Test
    public void test16() throws Throwable {
        // Undeclared exception!
        try {
            DataFusionSchema.fromConnection((SQLConnection) null,
                    "SELECT table_name, column_to_column_name(logicalrelid, partkey) AS dist_col_name, colocationid FROM information_schema.tables LEFT OUTER JOIN pg_dist_partition ON logicalrelid=table_name::regclass WHERE table_schema='public' OR table_schema LIKE 'pg_temp_%';");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.datafusion.DataFusionSchema", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test17() throws Throwable { Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * DataFusionSchema.fromConnection(sQLConnection0, "float4_minmax_ops");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.datafusion.DataFusionSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test18() throws Throwable {
     * DataFusionSchema.DataFusionDataType.parseFromDataFusionCatalog("Float64"); DataFusionSchema.DataFusionDataType
     * dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BOOLEAN;
     * DataFusionProvider.DataFusionGlobalState dataFusionProvider_DataFusionGlobalState0 = new
     * DataFusionProvider.DataFusionGlobalState();
     * dataFusionSchema_DataFusionDataType0.getRandomConstant(dataFusionProvider_DataFusionGlobalState0); ResultSet
     * resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn((String)
     * null).when(resultSet0).getString(anyInt()); doReturn(true, false).when(resultSet0).next(); PreparedStatement
     * preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
     * mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("DOUBLE"); Connection
     * connection1 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
     * null).when(connection1).createStatement(); SQLConnection sQLConnection1 = new SQLConnection(connection1); //
     * Undeclared exception! try { DataFusionSchema.fromConnection(sQLConnection1, "");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.datafusion.DataFusionSchema", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test19() throws Throwable { PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer()); doReturn((ResultSet)
     * null).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
     * sQLConnection0.prepareStatement("DOUBLE"); Connection connection1 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(statement0).when(connection1).createStatement(); SQLConnection
     * sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
     * DataFusionSchema.fromConnection(sQLConnection1, ""); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.datafusion.DataFusionSchema", e); } }
     */

    @Test
    public void test20() throws Throwable {
        DataFusionSchema.DataFusionDataType dataFusionSchema_DataFusionDataType0 = DataFusionSchema.DataFusionDataType.BOOLEAN;
        DataFusionSchema.DataFusionColumn dataFusionSchema_DataFusionColumn0 = new DataFusionSchema.DataFusionColumn(
                "/ka", dataFusionSchema_DataFusionDataType0, false);
        boolean boolean0 = dataFusionSchema_DataFusionColumn0.isNullable();
        assertFalse(boolean0);
    }
}
