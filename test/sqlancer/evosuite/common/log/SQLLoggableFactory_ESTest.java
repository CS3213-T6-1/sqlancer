/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 01:02:36 GMT 2025
 */

package sqlancer.evosuite.common.log;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.common.log.Loggable;
import sqlancer.common.log.SQLLoggableFactory;
import sqlancer.common.query.SQLQueryAdapter;

public class SQLLoggableFactory_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        Loggable loggable0 = sQLLoggableFactory0.createLoggable("-p?<-", "o{v[ \"pveb=[\"*F[");
        assertEquals("-p?<-;o{v[ \"pveb=[\"*F[", loggable0.getLogString());
    }

    @Test
    public void test01() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        Loggable loggable0 = sQLLoggableFactory0.infoToLoggable("\u2502", "\u2502", "\u2502", (-2933L));
        assertEquals("-- Time: \u2502\n-- Database: \u2502\n-- Database version: \u2502\n-- seed value: -2933\n",
                loggable0.getLogString());
    }

    @Test
    public void test02() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        SQLQueryAdapter sQLQueryAdapter0 = sQLLoggableFactory0.getQueryForStateToReproduce("macaddr_ops");
        SQLQueryAdapter sQLQueryAdapter1 = sQLLoggableFactory0.commentOutQuery(sQLQueryAdapter0);
        assertEquals("-- macaddr_ops;", sQLQueryAdapter1.getQueryString());
    }

    @Test
    public void test03() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        // Undeclared exception!
        try {
            sQLLoggableFactory0.getQueryForStateToReproduce((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.query.SQLQueryAdapter", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        // Undeclared exception!
        try {
            sQLLoggableFactory0.createLoggable((String) null, (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    // @Test
    // public void test05() throws Throwable {
    // SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
    // MockThrowable mockThrowable0 = new MockThrowable();
    // mockThrowable0.setOriginForDelegate((StackTraceElement) null);
    // // Undeclared exception!
    // try {
    // sQLLoggableFactory0.convertStacktraceToLoggable(mockThrowable0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // }
    // }

    @Test
    public void test06() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        Loggable loggable0 = sQLLoggableFactory0.createLoggable("", (String) null);
        assertEquals(";", loggable0.getLogString());
    }

    @Test
    public void test07() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        Loggable loggable0 = sQLLoggableFactory0.createLoggableWithNoLinebreak(";bP_");
        assertEquals(";bP_;", loggable0.getLogString());
    }

    @Test
    public void test08() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        Loggable loggable0 = sQLLoggableFactory0.createLoggable(";");
        assertEquals(";\n", loggable0.getLogString());
    }

    @Test
    public void test09() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        Loggable loggable0 = sQLLoggableFactory0.getInfo("", (String) null, (-822L));
        assertEquals("-- Time: 2014/02/14 20:21:21\n-- Database: \n-- Database version: null\n-- seed value: -822\n",
                loggable0.getLogString());
    }

    @Test
    public void test10() throws Throwable {
        SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
        SQLQueryAdapter sQLQueryAdapter0 = sQLLoggableFactory0
                .getQueryForStateToReproduce("CREATE TABLE statements should set couldAffectSchema to true");
        SQLQueryAdapter sQLQueryAdapter1 = sQLLoggableFactory0.commentOutQuery(sQLQueryAdapter0);
        assertEquals("-- CREATE TABLE statements should set couldAffectSchema to true;",
                sQLQueryAdapter1.getLogString());
    }

    // @Test
    // public void test11() throws Throwable {
    // SQLLoggableFactory sQLLoggableFactory0 = new SQLLoggableFactory();
    // MockException mockException0 = new MockException("sqlancer.common.log.SQLLoggableFactory");
    // Loggable loggable0 = sQLLoggableFactory0.convertStacktraceToLoggable(mockException0);
    // // // Unstable assertion:
    // // assertEquals("--jdk.internal.reflect.GeneratedConstructorAccessor44.newInstance(Unknown
    // //
    // Source)\n--<evosuite>.<evosuite>(<evosuite>)\n--<evosuite>.<evosuite>(<evosuite>)\n--<evosuite>.<evosuite>(<evosuite>)\n--<evosuite>.<evosuite>(<evosuite>)\n--<evosuite>.<evosuite>(<evosuite>)\n--",
    // // loggable0.getLogString());
    // }
}
