/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:49:06 GMT 2025
 */

package sqlancer.evosuite.common.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.cnosdb.ast.CnosDBBinaryLogicalOperation;
import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.ast.CnosDBPrefixOperation;
import sqlancer.materialize.ast.MaterializeBinaryArithmeticOperation;
import sqlancer.materialize.ast.MaterializeBinaryComparisonOperation;
import sqlancer.materialize.ast.MaterializeConstant;
import sqlancer.materialize.ast.MaterializeExpression;

public class BinaryOperatorNode_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
        CnosDBPrefixOperation.PrefixOperator cnosDBPrefixOperation_PrefixOperator0 = CnosDBPrefixOperation.PrefixOperator.NOT;
        CnosDBPrefixOperation cnosDBPrefixOperation0 = new CnosDBPrefixOperation(cnosDBConstant_CnosDBNullConstant0,
                cnosDBPrefixOperation_PrefixOperator0);
        CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(
                cnosDBPrefixOperation0, cnosDBConstant_CnosDBNullConstant0,
                (CnosDBBinaryLogicalOperation.BinaryLogicalOperator) null);
        // Undeclared exception!
        try {
            cnosDBBinaryLogicalOperation0.getOperatorRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.BinaryOperatorNode", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator materializeBinaryArithmeticOperation_MaterializeBinaryOperator0 = MaterializeBinaryArithmeticOperation.MaterializeBinaryOperator.DIVISION;
        MaterializeBinaryArithmeticOperation materializeBinaryArithmeticOperation0 = new MaterializeBinaryArithmeticOperation(
                (MaterializeExpression) null, (MaterializeExpression) null,
                materializeBinaryArithmeticOperation_MaterializeBinaryOperator0);
        String string0 = materializeBinaryArithmeticOperation0.getOperatorRepresentation();
        assertEquals("/", string0);
    }

    @Test
    public void test2() throws Throwable {
        MaterializeConstant materializeConstant0 = MaterializeConstant.createTrue();
        MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0 = MaterializeBinaryComparisonOperation.MaterializeBinaryComparisonOperator.GREATER;
        MaterializeBinaryComparisonOperation materializeBinaryComparisonOperation0 = new MaterializeBinaryComparisonOperation(
                materializeConstant0, materializeConstant0,
                materializeBinaryComparisonOperation_MaterializeBinaryComparisonOperator0);
        MaterializeConstant materializeConstant1 = materializeBinaryComparisonOperation0.getExpectedValue();
        assertFalse(materializeConstant1.isNull());
    }
}
