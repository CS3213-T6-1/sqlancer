/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 17:53:00 GMT 2025
 */

package sqlancer.evosuite.common.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.SelectBase;

public class SelectBase_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        selectBase0.setWhereClause(selectBase0);
        Object object0 = selectBase0.getWhereClause();
        assertNotNull(object0);
    }

    @Test
    public void test01() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        selectBase0.orderByExpressions = (List<Integer>) linkedList0;
        List<Integer> list0 = selectBase0.getOrderByClauses();
        assertEquals(0, list0.size());
    }

    @Test
    public void test02() throws Throwable {
        LinkedList<SelectBase<Object>> linkedList0 = new LinkedList<SelectBase<Object>>();
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        linkedList0.add(selectBase0);
        SelectBase<SelectBase<Object>> selectBase1 = new SelectBase<SelectBase<Object>>();
        selectBase1.setOrderByClauses(linkedList0);
        List<SelectBase<Object>> list0 = selectBase1.getOrderByClauses();
        assertNotNull(list0);
        assertTrue(list0.contains(selectBase0));
    }

    @Test
    public void test03() throws Throwable {
        SelectBase<SelectBase<Integer>> selectBase0 = new SelectBase<SelectBase<Integer>>();
        SelectBase<Integer> selectBase1 = new SelectBase<Integer>();
        selectBase0.offsetClause = selectBase1;
        SelectBase<Integer> selectBase2 = selectBase0.getOffsetClause();
        assertSame(selectBase2, selectBase1);
    }

    @Test
    public void test04() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        SelectBase<Integer> selectBase1 = new SelectBase<Integer>();
        selectBase0.limitClause = (Object) selectBase1;
        Object object0 = selectBase0.getLimitClause();
        assertNotNull(object0);
    }

    @Test
    public void test05() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        selectBase0.setJoinList((List<Object>) null);
        List<Object> list0 = selectBase0.getJoinList();
        assertNull(list0);
    }

    @Test
    public void test06() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        selectBase0.joinList = (List<Integer>) linkedList0;
        List<Integer> list0 = selectBase0.getJoinList();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test07() throws Throwable {
        LinkedList<SelectBase<Object>> linkedList0 = new LinkedList<SelectBase<Object>>();
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        linkedList0.add(selectBase0);
        SelectBase<SelectBase<Object>> selectBase1 = new SelectBase<SelectBase<Object>>();
        selectBase1.setJoinList(linkedList0);
        List<SelectBase<Object>> list0 = selectBase1.getJoinList();
        assertTrue(list0.contains(selectBase0));
        assertNotNull(list0);
    }

    @Test
    public void test08() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        SelectBase<SelectBase<Object>> selectBase1 = new SelectBase<SelectBase<Object>>();
        selectBase0.setHavingClause(selectBase1);
        Object object0 = selectBase0.getHavingClause();
        assertNotNull(object0);
    }

    @Test
    public void test09() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        selectBase0.groupByExpressions = (List<Integer>) linkedList0;
        List<Integer> list0 = selectBase0.getGroupByExpressions();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test10() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        Integer integer0 = new Integer(587);
        linkedList0.add(integer0);
        selectBase0.groupByExpressions = (List<Integer>) linkedList0;
        List<Integer> list0 = selectBase0.getGroupByExpressions();
        assertNotNull(list0);
        assertTrue(list0.contains(587));
    }

    @Test
    public void test11() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        selectBase0.groupByExpressions = (List<Integer>) linkedList0;
        List<Integer> list0 = selectBase0.getGroupByClause();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test12() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        Integer integer0 = new Integer(587);
        linkedList0.add(integer0);
        selectBase0.groupByExpressions = (List<Integer>) linkedList0;
        List<Integer> list0 = selectBase0.getGroupByClause();
        assertNotNull(list0);
        assertTrue(list0.contains(587));
    }

    @Test
    public void test13() throws Throwable {
        SelectBase<SelectBase<Object>> selectBase0 = new SelectBase<SelectBase<Object>>();
        LinkedList<SelectBase<Object>> linkedList0 = new LinkedList<SelectBase<Object>>();
        SelectBase<Object> selectBase1 = new SelectBase<Object>();
        linkedList0.add(selectBase1);
        selectBase0.setFromList(linkedList0);
        List<SelectBase<Object>> list0 = selectBase0.getFromList();
        assertNotNull(list0);
        assertTrue(list0.contains(selectBase1));
    }

    @Test
    public void test14() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        selectBase0.fetchColumns = (List<Integer>) linkedList0;
        List<Integer> list0 = selectBase0.getFetchColumns();
        assertEquals(0, list0.size());
    }

    @Test
    public void test15() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        // Undeclared exception!
        try {
            selectBase0.setGroupByClause((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        selectBase0.groupByExpressions = null;
        // Undeclared exception!
        try {
            selectBase0.getGroupByExpressions();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test17() throws Throwable {
        SelectBase<SelectBase<Integer>> selectBase0 = new SelectBase<SelectBase<Integer>>();
        LinkedList<SelectBase<Integer>> linkedList0 = new LinkedList<SelectBase<Integer>>();
        selectBase0.setGroupByExpressions(linkedList0);
        assertEquals(0, linkedList0.size());
    }

    @Test
    public void test18() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        // Undeclared exception!
        try {
            selectBase0.setFromList((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        selectBase0.orderByExpressions = null;
        // Undeclared exception!
        try {
            selectBase0.getOrderByClauses();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test20() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        // Undeclared exception!
        try {
            selectBase0.setOrderByClauses((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        selectBase0.groupByExpressions = null;
        // Undeclared exception!
        try {
            selectBase0.getGroupByClause();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test22() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        // Undeclared exception!
        try {
            selectBase0.setGroupByExpressions((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        SelectBase<SelectBase<Integer>> selectBase0 = new SelectBase<SelectBase<Integer>>();
        // Undeclared exception!
        try {
            selectBase0.getFromList();
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        SelectBase<SelectBase<Object>> selectBase0 = new SelectBase<SelectBase<Object>>();
        LinkedList<SelectBase<Object>> linkedList0 = new LinkedList<SelectBase<Object>>();
        selectBase0.setFromList(linkedList0);
        List<SelectBase<Object>> list0 = selectBase0.getFromList();
        assertEquals(0, list0.size());
    }

    @Test
    public void test25() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        // Undeclared exception!
        try {
            selectBase0.setFromTables((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test26() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        // Undeclared exception!
        try {
            selectBase0.getFetchColumns();
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        Integer integer0 = new Integer((-1));
        linkedList0.addFirst(integer0);
        selectBase0.setFetchColumns(linkedList0);
        List<Integer> list0 = selectBase0.getFetchColumns();
        assertTrue(list0.contains((-1)));
        assertNotNull(list0);
    }

    @Test
    public void test28() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        // Undeclared exception!
        try {
            selectBase0.setFetchColumns(linkedList0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        // Undeclared exception!
        try {
            selectBase0.setFetchColumns((List<Integer>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        SelectBase<SelectBase<Object>> selectBase0 = new SelectBase<SelectBase<Object>>();
        selectBase0.clearHavingClause();
    }

    @Test
    public void test31() throws Throwable {
        SelectBase<SelectBase<Object>> selectBase0 = new SelectBase<SelectBase<Object>>();
        Object object0 = selectBase0.getOffsetClause();
        assertNull(object0);
    }

    @Test
    public void test32() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        Integer integer0 = selectBase0.getWhereClause();
        assertNull(integer0);
    }

    @Test
    public void test33() throws Throwable {
        SelectBase<SelectBase<Object>> selectBase0 = new SelectBase<SelectBase<Object>>();
        SelectBase<Object> selectBase1 = new SelectBase<Object>();
        selectBase0.setLimitClause(selectBase1);
    }

    @Test
    public void test34() throws Throwable {
        LinkedList<SelectBase<Object>> linkedList0 = new LinkedList<SelectBase<Object>>();
        SelectBase<SelectBase<Object>> selectBase0 = new SelectBase<SelectBase<Object>>();
        selectBase0.setFromTables(linkedList0);
        assertEquals(0, linkedList0.size());
    }

    @Test
    public void test35() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        Object object0 = selectBase0.getLimitClause();
        assertNull(object0);
    }

    @Test
    public void test36() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        SelectBase<Object> selectBase1 = new SelectBase<Object>();
        selectBase1.setOffsetClause(selectBase0);
    }

    @Test
    public void test37() throws Throwable {
        SelectBase<Object> selectBase0 = new SelectBase<Object>();
        Object object0 = selectBase0.getHavingClause();
        assertNull(object0);
    }

    @Test
    public void test38() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        selectBase0.clearGroupByExpressions();
    }

    @Test
    public void test39() throws Throwable {
        SelectBase<Integer> selectBase0 = new SelectBase<Integer>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        selectBase0.setGroupByClause(linkedList0);
        assertEquals(0, linkedList0.size());
    }
}
