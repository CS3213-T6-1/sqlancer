/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:30:58 GMT 2025
 */

package sqlancer.evosuite.common.ast.newast;

import sqlancer.common.ast.newast.NewBetweenOperatorNode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class NewBetweenOperatorNode_ESTest {

    @Test
    public void test0() throws Throwable {
        Integer integer0 = new Integer((-1));
        Integer integer1 = new Integer((-1));
        NewBetweenOperatorNode<Object> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Object>(integer0, integer1,
                integer0, true);
        Object object0 = newBetweenOperatorNode0.getRight();
        assertTrue(newBetweenOperatorNode0.isTrue());
        assertNotNull(object0);
    }

    @Test
    public void test1() throws Throwable {
        Object object0 = new Object();
        NewBetweenOperatorNode<Object> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Object>(object0, object0,
                object0, true);
        Integer integer0 = new Integer(1898);
        newBetweenOperatorNode0.left = (Object) integer0;
        Object object1 = newBetweenOperatorNode0.getRight();
        assertNotNull(object1);
        assertTrue(newBetweenOperatorNode0.isTrue());
    }

    @Test
    public void test2() throws Throwable {
        Integer integer0 = new Integer((-1));
        Integer integer1 = new Integer((-1));
        NewBetweenOperatorNode<Object> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Object>(integer0, integer1,
                integer0, true);
        newBetweenOperatorNode0.right = (Object) integer1;
        Object object0 = newBetweenOperatorNode0.getLeft();
        assertNotNull(object0);
        assertTrue(newBetweenOperatorNode0.isTrue());
    }

    @Test
    public void test3() throws Throwable {
        NewBetweenOperatorNode<Object> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Object>((Object) null,
                (Object) null, (Object) null, true);
        Integer integer0 = new Integer((-1));
        newBetweenOperatorNode0.middle = (Object) integer0;
        Object object0 = newBetweenOperatorNode0.getLeft();
        assertNull(object0);
        assertTrue(newBetweenOperatorNode0.isTrue());
    }

    @Test
    public void test4() throws Throwable {
        NewBetweenOperatorNode<Object> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Object>((Object) null,
                (Object) null, (Object) null, true);
        newBetweenOperatorNode0.isTrue = false;
        boolean boolean0 = newBetweenOperatorNode0.isTrue();
        assertFalse(boolean0);
    }

    @Test
    public void test5() throws Throwable {
        NewBetweenOperatorNode<Object> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Object>((Object) null,
                (Object) null, (Object) null, true);
        newBetweenOperatorNode0.getRight();
        assertTrue(newBetweenOperatorNode0.isTrue());
    }

    @Test
    public void test6() throws Throwable {
        Integer integer0 = new Integer((-544));
        NewBetweenOperatorNode<Integer> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Integer>(integer0,
                integer0, integer0, false);
        Object object0 = new Object();
        NewBetweenOperatorNode<Object> newBetweenOperatorNode1 = new NewBetweenOperatorNode<Object>(integer0, object0,
                newBetweenOperatorNode0, false);
        Object object1 = newBetweenOperatorNode1.getMiddle();
        assertNotNull(object1);
        assertFalse(newBetweenOperatorNode1.isTrue());
    }

    @Test
    public void test7() throws Throwable {
        Object object0 = new Object();
        NewBetweenOperatorNode<Object> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Object>(object0, object0,
                object0, true);
        Object object1 = newBetweenOperatorNode0.getLeft();
        assertTrue(newBetweenOperatorNode0.isTrue());
        assertNotNull(object1);
    }

    @Test
    public void test8() throws Throwable {
        NewBetweenOperatorNode<Object> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Object>((Object) null,
                (Object) null, (Object) null, true);
        boolean boolean0 = newBetweenOperatorNode0.isTrue();
        assertTrue(boolean0);
    }

    @Test
    public void test9() throws Throwable {
        NewBetweenOperatorNode<Object> newBetweenOperatorNode0 = new NewBetweenOperatorNode<Object>((Object) null,
                (Object) null, (Object) null, true);
        newBetweenOperatorNode0.getMiddle();
        assertTrue(newBetweenOperatorNode0.isTrue());
    }
}
