/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 07 13:53:58 GMT 2025
 */

package sqlancer.evosuite.common.ast.newast;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.Test;

import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.common.ast.newast.NewBinaryOperatorNode;

import sqlancer.h2.H2ExpressionGenerator;

public class NewBinaryOperatorNode_ESTest {

    @Test
    public void test0() throws Throwable {
        Integer integer0 = 2331;
        Integer integer1 = 2331;
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator.NOT;
        NewBinaryOperatorNode<Integer> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Integer>(integer0, integer1,
                h2ExpressionGenerator_H2UnaryPrefixOperator0);
        Integer integer2 = newBinaryOperatorNode0.getRight();
        assertEquals(2331, (int) integer2);
    }

    @Test
    public void test1() throws Throwable {
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_NOT_FALSE;
        NewBinaryOperatorNode<Object> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Object>((Object) null,
                (Object) null, h2ExpressionGenerator_H2UnaryPostfixOperator0);
        Object object0 = newBinaryOperatorNode0.getRight();
        assertNull(object0);
    }

    @Test
    public void test2() throws Throwable {
        Integer integer0 = (-1827);
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_NOT_FALSE;
        NewBinaryOperatorNode<Integer> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Integer>((Integer) null,
                integer0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
        Integer integer1 = newBinaryOperatorNode0.getLeft();
        assertNull(integer1);
    }

    @Test
    public void test3() throws Throwable {
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_FALSE;
        NewBinaryOperatorNode<Object> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Object>(
                h2ExpressionGenerator_H2UnaryPostfixOperator0, h2ExpressionGenerator_H2UnaryPostfixOperator0,
                h2ExpressionGenerator_H2UnaryPostfixOperator0);
        Object object0 = newBinaryOperatorNode0.getLeft();
        assertSame(object0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
    }

    @Test
    public void test4() throws Throwable {
        NewBinaryOperatorNode<Object> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Object>((Object) null,
                (Object) null, (BinaryOperatorNode.Operator) null);
        // Undeclared exception!
        try {
            newBinaryOperatorNode0.getOperatorRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewBinaryOperatorNode", e);
        }
    }

    private void verifyException(String s, NullPointerException e) {
    }

    @Test
    public void test5() throws Throwable {
        Integer integer0 = (-1827);
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.SMALLER;
        NewBinaryOperatorNode<Object> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Object>(integer0, integer0,
                h2ExpressionGenerator_H2BinaryComparisonOperator0);
        String string0 = newBinaryOperatorNode0.getOperatorRepresentation();
        assertEquals("<", string0);
    }

    @Test
    public void test6() throws Throwable {
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_TRUE;
        NewBinaryOperatorNode<Object> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Object>(
                h2ExpressionGenerator_H2UnaryPostfixOperator0, h2ExpressionGenerator_H2UnaryPostfixOperator0,
                h2ExpressionGenerator_H2UnaryPostfixOperator0);
        Object object0 = newBinaryOperatorNode0.getRight();
        assertSame(object0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
    }
}
