/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 14:23:33 GMT 2025
 */

package sqlancer.evosuite.common.ast.newast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.common.ast.newast.NewBinaryOperatorNode;
import sqlancer.h2.H2ExpressionGenerator;

public class NewBinaryOperatorNode_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator0 = H2ExpressionGenerator.H2BinaryLogicalOperator.AND;
        H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator1 = H2ExpressionGenerator.H2BinaryLogicalOperator.OR;
        NewBinaryOperatorNode<H2ExpressionGenerator.H2BinaryLogicalOperator> newBinaryOperatorNode0 = new NewBinaryOperatorNode<H2ExpressionGenerator.H2BinaryLogicalOperator>(
                h2ExpressionGenerator_H2BinaryLogicalOperator0, h2ExpressionGenerator_H2BinaryLogicalOperator1,
                h2ExpressionGenerator_H2BinaryLogicalOperator1);
        H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator2 = newBinaryOperatorNode0
                .getRight();
        assertEquals(H2ExpressionGenerator.H2BinaryLogicalOperator.OR, h2ExpressionGenerator_H2BinaryLogicalOperator2);
    }

    @Test
    public void test1() throws Throwable {
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.GREATER;
        NewBinaryOperatorNode<Integer> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Integer>((Integer) null,
                (Integer) null, h2ExpressionGenerator_H2BinaryComparisonOperator0);
        Integer integer0 = newBinaryOperatorNode0.getRight();
        assertNull(integer0);
    }

    @Test
    public void test2() throws Throwable {
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.GREATER;
        H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator0 = H2ExpressionGenerator.H2BinaryLogicalOperator.AND;
        NewBinaryOperatorNode<H2ExpressionGenerator.H2BinaryLogicalOperator> newBinaryOperatorNode0 = new NewBinaryOperatorNode<H2ExpressionGenerator.H2BinaryLogicalOperator>(
                h2ExpressionGenerator_H2BinaryLogicalOperator0, h2ExpressionGenerator_H2BinaryLogicalOperator0,
                h2ExpressionGenerator_H2BinaryLogicalOperator0);
        NewBinaryOperatorNode<Object> newBinaryOperatorNode1 = new NewBinaryOperatorNode<Object>(
                h2ExpressionGenerator_H2BinaryComparisonOperator0, newBinaryOperatorNode0,
                h2ExpressionGenerator_H2BinaryComparisonOperator0);
        Object object0 = newBinaryOperatorNode1.getLeft();
        assertEquals(H2ExpressionGenerator.H2BinaryComparisonOperator.GREATER, object0);
    }

    @Test
    public void test3() throws Throwable {
        NewBinaryOperatorNode<Object> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Object>((Object) null,
                (Object) null, (BinaryOperatorNode.Operator) null);
        // Undeclared exception!
        try {
            newBinaryOperatorNode0.getOperatorRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewBinaryOperatorNode", e);
        }
    }

    @Test
    public void test4() throws Throwable {
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.GREATER;
        NewBinaryOperatorNode<Integer> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Integer>((Integer) null,
                (Integer) null, h2ExpressionGenerator_H2BinaryComparisonOperator0);
        String string0 = newBinaryOperatorNode0.getOperatorRepresentation();
        assertEquals(">", string0);
    }

    @Test
    public void test5() throws Throwable {
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.GREATER;
        NewBinaryOperatorNode<Integer> newBinaryOperatorNode0 = new NewBinaryOperatorNode<Integer>((Integer) null,
                (Integer) null, h2ExpressionGenerator_H2BinaryComparisonOperator0);
        Integer integer0 = newBinaryOperatorNode0.getLeft();
        assertNull(integer0);
    }
}
