/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:21:33 GMT 2025
 */

package sqlancer.evosuite.common.ast.newast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.common.ast.newast.NewUnaryPostfixOperatorNode;
import sqlancer.h2.H2ExpressionGenerator;

public class NewUnaryPostfixOperatorNode_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator0 = H2ExpressionGenerator.H2BinaryLogicalOperator.AND;
        NewUnaryPostfixOperatorNode<H2ExpressionGenerator.H2BinaryLogicalOperator> newUnaryPostfixOperatorNode0 = new NewUnaryPostfixOperatorNode<H2ExpressionGenerator.H2BinaryLogicalOperator>(
                h2ExpressionGenerator_H2BinaryLogicalOperator0, h2ExpressionGenerator_H2BinaryLogicalOperator0);
        String string0 = newUnaryPostfixOperatorNode0.getOperatorRepresentation();
        assertEquals("AND", string0);
    }

    @Test
    public void test1() throws Throwable {
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.EQUALS;
        NewUnaryPostfixOperatorNode<Integer> newUnaryPostfixOperatorNode0 = new NewUnaryPostfixOperatorNode<Integer>(
                (Integer) null, h2ExpressionGenerator_H2BinaryComparisonOperator0);
        Integer integer0 = newUnaryPostfixOperatorNode0.getExpr();
        assertNull(integer0);
    }

    @Test
    public void test2() throws Throwable {
        H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator0 = H2ExpressionGenerator.H2BinaryLogicalOperator.OR;
        NewUnaryPostfixOperatorNode<H2ExpressionGenerator.H2BinaryLogicalOperator> newUnaryPostfixOperatorNode0 = new NewUnaryPostfixOperatorNode<H2ExpressionGenerator.H2BinaryLogicalOperator>(
                h2ExpressionGenerator_H2BinaryLogicalOperator0, h2ExpressionGenerator_H2BinaryLogicalOperator0);
        H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator1 = newUnaryPostfixOperatorNode0
                .getExpr();
        assertEquals(H2ExpressionGenerator.H2BinaryLogicalOperator.OR, h2ExpressionGenerator_H2BinaryLogicalOperator1);
    }

    @Test
    public void test3() throws Throwable {
        Object object0 = new Object();
        NewUnaryPostfixOperatorNode<Object> newUnaryPostfixOperatorNode0 = new NewUnaryPostfixOperatorNode<Object>(
                object0, (BinaryOperatorNode.Operator) null);
        // Undeclared exception!
        try {
            newUnaryPostfixOperatorNode0.getOperatorRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewUnaryPostfixOperatorNode", e);
        }
    }
}
