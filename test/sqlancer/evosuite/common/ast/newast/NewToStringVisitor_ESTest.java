/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 02:41:24 GMT 2025
 */

package sqlancer.evosuite.common.ast.newast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.common.ast.newast.NewAliasNode;
import sqlancer.common.ast.newast.NewBetweenOperatorNode;
import sqlancer.common.ast.newast.NewBinaryOperatorNode;
import sqlancer.common.ast.newast.NewCaseOperatorNode;
import sqlancer.common.ast.newast.NewFunctionNode;
import sqlancer.common.ast.newast.NewInOperatorNode;
import sqlancer.common.ast.newast.NewOrderingTerm;
import sqlancer.common.ast.newast.NewPostfixTextNode;
import sqlancer.common.ast.newast.NewTernaryNode;
import sqlancer.common.ast.newast.NewUnaryPostfixOperatorNode;
import sqlancer.common.ast.newast.NewUnaryPrefixOperatorNode;
import sqlancer.databend.ast.DatabendAlias;
import sqlancer.databend.ast.DatabendBinaryComparisonOperation;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendOrderByTerm;
import sqlancer.databend.ast.DatabendPostFixText;
import sqlancer.databend.ast.DatabendSelect;
import sqlancer.databend.ast.DatabendUnaryPostfixOperation;
import sqlancer.databend.ast.DatabendUnaryPrefixOperation;
import sqlancer.databend.DatabendToStringVisitor;
import sqlancer.datafusion.ast.DataFusionConstant;
import sqlancer.datafusion.ast.DataFusionExpression;
import sqlancer.datafusion.ast.DataFusionFunction;
import sqlancer.datafusion.DataFusionToStringVisitor;
import sqlancer.duckdb.ast.DuckDBCaseOperator;
import sqlancer.duckdb.ast.DuckDBConstant;
import sqlancer.duckdb.ast.DuckDBExpression;
import sqlancer.duckdb.ast.DuckDBFunction;
import sqlancer.duckdb.ast.DuckDBPostFixText;
import sqlancer.duckdb.ast.DuckDBTernary;
import sqlancer.duckdb.DuckDBToStringVisitor;
import sqlancer.h2.ast.H2BetweenOperation;
import sqlancer.h2.ast.H2BinaryOperation;
import sqlancer.h2.ast.H2CaseOperation;
import sqlancer.h2.ast.H2Constant;
import sqlancer.h2.ast.H2Expression;
import sqlancer.h2.ast.H2InOperation;
import sqlancer.h2.ast.H2Join;
import sqlancer.h2.ast.H2Select;
import sqlancer.h2.ast.H2TableReference;
import sqlancer.h2.ast.H2UnaryPostfixOperation;
import sqlancer.h2.H2ExpressionGenerator;
import sqlancer.h2.H2Schema;
import sqlancer.h2.H2ToStringVisitor;
import sqlancer.hsqldb.ast.HSQLDBBinaryOperation;
import sqlancer.hsqldb.ast.HSQLDBExpression;
import sqlancer.hsqldb.ast.HSQLDBUnaryPrefixOperation;
import sqlancer.hsqldb.HSQLDBToStringVisitor;
import sqlancer.presto.ast.PrestoAggregateFunction;
import sqlancer.presto.ast.PrestoAlias;
import sqlancer.presto.ast.PrestoConstant;
import sqlancer.presto.ast.PrestoDateFunction;
import sqlancer.presto.ast.PrestoExpression;
import sqlancer.presto.ast.PrestoMultiValuedComparisonOperator;
import sqlancer.presto.ast.PrestoMultiValuedComparisonType;
import sqlancer.presto.ast.PrestoQuantifiedComparison;
import sqlancer.presto.ast.PrestoSelect;
import sqlancer.presto.ast.PrestoTernary;
import sqlancer.presto.ast.PrestoUnaryPostfixOperation;
import sqlancer.presto.ast.PrestoUnaryPrefixOperation;
import sqlancer.presto.PrestoSchema;
import sqlancer.presto.PrestoToStringVisitor;
import sqlancer.questdb.ast.QuestDBBinaryOperation;
import sqlancer.questdb.ast.QuestDBColumnReference;
import sqlancer.questdb.ast.QuestDBConstant;
import sqlancer.questdb.ast.QuestDBExpression;
import sqlancer.questdb.ast.QuestDBInOperation;
import sqlancer.questdb.ast.QuestDBSelect;
import sqlancer.questdb.ast.QuestDBUnaryPrefixOperation;
import sqlancer.questdb.QuestDBSchema;
import sqlancer.questdb.QuestDBToStringVisitor;

public class NewToStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        HSQLDBToStringVisitor hSQLDBToStringVisitor0 = new HSQLDBToStringVisitor();
        QuestDBToStringVisitor questDBToStringVisitor0 = new QuestDBToStringVisitor();
        LinkedList<QuestDBExpression> linkedList0 = new LinkedList<QuestDBExpression>();
        NewFunctionNode<QuestDBExpression, Object> newFunctionNode0 = new NewFunctionNode<QuestDBExpression, Object>(
                linkedList0, hSQLDBToStringVisitor0);
        questDBToStringVisitor0.visit(newFunctionNode0);
    }

    @Test
    public void test01() throws Throwable {
        QuestDBToStringVisitor questDBToStringVisitor0 = new QuestDBToStringVisitor();
        QuestDBConstant.QuestDBDoubleConstant questDBConstant_QuestDBDoubleConstant0 = new QuestDBConstant.QuestDBDoubleConstant(
                (-1676.298617));
        QuestDBSelect questDBSelect0 = new QuestDBSelect();
        List<QuestDBExpression> list0 = questDBSelect0.getGroupByClause();
        QuestDBInOperation questDBInOperation0 = new QuestDBInOperation(questDBConstant_QuestDBDoubleConstant0, list0,
                true);
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator
                .getRandom();
        QuestDBBinaryOperation questDBBinaryOperation0 = new QuestDBBinaryOperation(questDBInOperation0,
                questDBInOperation0, h2ExpressionGenerator_H2UnaryPrefixOperator0);
        questDBToStringVisitor0.visit((NewBinaryOperatorNode<QuestDBExpression>) questDBBinaryOperation0);
    }

    @Test
    public void test02() throws Throwable {
        H2Expression h2Expression0 = H2Constant.createStringConstant("XM");
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        NewAliasNode<H2Expression> newAliasNode0 = new NewAliasNode<H2Expression>(h2Expression0, " WHEN ");
        h2ToStringVisitor0.visit(newAliasNode0);
        assertEquals(" WHEN ", newAliasNode0.getAlias());
    }

    @Test
    public void test03() throws Throwable {
        QuestDBToStringVisitor questDBToStringVisitor0 = new QuestDBToStringVisitor();
        LinkedList<QuestDBExpression> linkedList0 = new LinkedList<QuestDBExpression>();
        questDBToStringVisitor0.visit((List<QuestDBExpression>) linkedList0);
        assertEquals("", questDBToStringVisitor0.get());
    }

    @Test
    public void test04() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendConstant_DatabendNullConstant0,
                " IN (");
        String string0 = DatabendToStringVisitor.asString(databendPostFixText0);
        assertNotNull(string0);
    }

    @Test
    public void test05() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendAlias databendAlias0 = new DatabendAlias(databendConstant_DatabendBooleanConstant0,
                "X=:/r[p[439Op`:B");
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendAlias0,
                databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
        databendToStringVisitor0.visit((NewUnaryPrefixOperatorNode<DatabendExpression>) databendUnaryPrefixOperation0);
        assertEquals(DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT,
                databendUnaryPrefixOperation0.getOp());
    }

    @Test
    public void test06() throws Throwable {
        NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.DESC;
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendConstant_DatabendNullConstant0,
                newOrderingTerm_Ordering0);
        String string0 = DatabendToStringVisitor.asString(databendOrderByTerm0);
        assertNotNull(string0);
    }

    @Test
    public void test07() throws Throwable {
        H2Constant.H2IntConstant h2Constant_H2IntConstant0 = new H2Constant.H2IntConstant(0L);
        HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0 = HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator.UNARY_PLUS;
        H2UnaryPostfixOperation h2UnaryPostfixOperation0 = new H2UnaryPostfixOperation(h2Constant_H2IntConstant0,
                hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0);
        H2BetweenOperation h2BetweenOperation0 = new H2BetweenOperation(h2UnaryPostfixOperation0,
                h2Constant_H2IntConstant0, h2UnaryPostfixOperation0, false);
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        h2ToStringVisitor0.visit((NewBetweenOperatorNode<H2Expression>) h2BetweenOperation0);
        assertFalse(h2BetweenOperation0.isTrue());
    }

    @Test
    public void test08() throws Throwable {
        DataFusionToStringVisitor dataFusionToStringVisitor0 = new DataFusionToStringVisitor();
        // Undeclared exception!
        try {
            dataFusionToStringVisitor0.visit((NewUnaryPrefixOperatorNode<DataFusionExpression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        PrestoToStringVisitor prestoToStringVisitor0 = new PrestoToStringVisitor();
        PrestoAggregateFunction prestoAggregateFunction0 = PrestoAggregateFunction.CHECKSUM;
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.SMALLER;
        PrestoUnaryPrefixOperation prestoUnaryPrefixOperation0 = new PrestoUnaryPrefixOperation(
                prestoAggregateFunction0, h2ExpressionGenerator_H2BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            prestoToStringVisitor0.visit((NewUnaryPrefixOperatorNode<PrestoExpression>) prestoUnaryPrefixOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // class sqlancer.presto.ast.PrestoAggregateFunction$3
            //
        }
    }

    @Test
    public void test10() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((NewUnaryPostfixOperatorNode<H2Expression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        PrestoToStringVisitor prestoToStringVisitor0 = new PrestoToStringVisitor();
        PrestoSelect prestoSelect0 = new PrestoSelect();
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.DECIMAL;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = new PrestoSchema.PrestoCompositeDataType(
                prestoSchema_PrestoDataType0, 2, 2);
        PrestoExpression prestoExpression0 = PrestoConstant.generateConstant(prestoSchema_PrestoCompositeDataType0,
                true);
        NewTernaryNode<PrestoExpression> newTernaryNode0 = new NewTernaryNode<PrestoExpression>(prestoSelect0,
                prestoExpression0, prestoSelect0, "sqlancer.h2.ast.H2Constant$H2BoolConstant@0000000001", "");
        // Undeclared exception!
        try {
            prestoToStringVisitor0.visit(newTernaryNode0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        NewTernaryNode<H2Expression> newTernaryNode0 = new NewTernaryNode<H2Expression>((H2Expression) null,
                (H2Expression) null, (H2Expression) null, "((", "((");
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit(newTernaryNode0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test13() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((NewPostfixTextNode<H2Expression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        HSQLDBToStringVisitor hSQLDBToStringVisitor0 = new HSQLDBToStringVisitor();
        // Undeclared exception!
        try {
            hSQLDBToStringVisitor0.visit((NewOrderingTerm<HSQLDBExpression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        PrestoToStringVisitor prestoToStringVisitor0 = new PrestoToStringVisitor();
        NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.ASC;
        NewOrderingTerm<PrestoExpression> newOrderingTerm0 = new NewOrderingTerm<PrestoExpression>(
                (PrestoExpression) null, newOrderingTerm_Ordering0);
        // Undeclared exception!
        try {
            prestoToStringVisitor0.visit(newOrderingTerm0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test16() throws Throwable {
        DataFusionToStringVisitor dataFusionToStringVisitor0 = new DataFusionToStringVisitor();
        // Undeclared exception!
        try {
            dataFusionToStringVisitor0.visit((NewInOperatorNode<DataFusionExpression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        LinkedList<H2Expression> linkedList0 = new LinkedList<H2Expression>();
        H2Select h2Select0 = new H2Select();
        NewInOperatorNode<H2Expression> newInOperatorNode0 = new NewInOperatorNode<H2Expression>(h2Select0, linkedList0,
                true);
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit(newInOperatorNode0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        NewInOperatorNode<DatabendExpression> newInOperatorNode0 = new NewInOperatorNode<DatabendExpression>(
                (DatabendExpression) null, linkedList0, true);
        // Undeclared exception!
        try {
            databendToStringVisitor0.visit(newInOperatorNode0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test19() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        H2Expression h2Expression0 = H2Constant.createDoubleConstant((-3330.77));
        List<H2Expression> list0 = List.of(h2Expression0, h2Expression0);
        H2CaseOperation h2CaseOperation0 = new H2CaseOperation((H2Expression) null, list0, list0, h2Expression0);
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((NewCaseOperatorNode<H2Expression>) h2CaseOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test20() throws Throwable {
        HSQLDBToStringVisitor hSQLDBToStringVisitor0 = new HSQLDBToStringVisitor();
        PrestoUnaryPostfixOperation.PrestoUnaryPostfixOperator prestoUnaryPostfixOperation_PrestoUnaryPostfixOperator0 = PrestoUnaryPostfixOperation.PrestoUnaryPostfixOperator.IS_NOT_NULL;
        HSQLDBBinaryOperation hSQLDBBinaryOperation0 = new HSQLDBBinaryOperation((HSQLDBExpression) null,
                (HSQLDBExpression) null, prestoUnaryPostfixOperation_PrestoUnaryPostfixOperator0);
        // Undeclared exception!
        try {
            hSQLDBToStringVisitor0.visit((NewBinaryOperatorNode<HSQLDBExpression>) hSQLDBBinaryOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test21() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((NewBetweenOperatorNode<H2Expression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        H2Select h2Select0 = new H2Select();
        H2BetweenOperation h2BetweenOperation0 = new H2BetweenOperation(h2Select0, h2Select0, h2Select0, false);
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((NewBetweenOperatorNode<H2Expression>) h2BetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator.PLUS;
        H2BinaryOperation h2BinaryOperation0 = new H2BinaryOperation((H2Expression) null, (H2Expression) null,
                h2ExpressionGenerator_H2UnaryPrefixOperator0);
        H2BetweenOperation h2BetweenOperation0 = new H2BetweenOperation(h2BinaryOperation0, (H2Expression) null,
                (H2Expression) null, false);
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((NewBetweenOperatorNode<H2Expression>) h2BetweenOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test24() throws Throwable {
        PrestoToStringVisitor prestoToStringVisitor0 = new PrestoToStringVisitor();
        PrestoDateFunction prestoDateFunction0 = PrestoDateFunction.TO_UNIXTIME_2;
        PrestoAlias prestoAlias0 = new PrestoAlias(prestoDateFunction0,
                "sqlancer.datafusion.ast.DataFusionConstant$DataFusionIntConstant@0000000004");
        // Undeclared exception!
        try {
            prestoToStringVisitor0.visit((NewAliasNode<PrestoExpression>) prestoAlias0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // class sqlancer.presto.ast.PrestoDateFunction
            //
        }
    }

    @Test
    public void test25() throws Throwable {
        PrestoToStringVisitor prestoToStringVisitor0 = new PrestoToStringVisitor();
        // Undeclared exception!
        try {
            prestoToStringVisitor0.visit((List<PrestoExpression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test26() throws Throwable {
        H2Expression h2Expression0 = H2Constant.createStringConstant("X=:/r[p[439Op`:B");
        LinkedList<H2Expression> linkedList0 = new LinkedList<H2Expression>();
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        NewInOperatorNode<H2Expression> newInOperatorNode0 = new NewInOperatorNode<H2Expression>(h2Expression0,
                linkedList0, false);
        h2ToStringVisitor0.visit(newInOperatorNode0);
        assertFalse(newInOperatorNode0.isNegated());
    }

    @Test
    public void test27() throws Throwable {
        H2Expression h2Expression0 = H2Constant.createStringConstant("X=:/r[p[439Op`:B");
        LinkedList<H2Expression> linkedList0 = new LinkedList<H2Expression>();
        H2CaseOperation h2CaseOperation0 = new H2CaseOperation(h2Expression0, linkedList0, linkedList0, h2Expression0);
        NewInOperatorNode<H2Expression> newInOperatorNode0 = new NewInOperatorNode<H2Expression>(h2CaseOperation0,
                linkedList0, true);
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        h2ToStringVisitor0.visit(newInOperatorNode0);
        assertTrue(newInOperatorNode0.isNegated());
    }

    @Test
    public void test28() throws Throwable {
        H2Constant.H2IntConstant h2Constant_H2IntConstant0 = new H2Constant.H2IntConstant(0L);
        H2BetweenOperation h2BetweenOperation0 = new H2BetweenOperation(h2Constant_H2IntConstant0,
                h2Constant_H2IntConstant0, h2Constant_H2IntConstant0, true);
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        h2ToStringVisitor0.visit((NewBetweenOperatorNode<H2Expression>) h2BetweenOperation0);
        assertTrue(h2BetweenOperation0.isTrue());
    }

    @Test
    public void test29() throws Throwable {
        H2Expression h2Expression0 = H2Constant.createIntConstant(0L);
        LinkedList<H2Expression> linkedList0 = new LinkedList<H2Expression>();
        H2InOperation h2InOperation0 = new H2InOperation(h2Expression0, linkedList0, false);
        H2BinaryOperation h2BinaryOperation0 = new H2BinaryOperation(h2InOperation0, h2InOperation0,
                (BinaryOperatorNode.Operator) null);
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        NewCaseOperatorNode<H2Expression> newCaseOperatorNode0 = new NewCaseOperatorNode<H2Expression>(h2InOperation0,
                linkedList0, linkedList0, h2BinaryOperation0);
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit(newCaseOperatorNode0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewBinaryOperatorNode", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        H2Expression h2Expression0 = H2Constant.createDoubleConstant((-3330.77));
        List<H2Expression> list0 = List.of(h2Expression0, h2Expression0);
        NewCaseOperatorNode<H2Expression> newCaseOperatorNode0 = new NewCaseOperatorNode<H2Expression>(h2Expression0,
                list0, list0, (H2Expression) null);
        h2ToStringVisitor0.visit(newCaseOperatorNode0);
    }

    @Test
    public void test31() throws Throwable {
        LinkedList<DataFusionExpression> linkedList0 = new LinkedList<DataFusionExpression>();
        DataFusionConstant.DataFusionNullConstant dataFusionConstant_DataFusionNullConstant0 = new DataFusionConstant.DataFusionNullConstant();
        linkedList0.add((DataFusionExpression) dataFusionConstant_DataFusionNullConstant0);
        linkedList0.add((DataFusionExpression) dataFusionConstant_DataFusionNullConstant0);
        String string0 = DataFusionToStringVisitor.asString((List<DataFusionExpression>) linkedList0);
        assertNotNull(string0);
    }

    @Test
    public void test32() throws Throwable {
        PrestoToStringVisitor prestoToStringVisitor0 = new PrestoToStringVisitor();
        PrestoDateFunction prestoDateFunction0 = PrestoDateFunction.CURRENT_TIME;
        PrestoTernary prestoTernary0 = new PrestoTernary(prestoDateFunction0, prestoDateFunction0, prestoDateFunction0,
                "sqlancer.questdb.QuestDBOracleFactory", "sqlancer.questdb.QuestDBOracleFactory");
        PrestoAlias prestoAlias0 = new PrestoAlias(prestoTernary0, "sqlancer.questdb.QuestDBOracleFactory");
        PrestoSelect prestoSelect0 = new PrestoSelect();
        PrestoMultiValuedComparisonType prestoMultiValuedComparisonType0 = PrestoMultiValuedComparisonType.SOME;
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator.GREATER_EQUALS;
        PrestoQuantifiedComparison prestoQuantifiedComparison0 = new PrestoQuantifiedComparison(prestoAlias0,
                prestoSelect0, prestoMultiValuedComparisonType0, prestoMultiValuedComparisonOperator0);
        // Undeclared exception!
        try {
            prestoToStringVisitor0.visit(prestoQuantifiedComparison0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // class sqlancer.presto.ast.PrestoDateFunction
            //
        }
    }

    @Test
    public void test33() throws Throwable {
        H2BetweenOperation h2BetweenOperation0 = new H2BetweenOperation((H2Expression) null, (H2Expression) null,
                (H2Expression) null, true);
        // Undeclared exception!
        try {
            H2ToStringVisitor.asString(h2BetweenOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test34() throws Throwable {
        LinkedList<H2Schema.H2Column> linkedList0 = new LinkedList<H2Schema.H2Column>();
        H2Schema.H2Table h2Schema_H2Table0 = new H2Schema.H2Table(
                "sqlancer.presto.ast.PrestoConstant$PrestoIntervalYearToMonthConstant$Interval", linkedList0);
        H2TableReference h2TableReference0 = new H2TableReference(h2Schema_H2Table0);
        String string0 = H2ToStringVisitor.asString(h2TableReference0);
        assertEquals("sqlancer.presto.ast.PrestoConstant$PrestoIntervalYearToMonthConstant$Interval", string0);
    }

    @Test
    public void test35() throws Throwable {
        QuestDBToStringVisitor questDBToStringVisitor0 = new QuestDBToStringVisitor();
        QuestDBConstant.QuestDBDoubleConstant questDBConstant_QuestDBDoubleConstant0 = new QuestDBConstant.QuestDBDoubleConstant(
                (-74.69857394471));
        HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0 = HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator.UNARY_MINUS;
        QuestDBUnaryPrefixOperation questDBUnaryPrefixOperation0 = new QuestDBUnaryPrefixOperation(
                questDBConstant_QuestDBDoubleConstant0, hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0);
        questDBToStringVisitor0.visit((QuestDBExpression) questDBUnaryPrefixOperation0);
    }

    @Test
    public void test36() throws Throwable {
        QuestDBSchema.QuestDBCompositeDataType questDBSchema_QuestDBCompositeDataType0 = QuestDBSchema.QuestDBCompositeDataType
                .getRandomWithoutNull();
        QuestDBSchema.QuestDBColumn questDBSchema_QuestDBColumn0 = new QuestDBSchema.QuestDBColumn("+",
                questDBSchema_QuestDBCompositeDataType0, true);
        QuestDBColumnReference questDBColumnReference0 = new QuestDBColumnReference(questDBSchema_QuestDBColumn0);
        String string0 = QuestDBToStringVisitor.asString(questDBColumnReference0);
        assertEquals("+", string0);
    }

    @Test
    public void test37() throws Throwable {
        // Undeclared exception!
        try {
            DatabendToStringVisitor.asString((DatabendExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test38() throws Throwable {
        QuestDBToStringVisitor questDBToStringVisitor0 = new QuestDBToStringVisitor();
        QuestDBExpression questDBExpression0 = QuestDBConstant.createSymbolConstant("L\"HOL4_mK:^");
        NewTernaryNode<QuestDBExpression> newTernaryNode0 = new NewTernaryNode<QuestDBExpression>(questDBExpression0,
                questDBExpression0, questDBExpression0, "L\"HOL4_mK:^", "L\"HOL4_mK:^");
        questDBToStringVisitor0.visit(newTernaryNode0);
        assertEquals("L\"HOL4_mK:^", newTernaryNode0.getRightStr());
    }

    @Test
    public void test39() throws Throwable {
        DuckDBToStringVisitor duckDBToStringVisitor0 = new DuckDBToStringVisitor();
        DuckDBExpression duckDBExpression0 = DuckDBConstant.createStringConstant("");
        DuckDBPostFixText duckDBPostFixText0 = new DuckDBPostFixText(duckDBExpression0, "");
        duckDBToStringVisitor0.visit((NewPostfixTextNode<DuckDBExpression>) duckDBPostFixText0);
        assertEquals("", duckDBPostFixText0.getText());
    }

    @Test
    public void test40() throws Throwable {
        HSQLDBToStringVisitor hSQLDBToStringVisitor0 = new HSQLDBToStringVisitor();
        NewFunctionNode<HSQLDBExpression, HSQLDBToStringVisitor> newFunctionNode0 = new NewFunctionNode<HSQLDBExpression, HSQLDBToStringVisitor>(
                (List<HSQLDBExpression>) null, hSQLDBToStringVisitor0);
        // Undeclared exception!
        try {
            hSQLDBToStringVisitor0.visit(newFunctionNode0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test41() throws Throwable {
        H2Expression h2Expression0 = H2Constant.createIntConstant(0L);
        LinkedList<H2Expression> linkedList0 = new LinkedList<H2Expression>();
        H2InOperation h2InOperation0 = new H2InOperation(h2Expression0, linkedList0, false);
        H2BinaryOperation h2BinaryOperation0 = new H2BinaryOperation(h2InOperation0, h2InOperation0,
                (BinaryOperatorNode.Operator) null);
        // Undeclared exception!
        try {
            H2ToStringVisitor.asString(h2BinaryOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewBinaryOperatorNode", e);
        }
    }

    @Test
    public void test42() throws Throwable {
        H2Expression h2Expression0 = H2Constant.createIntConstant(782L);
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.IS_NOT_DISTINCT;
        H2BinaryOperation h2BinaryOperation0 = new H2BinaryOperation(h2Expression0, h2Expression0,
                h2ExpressionGenerator_H2BinaryComparisonOperator0);
        LinkedList<H2Expression> linkedList0 = new LinkedList<H2Expression>();
        H2CaseOperation h2CaseOperation0 = new H2CaseOperation(h2BinaryOperation0, linkedList0, linkedList0,
                h2Expression0);
        H2CaseOperation h2CaseOperation1 = new H2CaseOperation(h2CaseOperation0, linkedList0, linkedList0,
                (H2Expression) null);
        H2BetweenOperation h2BetweenOperation0 = new H2BetweenOperation(h2BinaryOperation0, h2Expression0,
                h2CaseOperation1, false);
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        h2ToStringVisitor0.visit((NewBetweenOperatorNode<H2Expression>) h2BetweenOperation0);
        assertFalse(h2BetweenOperation0.isTrue());
    }

    @Test
    public void test43() throws Throwable {
        DuckDBConstant.DuckDBIntConstant duckDBConstant_DuckDBIntConstant0 = new DuckDBConstant.DuckDBIntConstant(129L);
        DuckDBTernary duckDBTernary0 = new DuckDBTernary(duckDBConstant_DuckDBIntConstant0,
                duckDBConstant_DuckDBIntConstant0, duckDBConstant_DuckDBIntConstant0, " END )", "NTpJC+.e^Gz9c%>tx");
        List<DuckDBExpression> list0 = List.of((DuckDBExpression) duckDBTernary0, (DuckDBExpression) duckDBTernary0,
                (DuckDBExpression) duckDBTernary0);
        DuckDBFunction<Object> duckDBFunction0 = new DuckDBFunction<Object>(list0, duckDBTernary0);
        DuckDBCaseOperator duckDBCaseOperator0 = new DuckDBCaseOperator(duckDBFunction0, list0, list0, duckDBFunction0);
        String string0 = DuckDBToStringVisitor.asString(duckDBCaseOperator0);
        assertNotNull(string0);
    }

    @Test
    public void test44() throws Throwable {
        DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendAlias databendAlias0 = new DatabendAlias(databendSelect0,
                "sqlancer.hsqldb.ast.HSQLDBConstant$HSQLDBIntConstant@0000000002");
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_PLUS;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendAlias0,
                databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            databendToStringVisitor0
                    .visit((NewUnaryPrefixOperatorNode<DatabendExpression>) databendUnaryPrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test45() throws Throwable {
        QuestDBExpression questDBExpression0 = QuestDBConstant.createNullConstant();
        QuestDBSelect questDBSelect0 = new QuestDBSelect();
        List<QuestDBExpression> list0 = questDBSelect0.getGroupByClause();
        QuestDBInOperation questDBInOperation0 = new QuestDBInOperation(questDBExpression0, list0, true);
        String string0 = QuestDBToStringVisitor.asString(questDBInOperation0);
        assertNotNull(string0);
    }

    @Test
    public void test46() throws Throwable {
        PrestoUnaryPostfixOperation.PrestoUnaryPostfixOperator prestoUnaryPostfixOperation_PrestoUnaryPostfixOperator0 = PrestoUnaryPostfixOperation.PrestoUnaryPostfixOperator.IS_NULL;
        PrestoUnaryPostfixOperation prestoUnaryPostfixOperation0 = new PrestoUnaryPostfixOperation(
                (PrestoExpression) null, prestoUnaryPostfixOperation_PrestoUnaryPostfixOperator0);
        // Undeclared exception!
        try {
            PrestoToStringVisitor.asString(prestoUnaryPostfixOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test47() throws Throwable {
        H2Expression h2Expression0 = H2Constant.createStringConstant("2;Y7n)");
        LinkedList<H2Expression> linkedList0 = new LinkedList<H2Expression>();
        H2CaseOperation h2CaseOperation0 = new H2CaseOperation(h2Expression0, linkedList0, linkedList0, h2Expression0);
        H2BetweenOperation h2BetweenOperation0 = new H2BetweenOperation(h2CaseOperation0, h2CaseOperation0,
                h2CaseOperation0, true);
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.EQUALS;
        H2UnaryPostfixOperation h2UnaryPostfixOperation0 = new H2UnaryPostfixOperation(h2BetweenOperation0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        h2ToStringVisitor0.visit((NewUnaryPostfixOperatorNode<H2Expression>) h2UnaryPostfixOperation0);
    }

    @Test
    public void test48() throws Throwable {
        LinkedList<DataFusionExpression> linkedList0 = new LinkedList<DataFusionExpression>();
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NOT_NULL;
        DataFusionFunction<DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator> dataFusionFunction0 = new DataFusionFunction<DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator>(
                linkedList0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
        String string0 = DataFusionToStringVisitor.asString((DataFusionExpression) dataFusionFunction0);
        assertNotNull(string0);
    }

    @Test
    public void test49() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((NewAliasNode<H2Expression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test50() throws Throwable {
        DuckDBExpression duckDBExpression0 = DuckDBConstant.createFloatConstant((-1786.794394733859));
        DuckDBTernary duckDBTernary0 = new DuckDBTernary(duckDBExpression0, duckDBExpression0, duckDBExpression0, "",
                "");
        String string0 = DuckDBToStringVisitor.asString(duckDBTernary0);
        assertNotNull(string0);
    }

    @Test
    public void test51() throws Throwable {
        QuestDBToStringVisitor questDBToStringVisitor0 = new QuestDBToStringVisitor();
        QuestDBConstant.QuestDBDoubleConstant questDBConstant_QuestDBDoubleConstant0 = new QuestDBConstant.QuestDBDoubleConstant(
                0.0);
        NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.ASC;
        NewOrderingTerm<QuestDBExpression> newOrderingTerm0 = new NewOrderingTerm<QuestDBExpression>(
                questDBConstant_QuestDBDoubleConstant0, newOrderingTerm_Ordering0);
        questDBToStringVisitor0.visit(newOrderingTerm0);
        assertEquals(NewOrderingTerm.Ordering.ASC, newOrderingTerm0.getOrdering());
    }

    @Test
    public void test52() throws Throwable {
        LinkedList<H2Schema.H2Column> linkedList0 = new LinkedList<H2Schema.H2Column>();
        H2Schema.H2Table h2Schema_H2Table0 = new H2Schema.H2Table("Africa/Harare", linkedList0);
        H2TableReference h2TableReference0 = new H2TableReference(h2Schema_H2Table0);
        H2Join h2Join0 = H2Join.createLeftOuterJoin(h2TableReference0, h2TableReference0, h2TableReference0);
        String string0 = H2ToStringVisitor.asString(h2Join0);
        assertEquals("Africa/Harare LEFT JOIN Africa/Harare ON Africa/Harare", string0);
    }

    @Test
    public void test53() throws Throwable {
        PrestoToStringVisitor prestoToStringVisitor0 = new PrestoToStringVisitor();
        // Undeclared exception!
        try {
            prestoToStringVisitor0.visit((NewBinaryOperatorNode<PrestoExpression>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }
}
