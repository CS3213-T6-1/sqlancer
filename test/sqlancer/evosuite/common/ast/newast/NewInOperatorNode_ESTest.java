/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:45:41 GMT 2025
 */

package sqlancer.evosuite.common.ast.newast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.newast.NewInOperatorNode;

public class NewInOperatorNode_ESTest {

    @Test
    public void test0() throws Throwable {
        Integer integer0 = new Integer((-918));
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        NewInOperatorNode<Object> newInOperatorNode0 = new NewInOperatorNode<Object>(integer0, linkedList0, false);
        boolean boolean0 = newInOperatorNode0.isNegated();
        assertFalse(boolean0);
    }

    @Test
    public void test1() throws Throwable {
        NewInOperatorNode<Integer> newInOperatorNode0 = new NewInOperatorNode<Integer>((Integer) null,
                (List<Integer>) null, false);
        newInOperatorNode0.getRight();
        assertFalse(newInOperatorNode0.isNegated());
    }

    @Test
    public void test2() throws Throwable {
        Object object0 = new Object();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add(object0);
        NewInOperatorNode<Object> newInOperatorNode0 = new NewInOperatorNode<Object>(object0, linkedList0, false);
        newInOperatorNode0.getRight();
        assertFalse(newInOperatorNode0.isNegated());
    }

    @Test
    public void test3() throws Throwable {
        NewInOperatorNode<Integer> newInOperatorNode0 = new NewInOperatorNode<Integer>((Integer) null,
                (List<Integer>) null, false);
        newInOperatorNode0.getLeft();
        assertFalse(newInOperatorNode0.isNegated());
    }

    @Test
    public void test4() throws Throwable {
        Object object0 = new Object();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        NewInOperatorNode<Object> newInOperatorNode0 = new NewInOperatorNode<Object>(object0, linkedList0, false);
        newInOperatorNode0.getLeft();
        assertFalse(newInOperatorNode0.isNegated());
    }

    @Test
    public void test5() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        NewInOperatorNode<Object> newInOperatorNode0 = new NewInOperatorNode<Object>(linkedList0, linkedList0, false);
        newInOperatorNode0.getRight();
        assertFalse(newInOperatorNode0.isNegated());
    }

    @Test
    public void test6() throws Throwable {
        NewInOperatorNode<Object> newInOperatorNode0 = new NewInOperatorNode<Object>((Object) null, (List<Object>) null,
                true);
        boolean boolean0 = newInOperatorNode0.isNegated();
        assertTrue(boolean0);
    }
}
