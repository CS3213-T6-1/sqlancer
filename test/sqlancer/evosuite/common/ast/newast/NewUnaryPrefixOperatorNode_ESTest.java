/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:04:04 GMT 2025
 */

package sqlancer.evosuite.common.ast.newast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.common.ast.newast.NewUnaryPrefixOperatorNode;
import sqlancer.h2.H2ExpressionGenerator;

public class NewUnaryPrefixOperatorNode_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator.PLUS;
        NewUnaryPrefixOperatorNode<Object> newUnaryPrefixOperatorNode0 = new NewUnaryPrefixOperatorNode<Object>(
                (Object) null, h2ExpressionGenerator_H2UnaryPrefixOperator0);
        Object object0 = newUnaryPrefixOperatorNode0.getExpr();
        assertNull(object0);
    }

    @Test
    public void test1() throws Throwable {
        NewUnaryPrefixOperatorNode<Object> newUnaryPrefixOperatorNode0 = new NewUnaryPrefixOperatorNode<Object>(
                (Object) null, (BinaryOperatorNode.Operator) null);
        // Undeclared exception!
        try {
            newUnaryPrefixOperatorNode0.getOperatorRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewUnaryPrefixOperatorNode", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator.PLUS;
        Integer integer0 = new Integer((-2273));
        NewUnaryPrefixOperatorNode<Integer> newUnaryPrefixOperatorNode0 = new NewUnaryPrefixOperatorNode<Integer>(
                integer0, h2ExpressionGenerator_H2UnaryPrefixOperator0);
        String string0 = newUnaryPrefixOperatorNode0.getOperatorRepresentation();
        assertEquals("+", string0);
    }

    @Test
    public void test3() throws Throwable {
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_TRUE;
        NewUnaryPrefixOperatorNode<H2ExpressionGenerator.H2UnaryPostfixOperator> newUnaryPrefixOperatorNode0 = new NewUnaryPrefixOperatorNode<H2ExpressionGenerator.H2UnaryPostfixOperator>(
                h2ExpressionGenerator_H2UnaryPostfixOperator0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator1 = (H2ExpressionGenerator.H2UnaryPostfixOperator) newUnaryPrefixOperatorNode0
                .getExpr();
        assertEquals("IS TRUE", h2ExpressionGenerator_H2UnaryPostfixOperator1.getTextRepresentation());
    }
}
