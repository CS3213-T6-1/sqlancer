/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:26:41 GMT 2025
 */

package sqlancer.evosuite.databend.test.tlp;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import org.junit.jupiter.api.Test;
import sqlancer.common.gen.ExpressionGenerator;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.DatabendProvider;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.test.tlp.DatabendQueryPartitioningBase;

public class DatabendQueryPartitioningBase_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendQueryPartitioningBase databendQueryPartitioningBase0 = new DatabendQueryPartitioningBase(
                databendProvider_DatabendGlobalState0);
        // Undeclared exception!
        try {
            databendQueryPartitioningBase0.generateRandomColumns();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.test.tlp.DatabendQueryPartitioningBase", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        DatabendQueryPartitioningBase databendQueryPartitioningBase0 = new DatabendQueryPartitioningBase(
                (DatabendProvider.DatabendGlobalState) null);
        LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
        DatabendSchema.DatabendTables databendSchema_DatabendTables0 = new DatabendSchema.DatabendTables(linkedList0);
        databendQueryPartitioningBase0.targetTables = databendSchema_DatabendTables0;
        // Undeclared exception!
        try {
            databendQueryPartitioningBase0.generateRandomColumns();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test2() throws Throwable {
        DatabendQueryPartitioningBase databendQueryPartitioningBase0 = new DatabendQueryPartitioningBase(
                (DatabendProvider.DatabendGlobalState) null);
        LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
        DatabendSchema.DatabendTables databendSchema_DatabendTables0 = new DatabendSchema.DatabendTables(linkedList0);
        databendQueryPartitioningBase0.targetTables = databendSchema_DatabendTables0;
        // Undeclared exception!
        try {
            databendQueryPartitioningBase0.generateFetchColumns();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test3() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendQueryPartitioningBase databendQueryPartitioningBase0 = new DatabendQueryPartitioningBase(
                databendProvider_DatabendGlobalState0);
        // Undeclared exception!
        try {
            databendQueryPartitioningBase0.check();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test4() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendQueryPartitioningBase databendQueryPartitioningBase0 = new DatabendQueryPartitioningBase(
                databendProvider_DatabendGlobalState0);
        // Undeclared exception!
        try {
            databendQueryPartitioningBase0.generateFetchColumns();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.test.tlp.DatabendQueryPartitioningBase", e);
        }
    }

    @Test
    public void test5() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendQueryPartitioningBase databendQueryPartitioningBase0 = new DatabendQueryPartitioningBase(
                databendProvider_DatabendGlobalState0);
        ExpressionGenerator<DatabendExpression> expressionGenerator0 = databendQueryPartitioningBase0.getGen();
        assertNull(expressionGenerator0);
    }

    @Test
    public void test6() throws Throwable {
        DatabendQueryPartitioningBase databendQueryPartitioningBase0 = new DatabendQueryPartitioningBase(
                (DatabendProvider.DatabendGlobalState) null);
        // Undeclared exception!
        try {
            databendQueryPartitioningBase0.check();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.test.tlp.DatabendQueryPartitioningBase", e);
        }
    }
}
