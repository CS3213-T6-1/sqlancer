/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:39:50 GMT 2025
 */

package sqlancer.evosuite.databend;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.common.oracle.TestOracle;
import sqlancer.databend.DatabendOracleFactory;
import sqlancer.databend.DatabendProvider;

public class DatabendOracleFactory_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.HAVING;
        TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0
                .create(databendProvider_DatabendGlobalState0);
        assertNotNull(testOracle0);
    }

    @Test
    public void test1() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.NOREC;
        try {
            databendOracleFactory0.create(databendProvider_DatabendGlobalState0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.gen.DatabendNewExpressionGenerator", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.GROUP_BY;
        TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0
                .create(databendProvider_DatabendGlobalState0);
        assertNotNull(testOracle0);
    }

    @Test
    public void test3() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.DISTINCT;
        TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0
                .create(databendProvider_DatabendGlobalState0);
        assertNotNull(testOracle0);
    }

    @Test
    public void test4() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.AGGREGATE;
        TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0
                .create(databendProvider_DatabendGlobalState0);
        assertNotNull(testOracle0);
    }

    @Test
    public void test5() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.PQS;
        TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0
                .create(databendProvider_DatabendGlobalState0);
        assertNotNull(testOracle0);
    }

    @Test
    public void test6() throws Throwable {
        DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
        DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.QUERY_PARTITIONING;
        try {
            databendOracleFactory0.create(databendProvider_DatabendGlobalState0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.gen.DatabendNewExpressionGenerator", e);
        }
    }
}
