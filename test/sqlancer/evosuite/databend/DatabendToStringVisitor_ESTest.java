/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 17:54:14 GMT 2025
 */

package sqlancer.evosuite.databend;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import org.junit.jupiter.api.Test;
import sqlancer.databend.ast.DatabendCastOperation;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendJoin;
import sqlancer.databend.ast.DatabendSelect;
import sqlancer.databend.ast.DatabendTableReference;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.DatabendToStringVisitor;

public class DatabendToStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
        DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0,
                true);
        DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
        String string0 = DatabendToStringVisitor.asString(databendTableReference0);
        assertEquals("", string0);
    }

    @Test
    public void test01() throws Throwable {
        DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
        // Undeclared exception!
        try {
            databendToStringVisitor0.visitSpecific((DatabendExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.DatabendToStringVisitor", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                0.0);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0
                .cast(databendSchema_DatabendDataType0);
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 100);
        DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendConstant0,
                databendSchema_DatabendCompositeDataType0);
        // Undeclared exception!
        try {
            DatabendToStringVisitor.asString(databendCastOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 100
            //
        }
    }

    @Test
    public void test03() throws Throwable {
        DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
        LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
        DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable((String) null,
                linkedList0, false);
        DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
        // Undeclared exception!
        try {
            databendToStringVisitor0.visitSpecific((DatabendExpression) databendTableReference0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // class sqlancer.databend.ast.DatabendTableReference
            //
        }
    }

    @Test
    public void test04() throws Throwable {
        DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
        LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
        DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable((String) null,
                linkedList0, false);
        DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
        DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.RIGHT;
        DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin(databendTableReference0, databendTableReference0,
                databendJoin_OuterType0);
        databendToStringVisitor0.visitSpecific((DatabendExpression) databendJoin0);
        assertEquals("null NATURAL RIGHT JOIN null", databendToStringVisitor0.get());
    }

    @Test
    public void test05() throws Throwable {
        DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        // Undeclared exception!
        try {
            databendToStringVisitor0.visitSpecific((DatabendExpression) databendSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        databendSelect0.setDistinct(true);
        // Undeclared exception!
        try {
            DatabendToStringVisitor.asString(databendSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
        DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0,
                true);
        DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
        DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.RIGHT;
        DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin(databendTableReference0, databendTableReference0,
                databendJoin_OuterType0);
        String string0 = DatabendToStringVisitor.asString(databendJoin0);
        assertEquals(" NATURAL RIGHT JOIN ", string0);
    }

    @Test
    public void test08() throws Throwable {
        LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
        DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("float4_ops",
                linkedList0, true);
        DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
        DatabendJoin databendJoin0 = DatabendJoin.createLeftOuterJoin(databendTableReference0, databendTableReference0,
                databendTableReference0);
        String string0 = DatabendToStringVisitor.asString(databendJoin0);
        assertEquals("float4_ops LEFT  JOIN float4_ops ON float4_ops", string0);
    }

    @Test
    public void test09() throws Throwable {
        // Undeclared exception!
        try {
            DatabendToStringVisitor.asString((DatabendExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.DatabendToStringVisitor", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("t;8<Dg>`");
        databendToStringVisitor0.visitSpecific((DatabendExpression) databendConstant0);
        assertFalse(databendConstant0.isFloat());
    }
}
