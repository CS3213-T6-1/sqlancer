/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:12:45 GMT 2025
 */

package sqlancer.evosuite.databend;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.Connection;
import java.util.LinkedList;

import org.junit.jupiter.api.Test;
import sqlancer.databend.DatabendSchema;
import sqlancer.SQLConnection;

public class DatabendSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, (-2036));
        int int0 = databendSchema_DatabendCompositeDataType0.getSize();
        assertEquals((-2036), int0);
    }

    @Test
    public void test01() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 1178);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType1 = databendSchema_DatabendCompositeDataType0
                .getPrimitiveDataType();
        assertEquals(DatabendSchema.DatabendDataType.VARCHAR, databendSchema_DatabendDataType1);
    }

    @Test
    public void test02() throws Throwable {
        LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
        linkedList0.add((DatabendSchema.DatabendTable) null);
        DatabendSchema databendSchema0 = new DatabendSchema(linkedList0);
        // Undeclared exception!
        try {
            databendSchema0.getRandomTableNonEmptyTables();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.schema.AbstractTables", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
        DatabendSchema databendSchema0 = new DatabendSchema(linkedList0);
        // Undeclared exception!
        try {
            databendSchema0.getRandomTableNonEmptyTables();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test04() throws Throwable {
        LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
        linkedList0.add((DatabendSchema.DatabendTable) null);
        DatabendSchema databendSchema0 = new DatabendSchema(linkedList0);
        // Undeclared exception!
        try {
            databendSchema0.getRandomTableNonEmptyAndViewTables();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.DatabendSchema", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test05() throws Throwable { DatabendSchema.DatabendDataType.getRandomWithoutNull();
     * DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
     * DatabendSchema.DatabendCompositeDataType .getRandomWithoutNull(); DatabendSchema.DatabendColumn
     * databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", databendSchema_DatabendCompositeDataType0,
     * true, true); databendSchema_DatabendColumn0.isPrimaryKey(); ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn((String) null, "uuid_ops", "sqlancer.cnosdb.CnosDBSchema",
     * "v--Don't send automatic bug reports") .when(resultSet0).getString(anyString()); doReturn(true, true, true, true,
     * false).when(resultSet0).next(); PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar(); Statement
     * statement0 = sQLConnection0.prepareStatement("%!]}rRHWJm-");
     */
    // Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
    //
    // doReturn(statement0, (Statement) null).when(connection1).createStatement();
    // SQLConnection sQLConnection1 = new SQLConnection(connection1);
    // // Undeclared exception!
    // try {
    // DatabendSchema.fromConnection(sQLConnection1, "");
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.databend.DatabendSchema", e);
    // }
    // }

    // @Test
    // public void test06() throws Throwable {
    // DatabendSchema databendSchema0 = null;
    // try {
    // databendSchema0 = new DatabendSchema((List<DatabendSchema.DatabendTable>) null);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("java.util.Collections$UnmodifiableCollection", e);
    // }
    // }

    // @Test
    // public void test07() throws Throwable {
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // // // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.BOOLEAN,
    // // databendSchema_DatabendCompositeDataType1.getPrimitiveDataType());
    //
    // String string0 = databendSchema_DatabendCompositeDataType0.toString();
    // // // Unstable assertion: assertEquals("INT16", string0);
    // // // Unstable assertion: assertNotNull(string0);
    //
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType2 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // // // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.DATE,
    // // databendSchema_DatabendCompositeDataType2.getPrimitiveDataType());
    // }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test08() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("", "NullablemZY_F").when(resultSet0).getString(anyString());
     * doReturn(true, true, false).when(resultSet0).next(); PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer()); doReturn(resultSet0, (ResultSet)
     * null).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
     * sQLConnection0.prepareStatement("%!]}rRHWJm-");
     */
    // Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
    //
    // doReturn(statement0, statement0, (Statement) null).when(connection1).createStatement();
    // SQLConnection sQLConnection1 = new SQLConnection(connection1);
    // // Undeclared exception!
    // try {
    // DatabendSchema.fromConnection(sQLConnection1, "");
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.databend.DatabendSchema", e);
    // }
    // }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test09() throws Throwable { DatabendSchema.DatabendDataType.getRandomWithoutNull();
     * DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
     * DatabendSchema.DatabendCompositeDataType .getRandomWithoutNull(); DatabendSchema.DatabendColumn
     * databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", databendSchema_DatabendCompositeDataType0,
     * true, true); databendSchema_DatabendColumn0.isPrimaryKey(); ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("aU{E[vcWr~#h{", "").when(resultSet0).getString(anyString());
     * doReturn(true, true, false).when(resultSet0).next(); PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
     * mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar(); Statement
     * statement0 = sQLConnection0.prepareStatement("%!]}rRHWJm-"); Connection connection1 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(statement0, (Statement) null).when(connection1).createStatement();
     * SQLConnection sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
     * DatabendSchema.fromConnection(sQLConnection1, ""); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.databend.DatabendSchema", e); } }
     *
     * @Test public void test10() throws Throwable { // Undeclared exception! try {
     * DatabendSchema.fromConnection((SQLConnection) null, "VARCHAR");
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
     *
     * @Test public void test11() throws Throwable { Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * DatabendSchema.fromConnection(sQLConnection0, "%!]}rRHWJm-"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test12() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("v:", "v:", "v:", "v:", "v:").when(resultSet0).getString(anyString());
     * doReturn(true, true, true, true, true).when(resultSet0).next(); PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
     * mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("v:"); Connection connection1
     * = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(statement0).when(connection1).createStatement(); SQLConnection sQLConnection1 = new
     * SQLConnection(connection1); // Undeclared exception! DatabendSchema.fromConnection(sQLConnection1, "v:"); }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test13() throws Throwable { PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer()); doReturn((ResultSet)
     * null).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
     * sQLConnection0.prepareStatement("DOUBLE"); Connection connection1 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(statement0).when(connection1).createStatement(); SQLConnection
     * sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
     * DatabendSchema.fromConnection(sQLConnection1, "%!]}rRHWJm-"); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // }
     */
    // }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test14() throws Throwable { DatabendSchema.DatabendDataType.getRandomWithoutNull();
     * DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
     * DatabendSchema.DatabendCompositeDataType .getRandomWithoutNull(); DatabendSchema.DatabendColumn
     * databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", databendSchema_DatabendCompositeDataType0,
     * true, true); databendSchema_DatabendColumn0.isPrimaryKey(); ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("", "NullablemZY_F").when(resultSet0).getString(anyString());
     * doReturn(true, true, false).when(resultSet0).next(); PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
     * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
     * mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar(); String string0 =
     * "%!]}rRHWJ\\m-";
     */
    // Statement statement0 = sQLConnection0.prepareStatement("%!]}rRHWJm-");
    // Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
    //
    // doReturn(statement0, (Statement) null).when(connection1).createStatement();
    // SQLConnection sQLConnection1 = new SQLConnection(connection1);
    // // Undeclared exception!
    // try {
    // DatabendSchema.fromConnection(sQLConnection1, "");
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.databend.DatabendSchema", e);
    // }
    // }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test15() throws Throwable { DatabendSchema.DatabendDataType.getRandomWithoutNull();
     * DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
     * DatabendSchema.DatabendCompositeDataType .getRandomWithoutNull(); DatabendSchema.DatabendColumn
     * databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", databendSchema_DatabendCompositeDataType0,
     * true, true); databendSchema_DatabendColumn0.isPrimaryKey(); ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("").when(resultSet0).getString(anyString()); doReturn(true,
     * false).when(resultSet0).next(); PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar(); Statement
     * statement0 = sQLConnection0.prepareStatement("%!]}rRHWJm-");
     */
    // Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
    //
    // doReturn(statement0, (Statement) null).when(connection1).createStatement();
    // SQLConnection sQLConnection1 = new SQLConnection(connection1);
    // // Undeclared exception!
    // try {
    // DatabendSchema.fromConnection(sQLConnection1, "");
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.databend.DatabendSchema", e);
    // }
    // }

    @Test
    public void test16() throws Throwable {
        LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
        LinkedList<DatabendSchema.DatabendColumn> linkedList1 = new LinkedList<DatabendSchema.DatabendColumn>();
        DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("int8_minmax_ops",
                linkedList1, true);
        linkedList0.add(databendSchema_DatabendTable0);
        DatabendSchema databendSchema0 = new DatabendSchema(linkedList0);
        // Undeclared exception!
        try {
            databendSchema0.getRandomTableNonEmptyAndViewTables();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test17() throws Throwable {
        LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
        DatabendSchema.DatabendTables databendSchema_DatabendTables0 = new DatabendSchema.DatabendTables(linkedList0);
        SQLConnection sQLConnection0 = new SQLConnection((Connection) null);
        // Undeclared exception!
        try {
            databendSchema_DatabendTables0.getRandomRowValue(sQLConnection0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.SQLConnection", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test18() throws Throwable { LinkedList<DatabendSchema.DatabendTable> linkedList0 = new
     * LinkedList<DatabendSchema.DatabendTable>(); DatabendSchema.DatabendTables databendSchema_DatabendTables0 = new
     * DatabendSchema.DatabendTables(linkedList0); Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn((Statement) null).when(connection0).createStatement(); SQLConnection
     * sQLConnection0 = new SQLConnection(connection0); // Undeclared exception! try {
     * databendSchema_DatabendTables0.getRandomRowValue(sQLConnection0);
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.databend.DatabendSchema$DatabendTables", e); } }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test19() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("", "").when(resultSet0).getString(anyString()); doReturn(true, true,
     * false).when(resultSet0).next(); ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
     * doReturn(false).when(resultSet1).next(); ResultSet resultSet2 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn(false, false).when(resultSet2).next(); PreparedStatement preparedStatement0
     * = mock(PreparedStatement.class, new ViolatedAssumptionAnswer()); doReturn(resultSet0, resultSet1, resultSet2,
     * resultSet2).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class,
     * new ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
     * sQLConnection0.prepareStatement(""); Connection connection1 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(statement0, statement0, statement0,
     * statement0).when(connection1).createStatement(); SQLConnection sQLConnection1 = new SQLConnection(connection1);
     * DatabendSchema databendSchema0 = DatabendSchema.fromConnection(sQLConnection1,
     * "--Don't send automatic bug reports"); DatabendSchema.DatabendTables databendSchema_DatabendTables0 =
     * databendSchema0 .getRandomTableNonEmptyAndViewTables(); // Undeclared exception! try {
     * databendSchema_DatabendTables0.getRandomRowValue(sQLConnection1); fail("Expecting exception: RuntimeException");
     *
     * } catch (RuntimeException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.databend.DatabendSchema$DatabendTables", e); } }
     */

    @Test
    public void test20() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 9);
        // Undeclared exception!
        try {
            databendSchema_DatabendCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 9
            //
        }
    }

    @Test
    public void test21() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 7);
        // Undeclared exception!
        try {
            databendSchema_DatabendCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 7
            //
        }
    }

    // @Test
    // public void test22() throws Throwable {
    // DatabendSchema.DatabendDataType.getRandomWithoutNull();
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // String string0 = databendSchema_DatabendCompositeDataType0.toString();
    // // // Unstable assertion: assertEquals("INT", string0);
    // // // Unstable assertion: assertNotNull(string0);
    //
    // DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // String string1 = databendSchema_DatabendCompositeDataType1.toString();
    // // // Unstable assertion: assertEquals("FLOAT", string1);
    // }

    @Test
    public void test23() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 41);
        // Undeclared exception!
        try {
            databendSchema_DatabendCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 41
            //
        }
    }

    @Test
    public void test24() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 8);
        String string0 = databendSchema_DatabendCompositeDataType0.toString();
        assertNotNull(string0);
        assertEquals("BIGINT", string0);
    }

    @Test
    public void test25() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 7);
        // Undeclared exception!
        try {
            databendSchema_DatabendCompositeDataType0.toString();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 7
            //
        }
    }

    // @Test
    // public void test26() throws Throwable {
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // String string0 = databendSchema_DatabendCompositeDataType0.toString();
    // // // Unstable assertion: assertEquals("TINYINT", string0);
    // // // Unstable assertion: assertNotNull(string0);
    // }

    @Test
    public void test27() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.DATE;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 0);
        String string0 = databendSchema_DatabendCompositeDataType0.toString();
        assertEquals("DATE", string0);
    }

    @Test
    public void test28() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 7);
        String string0 = databendSchema_DatabendCompositeDataType0.toString();
        assertEquals("NULL", string0);
    }

    // @Test
    // public void test29() throws Throwable {
    // DatabendSchema.DatabendDataType.getRandomWithoutNull();
    // DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // // // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.BOOLEAN,
    // // databendSchema_DatabendCompositeDataType0.getPrimitiveDataType());
    //
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // String string0 = databendSchema_DatabendCompositeDataType1.toString();
    // // // Unstable assertion: assertEquals("DOUBLE", string0);
    // }

    // @Test
    // public void test30() throws Throwable {
    // DatabendSchema.DatabendDataType.getRandomWithoutNull();
    // DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
    // databendSchema_DatabendCompositeDataType0, false, false);
    // String string0 = databendSchema_DatabendColumn0.toString();
    // // // Unstable assertion: assertEquals(": BOOLEAN", string0);
    // // // Unstable assertion: assertFalse(databendSchema_DatabendColumn0.isPrimaryKey());
    // // // Unstable assertion: assertFalse(databendSchema_DatabendColumn0.isNullable());
    // }

    @Test
    public void test31() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        assertEquals(DatabendSchema.DatabendDataType.TIMESTAMP,
                databendSchema_DatabendCompositeDataType0.getPrimitiveDataType());
    }

    @Test
    public void test32() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        assertEquals(DatabendSchema.DatabendDataType.INT,
                databendSchema_DatabendCompositeDataType0.getPrimitiveDataType());

        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        String string0 = databendSchema_DatabendCompositeDataType1.toString();
        assertEquals("VARCHAR", string0);
    }

    @Test
    public void test33() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.TIMESTAMP;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, (-1));
        // Undeclared exception!
        try {
            databendSchema_DatabendCompositeDataType0.getSize();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP
            //
        }
    }

    @Test
    public void test34() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        int int0 = databendSchema_DatabendCompositeDataType0.getSize();
        assertEquals(2, int0);
    }

    @Test
    public void test35() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType1 = DatabendSchema.DatabendDataType
                .getRandomWithoutNullAndVarchar();
        assertSame(databendSchema_DatabendDataType1, databendSchema_DatabendDataType0);

        DatabendSchema.DatabendDataType databendSchema_DatabendDataType2 = DatabendSchema.DatabendDataType
                .getRandomWithoutNullAndVarchar();
        assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendDataType2);
    }

    // @Test
    // public void test36() throws Throwable {
    // DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType
    // .getRandomWithoutNull();
    // // // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.INT, databendSchema_DatabendDataType0);
    //
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // String string0 = databendSchema_DatabendCompositeDataType0.toString();
    // // // Unstable assertion: assertNotNull(string0);
    // // // Unstable assertion: assertEquals("INT", string0);
    //
    // DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 =
    // DatabendSchema.DatabendCompositeDataType
    // .getRandomWithoutNull();
    // // // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.BOOLEAN,
    // // databendSchema_DatabendCompositeDataType1.getPrimitiveDataType());
    //
    // String string1 = databendSchema_DatabendCompositeDataType0.toString();
    // // // Unstable assertion: assertEquals("INT32", string1);
    //
    // DatabendSchema.DatabendDataType databendSchema_DatabendDataType1 = DatabendSchema.DatabendDataType
    // .getRandomWithoutNullAndVarchar();
    // // // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.DATE, databendSchema_DatabendDataType1);
    // }

    @Test
    public void test37() throws Throwable {
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(
                "[|!%Y<`,^*E`i", (DatabendSchema.DatabendCompositeDataType) null, false, true);
        boolean boolean0 = databendSchema_DatabendColumn0.isNullable();
        assertTrue(boolean0);
        assertFalse(databendSchema_DatabendColumn0.isPrimaryKey());
    }

    // @Test
    // public void test38() throws Throwable {
    // DatabendSchema.DatabendRowValue databendSchema_DatabendRowValue0 = new DatabendSchema.DatabendRowValue(
    // (DatabendSchema.DatabendTables) null, (Map<DatabendSchema.DatabendColumn, DatabendConstant>) null);
    // }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test39() throws Throwable { DatabendSchema.DatabendDataType.getRandomWithoutNull();
     * DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 =
     * DatabendSchema.DatabendCompositeDataType .getRandomWithoutNull(); DatabendSchema.DatabendColumn
     * databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", databendSchema_DatabendCompositeDataType0,
     * true, true); databendSchema_DatabendColumn0.isPrimaryKey(); ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn("", "vtbl_R1",
     * "sqlancer.doris.DorisProvider$DorisGlobalState").when(resultSet0) .getString(anyString()); doReturn(true, true,
     * true, false).when(resultSet0).next(); PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new
     * ViolatedAssumptionAnswer()); doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection
     * connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
     * SQLConnection(connection0); DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar(); Statement
     * statement0 = sQLConnection0.prepareStatement("%!]}rRHWJm-");
     */
    // Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
    //
    // doReturn(statement0, (Statement) null).when(connection1).createStatement();
    // SQLConnection sQLConnection1 = new SQLConnection(connection1);
    // // Undeclared exception!
    // try {
    // DatabendSchema.fromConnection(sQLConnection1, "");
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.databend.DatabendSchema", e);
    // }
    // }
}
