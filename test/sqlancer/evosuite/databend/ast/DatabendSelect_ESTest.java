/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:17:53 GMT 2025
 */

package sqlancer.evosuite.databend.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import org.junit.jupiter.api.Test;

import sqlancer.common.ast.JoinBase;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendJoin;
import sqlancer.databend.ast.DatabendSelect;
import sqlancer.Randomly;

public class DatabendSelect_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        databendSelect0.setDistinct(true);
        boolean boolean0 = databendSelect0.isDistinct();
        assertTrue(boolean0);
    }

    @Test
    public void test1() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        // Undeclared exception!
        try {
            databendSelect0.setJoinClauses((List<JoinBase<DatabendExpression>>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.ast.DatabendSelect", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        databendSelect0.setJoinList((List<DatabendExpression>) null);
        // Undeclared exception!
        try {
            databendSelect0.getJoinClauses();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.ast.DatabendSelect", e);
        }
    }

    @Test
    public void test3() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = List.of((DatabendExpression) databendSelect0,
                (DatabendExpression) databendSelect0, (DatabendExpression) databendSelect0,
                (DatabendExpression) databendSelect0, (DatabendExpression) databendSelect0,
                (DatabendExpression) databendSelect0);
        databendSelect0.setJoinList(list0);
        // Undeclared exception!
        try {
            databendSelect0.getJoinClauses();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // class sqlancer.databend.ast.DatabendSelect cannot be cast to class sqlancer.databend.ast.DatabendJoin
            // (sqlancer.databend.ast.DatabendSelect and sqlancer.databend.ast.DatabendJoin are in unnamed module of
            // loader org.evosuite.instrumentation.InstrumentingClassLoader @3132f3c5)
            //
            verifyException("sqlancer.databend.ast.DatabendSelect", e);
        }
    }

    @Test
    public void test4() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = List.of((DatabendExpression) databendSelect0,
                (DatabendExpression) databendSelect0, (DatabendExpression) databendSelect0,
                (DatabendExpression) databendSelect0);
        databendSelect0.setFetchColumns(list0);
        // Undeclared exception!
        try {
            databendSelect0.asString();
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test5() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendExpression[] databendExpressionArray0 = new DatabendExpression[4];
        List<DatabendExpression> list0 = Randomly.nonEmptySubset(databendExpressionArray0);
        databendSelect0.setFetchColumns(list0);
        // Undeclared exception!
        try {
            databendSelect0.asString();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.DatabendToStringVisitor", e);
        }
    }

    @Test
    public void test6() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        boolean boolean0 = databendSelect0.isDistinct();
        assertFalse(boolean0);
    }

    @Test
    public void test7() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendJoin[] databendJoinArray0 = new DatabendJoin[7];
        List<JoinBase<DatabendExpression>> list0 = Randomly.nonEmptySubset(databendJoinArray0);
        databendSelect0.setJoinClauses(list0);
        List<JoinBase<DatabendExpression>> list1 = databendSelect0.getJoinClauses();
        assertNotSame(list1, list0);
    }

    @Test
    public void test8() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<JoinBase<DatabendExpression>> list0 = databendSelect0.getJoinClauses();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test9() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        // Undeclared exception!
        try {
            databendSelect0.asString();
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }
}
