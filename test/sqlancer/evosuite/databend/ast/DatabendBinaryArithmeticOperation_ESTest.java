/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 23:04:20 GMT 2025
 */

package sqlancer.evosuite.databend.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.Comparator;
import java.util.function.BinaryOperator;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.databend.ast.DatabendBinaryArithmeticOperation;
import sqlancer.databend.ast.DatabendBinaryComparisonOperation;
import sqlancer.databend.ast.DatabendBinaryLogicalOperation;
import sqlancer.databend.ast.DatabendBinaryOperation;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendLikeOperation;
import sqlancer.databend.ast.DatabendUnaryPrefixOperation;
import sqlancer.databend.DatabendSchema;
import sqlancer.h2.H2ExpressionGenerator;

public class DatabendBinaryArithmeticOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("\"h}Y_C8BQ6A=voJj<wD");
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO;
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant) databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
                .apply(databendConstant_DatabendBooleanConstant0, databendConstant0);
        assertEquals(0L, databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test01() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(1438.1724);
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.DIVISION;
        DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
                .apply(databendConstant0, databendConstant0);
        assertEquals(1L, databendConstant1.asInt());
    }

    @Test
    public void test02() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "WevV T<c)");
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.DIVISION;
        DatabendConstant databendConstant0 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
                .apply(databendConstant_DatabendStringConstant0, databendConstant_DatabendNullConstant0);
        assertEquals("NULL", databendConstant0.toString());
    }

    @Test
    public void test03() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(1438.1724);
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MULTIPLICATION;
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant) databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
                .apply(databendConstant0, databendConstant0);
        assertEquals(2067844L, databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test04() throws Throwable {
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.ADDITION;
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        DatabendConstant databendConstant0 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
                .apply(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0);
        assertEquals((-2L), databendConstant0.asInt());
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test05() throws Throwable { DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 =
     * DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO; Comparator<Object> comparator0 =
     * (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
     * doReturn(5).when(comparator0).compare(any(), any()); BinaryOperator<Long> binaryOperator0 =
     * BinaryOperator.minBy((Comparator<? super Long>) comparator0); DatabendConstant.DatabendStringConstant
     * databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant( "%");
     * DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 =
     * (DatabendConstant.DatabendIntConstant) databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
     * .applyOperation(databendConstant_DatabendStringConstant0, databendConstant_DatabendStringConstant0,
     * binaryOperator0); DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant1 =
     * (DatabendConstant.DatabendIntConstant) databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
     * .apply(databendConstant_DatabendStringConstant0, databendConstant_DatabendIntConstant0);
     * DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1 =
     * DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.ADDITION; DatabendConstant.DatabendIntConstant
     * databendConstant_DatabendIntConstant2 = (DatabendConstant.DatabendIntConstant)
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1
     * .apply(databendConstant_DatabendStringConstant0, databendConstant_DatabendIntConstant1); assertEquals((-1L),
     * databendConstant_DatabendIntConstant2.getValue()); assertEquals((-1L),
     * databendConstant_DatabendIntConstant0.getValue()); }
     */

    @Test
    public void test06() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendConstant0, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = (DatabendConstant.DatabendNullConstant) databendBinaryArithmeticOperation0
                .getRightExpr();
        assertFalse(databendConstant_DatabendNullConstant0.isInt());
    }

    @Test
    public void test07() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.NOT_REGEXP;
        DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendConstant0,
                databendConstant0, h2ExpressionGenerator_H2BinaryComparisonOperator0);
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.SUBTRACTION;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendConstant0, databendBinaryOperation0,
                databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0);
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1 = databendBinaryArithmeticOperation0
                .getOp();
        assertSame(databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1,
                databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0);
    }

    @Test
    public void test08() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.ADDITION;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0,
                databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0);
        DatabendExpression databendExpression0 = databendBinaryArithmeticOperation0.getLeftExpr();
        assertEquals(DatabendSchema.DatabendDataType.NULL, databendExpression0.getExpectedType());
    }

    @Test
    public void test09() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("WW=_r",
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendNullConstant0);
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendColumnValue0, databendColumnValue0,
                databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0);
        DatabendConstant databendConstant0 = databendBinaryArithmeticOperation0.getExpectedValue();
        assertNotSame(databendConstant0, databendConstant_DatabendNullConstant0);
    }

    @Test
    public void test10() throws Throwable {
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_NOT_TRUE;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                (DatabendExpression) null, (DatabendExpression) null, h2ExpressionGenerator_H2UnaryPostfixOperator0);
        // Undeclared exception!
        try {
            databendBinaryArithmeticOperation0.getOp();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // class sqlancer.h2.H2ExpressionGenerator$H2UnaryPostfixOperator cannot be cast to class
            // sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator
            // (sqlancer.h2.H2ExpressionGenerator$H2UnaryPostfixOperator and
            // sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator are in unnamed
            // module of loader org.evosuite.instrumentation.InstrumentingClassLoader @a0a5f0)
            //
            verifyException("sqlancer.databend.ast.DatabendBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn((String) null,
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(1506L);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant0);
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendColumnValue0, databendColumnValue0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
        DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendBinaryLogicalOperation0,
                databendColumnValue0, databendLikeOperation_DatabendLikeOperator0);
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendLikeOperation0, databendConstant0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            databendBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.databend.ast.DatabendConstant$DatabendBooleanConstant@0000000010
            //
            verifyException("sqlancer.databend.ast.DatabendConstant", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                (DatabendExpression) null, (DatabendExpression) null,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            databendBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.ast.DatabendBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.LIKE;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                (DatabendExpression) null, (DatabendExpression) null,
                h2ExpressionGenerator_H2BinaryComparisonOperator0);
        DatabendExpression databendExpression0 = databendBinaryArithmeticOperation0.getRightExpr();
        assertNull(databendExpression0);
    }

    @Test
    public void test14() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendConstant0, databendConstant0, (BinaryOperatorNode.Operator) null);
        databendBinaryArithmeticOperation0.getOp();
    }

    @Test
    public void test15() throws Throwable {
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.NOT_LIKE;
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                (DatabendExpression) null, databendConstant_DatabendNullConstant0,
                h2ExpressionGenerator_H2BinaryComparisonOperator0);
        DatabendExpression databendExpression0 = databendBinaryArithmeticOperation0.getLeftExpr();
        assertNull(databendExpression0);
    }

    @Test
    public void test16() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendNullConstant0);
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendColumnValue0, databendConstant_DatabendNullConstant0, (BinaryOperatorNode.Operator) null);
        DatabendConstant databendConstant0 = databendBinaryArithmeticOperation0.getExpectedValue();
        assertNull(databendConstant0);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test17() throws Throwable { DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 =
     * DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO; Comparator<Object> comparator0 =
     * (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
     * doReturn(1).when(comparator0).compare(any(), any()); BinaryOperator<Long> binaryOperator0 =
     * BinaryOperator.minBy((Comparator<? super Long>) comparator0); DatabendConstant.DatabendStringConstant
     * databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant( "%");
     * DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 =
     * (DatabendConstant.DatabendIntConstant) databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
     * .applyOperation(databendConstant_DatabendStringConstant0, databendConstant_DatabendStringConstant0,
     * binaryOperator0); DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new
     * DatabendBinaryArithmeticOperation( databendConstant_DatabendIntConstant0,
     * databendConstant_DatabendStringConstant0, databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0);
     * databendBinaryArithmeticOperation0.getExpectedValue(); assertEquals((-1L),
     * databendConstant_DatabendIntConstant0.getValue()); assertEquals("-1",
     * databendConstant_DatabendIntConstant0.toString()); }
     */

    @Test
    public void test18() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.SUBTRACTION;
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(
                253380000000000L);
        DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
                .apply(databendConstant_DatabendDateConstant0, databendConstant0);
        assertNotSame(databendConstant1, databendConstant0);
    }

    @Test
    public void test19() throws Throwable {
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO;
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(626L);
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant) databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
                .apply(databendConstant0, databendConstant0);
        assertEquals(0L, databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test20() throws Throwable {
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.DIVISION;
        DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(0.0);
        DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
                .apply(databendConstant0, databendConstant0);
        assertEquals("-1", databendConstant1.toString());
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test21() throws Throwable { DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 =
     * DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO; Comparator<Object> comparator0 =
     * (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
     * doReturn(1).when(comparator0).compare(any(), any()); BinaryOperator<Long> binaryOperator0 =
     * BinaryOperator.minBy((Comparator<? super Long>) comparator0); DatabendConstant.DatabendStringConstant
     * databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant( "%"); DatabendConstant
     * databendConstant0 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
     * .applyOperation(databendConstant_DatabendStringConstant0, databendConstant_DatabendStringConstant0,
     * binaryOperator0); DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1 =
     * DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.DIVISION; DatabendConstant.DatabendIntConstant
     * databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant)
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1 .apply(databendConstant0, databendConstant0);
     * assertEquals(1L, databendConstant_DatabendIntConstant0.getValue()); }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test22() throws Throwable { DatabendConstant databendConstant0 =
     * DatabendConstant.createBooleanConstant(false); DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 =
     * DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO; Comparator<Object> comparator0 =
     * (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
     * doReturn(0).when(comparator0).compare(any(), any()); BinaryOperator<Long> binaryOperator0 =
     * BinaryOperator.minBy((Comparator<? super Long>) comparator0); DatabendConstant databendConstant1 =
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 .applyOperation(databendConstant0,
     * databendConstant0, binaryOperator0); DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator
     * databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1 =
     * DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MULTIPLICATION;
     * DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 =
     * (DatabendConstant.DatabendIntConstant) databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1
     * .apply(databendConstant1, databendConstant0); assertEquals(0L, databendConstant_DatabendIntConstant0.getValue());
     * }
     */

    @Test
    public void test23() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, false, true);
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-931));
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendFloatConstant0);
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_MINUS;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(
                databendColumnValue0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.SUBTRACTION;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendColumnValue0, databendUnaryPrefixOperation0,
                databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0);
        DatabendConstant databendConstant0 = databendBinaryArithmeticOperation0.getExpectedValue();
        assertNotNull(databendConstant0);
        assertEquals("-1862", databendConstant0.toString());
    }

    @Test
    public void test24() throws Throwable {
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO;
        String string0 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.getTextRepresentation();
        assertEquals("%", string0);
    }

    @Test
    public void test25() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                (DatabendExpression) null, (DatabendExpression) null,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendBinaryArithmeticOperation0
                .getExpectedType();
        assertEquals(DatabendSchema.DatabendDataType.INT, databendSchema_DatabendDataType0);
    }

    @Test
    public void test26() throws Throwable {
        String string0 = "xH;{.H6\\uN~9^+R";
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(string0,
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant0);
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_PLUS;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendColumnValue0, databendColumnValue0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            databendBinaryArithmeticOperation0.getExpectedValue();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // class sqlancer.databend.ast.DatabendUnaryPrefixOperation$DatabendUnaryPrefixOperator$2 cannot be cast to
            // class sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator
            // (sqlancer.databend.ast.DatabendUnaryPrefixOperation$DatabendUnaryPrefixOperator$2 and
            // sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator are in unnamed
            // module of loader org.evosuite.instrumentation.InstrumentingClassLoader @a0a5f0)
            //
            verifyException("sqlancer.databend.ast.DatabendBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO;
        DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(0.0);
        DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0
                .apply(databendConstant0, databendConstant0);
        assertEquals((-1L), databendConstant1.asInt());
    }
}
