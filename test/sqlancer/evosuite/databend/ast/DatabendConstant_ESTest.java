/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 01:47:43 GMT 2025
 */

package sqlancer.evosuite.databend.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.Timestamp;
import org.junit.jupiter.api.Test;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.DatabendSchema;

public class DatabendConstant_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test000() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "m/GH8E)XE)PXy->S|<o&");
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant1 = new DatabendConstant.DatabendStringConstant(
                "!ib@?;'kopb.L");
        DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0
                .isLessThan(databendConstant_DatabendStringConstant1);
        assertFalse(databendConstant0.asBoolean());
    }

    @Test
    public void test001() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
        DatabendConstant databendConstant0 = databendConstant_DatabendBooleanConstant0
                .cast(databendSchema_DatabendDataType0);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendConstant databendConstant1 = databendConstant_DatabendBooleanConstant1
                .cast(databendSchema_DatabendDataType0);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant2 = (DatabendConstant.DatabendBooleanConstant) databendConstant0
                .isLessThan(databendConstant1);
        assertEquals(0.0, databendConstant1.asFloat(), 0.01);
        assertFalse(databendConstant_DatabendBooleanConstant2.getValue());
        assertEquals("1.0", databendConstant0.toString());
    }

    @Test
    public void test002() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                0L);
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                2046.620776848);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendFloatConstant0
                .isLessThan(databendConstant_DatabendIntConstant0);
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test003() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-1L));
        DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0
                .cast(databendSchema_DatabendDataType0);
        assertTrue(databendConstant0.asBoolean());
        assertEquals("-1.0", databendConstant_DatabendFloatConstant0.toString());
    }

    @Test
    public void test004() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-469L));
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-469L));
        DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0
                .isLessThan(databendConstant_DatabendFloatConstant0);
        assertEquals("false", databendConstant0.toString());
        assertEquals((-469L), databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test005() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-11L));
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(0L);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant0
                .isLessThan(databendConstant_DatabendIntConstant0);
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test006() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                1236L);
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant1 = new DatabendConstant.DatabendIntConstant(
                (-4818L));
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendIntConstant0
                .isEquals(databendConstant_DatabendIntConstant1);
        assertEquals((-4818L), databendConstant_DatabendIntConstant1.asInt());
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test007() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("be");
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(
                (-3781L));
        databendConstant_DatabendTimestampConstant0.isLessThan(databendConstant0);
        assertEquals("1969-12-31 23:59:56", databendConstant_DatabendTimestampConstant0.getValue());
    }

    @Test
    public void test008() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(2728.0);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant) databendConstant0
                .cast(databendSchema_DatabendDataType0);
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(
                1L);
        databendConstant_DatabendTimestampConstant0.isEquals(databendConstant_DatabendIntConstant0);
        assertEquals("1970-01-01 00:00:00", databendConstant_DatabendTimestampConstant0.getValue());
        assertEquals(2728L, databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test009() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(
                (-2398L));
        databendConstant_DatabendTimestampConstant0.cast(databendSchema_DatabendDataType0);
        assertEquals("1969-12-31 23:59:57", databendConstant_DatabendTimestampConstant0.getValue());
    }

    @Test
    public void test010() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "m/GH8E)XE)PXy->S|<&");
        String string0 = databendConstant_DatabendStringConstant0.toString();
        assertEquals("'m/GH8E)XE)PXy->S|<&'", string0);
    }

    @Test
    public void test011() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "m/GH8E)XE)PXy->S|<&");
        boolean boolean0 = databendConstant_DatabendStringConstant0.isString();
        assertTrue(boolean0);
    }

    @Test
    public void test012() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "1.0");
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendStringConstant0
                .isEquals(databendConstant_DatabendStringConstant0);
        assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test013() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "1969-12-31 23:59:57");
        String string0 = databendConstant_DatabendStringConstant0.asString();
        assertEquals("1969-12-31 23:59:57", string0);
    }

    @Test
    public void test014() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        boolean boolean0 = databendConstant_DatabendNullConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test015() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendConstant databendConstant0 = databendConstant_DatabendNullConstant0
                .isLessThan(databendConstant_DatabendNullConstant0);
        assertFalse(databendConstant0.isInt());
    }

    @Test
    public void test016() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = (DatabendConstant.DatabendFloatConstant) DatabendConstant
                .createFloatConstant(1216.45757062);
        databendConstant_DatabendNullConstant0.isEquals(databendConstant_DatabendFloatConstant0);
        assertEquals(1216.45757062, databendConstant_DatabendFloatConstant0.getValue(), 0.01);
        assertEquals(1216.45757062, databendConstant_DatabendFloatConstant0.asFloat(), 0.01);
    }

    @Test
    public void test017() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        databendConstant_DatabendIntConstant0.isInt();
        assertEquals((-1L), databendConstant_DatabendIntConstant0.asInt());
    }

    @Test
    public void test018() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        long long0 = databendConstant_DatabendIntConstant0.asInt();
        assertEquals((-1L), long0);
    }

    @Test
    public void test019() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-1554.6624734));
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendFloatConstant0
                .isLessThan(databendConstant_DatabendIntConstant0);
        assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
        assertEquals((-1L), databendConstant_DatabendIntConstant0.asInt());
    }

    @Test
    public void test020() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant((-1L));
        databendConstant0.isEquals(databendConstant_DatabendIntConstant0);
        assertEquals((-1.0), databendConstant0.asFloat(), 0.01);
        assertEquals((-1L), databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test021() throws Throwable {
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(
                1922L);
        String string0 = databendConstant_DatabendDateConstant0.toString();
        assertEquals("DATE '1970-01-01'", string0);
    }

    @Test
    public void test022() throws Throwable {
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(
                2506L);
        databendConstant_DatabendDateConstant0.isEquals((DatabendConstant) null);
        assertEquals("1970-01-01", databendConstant_DatabendDateConstant0.getValue());
    }

    @Test
    public void test023() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.TIMESTAMP;
        databendConstant_DatabendBooleanConstant0.cast(databendSchema_DatabendDataType0);
        assertTrue(databendConstant_DatabendBooleanConstant0.asBoolean());
    }

    @Test
    public void test024() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        boolean boolean0 = databendConstant_DatabendBooleanConstant0.asBoolean();
        assertTrue(boolean0);
    }

    @Test
    public void test025() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("be");
        DatabendConstant databendConstant1 = databendConstant0.cast(databendSchema_DatabendDataType0);
        assertEquals((-1.0), databendConstant1.asFloat(), 0.01);
    }

    @Test
    public void test026() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        Timestamp timestamp0 = databendConstant_DatabendNullConstant0.truncateTimestamp(0L);
        assertEquals("1970-01-01 00:00:00.0", timestamp0.toString());
    }

    @Test
    public void test027() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        Timestamp timestamp0 = databendConstant_DatabendNullConstant0.truncateTimestamp((-1L));
        assertEquals("1969-12-31 23:59:59.999", timestamp0.toString());
    }

    @Test
    public void test028() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-993.10780023756));
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = (DatabendConstant.DatabendStringConstant) databendConstant_DatabendFloatConstant0
                .cast(databendSchema_DatabendDataType0);
        databendConstant_DatabendStringConstant0.isString();
        assertEquals("-993.10780023756", databendConstant_DatabendStringConstant0.getValue());
    }

    @Test
    public void test029() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        boolean boolean0 = databendConstant_DatabendNullConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test030() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                1L);
        databendConstant_DatabendIntConstant0.isInt();
        assertEquals(1L, databendConstant_DatabendIntConstant0.asInt());
    }

    @Test
    public void test031() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-1553.267874819639));
        databendConstant_DatabendFloatConstant0.isFloat();
        assertEquals((-1553.267874819639), databendConstant_DatabendFloatConstant0.asFloat(), 0.01);
    }

    @Test
    public void test032() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.POSITIVE_INFINITY);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendFloatConstant0
                .cast(databendSchema_DatabendDataType0);
        databendConstant_DatabendBooleanConstant0.isBoolean();
        assertEquals("3.40282347e+38", databendConstant_DatabendFloatConstant0.toString());
        assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test033() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant databendConstant1 = databendConstant0.cast(databendSchema_DatabendDataType0);
        assertFalse(databendConstant1.equals((Object) databendConstant0));
    }

    @Test
    public void test034() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant((String) null);
        String string0 = databendConstant0.asString();
        assertNull(string0);
    }

    @Test
    public void test035() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("FLOAT32");
        String string0 = databendConstant0.asString();
        assertEquals("FLOAT32", string0);
    }

    @Test
    public void test036() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("");
        String string0 = databendConstant0.asString();
        assertEquals("", string0);
    }

    @Test
    public void test037() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                0L);
        long long0 = databendConstant_DatabendIntConstant0.asInt();
        assertEquals(0L, long0);
    }

    @Test
    public void test038() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                62L);
        long long0 = databendConstant_DatabendIntConstant0.asInt();
        assertEquals(62L, long0);
    }

    @Test
    public void test039() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-634L));
        long long0 = databendConstant_DatabendIntConstant0.asInt();
        assertEquals((-634L), long0);
    }

    @Test
    public void test040() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                0.0);
        double double0 = databendConstant_DatabendFloatConstant0.asFloat();
        assertEquals(0.0, double0, 0.01);
    }

    @Test
    public void test041() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.POSITIVE_INFINITY);
        double double0 = databendConstant_DatabendFloatConstant0.asFloat();
        assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test
    public void test042() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-993.10780023756));
        double double0 = databendConstant_DatabendFloatConstant0.asFloat();
        assertEquals((-993.10780023756), double0, 0.01);
    }

    @Test
    public void test043() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        boolean boolean0 = databendConstant_DatabendBooleanConstant0.asBoolean();
        assertTrue(boolean0);
    }

    @Test
    public void test044() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        boolean boolean0 = databendConstant_DatabendBooleanConstant0.asBoolean();
        assertFalse(boolean0);
    }

    @Test
    public void test045() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                1L);
        // Undeclared exception!
        try {
            databendConstant_DatabendIntConstant0.isLessThan((DatabendConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.ast.DatabendConstant$DatabendIntConstant", e);
        }
    }

    @Test
    public void test046() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(1113L);
        // Undeclared exception!
        try {
            databendConstant0.isEquals((DatabendConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.ast.DatabendConstant$DatabendIntConstant", e);
        }
    }

    @Test
    public void test047() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.POSITIVE_INFINITY);
        // Undeclared exception!
        try {
            databendConstant_DatabendFloatConstant0.cast((DatabendSchema.DatabendDataType) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.ast.DatabendConstant$DatabendFloatConstant", e);
        }
    }

    @Test
    public void test048() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        boolean boolean0 = databendConstant0.isString();
        assertFalse(boolean0);
    }

    @Test
    public void test049() throws Throwable {
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(
                (-1L));
        databendConstant_DatabendDateConstant0.isNull();
        assertEquals("1969-12-31", databendConstant_DatabendDateConstant0.getValue());
    }

    @Test
    public void test050() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "3.40282347e+38");
        boolean boolean0 = databendConstant_DatabendStringConstant0.isBoolean();
        assertFalse(boolean0);
    }

    @Test
    public void test051() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        boolean boolean0 = databendConstant_DatabendIntConstant0.isFloat();
        assertEquals((-1L), databendConstant_DatabendIntConstant0.getValue());
        assertFalse(boolean0);
    }

    @Test
    public void test052() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        databendConstant_DatabendBooleanConstant0.isInt();
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test053() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0
                .cast(databendSchema_DatabendDataType0);
        DatabendConstant databendConstant1 = databendConstant_DatabendBooleanConstant0.isLessThan(databendConstant0);
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
        assertEquals((-1L), databendConstant_DatabendIntConstant0.getValue());
        assertTrue(databendConstant1.asBoolean());
    }

    @Test
    public void test054() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
        DatabendConstant databendConstant1 = databendConstant0.isLessThan(databendConstant0);
        assertEquals("false", databendConstant1.toString());
    }

    @Test
    public void test055() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(
                (-4111L));
        // Undeclared exception!
        try {
            databendConstant0.isLessThan(databendConstant_DatabendTimestampConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP '1969-12-31 23:59:55'
            //
        }
    }

    @Test
    public void test056() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
        DatabendConstant databendConstant1 = databendConstant0.isLessThan(databendConstant0);
        assertFalse(databendConstant1.asBoolean());
    }

    @Test
    public void test057() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendConstant databendConstant0 = databendConstant_DatabendBooleanConstant1
                .isEquals(databendConstant_DatabendBooleanConstant0);
        assertFalse(databendConstant0.asBoolean());
    }

    @Test
    public void test058() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) DatabendConstant
                .createBooleanConstant(true);
        databendConstant_DatabendBooleanConstant0.isEquals(databendConstant_DatabendNullConstant0);
        assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test059() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = (DatabendConstant.DatabendStringConstant) databendConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals("0", databendConstant_DatabendStringConstant0.getValue());
    }

    @Test
    public void test060() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        DatabendConstant databendConstant0 = databendConstant_DatabendBooleanConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals("0", databendConstant0.toString());
    }

    @Test
    public void test061() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.DATE;
        databendConstant_DatabendBooleanConstant0.cast(databendSchema_DatabendDataType0);
        assertEquals("false", databendConstant_DatabendBooleanConstant0.toString());
    }

    @Test
    public void test062() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant0
                .cast(databendSchema_DatabendDataType0);
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test063() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1990L));
        DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0
                .isEquals(databendConstant_DatabendIntConstant0);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = (DatabendConstant.DatabendStringConstant) databendConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals("1", databendConstant_DatabendStringConstant0.getValue());
        assertEquals("-1990", databendConstant_DatabendIntConstant0.toString());
    }

    @Test
    public void test064() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant) databendConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals(1L, databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test065() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "m/GH8E)XE)PXy->S|<o&");
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant1 = new DatabendConstant.DatabendStringConstant(
                "");
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendStringConstant1
                .isLessThan(databendConstant_DatabendStringConstant0);
        assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test066() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-993.10780023756));
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "-993.10780023756");
        // Undeclared exception!
        try {
            databendConstant_DatabendStringConstant0.isLessThan(databendConstant_DatabendFloatConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // -993.10780023756
            //
        }
    }

    @Test
    public void test067() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant databendConstant1 = DatabendConstant.createStringConstant("");
        DatabendConstant databendConstant2 = databendConstant1.isLessThan(databendConstant0);
        assertFalse(databendConstant2.isFloat());
    }

    @Test
    public void test068() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "");
        assertTrue(databendConstant_DatabendStringConstant0.isString());

        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendStringConstant0
                .isEquals(databendConstant_DatabendStringConstant0);
        assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test069() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant databendConstant1 = DatabendConstant.createStringConstant("yyyy-MM-dd");
        DatabendConstant databendConstant2 = databendConstant1.isEquals(databendConstant0);
        assertTrue(databendConstant2.isNull());
    }

    @Test
    public void test070() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "true");
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendStringConstant0
                .cast(databendSchema_DatabendDataType0);
        assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test071() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "false");
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendStringConstant0
                .cast(databendSchema_DatabendDataType0);
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test072() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "[y<}");
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.TIMESTAMP;
        DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0
                .cast(databendSchema_DatabendDataType0);
        assertNull(databendConstant0);
    }

    @Test
    public void test073() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("");
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        // Undeclared exception!
        try {
            databendConstant0.cast(databendSchema_DatabendDataType0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // string: , cannot be forced to boolean
            //
        }
    }

    @Test
    public void test074() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "m/GH8E)XE)PXy->S|<o&");
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
        DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0
                .cast(databendSchema_DatabendDataType0);
        assertFalse(databendConstant0.isFloat());
    }

    @Test
    public void test075() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "m/GH8E)XE)PXy->S|<o&");
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals((-1L), databendConstant0.asInt());
    }

    @Test
    public void test076() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.POSITIVE_INFINITY);
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant1 = (DatabendConstant.DatabendFloatConstant) DatabendConstant
                .createFloatConstant(199.494575583139);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendFloatConstant1
                .isLessThan(databendConstant_DatabendFloatConstant0);
        assertEquals("true", databendConstant_DatabendBooleanConstant0.toString());
        assertEquals(199.494575583139, databendConstant_DatabendFloatConstant1.getValue(), 0.01);
    }

    @Test
    public void test077() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.NEGATIVE_INFINITY);
        DatabendConstant databendConstant0 = DatabendConstant.createDateConstant((-1351L));
        // Undeclared exception!
        try {
            databendConstant_DatabendFloatConstant0.isLessThan(databendConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // DATE '1969-12-31'
            //
        }
    }

    @Test
    public void test078() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-2778L));
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-2778L));
        DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0
                .isLessThan(databendConstant_DatabendIntConstant0);
        assertEquals("false", databendConstant0.toString());
        assertEquals((-2778.0), databendConstant_DatabendFloatConstant0.asFloat(), 0.01);
    }

    @Test
    public void test079() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = (DatabendConstant.DatabendFloatConstant) DatabendConstant
                .createFloatConstant(Double.POSITIVE_INFINITY);
        databendConstant_DatabendFloatConstant0.isLessThan(databendConstant0);
        assertEquals(Double.POSITIVE_INFINITY, databendConstant_DatabendFloatConstant0.getValue(), 0.01);
    }

    @Test
    public void test080() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                0L);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals(0.0, databendConstant_DatabendFloatConstant0.getValue(), 0.01);
        assertEquals("false", databendConstant0.toString());
    }

    @Test
    public void test081() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.POSITIVE_INFINITY);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant1 = (DatabendConstant.DatabendFloatConstant) databendConstant_DatabendFloatConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals(Double.POSITIVE_INFINITY, databendConstant_DatabendFloatConstant1.getValue(), 0.01);
    }

    @Test
    public void test082() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                1.0);
        databendConstant_DatabendFloatConstant0.cast(databendSchema_DatabendDataType0);
        assertEquals(1.0, databendConstant_DatabendFloatConstant0.asFloat(), 0.01);
    }

    @Test
    public void test083() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                0.0);
        String string0 = databendConstant_DatabendFloatConstant0.toString();
        assertEquals("0.0", string0);
    }

    @Test
    public void test084() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.POSITIVE_INFINITY);
        String string0 = databendConstant_DatabendFloatConstant0.toString();
        assertEquals("3.40282347e+38", string0);
    }

    @Test
    public void test085() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.NEGATIVE_INFINITY);
        String string0 = databendConstant_DatabendFloatConstant0.toString();
        assertEquals("-3.40282347e+38", string0);
    }

    @Test
    public void test086() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                657.044591019058);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0
                .cast(databendSchema_DatabendDataType0);
        DatabendConstant databendConstant1 = databendConstant0.isLessThan(databendConstant_DatabendFloatConstant0);
        assertEquals(657L, databendConstant0.asInt());
        assertEquals("true", databendConstant1.toString());
    }

    @Test
    public void test087() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant) DatabendConstant
                .createIntConstant(1497L);
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = (DatabendConstant.DatabendFloatConstant) DatabendConstant
                .createFloatConstant((-1588.51999));
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendIntConstant0
                .isLessThan(databendConstant_DatabendFloatConstant0);
        assertEquals(1497L, databendConstant_DatabendIntConstant0.getValue());
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test088() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(1031L);
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1459L));
        DatabendConstant databendConstant1 = databendConstant_DatabendIntConstant0.isLessThan(databendConstant0);
        assertEquals(1031L, databendConstant0.asInt());
        assertEquals("true", databendConstant1.toString());
    }

    @Test
    public void test089() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant databendConstant1 = DatabendConstant.createIntConstant(0L);
        DatabendConstant databendConstant2 = databendConstant1.isLessThan(databendConstant0);
        assertFalse(databendConstant2.isFloat());
    }

    @Test
    public void test090() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(2223L);
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-2149L));
        DatabendConstant databendConstant1 = databendConstant_DatabendIntConstant0.isEquals(databendConstant0);
        assertEquals(2223L, databendConstant0.asInt());
        assertEquals("false", databendConstant1.toString());
    }

    @Test
    public void test091() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant) DatabendConstant
                .createIntConstant(482L);
        databendConstant_DatabendIntConstant0.isEquals(databendConstant0);
        assertEquals(482L, databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test092() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                0L);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals("false", databendConstant0.toString());
    }

    @Test
    public void test093() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-67L));
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.TIMESTAMP;
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = (DatabendConstant.DatabendTimestampConstant) databendConstant_DatabendIntConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals("1969-12-31 23:59:59", databendConstant_DatabendTimestampConstant0.getValue());
    }

    @Test
    public void test094() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                253380000000000L);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.DATE;
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = (DatabendConstant.DatabendDateConstant) databendConstant_DatabendIntConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals("1970-01-01", databendConstant_DatabendDateConstant0.getValue());
        assertEquals(253380000000000L, databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test095() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                1L);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
        databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
        assertEquals(1L, databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test096() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                590L);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
        databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
        assertEquals(590L, databendConstant_DatabendIntConstant0.getValue());
    }

    @Test
    public void test097() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(707L);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendConstant databendConstant1 = databendConstant0.cast(databendSchema_DatabendDataType0);
        assertEquals("true", databendConstant1.toString());
        assertEquals("707", databendConstant0.toString());
    }

    @Test
    public void test098() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                1676L);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0
                .cast(databendSchema_DatabendDataType0);
        assertEquals(1676L, databendConstant0.asInt());
    }

    @Test
    public void test099() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = (DatabendConstant.DatabendTimestampConstant) DatabendConstant
                .createTimestampConstant(1L);
        databendConstant_DatabendTimestampConstant0.isLessThan(databendConstant0);
        assertEquals("1970-01-01 00:00:00", databendConstant_DatabendTimestampConstant0.getValue());
    }

    @Test
    public void test100() throws Throwable {
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = (DatabendConstant.DatabendTimestampConstant) DatabendConstant
                .createTimestampConstant((-3040L));
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-3040L));
        databendConstant_DatabendTimestampConstant0.isEquals(databendConstant_DatabendFloatConstant0);
        assertEquals("1969-12-31 23:59:56", databendConstant_DatabendTimestampConstant0.getValue());
        assertEquals("-3040.0", databendConstant_DatabendFloatConstant0.toString());
    }

    @Test
    public void test101() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        DatabendConstant databendConstant0 = DatabendConstant.createTimestampConstant((-1L));
        // Undeclared exception!
        try {
            databendConstant_DatabendIntConstant0.isEquals(databendConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP '1969-12-31 23:59:59'
            //
        }
    }

    @Test
    public void test102() throws Throwable {
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(
                (-20L));
        String string0 = databendConstant_DatabendTimestampConstant0.getValue();
        assertEquals("1969-12-31 23:59:59", string0);
    }

    @Test
    public void test103() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendConstant_DatabendNullConstant0
                .getExpectedType();
        assertEquals(DatabendSchema.DatabendDataType.NULL, databendSchema_DatabendDataType0);
    }

    @Test
    public void test104() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        assertTrue(databendConstant0.isNull());

        DatabendConstant databendConstant1 = DatabendConstant.createBooleanConstant(true);
        databendConstant1.isLessThan(databendConstant0);
        assertTrue(databendConstant1.asBoolean());
    }

    @Test
    public void test105() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendConstant databendConstant0 = databendConstant_DatabendNullConstant0
                .cast(databendSchema_DatabendDataType0);
        assertTrue(databendConstant0.isNull());
    }

    @Test
    public void test106() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        String string0 = databendConstant_DatabendNullConstant0.toString();
        assertEquals("NULL", string0);
    }

    @Test
    public void test107() throws Throwable {
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(
                1922L);
        // Undeclared exception!
        try {
            databendConstant_DatabendDateConstant0.asString();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.databend.ast.DatabendConstant$DatabendDateConstant@0000000001
            //
            verifyException("sqlancer.databend.ast.DatabendConstant", e);
        }
    }

    @Test
    public void test108() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        // Undeclared exception!
        try {
            databendConstant0.asBoolean();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.databend.ast.DatabendConstant$DatabendNullConstant@0000000001
            //
            verifyException("sqlancer.databend.ast.DatabendConstant", e);
        }
    }

    @Test
    public void test109() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createDateConstant(1L);
        // Undeclared exception!
        try {
            databendConstant0.asInt();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.databend.ast.DatabendConstant$DatabendDateConstant@0000000001
            //
            verifyException("sqlancer.databend.ast.DatabendConstant", e);
        }
    }

    @Test
    public void test110() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        // Undeclared exception!
        try {
            databendConstant0.asFloat();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.databend.ast.DatabendConstant$DatabendNullConstant@0000000001
            //
            verifyException("sqlancer.databend.ast.DatabendConstant", e);
        }
    }

    @Test
    public void test111() throws Throwable {
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendConstant databendConstant0 = DatabendConstant.createDateConstant(2052L);
        // Undeclared exception!
        try {
            databendConstant_DatabendBooleanConstant0.isEquals(databendConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // DATE '1970-01-01'
            //
        }
    }

    @Test
    public void test112() throws Throwable {
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = (DatabendConstant.DatabendDateConstant) DatabendConstant
                .createDateConstant(1477L);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
        databendConstant_DatabendDateConstant0.cast(databendSchema_DatabendDataType0);
        assertEquals("1970-01-01", databendConstant_DatabendDateConstant0.getValue());
    }

    @Test
    public void test113() throws Throwable {
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = (DatabendConstant.DatabendDateConstant) DatabendConstant
                .createDateConstant(1L);
        databendConstant_DatabendDateConstant0.isLessThan(databendConstant_DatabendDateConstant0);
        assertEquals("1970-01-01", databendConstant_DatabendDateConstant0.getValue());
    }

    @Test
    public void test114() throws Throwable {
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = (DatabendConstant.DatabendDateConstant) DatabendConstant
                .createDateConstant((-2025L));
        String string0 = databendConstant_DatabendDateConstant0.getValue();
        assertEquals("1969-12-31", string0);
    }

    @Test
    public void test115() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-1.0));
        double double0 = databendConstant_DatabendFloatConstant0.getValue();
        assertEquals((-1.0), double0, 0.01);
    }

    @Test
    public void test116() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.NEGATIVE_INFINITY);
        assertTrue(databendConstant_DatabendFloatConstant0.isFloat());
        assertFalse(databendConstant_DatabendFloatConstant0.isInt());

        DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0
                .isLessThan(databendConstant_DatabendFloatConstant0);
        assertFalse(databendConstant0.asBoolean());
        assertEquals("-3.40282347e+38", databendConstant_DatabendFloatConstant0.toString());
    }

    @Test
    public void test117() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                Double.NEGATIVE_INFINITY);
        boolean boolean0 = databendConstant_DatabendFloatConstant0.isFloat();
        assertEquals(Double.NEGATIVE_INFINITY, databendConstant_DatabendFloatConstant0.getValue(), 0.01);
        assertTrue(boolean0);
    }

    @Test
    public void test118() throws Throwable {
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "1969-12-31");
        String string0 = databendConstant_DatabendStringConstant0.getValue();
        assertEquals("1969-12-31", string0);
    }

    @Test
    public void test119() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
        DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0
                .cast(databendSchema_DatabendDataType0);
        // Undeclared exception!
        try {
            databendConstant_DatabendIntConstant0.isLessThan(databendConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // '-1'
            //
        }
    }

    @Test
    public void test120() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                0L);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendConstant_DatabendIntConstant0
                .getExpectedType();
        assertEquals(DatabendSchema.DatabendDataType.INT, databendSchema_DatabendDataType0);
    }

    @Test
    public void test121() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-469L));
        long long0 = databendConstant_DatabendIntConstant0.getValue();
        assertEquals((-469L), long0);
    }

    @Test
    public void test122() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant((-2163L));
        String string0 = ((DatabendConstant.DatabendIntConstant) databendConstant0).toString();
        assertEquals("-2163", string0);
    }

    @Test
    public void test123() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                0L);
        assertTrue(databendConstant_DatabendIntConstant0.isInt());

        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendConstant_DatabendIntConstant0
                .isLessThan(databendConstant_DatabendIntConstant0);
        assertFalse(databendConstant_DatabendIntConstant0.isNull());

        boolean boolean0 = databendConstant_DatabendBooleanConstant0.getValue();
        assertFalse(boolean0);
    }

    @Test
    public void test124() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
        assertTrue(databendConstant0.isBoolean());

        DatabendConstant databendConstant1 = databendConstant0.isEquals(databendConstant0);
        assertFalse(databendConstant0.isNull());
        assertTrue(databendConstant1.asBoolean());
    }

    @Test
    public void test125() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("INT");
        DatabendConstant databendConstant1 = databendConstant0.isLessThan(databendConstant0);
        // Undeclared exception!
        try {
            databendConstant0.isEquals(databendConstant1);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // false
            //
        }
    }
}
