/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 02:56:07 GMT 2025
 */

package sqlancer.evosuite.databend.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.databend.ast.DatabendAlias;
import sqlancer.databend.ast.DatabendBinaryComparisonOperation;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendLikeOperation;
import sqlancer.databend.ast.DatabendUnaryPostfixOperation;
import sqlancer.databend.DatabendSchema;

public class DatabendBinaryComparisonOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_NOT_DISTINCT;
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant databendConstant1 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant0, databendConstant0);
        DatabendConstant databendConstant2 = databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0
                .apply(databendConstant1);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1
                .apply(databendConstant1, databendConstant2);
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test01() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("HveKByvcKY",
                databendSchema_DatabendCompositeDataType0, false, false);
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(
                0L);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                (DatabendConstant) null);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendColumnValue0, databendConstant_DatabendBooleanConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1 = databendBinaryComparisonOperation0
                .getOp();
        DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1
                .apply(databendConstant_DatabendTimestampConstant0, (DatabendConstant) null);
        assertNull(databendConstant0);
    }

    @Test
    public void test02() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_NOT_DISTINCT;
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant databendConstant1 = DatabendConstant.createIntConstant(1000L);
        DatabendConstant databendConstant2 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant0, databendConstant1);
        assertEquals("false", databendConstant2.toString());
    }

    @Test
    public void test03() throws Throwable {
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(
                0L);
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "");
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.EQUALS;
        // Undeclared exception!
        try {
            databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                    .apply(databendConstant_DatabendStringConstant0, databendConstant_DatabendTimestampConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // TIMESTAMP '1970-01-01 00:00:00'
            //
        }
    }

    @Test
    public void test04() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant0, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation0
                .getRightExpression();
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test05() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("GREATER");
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.NOT_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                (DatabendExpression) null, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendExpression databendExpression0 = databendBinaryComparisonOperation0.getLeftExpression();
        assertNull(databendExpression0);
    }

    @Test
    public void test06() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, false, false);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant_DatabendNullConstant0);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_NOT_DISTINCT;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendColumnValue0, databendColumnValue0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation0
                .getExpectedValue();
        assertNotNull(databendConstant_DatabendBooleanConstant0);
        assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test07() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(
                "GREATER_EQUALS", (DatabendSchema.DatabendCompositeDataType) null, false, true);
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-228L));
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendIntConstant0);
        DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
        DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendColumnValue0,
                databendColumnValue0, databendLikeOperation_DatabendLikeOperator0);
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendLikeOperation0, databendConstant_DatabendIntConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            databendBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.databend.ast.DatabendConstant$DatabendIntConstant@0000000002
            //
            verifyException("sqlancer.databend.ast.DatabendConstant", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_NOT_DISTINCT;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                (DatabendExpression) null, (DatabendExpression) null,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            databendBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.ast.DatabendBinaryComparisonOperation", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                (DatabendExpression) null, (DatabendExpression) null,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendExpression databendExpression0 = databendBinaryComparisonOperation0.getRightExpression();
        assertNull(databendExpression0);
    }

    @Test
    public void test10() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant0, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendExpression databendExpression0 = databendBinaryComparisonOperation0.getLeftExpression();
        assertSame(databendConstant0, databendExpression0);
    }

    @Test
    public void test11() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant_DatabendBooleanConstant0, databendConstant_DatabendBooleanConstant0);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant_DatabendBooleanConstant0, databendConstant0);
        assertFalse(databendConstant_DatabendBooleanConstant1.getValue());
        assertEquals("true", databendConstant0.toString());
    }

    @Test
    public void test12() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant_DatabendBooleanConstant0, databendConstant_DatabendBooleanConstant0);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant0, databendConstant_DatabendBooleanConstant0);
        assertTrue(databendConstant_DatabendBooleanConstant1.getValue());
    }

    @Test
    public void test13() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant_DatabendNullConstant0, (DatabendConstant) null);
        assertEquals("NULL", databendConstant0.toString());
    }

    @Test
    public void test14() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant0, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1 = databendBinaryComparisonOperation0
                .getOp();
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant0, databendConstant0);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1
                .apply(databendConstant0, databendConstant_DatabendBooleanConstant0);
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
        assertEquals("true", databendConstant_DatabendBooleanConstant1.toString());
    }

    @Test
    public void test15() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant0, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1 = databendBinaryComparisonOperation0
                .getOp();
        DatabendConstant databendConstant1 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant0, databendConstant0);
        DatabendConstant databendConstant2 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1
                .apply(databendConstant1, databendConstant0);
        assertFalse(databendConstant2.asBoolean());
    }

    @Test
    public void test16() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null,
                databendConstant_DatabendNullConstant0);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendColumnValue0, databendColumnValue0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendConstant databendConstant0 = databendBinaryComparisonOperation0.getExpectedValue();
        assertTrue(databendConstant0.isNull());
    }

    @Test
    public void test17() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
        DatabendConstant databendConstant1 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant0, databendConstant0);
        DatabendConstant databendConstant2 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant0, databendConstant1);
        assertTrue(databendConstant2.asBoolean());
        assertNotSame(databendConstant2, databendConstant1);
    }

    @Test
    public void test18() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, false, false);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant_DatabendNullConstant0);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendColumnValue0, databendColumnValue0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendConstant databendConstant0 = databendBinaryComparisonOperation0.getExpectedValue();
        assertNotNull(databendConstant0);
        assertNotSame(databendConstant0, databendConstant_DatabendNullConstant0);
    }

    @Test
    public void test19() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant0, databendConstant_DatabendNullConstant0);
        assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
        assertFalse(databendConstant0.asBoolean());
    }

    @Test
    public void test20() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.NOT_EQUALS;
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant0, databendConstant0);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant) databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant_DatabendBooleanConstant0, databendConstant0);
        assertEquals("true", databendConstant_DatabendBooleanConstant1.toString());
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test21() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.NOT_EQUALS;
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0
                .apply(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0);
        assertNotSame(databendConstant0, databendConstant_DatabendNullConstant0);
    }

    @Test
    public void test22() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, false, false);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant_DatabendNullConstant0);
        DatabendAlias databendAlias0 = new DatabendAlias(databendColumnValue0, (String) null);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendColumnValue0, databendAlias0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendConstant databendConstant0 = databendBinaryComparisonOperation0.getExpectedValue();
        assertNull(databendConstant0);
    }

    @Test
    public void test23() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(
                "IS DISTINCT FROM", databendSchema_DatabendCompositeDataType0, false, false);
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(
                (-9223372036854775808L));
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendDateConstant0);
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NOT_NULL;
        DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(
                databendColumnValue0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendUnaryPostfixOperation0, databendColumnValue0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            databendBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // DATE '0778-12-23'
            //
        }
    }

    @Test
    public void test24() throws Throwable {
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
        String string0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.getTextRepresentation();
        assertEquals("IS DISTINCT FROM", string0);
    }

    @Test
    public void test25() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, false, false);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant_DatabendNullConstant0);
        DatabendAlias databendAlias0 = new DatabendAlias(databendColumnValue0, (String) null);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendColumnValue0, databendAlias0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendBinaryComparisonOperation0
                .getExpectedType();
        assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendDataType0);
    }

    @Test
    public void test26() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant0, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendConstant databendConstant1 = databendBinaryComparisonOperation0.getExpectedValue();
        assertNull(databendConstant1);
    }

    @Test
    public void test27() throws Throwable {
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                (DatabendExpression) null, (DatabendExpression) null,
                (DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator) null);
        databendBinaryComparisonOperation0.getOp();
    }
}
