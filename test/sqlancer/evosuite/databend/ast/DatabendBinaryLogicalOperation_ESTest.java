/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 13:59:06 GMT 2025
 */

package sqlancer.evosuite.databend.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.databend.ast.DatabendBetweenOperation;
import sqlancer.databend.ast.DatabendBinaryArithmeticOperation;
import sqlancer.databend.ast.DatabendBinaryLogicalOperation;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendInOperation;
import sqlancer.databend.ast.DatabendJoin;
import sqlancer.databend.ast.DatabendSelect;
import sqlancer.databend.ast.DatabendTableReference;
import sqlancer.databend.ast.DatabendUnaryPostfixOperation;
import sqlancer.databend.DatabendSchema;

public class DatabendBinaryLogicalOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(1.7976931348623157E308);
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendConstant_DatabendBooleanConstant0, (DatabendExpression) null,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-2243L));
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator1 = databendBinaryLogicalOperation0
                .getOp();
        DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator1
                .apply(databendConstant0, databendConstant_DatabendIntConstant0);
        assertTrue(databendConstant1.isBoolean());
    }

    @Test
    public void test01() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                (DatabendExpression) null, (DatabendExpression) null,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendExpression databendExpression0 = databendBinaryLogicalOperation0.getRightExpr();
        assertNull(databendExpression0);
    }

    @Test
    public void test02() throws Throwable {
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(
                270L);
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                (DatabendExpression) null, databendConstant_DatabendDateConstant0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendExpression databendExpression0 = databendBinaryLogicalOperation0.getLeftExpr();
        assertNull(databendExpression0);
    }

    @Test
    public void test03() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                (DatabendExpression) null, (DatabendExpression) null,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            databendBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.ast.DatabendBinaryLogicalOperation", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator
                .getRandom();
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue((DatabendSchema.DatabendColumn) null,
                databendConstant0);
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendColumnValue0, databendColumnValue0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendBinaryArithmeticOperation0, databendConstant0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            databendBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // class sqlancer.databend.ast.DatabendBinaryLogicalOperation$DatabendBinaryLogicalOperator$1 cannot be cast
            // to class sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator
            // (sqlancer.databend.ast.DatabendBinaryLogicalOperation$DatabendBinaryLogicalOperator$1 and
            // sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator are in unnamed
            // module of loader org.evosuite.instrumentation.InstrumentingClassLoader @362c1e3a)
            //
            verifyException("sqlancer.databend.ast.DatabendBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator
                .getRandom();
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("aH95[s_HG-");
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue((DatabendSchema.DatabendColumn) null,
                databendConstant0);
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NOT_NULL;
        DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(
                databendColumnValue0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendUnaryPostfixOperation0, databendColumnValue0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            databendBinaryLogicalOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // string: aH95[s_HG-, cannot be forced to boolean
            //
        }
    }

    @Test
    public void test06() throws Throwable {
        DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.LEFT;
        DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin((DatabendTableReference) null,
                (DatabendTableReference) null, databendJoin_OuterType0);
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getOrderByClauses();
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendJoin0, list0, true);
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendInOperation0, databendJoin0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendJoin databendJoin1 = (DatabendJoin) databendBinaryLogicalOperation0.getRightExpr();
        assertEquals(DatabendJoin.OuterType.LEFT, databendJoin1.getOuterType());
    }

    @Test
    public void test07() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant((-128L));
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendConstant0, databendConstant0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant) databendBinaryLogicalOperation0
                .getLeftExpr();
        assertFalse(databendConstant_DatabendIntConstant0.isFloat());
    }

    @Test
    public void test08() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                147.686853);
        DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .apply(databendConstant0, databendConstant_DatabendFloatConstant0);
        assertTrue(databendConstant1.asBoolean());
    }

    @Test
    public void test09() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                0L);
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendConstant databendConstant0 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .apply(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0);
        assertEquals("false", databendConstant0.toString());
    }

    @Test
    public void test10() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                0L);
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .apply(databendConstant_DatabendIntConstant0, databendConstant0);
        assertNotSame(databendConstant0, databendConstant1);
    }

    @Test
    public void test11() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .apply(databendConstant0, databendConstant0);
        assertFalse(databendConstant1.isFloat());
    }

    @Test
    public void test12() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                823L);
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("ENUM$VALUES",
                (DatabendSchema.DatabendCompositeDataType) null, true, true);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant_DatabendIntConstant0);
        DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendColumnValue0,
                databendColumnValue0, databendColumnValue0, true);
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendBetweenOperation0, databendColumnValue0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendConstant databendConstant0 = databendBinaryLogicalOperation0.getExpectedValue();
        assertEquals("true", databendConstant0.toString());
    }

    @Test
    public void test13() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                875L);
        DatabendConstant databendConstant0 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .apply(databendConstant_DatabendIntConstant0, databendConstant_DatabendNullConstant0);
        assertTrue(databendConstant0.isNull());
    }

    @Test
    public void test14() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator
                .getRandom();
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant) databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .apply(databendConstant0, databendConstant0);
        assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
    }

    @Test
    public void test15() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator
                .getRandom();
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant) databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .apply(databendConstant_DatabendNullConstant0, databendConstant_DatabendBooleanConstant0);
        assertFalse(databendConstant_DatabendBooleanConstant1.getValue());
    }

    @Test
    public void test16() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator
                .getRandom();
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant_DatabendNullConstant0);
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendColumnValue0, databendColumnValue0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendConstant databendConstant0 = databendBinaryLogicalOperation0.getExpectedValue();
        assertTrue(databendConstant0.isNull());
    }

    @Test
    public void test17() throws Throwable {
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-2243L));
        DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .apply(databendConstant0, databendConstant_DatabendIntConstant0);
        assertFalse(databendConstant1.isString());
    }

    @Test
    public void test18() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                823L);
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
        DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(
                databendConstant_DatabendIntConstant0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("ENUM$VALUES",
                (DatabendSchema.DatabendCompositeDataType) null, true, true);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant_DatabendIntConstant0);
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendColumnValue0, databendUnaryPostfixOperation0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendConstant databendConstant0 = databendBinaryLogicalOperation0.getExpectedValue();
        assertNull(databendConstant0);
    }

    @Test
    public void test19() throws Throwable {
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                823L);
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
        DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(
                databendConstant_DatabendIntConstant0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("ENUM$VALUES",
                (DatabendSchema.DatabendCompositeDataType) null, true, true);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant_DatabendIntConstant0);
        DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendColumnValue0,
                databendColumnValue0, databendColumnValue0, false);
        DatabendBetweenOperation databendBetweenOperation1 = new DatabendBetweenOperation(
                databendUnaryPostfixOperation0, databendBetweenOperation0, databendUnaryPostfixOperation0, true);
        DatabendConstant databendConstant0 = databendBetweenOperation1.getExpectedValue();
        assertNull(databendConstant0);
    }

    @Test
    public void test20() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        String string0 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.getTextRepresentation();
        assertEquals("OR", string0);
    }

    @Test
    public void test21() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator
                .getRandom();
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .getRandomOp();
        assertFalse(databendBinaryLogicalOperation_DatabendBinaryLogicalOperator1
                .equals((Object) databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0));
    }

    @Test
    public void test22() throws Throwable {
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                823L);
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("ENUM$VALUES",
                (DatabendSchema.DatabendCompositeDataType) null, true, true);
        DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0,
                databendConstant_DatabendIntConstant0);
        DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendColumnValue0,
                databendColumnValue0, databendColumnValue0, true);
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendBetweenOperation0, databendColumnValue0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendBinaryLogicalOperation0
                .getExpectedType();
        assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendDataType0);
    }
}
