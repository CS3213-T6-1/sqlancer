/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 02:52:17 GMT 2025
 */

package sqlancer.evosuite.databend.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendInOperation;
import sqlancer.databend.ast.DatabendLikeOperation;
import sqlancer.databend.ast.DatabendSelect;
import sqlancer.databend.DatabendSchema;

public class DatabendInOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, false, false);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendBooleanConstant0);
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
        DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendColumnValue0,
                databendColumnValue0, databendLikeOperation_DatabendLikeOperator0);
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendLikeOperation0, linkedList0, false);
        // Undeclared exception!
        try {
            databendInOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // sqlancer.databend.ast.DatabendConstant$DatabendBooleanConstant@0000000003
            //
            verifyException("sqlancer.databend.ast.DatabendConstant", e);
        }
    }

    @Test
    public void test01() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getGroupByExpressions();
        DatabendInOperation databendInOperation0 = new DatabendInOperation((DatabendExpression) null, list0, false);
        // Undeclared exception!
        try {
            databendInOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.ast.DatabendInOperation", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 1);
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("localhost",
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                (-1L));
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendIntConstant0);
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        linkedList0.push(databendColumnValue0);
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, false);
        DatabendInOperation databendInOperation1 = new DatabendInOperation(databendInOperation0, linkedList0, false);
        // Undeclared exception!
        try {
            databendInOperation1.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // true
            //
        }
    }

    @Test
    public void test03() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendBooleanConstant0);
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        linkedList0.push(databendColumnValue0);
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, true);
        DatabendConstant databendConstant0 = databendInOperation0.getExpectedValue();
        assertEquals("false", databendConstant0.toString());
    }

    @Test
    public void test04() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendBooleanConstant0);
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        linkedList0.push(databendColumnValue0);
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, true);
        DatabendInOperation databendInOperation1 = new DatabendInOperation(databendInOperation0, linkedList0, true);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant) databendInOperation1
                .getExpectedValue();
        assertTrue(databendConstant_DatabendBooleanConstant1.getValue());
    }

    @Test
    public void test05() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-1.0));
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendFloatConstant0);
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        DatabendColumnValue databendColumnValue1 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendNullConstant0);
        linkedList0.push(databendColumnValue1);
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, true);
        DatabendConstant databendConstant0 = databendInOperation0.getExpectedValue();
        assertFalse(databendConstant0.isInt());
    }

    @Test
    public void test06() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(
                ".e/VR+;GIr~'b<e", databendSchema_DatabendCompositeDataType0, true, true);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendBooleanConstant0);
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        linkedList0.push(databendConstant_DatabendBooleanConstant0);
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, true);
        DatabendConstant databendConstant0 = databendInOperation0.getExpectedValue();
        assertNull(databendConstant0);
    }

    @Test
    public void test07() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, false, false);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                false);
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendBooleanConstant0);
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        linkedList0.push(databendColumnValue0);
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, false);
        DatabendConstant databendConstant0 = databendInOperation0.getExpectedValue();
        assertNotNull(databendConstant0);
        assertEquals("true", databendConstant0.toString());
    }

    @Test
    public void test08() throws Throwable {
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn((String) null,
                databendSchema_DatabendCompositeDataType0, false, true);
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendNullConstant0);
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, true);
        DatabendConstant databendConstant0 = databendInOperation0.getExpectedValue();
        assertFalse(databendConstant0.isString());
    }

    @Test
    public void test09() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-1.0));
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
        DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0
                .cast(databendSchema_DatabendDataType0);
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getGroupByClause();
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendConstant0, list0, false);
        DatabendConstant databendConstant1 = databendInOperation0.getExpectedValue();
        assertNull(databendConstant1);
    }

    @Test
    public void test10() throws Throwable {
        DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(
                (-1.0));
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
        DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0
                .cast(databendSchema_DatabendDataType0);
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getGroupByClause();
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendConstant0, list0, false);
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType1 = databendInOperation0.getExpectedType();
        assertNotSame(databendSchema_DatabendDataType0, databendSchema_DatabendDataType1);
    }
}
