/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 01:09:57 GMT 2025
 */

package sqlancer.evosuite.databend;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.newast.NewOrderingTerm;
import sqlancer.databend.ast.DatabendAggregateOperation;
import sqlancer.databend.ast.DatabendAlias;
import sqlancer.databend.ast.DatabendBetweenOperation;
import sqlancer.databend.ast.DatabendBinaryArithmeticOperation;
import sqlancer.databend.ast.DatabendBinaryComparisonOperation;
import sqlancer.databend.ast.DatabendBinaryLogicalOperation;
import sqlancer.databend.ast.DatabendBinaryOperation;
import sqlancer.databend.ast.DatabendCastOperation;
import sqlancer.databend.ast.DatabendColumnReference;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendFunctionOperation;
import sqlancer.databend.ast.DatabendInOperation;
import sqlancer.databend.ast.DatabendJoin;
import sqlancer.databend.ast.DatabendLikeOperation;
import sqlancer.databend.ast.DatabendOrderByTerm;
import sqlancer.databend.ast.DatabendPostFixText;
import sqlancer.databend.ast.DatabendSelect;
import sqlancer.databend.ast.DatabendTableReference;
import sqlancer.databend.ast.DatabendUnaryPostfixOperation;
import sqlancer.databend.ast.DatabendUnaryPrefixOperation;
import sqlancer.databend.DatabendExpectedValueVisitor;
import sqlancer.databend.DatabendSchema;
import sqlancer.h2.H2ExpressionGenerator;

public class DatabendExpectedValueVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendConstant0,
                databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        databendExpectedValueVisitor0.visit(databendUnaryPrefixOperation0);
        assertEquals("NOT", databendUnaryPrefixOperation0.getOperatorRepresentation());
    }

    @Test
    public void test01() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(0L);
        DatabendConstant databendConstant1 = DatabendConstant.createNullConstant();
        DatabendConstant databendConstant2 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0
                .apply(databendConstant0, databendConstant1);
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
        DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(
                databendConstant2, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
        databendExpectedValueVisitor0.visit(databendUnaryPostfixOperation0);
        assertEquals(DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL,
                databendUnaryPostfixOperation0.getOp());
    }

    @Test
    public void test02() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
        DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable(
                "sqlancer.databend.DatabendExpectedValueVisitor", linkedList0, true);
        DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
        databendExpectedValueVisitor0.visit(databendTableReference0);
        assertEquals("sqlancer.databend.DatabendExpectedValueVisitor -- null\n", databendExpectedValueVisitor0.get());
    }

    @Test
    public void test03() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        databendSelect0.setWhereClause(databendConstant_DatabendNullConstant0);
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        databendExpectedValueVisitor0.visit(databendSelect0);
        assertFalse(databendSelect0.isDistinct());
    }

    @Test
    public void test04() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(
                "/V',Lhqb[(hF<IE#4#", (DatabendSchema.DatabendCompositeDataType) null, false, false);
        DatabendColumnReference databendColumnReference0 = new DatabendColumnReference(databendSchema_DatabendColumn0);
        NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.DESC;
        DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendColumnReference0,
                newOrderingTerm_Ordering0);
        databendExpectedValueVisitor0.visit(databendOrderByTerm0);
        assertEquals("/V',Lhqb[(hF<IE#4# DESC -- null\n/V',Lhqb[(hF<IE#4# -- null\n",
                databendExpectedValueVisitor0.get());
    }

    @Test
    public void test05() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendTableReference databendTableReference0 = new DatabendTableReference(
                (DatabendSchema.DatabendTable) null);
        DatabendJoin databendJoin0 = DatabendJoin.createLeftOuterJoin(databendTableReference0, databendTableReference0,
                databendTableReference0);
        databendJoin0.setOnClause((DatabendExpression) databendConstant_DatabendNullConstant0);
        databendExpectedValueVisitor0.visit(databendJoin0);
        assertNull(databendJoin0.getOuterType());
    }

    @Test
    public void test06() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getJoinList();
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendConstant_DatabendBooleanConstant0,
                list0, true);
        databendExpectedValueVisitor0.visit(databendInOperation0);
        assertTrue(databendInOperation0.isNegated());
    }

    @Test
    public void test07() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getOrderByClauses();
        DatabendFunctionOperation<DatabendExpectedValueVisitor> databendFunctionOperation0 = new DatabendFunctionOperation<DatabendExpectedValueVisitor>(
                list0, databendExpectedValueVisitor0);
        databendExpectedValueVisitor0.visit(databendFunctionOperation0);
    }

    @Test
    public void test08() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createDateConstant(1258L);
        databendExpectedValueVisitor0.visit(databendConstant0);
        assertFalse(databendConstant0.isString());
    }

    @Test
    public void test09() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(
                databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        databendExpectedValueVisitor0.visit(databendBinaryOperation0);
        assertEquals(">=", databendBinaryOperation0.getOperatorRepresentation());
    }

    @Test
    public void test10() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendConstant0,
                databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendUnaryPrefixOperation0,
                databendConstant0, databendUnaryPrefixOperation0, false);
        databendExpectedValueVisitor0.visit(databendBetweenOperation0);
        assertFalse(databendBetweenOperation0.isTrue());
    }

    @Test
    public void test11() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(
                databendConstant_DatabendNullConstant0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
        DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0,
                true);
        DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
        DatabendJoin databendJoin0 = DatabendJoin.createLeftOuterJoin(databendTableReference0, databendTableReference0,
                databendUnaryPrefixOperation0);
        databendExpectedValueVisitor0.visit((DatabendExpression) databendJoin0);
        assertEquals(DatabendJoin.JoinType.LEFT, databendJoin0.getJoinType());
    }

    @Test
    public void test12() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                0L);
        databendSelect0.setWhereClause(databendConstant_DatabendIntConstant0);
        String string0 = DatabendExpectedValueVisitor.asExpectedValues(databendSelect0);
        assertNotNull(string0);
    }

    @Test
    public void test13() throws Throwable {
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(" -- ",
                (DatabendSchema.DatabendCompositeDataType) null, true, false);
        DatabendColumnReference databendColumnReference0 = new DatabendColumnReference(databendSchema_DatabendColumn0);
        DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendColumnReference0, (String) null);
        String string0 = DatabendExpectedValueVisitor.asExpectedValues(databendPostFixText0);
        assertEquals(" -- null -- null\n --  -- null\n", string0);
    }

    @Test
    public void test14() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("");
        DatabendAlias databendAlias0 = new DatabendAlias(databendConstant0, "mediumtext");
        DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendAlias0, "");
        databendExpectedValueVisitor0.visit(databendPostFixText0);
        assertEquals("", databendPostFixText0.getText());
    }

    @Test
    public void test15() throws Throwable {
        LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
        DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable(
                "sqlancer.databend.DatabendExpectedValueVisitor", linkedList0, true);
        DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
        String string0 = DatabendExpectedValueVisitor.asExpectedValues(databendTableReference0);
        assertEquals("sqlancer.databend.DatabendExpectedValueVisitor -- null\n", string0);
    }

    @Test
    public void test16() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(
                "SwS}\"[\"m_zE.H");
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_MINUS;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(
                databendConstant_DatabendStringConstant0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        databendExpectedValueVisitor0.visit((DatabendExpression) databendUnaryPrefixOperation0);
        assertEquals(DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_MINUS,
                databendUnaryPrefixOperation0.getOp());
    }

    @Test
    public void test17() throws Throwable {
        DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(
                0L);
        DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(0L);
        DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(
                databendConstant_DatabendTimestampConstant0, databendConstant_DatabendTimestampConstant0,
                databendConstant0, false);
        String string0 = DatabendExpectedValueVisitor.asExpectedValues(databendBetweenOperation0);
        assertNotNull(string0);
    }

    @Test
    public void test18() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(
                "/V',Lhqb[(hF<IE#4#", (DatabendSchema.DatabendCompositeDataType) null, false, false);
        DatabendColumnReference databendColumnReference0 = new DatabendColumnReference(databendSchema_DatabendColumn0);
        NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.DESC;
        DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendColumnReference0,
                newOrderingTerm_Ordering0);
        DatabendAlias databendAlias0 = new DatabendAlias(databendOrderByTerm0, "/V',Lhqb[(hF<IE#4#");
        databendExpectedValueVisitor0.visit(databendAlias0);
        assertEquals(
                "/V',Lhqb[(hF<IE#4# DESC AS /V',Lhqb[(hF<IE#4# -- null\n/V',Lhqb[(hF<IE#4# DESC -- null\n/V',Lhqb[(hF<IE#4# -- null\n",
                databendExpectedValueVisitor0.get());
    }

    @Test
    public void test19() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, true, true);
        DatabendColumnReference databendColumnReference0 = new DatabendColumnReference(databendSchema_DatabendColumn0);
        databendExpectedValueVisitor0.visit(databendColumnReference0);
        String string0 = databendExpectedValueVisitor0.get();
        assertEquals(" -- null\n", string0);
    }

    @Test
    public void test20() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_MINUS;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendSelect0,
                databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendUnaryPrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(
                2640L);
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendConstant_DatabendIntConstant0,
                databendSchema_DatabendCompositeDataType0);
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(
                databendCastOperation0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendUnaryPrefixOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendCastOperation@5
            //
        }
    }

    @Test
    public void test22() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NOT_NULL;
        DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(
                databendSelect0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendUnaryPostfixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
        DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
        DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendConstant0, databendConstant0,
                databendLikeOperation_DatabendLikeOperator0);
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NOT_NULL;
        DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(
                databendLikeOperation0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendUnaryPostfixOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendLikeOperation@3
            //
        }
    }

    @Test
    public void test24() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendSelect0,
                databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        databendSelect0.setWhereClause(databendUnaryPrefixOperation0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        DatabendAggregateOperation.DatabendAggregateFunction databendAggregateOperation_DatabendAggregateFunction0 = DatabendAggregateOperation.DatabendAggregateFunction.COVAR_POP;
        DatabendAggregateOperation databendAggregateOperation0 = new DatabendAggregateOperation(linkedList0,
                databendAggregateOperation_DatabendAggregateFunction0);
        linkedList0.add((DatabendExpression) databendAggregateOperation0);
        DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendAggregateOperation0,
                databendAggregateOperation0, databendAggregateOperation0, true);
        DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendBetweenOperation0, "\n");
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendPostFixText0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test26() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendSelect0, "m,r!eW4t9'2)/ZWRs1");
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendPostFixText0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createDateConstant(0L);
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator.MINUS;
        DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(
                databendConstant0, databendConstant0, h2ExpressionGenerator_H2UnaryPrefixOperator0);
        DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendBinaryArithmeticOperation0,
                "j)0g6RvXyH_");
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendPostFixText0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendBinaryArithmeticOperation@3
            //
        }
    }

    @Test
    public void test28() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendOrderByTerm) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test29() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.DESC;
        DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendSelect0, newOrderingTerm_Ordering0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendOrderByTerm0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendJoin databendJoin0 = DatabendJoin.createLeftOuterJoin((DatabendTableReference) null,
                (DatabendTableReference) null, databendSelect0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendJoin0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test31() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendInOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test32() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getOrderByClauses();
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendSelect0, list0, true);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test33() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendFunctionOperation<?>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test34() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        DatabendAggregateOperation.DatabendAggregateFunction databendAggregateOperation_DatabendAggregateFunction0 = DatabendAggregateOperation.DatabendAggregateFunction.COVAR_POP;
        DatabendAggregateOperation databendAggregateOperation0 = new DatabendAggregateOperation(linkedList0,
                databendAggregateOperation_DatabendAggregateFunction0);
        linkedList0.add((DatabendExpression) databendAggregateOperation0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) databendAggregateOperation0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test35() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendSelect0, databendSelect0,
                databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendBinaryOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test36() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createDateConstant(269L);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant0, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(
                databendBinaryComparisonOperation0, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendBinaryOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendBinaryComparisonOperation@3
            //
        }
    }

    @Test
    public void test37() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendSelect0,
                databendSelect0, databendSelect0, false);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test38() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant0, databendConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendConstant0,
                databendBinaryComparisonOperation0, databendConstant0, true);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendBetweenOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendBinaryComparisonOperation@3
            //
        }
    }

    @Test
    public void test39() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendAlias databendAlias0 = new DatabendAlias(databendSelect0, "`s@mN)u*>FxjW;YKeX?");
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendAlias0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test40() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(
                1000L);
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant_DatabendDateConstant0, databendConstant_DatabendDateConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendAlias databendAlias0 = new DatabendAlias(databendBinaryComparisonOperation0, "1970-01-01");
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendAlias0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendBinaryComparisonOperation@3
            //
        }
    }

    @Test
    public void test41() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 1271);
        DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendConstant0,
                databendSchema_DatabendCompositeDataType0);
        List<DatabendExpression> list0 = List.of((DatabendExpression) databendCastOperation0,
                (DatabendExpression) databendCastOperation0, (DatabendExpression) databendConstant0,
                (DatabendExpression) databendConstant0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(list0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendCastOperation@5
            //
        }
    }

    @Test
    public void test42() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = List.of((DatabendExpression) databendSelect0,
                (DatabendExpression) databendSelect0, (DatabendExpression) databendSelect0,
                (DatabendExpression) databendSelect0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(list0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test43() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getJoinList();
        databendExpectedValueVisitor0.visit(list0);
        assertEquals("", databendExpectedValueVisitor0.get());
    }

    @Test
    public void test44() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) databendBinaryComparisonOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendBinaryComparisonOperation@3
            //
        }
    }

    @Test
    public void test45() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.LEFT;
        DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin((DatabendTableReference) null,
                (DatabendTableReference) null, databendJoin_OuterType0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) databendJoin0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test46() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("1970-01-01 00:00:00");
        databendExpectedValueVisitor0.visit((DatabendExpression) databendConstant0);
        assertFalse(databendConstant0.isInt());
    }

    @Test
    public void test47() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
        DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(
                databendConstant_DatabendNullConstant0, (DatabendExpression) null,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendBinaryComparisonOperation0,
                "#*9wA L=A");
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) databendPostFixText0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test48() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        DatabendAlias databendAlias0 = new DatabendAlias(databendSelect0, "");
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) databendAlias0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test49() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(
                "/V',Lhqb[(hF<IE#4#", (DatabendSchema.DatabendCompositeDataType) null, false, false);
        DatabendColumnReference databendColumnReference0 = new DatabendColumnReference(databendSchema_DatabendColumn0);
        NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.DESC;
        DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendColumnReference0,
                newOrderingTerm_Ordering0);
        databendExpectedValueVisitor0.visit((DatabendExpression) databendOrderByTerm0);
        assertEquals("/V',Lhqb[(hF<IE#4# DESC -- null\n/V',Lhqb[(hF<IE#4# -- null\n",
                databendExpectedValueVisitor0.get());
    }

    @Test
    public void test50() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getJoinList();
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendSelect0, list0, false);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) databendInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test51() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_MINUS;
        DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(
                databendConstant_DatabendNullConstant0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
        DatabendConstant databendConstant0 = DatabendConstant.createTimestampConstant((-483L));
        DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation((DatabendExpression) null,
                databendUnaryPrefixOperation0, databendConstant0, true);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) databendBetweenOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test52() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) databendSelect0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test53() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendTableReference databendTableReference0 = new DatabendTableReference(
                (DatabendSchema.DatabendTable) null);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) databendTableReference0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test54() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.NOT_EQUALS;
        DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(
                databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0,
                databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        databendExpectedValueVisitor0.visit((DatabendExpression) databendBinaryOperation0);
        assertEquals("!=", databendBinaryOperation0.getOperatorRepresentation());
    }

    @Test
    public void test55() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NOT_NULL;
        DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(
                databendConstant_DatabendNullConstant0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
        databendExpectedValueVisitor0.visit((DatabendExpression) databendUnaryPostfixOperation0);
        assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendUnaryPostfixOperation0.getExpectedType());
    }

    @Test
    public void test56() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("",
                databendSchema_DatabendCompositeDataType0, false, false);
        DatabendColumnReference databendColumnReference0 = new DatabendColumnReference(databendSchema_DatabendColumn0);
        databendExpectedValueVisitor0.visit((DatabendExpression) databendColumnReference0);
        assertEquals(" -- null\n", databendExpectedValueVisitor0.get());
    }

    @Test
    public void test57() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test58() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        String string0 = databendExpectedValueVisitor0.get();
        assertEquals("", string0);
    }

    @Test
    public void test59() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendUnaryPrefixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test60() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test61() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendPostFixText) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test62() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendTableReference databendTableReference0 = new DatabendTableReference(
                (DatabendSchema.DatabendTable) null);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendTableReference0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test63() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSelect databendSelect0 = new DatabendSelect();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendSelect0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test64() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendBinaryOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test65() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendUnaryPostfixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test66() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendBetweenOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test67() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendColumnReference) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test68() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendAlias) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test69() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
        DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
        DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(
                databendConstant0, databendConstant0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
        NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.ASC;
        DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendBinaryLogicalOperation0,
                newOrderingTerm_Ordering0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendOrderByTerm0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendBinaryLogicalOperation@3
            //
        }
    }

    @Test
    public void test70() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(
                databendSchema_DatabendDataType0, 1);
        DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("qb",
                databendSchema_DatabendCompositeDataType0, false, true);
        DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(
                true);
        DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0,
                databendConstant_DatabendBooleanConstant0);
        NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.ASC;
        DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendConstant_DatabendBooleanConstant0,
                newOrderingTerm_Ordering0);
        List<DatabendExpression> list0 = List.of((DatabendExpression) databendColumnValue0,
                (DatabendExpression) databendConstant_DatabendBooleanConstant0,
                (DatabendExpression) databendColumnValue0,
                (DatabendExpression) databendConstant_DatabendBooleanConstant0,
                (DatabendExpression) databendOrderByTerm0,
                (DatabendExpression) databendConstant_DatabendBooleanConstant0,
                (DatabendExpression) databendColumnValue0,
                (DatabendExpression) databendConstant_DatabendBooleanConstant0);
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_UNKNOWN;
        DatabendFunctionOperation<H2ExpressionGenerator.H2UnaryPostfixOperator> databendFunctionOperation0 = new DatabendFunctionOperation<H2ExpressionGenerator.H2UnaryPostfixOperator>(
                list0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendFunctionOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendColumnValue@5
            //
        }
    }

    @Test
    public void test71() throws Throwable {
        DatabendJoin databendJoin0 = DatabendJoin.createInnerJoin((DatabendTableReference) null,
                (DatabendTableReference) null, (DatabendExpression) null);
        // Undeclared exception!
        try {
            DatabendExpectedValueVisitor.asExpectedValues(databendJoin0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test72() throws Throwable {
        DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendConstant_DatabendNullConstant0,
                linkedList0, false);
        String string0 = DatabendExpectedValueVisitor.asExpectedValues(databendInOperation0);
        assertNotNull(string0);
    }

    @Test
    public void test73() throws Throwable {
        // Undeclared exception!
        try {
            DatabendExpectedValueVisitor.asExpectedValues((DatabendExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test74() throws Throwable {
        DatabendSelect databendSelect0 = new DatabendSelect();
        H2ExpressionGenerator.H2BinaryArithmeticOperator h2ExpressionGenerator_H2BinaryArithmeticOperator0 = H2ExpressionGenerator.H2BinaryArithmeticOperator.DIV;
        DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendSelect0, databendSelect0,
                h2ExpressionGenerator_H2BinaryArithmeticOperator0);
        // Undeclared exception!
        try {
            DatabendExpectedValueVisitor.asExpectedValues(databendBinaryOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test75() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(
                3L);
        DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType
                .getRandomWithoutNull();
        DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendConstant_DatabendDateConstant0,
                databendSchema_DatabendCompositeDataType0);
        DatabendSelect databendSelect0 = new DatabendSelect();
        List<DatabendExpression> list0 = databendSelect0.getGroupByExpressions();
        DatabendInOperation databendInOperation0 = new DatabendInOperation(databendCastOperation0, list0, false);
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit(databendInOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.databend.ast.DatabendCastOperation@5
            //
        }
    }

    @Test
    public void test76() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        // Undeclared exception!
        try {
            databendExpectedValueVisitor0.visit((DatabendJoin) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.databend.DatabendExpectedValueVisitor", e);
        }
    }

    @Test
    public void test77() throws Throwable {
        DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
        LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
        DatabendFunctionOperation<DatabendExpectedValueVisitor> databendFunctionOperation0 = new DatabendFunctionOperation<DatabendExpectedValueVisitor>(
                linkedList0, databendExpectedValueVisitor0);
        databendExpectedValueVisitor0.visit((DatabendExpression) databendFunctionOperation0);
    }
}
