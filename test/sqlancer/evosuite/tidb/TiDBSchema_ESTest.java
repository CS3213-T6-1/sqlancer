/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:46:14 GMT 2025
 */

package sqlancer.evosuite.tidb;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;

import org.junit.jupiter.api.Test;
import sqlancer.common.schema.TableIndex;
import sqlancer.tidb.TiDBSchema;

public class TiDBSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        TiDBSchema.TiDBDataType tiDBSchema_TiDBDataType0 = TiDBSchema.TiDBDataType.BOOL;
        TiDBSchema.TiDBCompositeDataType tiDBSchema_TiDBCompositeDataType0 = new TiDBSchema.TiDBCompositeDataType(
                tiDBSchema_TiDBDataType0, 0);
        TiDBSchema.TiDBColumn tiDBSchema_TiDBColumn0 = new TiDBSchema.TiDBColumn(
                "check-constraint: cannot access temporary tables of other sessions", tiDBSchema_TiDBCompositeDataType0,
                false, true, true);
        assertFalse(tiDBSchema_TiDBColumn0.isPrimaryKey());
        assertTrue(tiDBSchema_TiDBColumn0.hasDefault());
        assertTrue(tiDBSchema_TiDBColumn0.isNullable());
    }

    @Test
    public void test01() throws Throwable {
        TiDBSchema.TiDBDataType tiDBSchema_TiDBDataType0 = TiDBSchema.TiDBDataType.BOOL;
        TiDBSchema.TiDBCompositeDataType tiDBSchema_TiDBCompositeDataType0 = new TiDBSchema.TiDBCompositeDataType(
                tiDBSchema_TiDBDataType0, (-2066));
        int int0 = tiDBSchema_TiDBCompositeDataType0.getSize();
        assertEquals((-2066), int0);
    }

    @Test
    public void test02() throws Throwable {
        TiDBSchema.TiDBDataType tiDBSchema_TiDBDataType0 = TiDBSchema.TiDBDataType.TEXT;
        TiDBSchema.TiDBCompositeDataType tiDBSchema_TiDBCompositeDataType0 = new TiDBSchema.TiDBCompositeDataType(
                tiDBSchema_TiDBDataType0);
        TiDBSchema.TiDBDataType tiDBSchema_TiDBDataType1 = tiDBSchema_TiDBCompositeDataType0.getPrimitiveDataType();
        assertSame(tiDBSchema_TiDBDataType0, tiDBSchema_TiDBDataType1);
    }

    @Test
    public void test03() throws Throwable {
        LinkedList<TiDBSchema.TiDBTable> linkedList0 = new LinkedList<TiDBSchema.TiDBTable>();
        TiDBSchema.TiDBTables tiDBSchema_TiDBTables0 = new TiDBSchema.TiDBTables(linkedList0);
        List<TiDBSchema.TiDBColumn> list0 = tiDBSchema_TiDBTables0.getColumns();
        LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
        TiDBSchema.TiDBTable tiDBSchema_TiDBTable0 = new TiDBSchema.TiDBTable("", list0, linkedList1, false);
        linkedList0.add(tiDBSchema_TiDBTable0);
        TiDBSchema tiDBSchema0 = new TiDBSchema(linkedList0);
        TiDBSchema.TiDBTables tiDBSchema_TiDBTables1 = tiDBSchema0.getRandomTableNonEmptyTables();
        assertFalse(tiDBSchema_TiDBTables1.equals((Object) tiDBSchema_TiDBTables0));
    }

    @Test
    public void test04() throws Throwable {
        LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
        LinkedList<TiDBSchema.TiDBColumn> linkedList1 = new LinkedList<TiDBSchema.TiDBColumn>();
        TableIndex tableIndex0 = TableIndex.create("year");
        linkedList0.add(tableIndex0);
        TiDBSchema.TiDBTable tiDBSchema_TiDBTable0 = new TiDBSchema.TiDBTable("bytea_minmax_ops", linkedList1,
                linkedList0, false);
        LinkedList<TiDBSchema.TiDBTable> linkedList2 = new LinkedList<TiDBSchema.TiDBTable>();
        linkedList2.add(tiDBSchema_TiDBTable0);
        TiDBSchema tiDBSchema0 = new TiDBSchema(linkedList2);
        int int0 = tiDBSchema0.getIndexCount();
        assertEquals(1, int0);
    }

    @Test
    public void test05() throws Throwable {
        LinkedList<TiDBSchema.TiDBTable> linkedList0 = new LinkedList<TiDBSchema.TiDBTable>();
        LinkedList<TiDBSchema.TiDBColumn> linkedList1 = new LinkedList<TiDBSchema.TiDBColumn>();
        TiDBSchema.TiDBTable tiDBSchema_TiDBTable0 = new TiDBSchema.TiDBTable("", linkedList1, (List<TableIndex>) null,
                false);
        linkedList0.add(tiDBSchema_TiDBTable0);
        TiDBSchema tiDBSchema0 = new TiDBSchema(linkedList0);
        // Undeclared exception!
        try {
            tiDBSchema0.getIndexCount();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.tidb.TiDBSchema", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        TiDBSchema tiDBSchema0 = null;
        try {
            tiDBSchema0 = new TiDBSchema((List<TiDBSchema.TiDBTable>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }
}

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test07() throws Throwable { TiDBSchema.TiDBDataType tiDBSchema_TiDBDataType0 =
 * TiDBSchema.TiDBDataType.BOOL; tiDBSchema_TiDBDataType0.isNumeric(); TiDBSchema.TiDBCompositeDataType
 * tiDBSchema_TiDBCompositeDataType0 = TiDBSchema.TiDBCompositeDataType .getRandom(); TiDBSchema.TiDBDataType
 * tiDBSchema_TiDBDataType1 = TiDBSchema.TiDBDataType.getRandom(); tiDBSchema_TiDBDataType0.canHaveDefault();
 * tiDBSchema_TiDBCompositeDataType0.getSize(); tiDBSchema_TiDBCompositeDataType0.getSize(); Predicate.isEqual((Object)
 * tiDBSchema_TiDBDataType1); tiDBSchema_TiDBCompositeDataType0.toString(); tiDBSchema_TiDBCompositeDataType0.getSize();
 * TiDBSchema.TiDBCompositeDataType.getInt(2); tiDBSchema_TiDBCompositeDataType0.toString(); ResultSet resultSet0 =
 * mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn("", "", "",
 * "pnWc=j<45G,,4SV4").when(resultSet0).getString(anyInt()); doReturn(true, true, true, true,
 * false).when(resultSet0).next(); ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
 * PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
 * doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString()); Connection connection0 =
 * mock(Connection.class, new ViolatedAssumptionAnswer());
 * doReturn(preparedStatement0).when(connection0).prepareStatement(anyString()); SQLConnection sQLConnection0 = new
 * SQLConnection(connection0); Statement statement0 = sQLConnection0.prepareStatement("pnWc=j<45G,,4SV4"); Connection
 * connection1 = mock(Connection.class, new ViolatedAssumptionAnswer()); doReturn(statement0, (Statement)
 * null).when(connection1).createStatement(); SQLConnection sQLConnection1 = new SQLConnection(connection1); //
 * Undeclared exception! try { TiDBSchema.fromConnection(sQLConnection1, "[]Z[!b");
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
 */

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test08() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
 * ViolatedAssumptionAnswer()); doReturn("SMALLINT", "SMALLINT", "SMALLINT",
 * "pnWc=j<45G,,4SV4").when(resultSet0).getString(anyInt()); doReturn(true, true, true, true,
 * false).when(resultSet0).next(); ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
 * doReturn("SMALLINT", "var_stringpnWc=j<45G,,4SV4", "FLOAT", "SMALLINT", (String) null).when(resultSet1)
 * .getString(anyString()); doReturn(true, true).when(resultSet1).next(); PreparedStatement preparedStatement0 =
 * mock(PreparedStatement.class, new ViolatedAssumptionAnswer()); doReturn(resultSet0,
 * resultSet1).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
 * ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
 * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
 * sQLConnection0.prepareStatement("pnWc=j<45G,,4SV4"); Connection connection1 = mock(Connection.class, new
 * ViolatedAssumptionAnswer()); doReturn(statement0, statement0).when(connection1).createStatement(); SQLConnection
 * sQLConnection1 = new SQLConnection(connection1); // Undeclared exception! try {
 * TiDBSchema.fromConnection(sQLConnection1, "SMALLINT"); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) // } }
 */
