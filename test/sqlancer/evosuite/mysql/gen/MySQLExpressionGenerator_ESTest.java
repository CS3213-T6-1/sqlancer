/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:40:00 GMT 2025
 */

package sqlancer.evosuite.mysql.gen;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.schema.AbstractTables;
import sqlancer.mysql.ast.MySQLConstant;
import sqlancer.mysql.ast.MySQLExpression;
import sqlancer.mysql.ast.MySQLJoin;
import sqlancer.mysql.ast.MySQLSelect;
import sqlancer.mysql.ast.MySQLUnaryPostfixOperation;
import sqlancer.mysql.ast.MySQLUnaryPrefixOperation;
import sqlancer.mysql.gen.MySQLExpressionGenerator;
import sqlancer.mysql.MySQLGlobalState;
import sqlancer.mysql.MySQLSchema;

public class MySQLExpressionGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    // @Test
    // public void test00() throws Throwable {
    // MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
    // MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
    // MySQLSelect mySQLSelect0 = new MySQLSelect();
    // mySQLSelect0.setWhereClause(mySQLSelect0);
    // boolean boolean0 = mySQLExpressionGenerator0.mutate(mySQLSelect0);
    // assertTrue(boolean0);
    // }

    // @Test
    // public void test01() throws Throwable {
    // MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
    // MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
    // MySQLSelect mySQLSelect0 = mySQLExpressionGenerator0.generateSelect();
    // boolean boolean0 = mySQLExpressionGenerator0.mutate(mySQLSelect0);
    // assertFalse(boolean0);
    // }

    @Test
    public void test02() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        LinkedList<MySQLSchema.MySQLTable> linkedList0 = new LinkedList<MySQLSchema.MySQLTable>();
        AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn> abstractTables0 = new AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn>(
                linkedList0);
        MySQLExpressionGenerator mySQLExpressionGenerator1 = mySQLExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        List<MySQLExpression> list0 = mySQLExpressionGenerator1.getTableRefs();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test03() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.DECIMAL;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn("INT",
                mySQLSchema_MySQLDataType0, false, 38);
        List<MySQLSchema.MySQLColumn> list0 = List.of(mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0,
                mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0);
        LinkedList<MySQLSchema.MySQLIndex> linkedList0 = new LinkedList<MySQLSchema.MySQLIndex>();
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.MY_ISAM;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable("INT", list0, linkedList0,
                mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLSchema.MySQLTable[] mySQLSchema_MySQLTableArray0 = new MySQLSchema.MySQLTable[2];
        mySQLSchema_MySQLTableArray0[0] = mySQLSchema_MySQLTable0;
        mySQLSchema_MySQLTableArray0[1] = mySQLSchema_MySQLTable0;
        List<MySQLSchema.MySQLTable> list1 = List.of(mySQLSchema_MySQLTableArray0);
        AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn> abstractTables0 = new AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn>(
                list1);
        mySQLExpressionGenerator0.setTablesAndColumns(abstractTables0);
        List<MySQLExpression> list2 = mySQLExpressionGenerator0.getTableRefs();
        assertEquals(2, list2.size());
    }

    @Test
    public void test04() throws Throwable {
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator((MySQLGlobalState) null);
        LinkedList<MySQLSchema.MySQLTable> linkedList0 = new LinkedList<MySQLSchema.MySQLTable>();
        AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn> abstractTables0 = new AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn>(
                linkedList0);
        MySQLExpressionGenerator mySQLExpressionGenerator1 = mySQLExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        List<MySQLExpression> list0 = mySQLExpressionGenerator1.generateFetchColumns(true);
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test05() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.INT;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn((String) null,
                mySQLSchema_MySQLDataType0, false, (-1493));
        List<MySQLSchema.MySQLColumn> list0 = List.of(mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0,
                mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0);
        LinkedList<MySQLSchema.MySQLIndex> linkedList0 = new LinkedList<MySQLSchema.MySQLIndex>();
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.INNO_DB;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable((String) null, list0, linkedList0,
                mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLSchema.MySQLTable[] mySQLSchema_MySQLTableArray0 = new MySQLSchema.MySQLTable[1];
        mySQLSchema_MySQLTableArray0[0] = mySQLSchema_MySQLTable0;
        List<MySQLSchema.MySQLTable> list1 = List.of(mySQLSchema_MySQLTableArray0);
        AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn> abstractTables0 = new AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn>(
                list1);
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        mySQLExpressionGenerator0.setTablesAndColumns(abstractTables0);
        List<MySQLExpression> list2 = mySQLExpressionGenerator0.generateFetchColumns(false);
        assertFalse(list2.isEmpty());
    }

    @Test
    public void test06() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0
                    .setTablesAndColumns((AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateWhere(mySQLSelect0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateHaving((MySQLSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateGroupBy((MySQLSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateDistinct((MySQLSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutate(mySQLSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateOrderBys();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateExpression(374);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = mySQLExpressionGenerator0.generateSelect();
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateExplainQuery(mySQLSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateConstant();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLGlobalState", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateColumn();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        LinkedList<MySQLSchema.MySQLTable> linkedList0 = new LinkedList<MySQLSchema.MySQLTable>();
        AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn> abstractTables0 = new AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn>(
                linkedList0);
        MySQLExpressionGenerator mySQLExpressionGenerator1 = mySQLExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator1.generateColumn();
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test18() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateOr(mySQLSelect0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = mySQLExpressionGenerator0.generateSelect();
        mySQLSelect0.setWhereClause(mySQLSelect0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateOr(mySQLSelect0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateAnd(mySQLSelect0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        mySQLSelect0.setWhereClause(mySQLSelect0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateAnd(mySQLSelect0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateHaving(mySQLSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        List<MySQLExpression> list0 = List.of((MySQLExpression) mySQLSelect0);
        mySQLSelect0.setGroupByExpressions(list0);
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        boolean boolean0 = mySQLExpressionGenerator0.mutateGroupBy(mySQLSelect0);
        assertTrue(boolean0);
    }

    @Test
    public void test24() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = mySQLExpressionGenerator0.generateSelect();
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.mutateGroupBy(mySQLSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = mySQLExpressionGenerator0.generateSelect();
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(103L, false);
        mySQLSelect0.setWhereClause(mySQLConstant0);
        boolean boolean0 = mySQLExpressionGenerator0.mutateWhere(mySQLSelect0);
        assertTrue(boolean0);
    }

    @Test
    public void test26() throws Throwable {
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator((MySQLGlobalState) null);
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLSelect.SelectType mySQLSelect_SelectType0 = MySQLSelect.SelectType.DISTINCT;
        mySQLSelect0.setFromOptions(mySQLSelect_SelectType0);
        boolean boolean0 = mySQLExpressionGenerator0.mutateDistinct(mySQLSelect0);
        assertTrue(boolean0);
    }

    @Test
    public void test27() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = mySQLExpressionGenerator0.generateSelect();
        boolean boolean0 = mySQLExpressionGenerator0.mutateDistinct(mySQLSelect0);
        assertFalse(boolean0);
    }

    @Test
    public void test28() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.INT;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn((String) null,
                mySQLSchema_MySQLDataType0, false, (-1493));
        List<MySQLSchema.MySQLColumn> list0 = List.of(mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0,
                mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0);
        LinkedList<MySQLSchema.MySQLIndex> linkedList0 = new LinkedList<MySQLSchema.MySQLIndex>();
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.INNO_DB;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable((String) null, list0, linkedList0,
                mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLSchema.MySQLTable[] mySQLSchema_MySQLTableArray0 = new MySQLSchema.MySQLTable[1];
        mySQLSchema_MySQLTableArray0[0] = mySQLSchema_MySQLTable0;
        List<MySQLSchema.MySQLTable> list1 = List.of(mySQLSchema_MySQLTableArray0);
        AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn> abstractTables0 = new AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn>(
                list1);
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        mySQLExpressionGenerator0.setTablesAndColumns(abstractTables0);
        mySQLExpressionGenerator0.generateColumn();
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateAggregate();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateAggregate();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test30() throws Throwable { MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
     * MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
     * HashMap<MySQLSchema.MySQLColumn, MySQLConstant> hashMap0 = new HashMap<MySQLSchema.MySQLColumn, MySQLConstant>();
     * MySQLSchema.MySQLRowValue mySQLSchema_MySQLRowValue0 = mock(MySQLSchema.MySQLRowValue.class, new
     * ViolatedAssumptionAnswer()); doReturn((Map) null).when(mySQLSchema_MySQLRowValue0).getValues();
     * MySQLExpressionGenerator mySQLExpressionGenerator1 = mySQLExpressionGenerator0
     * .setRowVal(mySQLSchema_MySQLRowValue0); MySQLSchema.MySQLTable[] mySQLSchema_MySQLTableArray0 = new
     * MySQLSchema.MySQLTable[2]; MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 =
     * MySQLSchema.MySQLDataType.FLOAT; MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new
     * MySQLSchema.MySQLColumn("SGj", mySQLSchema_MySQLDataType0, true, 1030); List<MySQLSchema.MySQLColumn> list0 =
     * List.of(mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0, mySQLSchema_MySQLColumn0,
     * mySQLSchema_MySQLColumn0); LinkedList<MySQLSchema.MySQLIndex> linkedList0 = new
     * LinkedList<MySQLSchema.MySQLIndex>(); MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 =
     * MySQLSchema.MySQLTable.MySQLEngine.HEAP; MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new
     * MySQLSchema.MySQLTable("SGj", list0, linkedList0, mySQLSchema_MySQLTable_MySQLEngine0);
     * mySQLSchema_MySQLTableArray0[0] = mySQLSchema_MySQLTable0; mySQLSchema_MySQLTableArray0[1] =
     * mySQLSchema_MySQLTableArray0[0]; List<MySQLSchema.MySQLTable> list1 = List.of(mySQLSchema_MySQLTableArray0);
     * AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn> abstractTables0 = new
     * AbstractTables<MySQLSchema.MySQLTable, MySQLSchema.MySQLColumn>( list1); MySQLExpressionGenerator
     * mySQLExpressionGenerator2 = mySQLExpressionGenerator1 .setTablesAndColumns(abstractTables0); // Undeclared
     * exception! try { mySQLExpressionGenerator2.generateColumn(); fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e); } }
     */

    @Test
    public void test31() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateExplainQuery((MySQLSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test32() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateFetchColumns(false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test33() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.getTableRefs();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    @Test
    public void test34() throws Throwable {
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator((MySQLGlobalState) null);
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(3L);
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = (MySQLUnaryPostfixOperation) mySQLExpressionGenerator0
                .isNull((MySQLExpression) mySQLConstant0);
        assertFalse(mySQLUnaryPostfixOperation0.isNegated());
    }

    @Test
    public void test35() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        MySQLSelect mySQLSelect0 = mySQLExpressionGenerator0.generateSelect();
        MySQLUnaryPrefixOperation mySQLUnaryPrefixOperation0 = (MySQLUnaryPrefixOperation) mySQLExpressionGenerator0
                .negatePredicate((MySQLExpression) mySQLSelect0);
        assertFalse(mySQLUnaryPrefixOperation0.omitBracketsWhenPrinting());
    }

    @Test
    public void test36() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        List<MySQLJoin> list0 = mySQLExpressionGenerator0.getRandomJoinClauses();
        assertEquals(0, list0.size());
    }

    @Test
    public void test37() throws Throwable {
        MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
        MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
        // Undeclared exception!
        try {
            mySQLExpressionGenerator0.generateBooleanExpression();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
        }
    }

    // @Test
    // public void test38() throws Throwable {
    // MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
    // MySQLExpressionGenerator mySQLExpressionGenerator0 = new MySQLExpressionGenerator(mySQLGlobalState0);
    // MySQLSelect mySQLSelect0 = new MySQLSelect();
    // // Undeclared exception!
    // try {
    // mySQLExpressionGenerator0.mutate(mySQLSelect0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.mysql.gen.MySQLExpressionGenerator", e);
    // }
    // }
}
