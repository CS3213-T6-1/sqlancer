/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 02:13:55 GMT 2025
 */

package sqlancer.evosuite.mysql;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import sqlancer.common.query.ExpectedErrors;
import sqlancer.mysql.MySQLErrors;

public class MySQLErrors_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        // Undeclared exception!
        try {
            MySQLErrors.addInsertUpdateErrors((ExpectedErrors) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLErrors", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        // Undeclared exception!
        try {
            MySQLErrors.addExpressionErrors((ExpectedErrors) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLErrors", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        List<Pattern> list0 = MySQLErrors.getExpressionRegexErrors();
        assertEquals(2, list0.size());
    }

    @Test
    public void test3() throws Throwable {
        List<String> list0 = MySQLErrors.getExpressionErrors();
        assertEquals(3, list0.size());
    }

    @Test
    public void test4() throws Throwable {
        List<String> list0 = MySQLErrors.getInsertUpdateErrors();
        assertEquals(8, list0.size());
    }

    @Test
    public void test5() throws Throwable {
        String[] stringArray0 = new String[0];
        ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
        MySQLErrors.addInsertUpdateErrors(expectedErrors0);
    }

    @Test
    public void test6() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        MySQLErrors.addExpressionErrors(expectedErrors0);
    }
}
