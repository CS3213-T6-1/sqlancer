/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 14:07:47 GMT 2025
 */

package sqlancer.evosuite.mysql;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.Random;
import org.junit.jupiter.api.Test;
import sqlancer.mysql.ast.MySQLAggregate;
import sqlancer.mysql.ast.MySQLBetweenOperation;
import sqlancer.mysql.ast.MySQLBinaryComparisonOperation;
import sqlancer.mysql.ast.MySQLBinaryLogicalOperation;
import sqlancer.mysql.ast.MySQLBinaryOperation;
import sqlancer.mysql.ast.MySQLCastOperation;
import sqlancer.mysql.ast.MySQLCollate;
import sqlancer.mysql.ast.MySQLColumnReference;
import sqlancer.mysql.ast.MySQLComputableFunction;
import sqlancer.mysql.ast.MySQLConstant;
import sqlancer.mysql.ast.MySQLExists;
import sqlancer.mysql.ast.MySQLExpression;
import sqlancer.mysql.ast.MySQLInOperation;
import sqlancer.mysql.ast.MySQLJoin;
import sqlancer.mysql.ast.MySQLOrderByTerm;
import sqlancer.mysql.ast.MySQLSelect;
import sqlancer.mysql.ast.MySQLStringExpression;
import sqlancer.mysql.ast.MySQLTableReference;
import sqlancer.mysql.ast.MySQLText;
import sqlancer.mysql.ast.MySQLUnaryPostfixOperation;
import sqlancer.mysql.ast.MySQLUnaryPrefixOperation;
import sqlancer.mysql.MySQLSchema;
import sqlancer.mysql.MySQLToStringVisitor;
import sqlancer.mysql.MySQLVisitor;
import sqlancer.Randomly;

public class MySQLToStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L);
        mySQLToStringVisitor0.visitSpecific((MySQLExpression) mySQLConstant0);
        assertFalse(mySQLConstant0.isString());
    }

    @Test
    public void test01() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLText mySQLText0 = new MySQLText("1Z$K=q }/`1");
        mySQLToStringVisitor0.visit(mySQLText0);
        assertEquals("1Z$K=q }/`1", mySQLText0.getText());
    }

    @Test
    public void test02() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "xPW![%7yV,y|]6\"_");
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLTextConstant0.castAs(mySQLCastOperation_CastType0);
        mySQLToStringVisitor0.visit(mySQLConstant0);
        assertTrue(mySQLConstant0.isInt());
    }

    @Test
    public void test03() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        LinkedList<MySQLSchema.MySQLColumn> linkedList0 = new LinkedList<MySQLSchema.MySQLColumn>();
        MySQLSchema.MySQLIndex[] mySQLSchema_MySQLIndexArray0 = new MySQLSchema.MySQLIndex[7];
        List<MySQLSchema.MySQLIndex> list0 = Randomly.subset(mySQLSchema_MySQLIndexArray0);
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.MY_ISAM;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable(" (", linkedList0, list0,
                mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLTableReference mySQLTableReference0 = new MySQLTableReference(mySQLSchema_MySQLTable0);
        mySQLToStringVisitor0.visit(mySQLTableReference0);
        assertEquals(" (", mySQLToStringVisitor0.get());
    }

    @Test
    public void test04() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createUnsignedIntConstant(0L);
        MySQLStringExpression mySQLStringExpression0 = new MySQLStringExpression("", mySQLConstant0);
        mySQLToStringVisitor0.visit(mySQLStringExpression0);
        assertEquals("", mySQLStringExpression0.getStr());
    }

    @Test
    public void test05() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "xPW![%7yV,y|]6\"_");
        MySQLExists mySQLExists0 = new MySQLExists(mySQLConstant_MySQLTextConstant0);
        mySQLToStringVisitor0.visit(mySQLExists0);
        assertEquals(" EXISTS (\"xPW![%7yV,y|]6\"\"_\")", mySQLToStringVisitor0.get());
    }

    @Test
    public void test06() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.DECIMAL;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn("7R:?Ope0Q",
                mySQLSchema_MySQLDataType0, false, (-2108));
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLColumnReference mySQLColumnReference0 = new MySQLColumnReference(mySQLSchema_MySQLColumn0, mySQLConstant0);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLColumnReference0,
                mySQLCastOperation_CastType0);
        mySQLToStringVisitor0.visit(mySQLCastOperation0);
        assertEquals("CAST(7R:?Ope0Q AS SIGNED)", mySQLToStringVisitor0.get());
    }

    @Test
    public void test07() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L);
        MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.OR;
        MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(mySQLConstant0,
                mySQLConstant0, mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
        mySQLToStringVisitor0.visit(mySQLBinaryLogicalOperation0);
        assertEquals("(0) OR (0)", mySQLToStringVisitor0.get());
    }

    @Test
    public void test08() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L);
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant0, mySQLConstant0,
                mySQLConstant0);
        mySQLToStringVisitor0.visit(mySQLBetweenOperation0);
        assertEquals("(0) BETWEEN (0) AND (0)", mySQLToStringVisitor0.get());
    }

    @Test
    public void test09() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visitSpecific((MySQLExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test10() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLUnaryPostfixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLSelect0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLUnaryPostfixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_NULL;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation((MySQLExpression) null,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLUnaryPostfixOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test13() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLOrderByTerm) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.ASC;
        MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLSelect0, mySQLOrderByTerm_MySQLOrder0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLOrderByTerm0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.ASC;
        MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm((MySQLExpression) null, mySQLOrderByTerm_MySQLOrder0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLOrderByTerm0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test17() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLInOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.GREATEST;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[4];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLComputableFunction0, linkedList0, false);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLInOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test19() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLExists mySQLExists0 = new MySQLExists((MySQLExpression) null, mySQLConstant_MySQLNullConstant0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLExists0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test20() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLComputableFunction) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.COALESCE;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[1];
        mySQLExpressionArray0[0] = (MySQLExpression) mySQLSelect0;
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLComputableFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLColumnReference) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLCollate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLCollate mySQLCollate0 = new MySQLCollate(mySQLSelect0, "");
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLCollate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                (MySQLExpression) null, (MySQLExpression) null,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.OR;
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLBinaryComparisonOperation0,
                (MySQLExpression) null, mySQLBinaryOperation_MySQLBinaryOperator0);
        MySQLCollate mySQLCollate0 = new MySQLCollate(mySQLBinaryOperation0, "${w;2RN5");
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLCollate0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test26() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLUnaryPrefixOperation.MySQLUnaryPrefixOperator mySQLUnaryPrefixOperation_MySQLUnaryPrefixOperator0 = MySQLUnaryPrefixOperation.MySQLUnaryPrefixOperator.PLUS;
        MySQLUnaryPrefixOperation mySQLUnaryPrefixOperation0 = new MySQLUnaryPrefixOperation((MySQLExpression) null,
                mySQLUnaryPrefixOperation_MySQLUnaryPrefixOperator0);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLUnaryPrefixOperation0,
                mySQLCastOperation_CastType0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLCastOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test27() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLBinaryOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test28() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.OR;
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation((MySQLExpression) null, mySQLSelect0,
                mySQLBinaryOperation_MySQLBinaryOperator0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLBinaryOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test29() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLBinaryLogicalOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.AND;
        MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(mySQLSelect0,
                mySQLSelect0, mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLBinaryLogicalOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test31() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLBinaryComparisonOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test32() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLSelect0, mySQLSelect0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLBinaryComparisonOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test33() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, true);
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant_MySQLIntConstant0,
                mySQLConstant_MySQLIntConstant0, (MySQLExpression) null);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLBetweenOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test34() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLAggregate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test35() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[2];
        List<MySQLExpression> list0 = Randomly.subset(mySQLExpressionArray0);
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.MAX_DISTINCT;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(list0, mySQLAggregate_MySQLAggregateFunction0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLAggregate0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test36() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.ASC;
        MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLConstant_MySQLNullConstant0,
                mySQLOrderByTerm_MySQLOrder0);
        mySQLToStringVisitor0.visit(mySQLOrderByTerm0);
        assertEquals("NULL ASC", mySQLToStringVisitor0.get());
    }

    @Test
    public void test37() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.DESC;
        MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLConstant_MySQLNullConstant0,
                mySQLOrderByTerm_MySQLOrder0);
        mySQLToStringVisitor0.visit(mySQLOrderByTerm0);
        assertEquals("NULL DESC", mySQLToStringVisitor0.get());
    }

    @Test
    public void test38() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLSelect.SelectType mySQLSelect_SelectType0 = MySQLSelect.SelectType.DISTINCT;
        mySQLSelect0.setFromOptions(mySQLSelect_SelectType0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test39() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test40() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test41() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        String string0 = MySQLVisitor.asExpectedValues(mySQLConstant0);
        assertEquals("\t1 -- 1\n", string0);
    }

    @Test
    public void test42() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLText) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test43() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.SUM;
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        List<MySQLExpression> list0 = List.of((MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0,
                (MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0,
                (MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0);
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(list0, mySQLAggregate_MySQLAggregateFunction0);
        mySQLToStringVisitor0.visit(mySQLAggregate0);
        assertEquals("SUM(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)", mySQLToStringVisitor0.get());
    }

    @Test
    public void test44() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        linkedList0.add((MySQLExpression) mySQLSelect0);
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.SUM;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(linkedList0, mySQLAggregate_MySQLAggregateFunction0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLAggregate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test45() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        LinkedList<MySQLSchema.MySQLColumn> linkedList0 = new LinkedList<MySQLSchema.MySQLColumn>();
        MySQLSchema.MySQLIndex[] mySQLSchema_MySQLIndexArray0 = new MySQLSchema.MySQLIndex[7];
        List<MySQLSchema.MySQLIndex> list0 = Randomly.subset(mySQLSchema_MySQLIndexArray0);
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.MY_ISAM;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable(" (", linkedList0, list0,
                mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLJoin.JoinType mySQLJoin_JoinType0 = MySQLJoin.JoinType.CROSS;
        MySQLJoin mySQLJoin0 = new MySQLJoin(mySQLSchema_MySQLTable0, mySQLConstant_MySQLNullConstant0,
                mySQLJoin_JoinType0);
        mySQLToStringVisitor0.visit(mySQLJoin0);
        assertEquals(" CROSS JOIN  ( ON NULL", mySQLToStringVisitor0.get());
    }

    @Test
    public void test46() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        MySQLJoin.JoinType mySQLJoin_JoinType0 = MySQLJoin.JoinType.RIGHT;
        MySQLJoin mySQLJoin0 = new MySQLJoin((MySQLSchema.MySQLTable) null, mySQLConstant0, mySQLJoin_JoinType0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLJoin0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test47() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        LinkedList<MySQLSchema.MySQLColumn> linkedList0 = new LinkedList<MySQLSchema.MySQLColumn>();
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.MEMORY;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable("#&3Sp~FzV$", linkedList0,
                (List<MySQLSchema.MySQLIndex>) null, mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLJoin.JoinType mySQLJoin_JoinType0 = MySQLJoin.JoinType.LEFT;
        MySQLJoin mySQLJoin0 = new MySQLJoin(mySQLSchema_MySQLTable0, (MySQLExpression) null, mySQLJoin_JoinType0);
        mySQLToStringVisitor0.visit(mySQLJoin0);
        assertEquals(" LEFT JOIN #&3Sp~FzV$", mySQLToStringVisitor0.get());
    }

    @Test
    public void test48() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        LinkedList<MySQLSchema.MySQLColumn> linkedList0 = new LinkedList<MySQLSchema.MySQLColumn>();
        MySQLSchema.MySQLIndex[] mySQLSchema_MySQLIndexArray0 = new MySQLSchema.MySQLIndex[1];
        List<MySQLSchema.MySQLIndex> list0 = Randomly.subset(mySQLSchema_MySQLIndexArray0);
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.MY_ISAM;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable(":'m}", linkedList0, list0,
                mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLJoin.JoinType mySQLJoin_JoinType0 = MySQLJoin.JoinType.STRAIGHT;
        MySQLJoin mySQLJoin0 = new MySQLJoin(mySQLSchema_MySQLTable0, mySQLConstant_MySQLNullConstant0,
                mySQLJoin_JoinType0);
        mySQLToStringVisitor0.visit(mySQLJoin0);
        assertEquals(" STRAIGHT_JOIN :'m} ON NULL", mySQLToStringVisitor0.get());
    }

    @Test
    public void test49() throws Throwable {
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSchema.MySQLColumn[] mySQLSchema_MySQLColumnArray0 = new MySQLSchema.MySQLColumn[2];
        List<MySQLSchema.MySQLColumn> list0 = Randomly.nonEmptySubset(mySQLSchema_MySQLColumnArray0);
        MySQLSchema.MySQLIndex[] mySQLSchema_MySQLIndexArray0 = new MySQLSchema.MySQLIndex[5];
        List<MySQLSchema.MySQLIndex> list1 = Randomly.nonEmptySubset(mySQLSchema_MySQLIndexArray0);
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.MEMORY;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable("C1&vLv*qe", list0, list1,
                mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLJoin.JoinType mySQLJoin_JoinType0 = MySQLJoin.JoinType.INNER;
        MySQLJoin mySQLJoin0 = new MySQLJoin(mySQLSchema_MySQLTable0, mySQLSelect0, mySQLJoin_JoinType0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLJoin0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test50() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        LinkedList<MySQLSchema.MySQLColumn> linkedList0 = new LinkedList<MySQLSchema.MySQLColumn>();
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.FEDERATED;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable("", linkedList0,
                (List<MySQLSchema.MySQLIndex>) null, mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLJoin.JoinType mySQLJoin_JoinType0 = MySQLJoin.JoinType.NATURAL;
        MySQLJoin mySQLJoin0 = new MySQLJoin(mySQLSchema_MySQLTable0, mySQLConstant0, mySQLJoin_JoinType0);
        mySQLToStringVisitor0.visit(mySQLJoin0);
        assertEquals(" NATURAL JOIN  ON NULL", mySQLToStringVisitor0.get());
    }

    @Test
    public void test51() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        List<MySQLExpression> list0 = mySQLSelect0.getJoinList();
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant("%#::GC~a!1\u0006");
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.MIN;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(list0, mySQLAggregate_MySQLAggregateFunction0);
        MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.ASC;
        MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLAggregate0, mySQLOrderByTerm_MySQLOrder0);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant0, mySQLOrderByTerm0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        mySQLToStringVisitor0.visit(mySQLBinaryComparisonOperation0);
        assertEquals("(\"%#::GC~a!1\u0006\") = (MIN() ASC)", mySQLToStringVisitor0.get());
    }

    @Test
    public void test52() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        List<MySQLExpression> list0 = List.of((MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0,
                (MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0,
                (MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0, (MySQLExpression) mySQLConstant0);
        MySQLConstant mySQLConstant1 = MySQLConstant.createFalse();
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant1, list0, false);
        mySQLToStringVisitor0.visit(mySQLInOperation0);
        assertEquals("(0) NOT IN (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)", mySQLToStringVisitor0.get());
    }

    @Test
    public void test53() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.GREATEST;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[2];
        mySQLExpressionArray0[0] = (MySQLExpression) mySQLConstant0;
        mySQLExpressionArray0[1] = (MySQLExpression) mySQLConstant0;
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        mySQLToStringVisitor0.visit(mySQLComputableFunction0);
        assertEquals("GREATEST(0, 0)", mySQLToStringVisitor0.get());
    }

    @Test
    public void test54() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.GREATEST;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[2];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLComputableFunction0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test55() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        mySQLToStringVisitor0.visit(mySQLUnaryPostfixOperation0);
        assertEquals("(0) IS NOT FALSE", mySQLToStringVisitor0.get());
    }

    @Test
    public void test56() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_NULL;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        mySQLToStringVisitor0.visit(mySQLUnaryPostfixOperation0);
        assertEquals("(0) IS NOT NULL", mySQLToStringVisitor0.get());
    }

    @Test
    public void test57() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        mySQLToStringVisitor0.visit(mySQLUnaryPostfixOperation0);
        assertEquals("(0) IS TRUE", mySQLToStringVisitor0.get());
    }

    @Test
    public void test58() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        List<MySQLExpression> list0 = mySQLSelect0.getOrderByClauses();
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLSelect0, list0, true);
        MySQLSelect.SelectType mySQLSelect_SelectType0 = MySQLSelect.SelectType.DISTINCT;
        mySQLSelect0.setFromOptions(mySQLSelect_SelectType0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test59() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLExists) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test60() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLTableReference) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test61() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLCastOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test62() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        String string0 = mySQLToStringVisitor0.get();
        assertEquals("", string0);
    }

    @Test
    public void test63() throws Throwable {
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLText mySQLText0 = new MySQLText("SPACE");
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLText0, linkedList0, true);
        mySQLToStringVisitor0.visit(mySQLInOperation0);
        assertEquals("(SPACE) IN ()", mySQLToStringVisitor0.get());
    }

    @Test
    public void test64() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(1L);
        MySQLCollate mySQLCollate0 = new MySQLCollate(mySQLConstant0,
                "SELECT * FROM sqlite_master WHERE type='table' or type='view'");
        mySQLToStringVisitor0.visit(mySQLCollate0);
        assertEquals("(1 COLLATE 'SELECT * FROM sqlite_master WHERE type='table' or type='view'')",
                mySQLToStringVisitor0.get());
    }

    @Test
    public void test65() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant("%#::GC~a!1\u0006");
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant0, mySQLConstant0,
                mySQLSelect0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test66() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit((MySQLStringExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test67() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.XOR;
        MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(
                (MySQLExpression) null, (MySQLExpression) null,
                mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            mySQLToStringVisitor0.visit(mySQLBinaryLogicalOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test68() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.DESC;
        MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLConstant0, mySQLOrderByTerm_MySQLOrder0);
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.XOR;
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLConstant0, mySQLOrderByTerm0,
                mySQLBinaryOperation_MySQLBinaryOperator0);
        mySQLToStringVisitor0.visit(mySQLBinaryOperation0);
        assertEquals("(0) ^ (0 DESC)", mySQLToStringVisitor0.get());
    }

    @Test
    public void test69() throws Throwable {
        MySQLToStringVisitor mySQLToStringVisitor0 = new MySQLToStringVisitor();
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.DECIMAL;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn((String) null,
                mySQLSchema_MySQLDataType0, false, (-215));
        MySQLColumnReference mySQLColumnReference0 = new MySQLColumnReference(mySQLSchema_MySQLColumn0,
                (MySQLConstant) null);
        mySQLToStringVisitor0.visit(mySQLColumnReference0);
        String string0 = mySQLToStringVisitor0.get();
        assertEquals("null", string0);
    }
}
