/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 01:43:22 GMT 2025
 */

package sqlancer.evosuite.mysql;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.mysql.ast.MySQLAggregate;
import sqlancer.mysql.ast.MySQLBetweenOperation;
import sqlancer.mysql.ast.MySQLBinaryComparisonOperation;
import sqlancer.mysql.ast.MySQLBinaryLogicalOperation;
import sqlancer.mysql.ast.MySQLBinaryOperation;
import sqlancer.mysql.ast.MySQLCastOperation;
import sqlancer.mysql.ast.MySQLCollate;
import sqlancer.mysql.ast.MySQLColumnReference;
import sqlancer.mysql.ast.MySQLComputableFunction;
import sqlancer.mysql.ast.MySQLConstant;
import sqlancer.mysql.ast.MySQLExists;
import sqlancer.mysql.ast.MySQLExpression;
import sqlancer.mysql.ast.MySQLInOperation;
import sqlancer.mysql.ast.MySQLJoin;
import sqlancer.mysql.ast.MySQLOrderByTerm;
import sqlancer.mysql.ast.MySQLSelect;
import sqlancer.mysql.ast.MySQLStringExpression;
import sqlancer.mysql.ast.MySQLTableReference;
import sqlancer.mysql.ast.MySQLText;
import sqlancer.mysql.ast.MySQLUnaryPostfixOperation;
import sqlancer.mysql.MySQLExpectedValueVisitor;
import sqlancer.mysql.MySQLSchema;

public class MySQLExpectedValueVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "B{9:RNKDh-jFy E_");
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLTextConstant0.isEquals(mySQLConstant_MySQLTextConstant0);
        MySQLExists mySQLExists0 = new MySQLExists(mySQLConstant0);
        mySQLExpectedValueVisitor0.visit(mySQLExists0);
        assertEquals(" EXISTS (1) -- 1\n\t1 -- 1\n", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test01() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "B{9:RNKDh-jFy E_");
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLTextConstant0.isEquals(mySQLConstant_MySQLTextConstant0);
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.DOUBLE;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn("1111",
                mySQLSchema_MySQLDataType0, true, 815);
        MySQLColumnReference mySQLColumnReference0 = new MySQLColumnReference(mySQLSchema_MySQLColumn0, mySQLConstant0);
        mySQLExpectedValueVisitor0.visit(mySQLColumnReference0);
        assertEquals("1111 -- 1\n", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test02() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.VARCHAR;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn("^N*\"+r8K_ZHY*7n",
                mySQLSchema_MySQLDataType0, true, (-3974));
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-3974),
                "^N*\"+r8K_ZHY*7n");
        MySQLColumnReference mySQLColumnReference0 = MySQLColumnReference.create(mySQLSchema_MySQLColumn0,
                mySQLConstant_MySQLIntConstant0);
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLColumnReference0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        mySQLExpectedValueVisitor0.visit(mySQLUnaryPostfixOperation0);
        assertEquals("(^N*\"+r8K_ZHY*7n) IS NOT TRUE -- 0\n\t^N*\"+r8K_ZHY*7n -- ^N*\"+r8K_ZHY*7n\n",
                mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test03() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLStringExpression mySQLStringExpression0 = new MySQLStringExpression(
                "sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", mySQLConstant_MySQLNullConstant0);
        mySQLExpectedValueVisitor0.visit(mySQLStringExpression0);
        assertEquals("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant -- NULL\n", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test04() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        List<MySQLExpression> list0 = mySQLSelect0.getGroupByExpressions();
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant_MySQLNullConstant0, list0, false);
        MySQLExists mySQLExists0 = new MySQLExists(mySQLInOperation0);
        mySQLExpectedValueVisitor0.visit((MySQLExpression) mySQLExists0);
        assertEquals("\t EXISTS ((NULL) NOT IN ()) -- NULL\n\t\t(NULL) NOT IN () -- NULL\n",
                mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test05() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.DECIMAL;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn("", mySQLSchema_MySQLDataType0,
                false, 22);
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("");
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLTextConstant0.castAs(mySQLCastOperation_CastType0);
        MySQLColumnReference mySQLColumnReference0 = MySQLColumnReference.create(mySQLSchema_MySQLColumn0,
                mySQLConstant0);
        mySQLSelect0.setWhereClause(mySQLColumnReference0);
        mySQLExpectedValueVisitor0.visit(mySQLSelect0);
        assertEquals("\t -- 0\n", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test06() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "B{9:RNKDh-jFy E_");
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLTextConstant0.isEquals(mySQLConstant_MySQLTextConstant0);
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.AND;
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLConstant_MySQLTextConstant0,
                mySQLConstant0, mySQLBinaryOperation_MySQLBinaryOperator0);
        mySQLExpectedValueVisitor0.visit(mySQLBinaryOperation0);
        assertEquals("(\"B{9:RNKDh-jFy E_\") & (1) -- 0\n\t\"B{9:RNKDh-jFy E_\" -- \"B{9:RNKDh-jFy E_\"\n\t1 -- 1\n",
                mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test07() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L);
        MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.XOR;
        MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(mySQLConstant0,
                mySQLConstant0, mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
        mySQLExpectedValueVisitor0.visit(mySQLBinaryLogicalOperation0);
        assertEquals("(0) XOR (0) -- 0\n\t0 -- 0\n\t0 -- 0\n", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test08() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant("+jvw<sH%");
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant0, mySQLConstant0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        mySQLExpectedValueVisitor0.visit(mySQLBinaryComparisonOperation0);
        assertEquals(
                "(\"+jvw<sH%\") != (\"+jvw<sH%\") -- 0\n\t\"+jvw<sH%\" -- \"+jvw<sH%\"\n\t\"+jvw<sH%\" -- \"+jvw<sH%\"\n",
                mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test09() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant0, mySQLConstant0,
                mySQLConstant0);
        mySQLExpectedValueVisitor0.visit(mySQLBetweenOperation0);
        assertEquals("(NULL) BETWEEN (NULL) AND (NULL) -- NULL\n\tNULL -- NULL\n\tNULL -- NULL\n\tNULL -- NULL\n",
                mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test10() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLConstant_MySQLNullConstant0,
                mySQLCastOperation_CastType0);
        mySQLExpectedValueVisitor0.visit(mySQLCastOperation0);
        mySQLExpectedValueVisitor0.get();
        assertEquals("CAST(NULL AS SIGNED) -- NULL\n\tNULL -- NULL\n", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test11() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant((String) null);
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLUnaryPostfixOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLSelect0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLUnaryPostfixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLUnaryPostfixOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test14() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLExpectedValueVisitor", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLJoin.JoinType mySQLJoin_JoinType0 = MySQLJoin.JoinType.STRAIGHT;
        MySQLJoin mySQLJoin0 = new MySQLJoin((MySQLSchema.MySQLTable) null, (MySQLExpression) null,
                mySQLJoin_JoinType0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLJoin0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        LinkedList<MySQLSchema.MySQLColumn> linkedList0 = new LinkedList<MySQLSchema.MySQLColumn>();
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.ARCHIVE;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable((String) null, linkedList0,
                (List<MySQLSchema.MySQLIndex>) null, mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLJoin.JoinType mySQLJoin_JoinType0 = MySQLJoin.JoinType.STRAIGHT;
        MySQLJoin mySQLJoin0 = new MySQLJoin(mySQLSchema_MySQLTable0, mySQLSelect0, mySQLJoin_JoinType0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLJoin0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createUnsignedIntConstant(0L);
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        List<MySQLExpression> list0 = mySQLSelect0.getOrderByClauses();
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, list0, false);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLInOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLInOperation", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                0.0);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLConstant_MySQLDoubleConstant0,
                mySQLCastOperation_CastType0);
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(2370L,
                "sqlancer.common.query.SQLQueryResultCheckAdapter");
        List<MySQLExpression> list0 = List.of((MySQLExpression) mySQLConstant0,
                (MySQLExpression) mySQLConstant_MySQLIntConstant0, (MySQLExpression) mySQLConstant_MySQLIntConstant0,
                (MySQLExpression) mySQLCastOperation0, (MySQLExpression) mySQLConstant_MySQLDoubleConstant0,
                (MySQLExpression) mySQLConstant_MySQLDoubleConstant0, (MySQLExpression) mySQLCastOperation0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLCastOperation0, list0, true);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLInOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.COUNT_DISTINCT;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(linkedList0, mySQLAggregate_MySQLAggregateFunction0);
        linkedList0.add((MySQLExpression) mySQLAggregate0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLAggregate0, linkedList0, true);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLInOperation0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test20() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, (List<MySQLExpression>) null, false);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLInOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        List<MySQLExpression> list0 = mySQLSelect0.getOrderByClauses();
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLSelect0, list0, true);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLInOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test23() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLExpression) mySQLConstant_MySQLTextConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLSelect0, mySQLSelect0,
                mySQLSelect0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLExpression) mySQLBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test26() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.IFNULL;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[0];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLExpression) mySQLComputableFunction0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.mysql.ast.MySQLComputableFunction$MySQLFunction$4", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                392.21966755857);
        MySQLColumnReference mySQLColumnReference0 = new MySQLColumnReference((MySQLSchema.MySQLColumn) null,
                mySQLConstant_MySQLDoubleConstant0);
        MySQLExists mySQLExists0 = new MySQLExists(mySQLColumnReference0, mySQLConstant_MySQLDoubleConstant0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLExists0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test28() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLExists mySQLExists0 = new MySQLExists(mySQLSelect0, (MySQLConstant) null);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLExists0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLConstant) mySQLConstant_MySQLTextConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLConstant) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test31() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.GREATEST;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[2];
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "pg_temp");
        mySQLExpressionArray0[0] = (MySQLExpression) mySQLConstant_MySQLTextConstant0;
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.INT;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn("pg_temp",
                mySQLSchema_MySQLDataType0, true, 5);
        MySQLColumnReference mySQLColumnReference0 = new MySQLColumnReference(mySQLSchema_MySQLColumn0,
                mySQLConstant_MySQLTextConstant0);
        mySQLExpressionArray0[1] = (MySQLExpression) mySQLColumnReference0;
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLComputableFunction0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test32() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.IFNULL;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[1];
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-474.1494));
        mySQLExpressionArray0[0] = (MySQLExpression) mySQLConstant_MySQLDoubleConstant0;
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLComputableFunction0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test33() throws Throwable {
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.COUNT_DISTINCT;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(linkedList0, mySQLAggregate_MySQLAggregateFunction0);
        linkedList0.add((MySQLExpression) mySQLAggregate0);
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.GREATEST;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[9];
        mySQLExpressionArray0[0] = (MySQLExpression) mySQLAggregate0;
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLComputableFunction0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test34() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[1];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                (MySQLComputableFunction.MySQLFunction) null, mySQLExpressionArray0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLComputableFunction0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test35() throws Throwable {
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.COALESCE;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[2];
        mySQLExpressionArray0[0] = (MySQLExpression) mySQLSelect0;
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLComputableFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test36() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLComputableFunction) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test37() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.GREATEST;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[0];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLComputableFunction0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 1 out of bounds for length 0
            //
            verifyException("sqlancer.mysql.ast.MySQLComputableFunction$MySQLFunction", e);
        }
    }

    @Test
    public void test38() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLColumnReference mySQLColumnReference0 = MySQLColumnReference.create((MySQLSchema.MySQLColumn) null,
                (MySQLConstant) null);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLColumnReference0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test39() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        MySQLCollate mySQLCollate0 = new MySQLCollate(mySQLConstant_MySQLTextConstant0, " -- ");
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLCollate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test40() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLCollate mySQLCollate0 = new MySQLCollate(mySQLSelect0, "");
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLCollate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test41() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant((-867L));
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant0, mySQLConstant0,
                mySQLConstant0);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLBetweenOperation0,
                mySQLCastOperation_CastType0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLCastOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLBetweenOperation", e);
        }
    }

    @Test
    public void test42() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLTableReference mySQLTableReference0 = new MySQLTableReference((MySQLSchema.MySQLTable) null);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLTableReference0,
                mySQLCastOperation_CastType0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLCastOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test43() throws Throwable {
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLSelect0, mySQLCastOperation_CastType0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLCastOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test44() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLCastOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test45() throws Throwable {
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[0];
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.IFNULL;
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLComputableFunction0,
                mySQLCastOperation_CastType0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLCastOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.mysql.ast.MySQLComputableFunction$MySQLFunction$4", e);
        }
    }

    @Test
    public void test46() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = MySQLSchema.MySQLDataType.VARCHAR;
        MySQLSchema.MySQLColumn mySQLSchema_MySQLColumn0 = new MySQLSchema.MySQLColumn("CHECK_TABLE",
                mySQLSchema_MySQLDataType0, true, (-2073995239));
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstantNotAsBoolean(0L);
        MySQLColumnReference mySQLColumnReference0 = MySQLColumnReference.create(mySQLSchema_MySQLColumn0,
                mySQLConstant0);
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLColumnReference0, mySQLConstant0,
                mySQLConstant0);
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.XOR;
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLBetweenOperation0,
                mySQLBetweenOperation0, mySQLBinaryOperation_MySQLBinaryOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test47() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.OR;
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLConstant_MySQLTextConstant0,
                mySQLConstant_MySQLTextConstant0, mySQLBinaryOperation_MySQLBinaryOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test48() throws Throwable {
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.AND;
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLSelect0, mySQLSelect0,
                mySQLBinaryOperation_MySQLBinaryOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test49() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLBinaryOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test50() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.XOR;
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.LEAST;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[0];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLComputableFunction0,
                mySQLComputableFunction0, mySQLBinaryOperation_MySQLBinaryOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 1 out of bounds for length 0
            //
            verifyException("sqlancer.mysql.ast.MySQLComputableFunction$MySQLFunction", e);
        }
    }

    @Test
    public void test51() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, true);
        MySQLColumnReference mySQLColumnReference0 = MySQLColumnReference.create((MySQLSchema.MySQLColumn) null,
                mySQLConstant_MySQLIntConstant0);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLColumnReference0,
                mySQLCastOperation_CastType0);
        MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.AND;
        MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(mySQLCastOperation0,
                mySQLConstant_MySQLIntConstant0, mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryLogicalOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.MySQLToStringVisitor", e);
        }
    }

    @Test
    public void test52() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.XOR;
        MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(mySQLSelect0,
                mySQLSelect0, mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryLogicalOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test53() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLBinaryLogicalOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test54() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "sqlancer.mysql.MySQLExpectedValueVisitor");
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant_MySQLTextConstant0, mySQLConstant_MySQLTextConstant0,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryComparisonOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test55() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant((String) null);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant0, mySQLConstant0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryComparisonOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test56() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLSelect0, mySQLSelect0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryComparisonOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test57() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLBinaryComparisonOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test58() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant("t+N-qOwmB9t");
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant0, mySQLConstant0,
                mySQLConstant0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBetweenOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test59() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                0.0);
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant_MySQLDoubleConstant0,
                mySQLConstant_MySQLDoubleConstant0, mySQLConstant_MySQLDoubleConstant0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBetweenOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test60() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant_MySQLTextConstant0,
                mySQLConstant_MySQLTextConstant0, mySQLConstant_MySQLTextConstant0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBetweenOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test61() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLSelect0, mySQLSelect0,
                mySQLSelect0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test62() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[0];
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.IF;
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLComputableFunction0,
                mySQLComputableFunction0, mySQLComputableFunction0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBetweenOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.mysql.ast.MySQLComputableFunction$MySQLFunction$3", e);
        }
    }

    @Test
    public void test63() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLText) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test64() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLJoin) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test65() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "primary");
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLConstant_MySQLTextConstant0,
                mySQLCastOperation_CastType0);
        MySQLConstant mySQLConstant0 = mySQLCastOperation0.getExpectedValue();
        mySQLExpectedValueVisitor0.visit(mySQLConstant0);
        assertEquals("0 -- 0\n", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test66() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLCollate) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test67() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLExists mySQLExists0 = new MySQLExists(mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0);
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        linkedList0.add((MySQLExpression) mySQLConstant_MySQLNullConstant0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLExists0, linkedList0, false);
        mySQLExpectedValueVisitor0.visit(mySQLInOperation0);
        assertEquals("( EXISTS (NULL)) NOT IN (NULL) -- NULL\n\tNULL -- NULL\n", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test68() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        mySQLExpectedValueVisitor0.visit(mySQLSelect0);
        assertEquals("", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test69() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        LinkedList<MySQLJoin> linkedList0 = new LinkedList<MySQLJoin>();
        LinkedList<MySQLSchema.MySQLColumn> linkedList1 = new LinkedList<MySQLSchema.MySQLColumn>();
        LinkedList<MySQLSchema.MySQLIndex> linkedList2 = new LinkedList<MySQLSchema.MySQLIndex>();
        MySQLSchema.MySQLTable.MySQLEngine mySQLSchema_MySQLTable_MySQLEngine0 = MySQLSchema.MySQLTable.MySQLEngine.INNO_DB;
        MySQLSchema.MySQLTable mySQLSchema_MySQLTable0 = new MySQLSchema.MySQLTable("", linkedList1, linkedList2,
                mySQLSchema_MySQLTable_MySQLEngine0);
        MySQLJoin.JoinType mySQLJoin_JoinType0 = MySQLJoin.JoinType.STRAIGHT;
        MySQLJoin mySQLJoin0 = new MySQLJoin(mySQLSchema_MySQLTable0, mySQLSelect0, mySQLJoin_JoinType0);
        linkedList0.add(mySQLJoin0);
        mySQLSelect0.setJoinClauses(linkedList0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test70() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        mySQLExpectedValueVisitor0.visit((MySQLTableReference) null);
        assertEquals("", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test71() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLStringExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test72() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLText mySQLText0 = new MySQLText("@yK");
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        mySQLSelect0.setWhereClause(mySQLText0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLSelect0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // PQS not supported for this operator
            //
        }
    }

    @Test
    public void test73() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                1182.1764674623566);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLCastOperation mySQLCastOperation0 = new MySQLCastOperation(mySQLConstant_MySQLDoubleConstant0,
                mySQLCastOperation_CastType0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLCastOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test74() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                0.0);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant_MySQLDoubleConstant0, mySQLConstant_MySQLDoubleConstant0,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryComparisonOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test75() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.COALESCE;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[8];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant_MySQLNullConstant0,
                mySQLExpressionArray0[7], mySQLComputableFunction0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBetweenOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test76() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.COALESCE;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[1];
        mySQLExpressionArray0[0] = (MySQLExpression) mySQLConstant_MySQLNullConstant0;
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        mySQLExpectedValueVisitor0.visit(mySQLComputableFunction0);
        assertEquals("COALESCE(NULL) -- NULL\n\tNULL -- NULL\n", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test77() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLColumnReference) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test78() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.COUNT_DISTINCT;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(linkedList0, mySQLAggregate_MySQLAggregateFunction0);
        mySQLExpectedValueVisitor0.visit(mySQLAggregate0);
        assertEquals("", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test79() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLOrderByTerm.MySQLOrder mySQLOrderByTerm_MySQLOrder0 = MySQLOrderByTerm.MySQLOrder.ASC;
        MySQLOrderByTerm mySQLOrderByTerm0 = new MySQLOrderByTerm(mySQLConstant_MySQLNullConstant0,
                mySQLOrderByTerm_MySQLOrder0);
        mySQLExpectedValueVisitor0.visit(mySQLOrderByTerm0);
        assertEquals("", mySQLExpectedValueVisitor0.get());
    }

    @Test
    public void test80() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-1.0));
        MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0 = MySQLBinaryLogicalOperation.MySQLBinaryLogicalOperator.AND;
        MySQLBinaryLogicalOperation mySQLBinaryLogicalOperation0 = new MySQLBinaryLogicalOperation(
                mySQLConstant_MySQLDoubleConstant0, mySQLConstant_MySQLDoubleConstant0,
                mySQLBinaryLogicalOperation_MySQLBinaryLogicalOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryLogicalOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test81() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                564.9197156323213);
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(
                mySQLConstant_MySQLDoubleConstant0, mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLUnaryPostfixOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test82() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit((MySQLExists) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test83() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        String string0 = mySQLExpectedValueVisitor0.get();
        assertEquals("", string0);
    }

    @Test
    public void test84() throws Throwable {
        MySQLExpectedValueVisitor mySQLExpectedValueVisitor0 = new MySQLExpectedValueVisitor();
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-5477.3));
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.AND;
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLConstant_MySQLDoubleConstant0,
                mySQLConstant_MySQLDoubleConstant0, mySQLBinaryOperation_MySQLBinaryOperator0);
        // Undeclared exception!
        try {
            mySQLExpectedValueVisitor0.visit(mySQLBinaryOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }
}
