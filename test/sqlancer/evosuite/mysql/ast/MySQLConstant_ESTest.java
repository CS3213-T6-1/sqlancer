/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:49:51 GMT 2025
 */

package sqlancer.evosuite.mysql.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.mysql.ast.MySQLCastOperation;
import sqlancer.mysql.ast.MySQLConstant;
import sqlancer.mysql.MySQLSchema;

public class MySQLConstant_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test000() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-1L),
                "Ag$#t");
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant1 = (MySQLConstant.MySQLIntConstant) MySQLConstant
                .createUnsignedIntConstant(1L);
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant2 = (MySQLConstant.MySQLIntConstant) mySQLConstant_MySQLIntConstant1
                .isLessThan(mySQLConstant_MySQLIntConstant0);
        assertTrue(mySQLConstant_MySQLIntConstant2.isSigned());
        assertEquals("1", mySQLConstant_MySQLIntConstant1.getTextRepresentation());
        assertEquals((-1L), mySQLConstant_MySQLIntConstant0.getInt());
        assertFalse(mySQLConstant_MySQLIntConstant1.isSigned());
        assertEquals(1L, mySQLConstant_MySQLIntConstant1.getInt());
        assertFalse(mySQLConstant_MySQLIntConstant2.asBooleanNotNull());
    }

    @Test
    public void test001() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-1L),
                "Ag$#t");
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant("-1");
        // Undeclared exception!
        try {
            mySQLConstant0.isEquals(mySQLConstant_MySQLIntConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test002() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-1L),
                "Ag$#t");
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLIntConstant0.isEquals(mySQLConstant_MySQLIntConstant0);
        assertEquals("1", mySQLConstant0.getTextRepresentation());
        assertEquals(1L, mySQLConstant0.getInt());
        assertEquals((-1L), mySQLConstant_MySQLIntConstant0.getInt());
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
        assertTrue(mySQLConstant0.isSigned());
    }

    @Test
    public void test003() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("");
        boolean boolean0 = mySQLConstant_MySQLTextConstant0.isString();
        assertTrue(boolean0);
    }

    @Test
    public void test004() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("");
        String string0 = mySQLConstant_MySQLTextConstant0.getString();
        assertEquals("", string0);
    }

    @Test
    public void test005() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant("");
        String string0 = mySQLConstant0.castAsString();
        assertEquals("", string0);
    }

    @Test
    public void test006() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "9=}C:oWy_O[N");
        boolean boolean0 = mySQLConstant_MySQLTextConstant0.asBooleanNotNull();
        assertTrue(boolean0);
    }

    @Test
    public void test007() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L, true);
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        mySQLConstant_MySQLNullConstant0.isEquals(mySQLConstant0);
        assertTrue(mySQLConstant0.isSigned());
    }

    @Test
    public void test008() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        mySQLConstant_MySQLNullConstant0.getType();
    }

    @Test
    public void test009() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        String string0 = mySQLConstant_MySQLNullConstant0.getTextRepresentation();
        assertEquals("NULL", string0);
    }

    @Test
    public void test010() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        String string0 = mySQLConstant_MySQLNullConstant0.castAsString();
        assertEquals("NULL", string0);
    }

    @Test
    public void test011() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLNullConstant0.castAs(mySQLCastOperation_CastType0);
        assertFalse(mySQLConstant0.isInt());
    }

    @Test
    public void test012() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        // Undeclared exception!
        try {
            mySQLConstant_MySQLNullConstant0.asBooleanNotNull();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // NULL
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNullConstant", e);
        }
    }

    @Test
    public void test013() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("");
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                0L);
        mySQLConstant_MySQLDoubleConstant0.isEquals(mySQLConstant_MySQLTextConstant0);
        assertEquals("0.0", mySQLConstant_MySQLDoubleConstant0.getTextRepresentation());
    }

    @Test
    public void test014() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-1564.878845890143));
        // Undeclared exception!
        try {
            mySQLConstant_MySQLDoubleConstant0.castAsString();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test015() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                187.0572);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        // Undeclared exception!
        try {
            mySQLConstant_MySQLDoubleConstant0.castAs(mySQLCastOperation_CastType0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test016() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                0.0);
        // Undeclared exception!
        try {
            mySQLConstant_MySQLDoubleConstant0.asBooleanNotNull();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test017() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L,
                "_qQ<$F9");
        boolean boolean0 = mySQLConstant_MySQLIntConstant0.isSigned();
        assertTrue(boolean0);
    }

    @Test
    public void test018() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, true);
        mySQLConstant_MySQLIntConstant0.isInt();
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
    }

    @Test
    public void test019() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, true);
        mySQLConstant_MySQLIntConstant0.getType();
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
    }

    @Test
    public void test020() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, true);
        mySQLConstant_MySQLIntConstant0.getTextRepresentation();
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
    }

    @Test
    public void test021() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                0L);
        String string0 = mySQLConstant_MySQLDoubleConstant0.getTextRepresentation();
        assertEquals("0.0", string0);
    }

    @Test
    public void test022() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(3755L,
                (String) null);
        mySQLConstant_MySQLIntConstant0.toString();
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
        assertEquals(3755L, mySQLConstant_MySQLIntConstant0.getInt());
    }

    @Test
    public void test023() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, "");
        mySQLConstant_MySQLIntConstant0.toString();
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
    }

    @Test
    public void test024() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "l5IpU'*`");
        boolean boolean0 = mySQLConstant_MySQLTextConstant0.isString();
        assertTrue(boolean0);
    }

    @Test
    public void test025() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L, true);
        boolean boolean0 = mySQLConstant0.isSigned();
        assertTrue(boolean0);
    }

    @Test
    public void test026() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        boolean boolean0 = mySQLConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test027() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(399L, false);
        mySQLConstant0.isInt();
        assertEquals("399", mySQLConstant0.getTextRepresentation());
        assertFalse(mySQLConstant0.isSigned());
        assertEquals(399L, mySQLConstant0.getInt());
    }

    @Test
    public void test028() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        String string0 = mySQLConstant_MySQLTextConstant0.getString();
        assertNull(string0);
    }

    @Test
    public void test029() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("");
        String string0 = mySQLConstant_MySQLTextConstant0.getString();
        assertEquals("", string0);
    }

    @Test
    public void test030() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        long long0 = mySQLConstant0.getInt();
        assertEquals(0L, long0);
        assertTrue(mySQLConstant0.isSigned());
    }

    @Test
    public void test031() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        long long0 = mySQLConstant0.getInt();
        assertEquals(1L, long0);
        assertEquals("1", mySQLConstant0.getTextRepresentation());
        assertTrue(mySQLConstant0.isSigned());
    }

    @Test
    public void test032() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant((-1L));
        long long0 = mySQLConstant0.getInt();
        assertEquals("-1", mySQLConstant0.getTextRepresentation());
        assertEquals((-1L), long0);
        assertTrue(mySQLConstant0.isSigned());
    }

    @Test
    public void test033() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLNullConstant0.getExpectedValue();
        assertTrue(mySQLConstant0.isNull());
    }

    @Test
    public void test034() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant((-1931L));
        MySQLConstant mySQLConstant1 = mySQLConstant0.getExpectedValue();
        assertEquals("-1931", mySQLConstant1.getTextRepresentation());
        assertTrue(mySQLConstant1.isSigned());
        assertEquals((-1931L), mySQLConstant1.getInt());
    }

    @Test
    public void test035() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant((String) null);
        String string0 = mySQLConstant0.castAsString();
        assertNull(string0);
    }

    @Test
    public void test036() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLConstant mySQLConstant1 = mySQLConstant0.castAs(mySQLCastOperation_CastType0);
        assertEquals("1", mySQLConstant1.getTextRepresentation());
        assertTrue(mySQLConstant0.isSigned());
        assertTrue(mySQLConstant1.isSigned());
    }

    @Test
    public void test037() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        boolean boolean0 = mySQLConstant0.asBooleanNotNull();
        assertEquals(1L, mySQLConstant0.getInt());
        assertTrue(mySQLConstant0.isSigned());
        assertTrue(boolean0);
        assertEquals("1", mySQLConstant0.getTextRepresentation());
    }

    @Test
    public void test038() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        boolean boolean0 = mySQLConstant0.asBooleanNotNull();
        assertTrue(mySQLConstant0.isSigned());
        assertFalse(boolean0);
    }

    @Test
    public void test039() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.toString();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test040() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        // Undeclared exception!
        try {
            mySQLConstant0.isEquals((MySQLConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLIntConstant", e);
        }
    }

    @Test
    public void test041() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-2744.54291885714));
        // Undeclared exception!
        try {
            mySQLConstant_MySQLDoubleConstant0.getType();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test042() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.getTextRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test043() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                " \nAg$#t");
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.castAs(mySQLCastOperation_CastType0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test044() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.castAs(mySQLCastOperation_CastType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test045() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                (String) null);
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.asBooleanNotNull();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test046() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
        assertFalse(mySQLConstant0.asBooleanNotNull());
        assertTrue(mySQLConstant0.isSigned());
    }

    @Test
    public void test047() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(true);
        assertEquals("1", mySQLConstant0.getTextRepresentation());
        assertEquals(1L, mySQLConstant0.getInt());
        assertTrue(mySQLConstant0.isSigned());
    }

    @Test
    public void test048() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(
                9223372036854775807L, false);
        assertEquals("9223372036854775807", mySQLConstant_MySQLIntConstant0.getTextRepresentation());
        assertFalse(mySQLConstant_MySQLIntConstant0.isSigned());
        assertEquals(9223372036854775807L, mySQLConstant_MySQLIntConstant0.getInt());
    }

    @Test
    public void test049() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        boolean boolean0 = mySQLConstant0.isNull();
        assertFalse(boolean0);
        assertEquals("1", mySQLConstant0.getTextRepresentation());
        assertTrue(mySQLConstant0.isSigned());
        assertEquals(1L, mySQLConstant0.getInt());
    }

    @Test
    public void test050() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, true);
        mySQLConstant_MySQLIntConstant0.toString();
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
    }

    @Test
    public void test051() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, true);
        boolean boolean0 = mySQLConstant_MySQLIntConstant0.isString();
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
        assertFalse(boolean0);
    }

    @Test
    public void test052() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        boolean boolean0 = mySQLConstant_MySQLNullConstant0.isInt();
        assertFalse(boolean0);
    }

    @Test
    public void test053() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "DATA_TYPE");
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = (MySQLConstant.MySQLIntConstant) MySQLConstant
                .createTrue();
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant1 = (MySQLConstant.MySQLIntConstant) mySQLConstant_MySQLIntConstant0
                .isLessThan(mySQLConstant_MySQLTextConstant0);
        assertFalse(mySQLConstant_MySQLIntConstant0.isNull());
        assertEquals("1", mySQLConstant_MySQLIntConstant0.getTextRepresentation());
        assertFalse(mySQLConstant_MySQLIntConstant1.asBooleanNotNull());
        assertEquals(1L, mySQLConstant_MySQLIntConstant0.getInt());
        assertTrue(mySQLConstant_MySQLIntConstant1.isSigned());
    }

    @Test
    public void test054() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("\t-1");
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = (MySQLConstant.MySQLIntConstant) MySQLConstant
                .createTrue();
        // Undeclared exception!
        try {
            mySQLConstant_MySQLIntConstant0.isLessThan(mySQLConstant_MySQLTextConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLIntConstant", e);
        }
    }

    @Test
    public void test055() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-2744.54291885714));
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-1070L),
                "D3@G:{ubg`8{DPv@");
        // Undeclared exception!
        try {
            mySQLConstant_MySQLIntConstant0.isLessThan(mySQLConstant_MySQLDoubleConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // -2744.54291885714
            //
        }
    }

    @Test
    public void test056() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = (MySQLConstant.MySQLIntConstant) MySQLConstant
                .createFalse();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        mySQLConstant_MySQLIntConstant0.isLessThan(mySQLConstant_MySQLNullConstant0);
        assertEquals("0", mySQLConstant_MySQLIntConstant0.getTextRepresentation());
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
    }

    // @Test
    // public void test057() throws Throwable {
    // MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant((String) null);
    // MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
    // "bigint");
    // MySQLConstant mySQLConstant1 = mySQLConstant0.isEquals(mySQLConstant_MySQLTextConstant0);
    // MySQLConstant mySQLConstant2 = mySQLConstant_MySQLTextConstant0.isLessThan(mySQLConstant1);
    // // // Unstable assertion: assertTrue(mySQLConstant2.isSigned());
    // // // Unstable assertion: assertFalse(mySQLConstant_MySQLTextConstant0.isNull());
    // // // Unstable assertion: assertEquals("1", mySQLConstant2.getTextRepresentation());
    // // // Unstable assertion: assertTrue(mySQLConstant1.asBooleanNotNull());
    // }

    @Test
    public void test058() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = (MySQLConstant.MySQLIntConstant) MySQLConstant
                .createTrue();
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant1 = (MySQLConstant.MySQLIntConstant) MySQLConstant
                .createIntConstant((-1937L), false);
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant2 = (MySQLConstant.MySQLIntConstant) mySQLConstant_MySQLIntConstant0
                .isLessThan(mySQLConstant_MySQLIntConstant1);
        assertEquals(1L, mySQLConstant_MySQLIntConstant2.getInt());
        assertEquals("18446744073709549679", mySQLConstant_MySQLIntConstant1.getTextRepresentation());
        assertTrue(mySQLConstant_MySQLIntConstant2.isSigned());
        assertEquals("1", mySQLConstant_MySQLIntConstant0.getTextRepresentation());
    }

    @Test
    public void test059() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("");
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = (MySQLConstant.MySQLIntConstant) mySQLConstant_MySQLTextConstant0
                .castAs(mySQLCastOperation_CastType0);
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant1 = (MySQLConstant.MySQLIntConstant) mySQLConstant_MySQLIntConstant0
                .isLessThan(mySQLConstant_MySQLTextConstant0);
        assertTrue(mySQLConstant_MySQLIntConstant1.isSigned());
        assertFalse(mySQLConstant_MySQLIntConstant0.isNull());
        assertFalse(mySQLConstant_MySQLIntConstant0.isSigned());
        assertEquals(0L, mySQLConstant_MySQLIntConstant1.getInt());
        assertFalse(mySQLConstant_MySQLIntConstant0.asBooleanNotNull());
    }

    @Test
    public void test060() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-1L),
                (String) null);
        String string0 = mySQLConstant_MySQLIntConstant0.castAsString();
        assertEquals("-1", string0);
    }

    @Test
    public void test061() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createUnsignedIntConstant(1L);
        // Undeclared exception!
        try {
            mySQLConstant0.castAs((MySQLCastOperation.CastType) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test062() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-1L),
                (String) null);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.SIGNED;
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLIntConstant0.castAs(mySQLCastOperation_CastType0);
        assertTrue(mySQLConstant0.isSigned());
        assertEquals("-1", mySQLConstant0.getTextRepresentation());
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
        assertEquals((-1L), mySQLConstant0.getInt());
    }

    @Test
    public void test063() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLConstant mySQLConstant1 = mySQLConstant0.castAs(mySQLCastOperation_CastType0);
        String string0 = mySQLConstant1.castAsString();
        assertFalse(mySQLConstant1.isSigned());
        assertEquals("1", mySQLConstant0.getTextRepresentation());
        assertEquals("1", mySQLConstant1.getTextRepresentation());
        assertTrue(mySQLConstant0.isSigned());
        assertEquals("1", string0);
    }

    @Test
    public void test064() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-1L),
                "Ag$#t");
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant("-1");
        // Undeclared exception!
        try {
            mySQLConstant_MySQLIntConstant0.isEquals(mySQLConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLIntConstant", e);
        }
    }

    @Test
    public void test065() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-2744.54291885714));
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        // Undeclared exception!
        try {
            mySQLConstant0.isEquals(mySQLConstant_MySQLDoubleConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // -2744.54291885714
            //
        }
    }

    @Test
    public void test066() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(3755L,
                (String) null);
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        mySQLConstant_MySQLIntConstant0.isEquals(mySQLConstant_MySQLNullConstant0);
        assertEquals(3755L, mySQLConstant_MySQLIntConstant0.getInt());
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
    }

    @Test
    public void test067() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "/&!+WG%@eW2i*k<H");
        assertFalse(mySQLConstant_MySQLTextConstant0.isInt());
        assertTrue(mySQLConstant_MySQLTextConstant0.isString());

        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLConstant mySQLConstant1 = mySQLConstant0.isEquals(mySQLConstant_MySQLTextConstant0);
        assertEquals("1", mySQLConstant0.getTextRepresentation());
        assertFalse(mySQLConstant0.isNull());
        assertEquals(1L, mySQLConstant0.getInt());
        assertEquals("0", mySQLConstant1.getTextRepresentation());
        assertTrue(mySQLConstant1.isSigned());
    }

    @Test
    public void test068() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-1L),
                (String) null);
        boolean boolean0 = mySQLConstant_MySQLIntConstant0.asBooleanNotNull();
        assertEquals((-1L), mySQLConstant_MySQLIntConstant0.getInt());
        assertTrue(boolean0);
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
    }

    @Test
    public void test069() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "9=}C:oWy_O[N");
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.isLessThan(mySQLConstant_MySQLTextConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test070() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("H");
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLTextConstant0.castAs(mySQLCastOperation_CastType0);
        MySQLConstant mySQLConstant1 = mySQLConstant_MySQLTextConstant0.isLessThan(mySQLConstant0);
        assertTrue(mySQLConstant_MySQLTextConstant0.isString());
        assertTrue(mySQLConstant1.isSigned());
        assertFalse(mySQLConstant0.isNull());
        assertEquals("0", mySQLConstant0.getTextRepresentation());
        assertFalse(mySQLConstant0.isSigned());
        assertEquals(0L, mySQLConstant1.getInt());
    }

    @Test
    public void test071() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "29l82lnkyPxU");
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.isLessThan(mySQLConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test072() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "DATA_TYPE");
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        MySQLConstant mySQLConstant1 = mySQLConstant_MySQLTextConstant0.isLessThan(mySQLConstant0);
        assertFalse(mySQLConstant1.equals((Object) mySQLConstant0));
    }

    @Test
    public void test073() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("8");
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLTextConstant0.castAs(mySQLCastOperation_CastType0);
        assertFalse(mySQLConstant0.isSigned());
        assertEquals("8", mySQLConstant0.getTextRepresentation());
        assertEquals(8L, mySQLConstant0.getInt());
    }

    @Test
    public void test074() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("\n");
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.isEquals(mySQLConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test075() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("\t");
        assertFalse(mySQLConstant_MySQLTextConstant0.asBooleanNotNull());

        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLConstant mySQLConstant1 = mySQLConstant_MySQLTextConstant0.isEquals(mySQLConstant0);
        assertEquals("1", mySQLConstant0.getTextRepresentation());
        assertTrue(mySQLConstant_MySQLTextConstant0.isString());
        assertTrue(mySQLConstant1.isSigned());
        assertFalse(mySQLConstant0.isNull());
        assertEquals(0L, mySQLConstant1.getInt());
        assertEquals(1L, mySQLConstant0.getInt());
    }

    @Test
    public void test076() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "vz,LG%f");
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.castAs((MySQLCastOperation.CastType) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test077() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "Guw-a=5KpXcxg");
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                1.0);
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.isEquals(mySQLConstant_MySQLDoubleConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 1.0
            //
        }
    }

    @Test
    public void test078() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "DATA_TYPE");
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        MySQLConstant mySQLConstant1 = mySQLConstant_MySQLTextConstant0.isEquals(mySQLConstant0);
        assertEquals("NULL", mySQLConstant1.castAsString());
    }

    @Test
    public void test079() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("");
        String string0 = mySQLConstant_MySQLTextConstant0.getTextRepresentation();
        assertEquals("\"\"", string0);
    }

    @Test
    public void test080() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L,
                "-DmJxL+)YX");
        assertTrue(mySQLConstant_MySQLIntConstant0.isInt());

        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("0");
        assertFalse(mySQLConstant_MySQLTextConstant0.asBooleanNotNull());

        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLTextConstant0.isLessThan(mySQLConstant_MySQLIntConstant0);
        assertTrue(mySQLConstant_MySQLTextConstant0.isString());
        assertTrue(mySQLConstant0.isSigned());
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
        assertEquals("0", mySQLConstant0.getTextRepresentation());
        assertFalse(mySQLConstant_MySQLTextConstant0.isNull());
    }

    @Test
    public void test081() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "29l82lnkyPxU");
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.isEquals(mySQLConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    // @Test
    // public void test082() throws Throwable {
    // MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = null;
    // try {
    // mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(Double.NEGATIVE_INFINITY);
    // fail("Expecting exception: RuntimeException");
    //
    // } catch (RuntimeException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLDoubleConstant", e);
    // }
    // }

    @Test
    public void test083() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-2744.54291885714));
        // Undeclared exception!
        try {
            mySQLConstant_MySQLDoubleConstant0.asBooleanNotNull();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test084() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                187.0572);
        // Undeclared exception!
        try {
            mySQLConstant_MySQLDoubleConstant0.castAsString();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test085() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-3693.819918162));
        // Undeclared exception!
        try {
            mySQLConstant_MySQLDoubleConstant0.getType();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test086() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-2744.54291885714));
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        mySQLConstant_MySQLDoubleConstant0.isEquals(mySQLConstant0);
        assertTrue(mySQLConstant0.isSigned());
        assertEquals("-2744.54291885714", mySQLConstant_MySQLDoubleConstant0.getTextRepresentation());
        assertEquals("0", mySQLConstant0.getTextRepresentation());
    }

    @Test
    public void test087() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-2744.54291885714));
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        // Undeclared exception!
        try {
            mySQLConstant_MySQLDoubleConstant0.castAs(mySQLCastOperation_CastType0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test088() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        String string0 = mySQLConstant0.castAsString();
        assertEquals("NULL", string0);
    }

    @Test
    public void test089() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        mySQLConstant0.getType();
    }

    @Test
    public void test090() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        boolean boolean0 = mySQLConstant_MySQLNullConstant0.isNull();
        assertTrue(boolean0);
    }

    @Test
    public void test091() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = (MySQLConstant.MySQLNullConstant) MySQLConstant
                .createNullConstant();
        mySQLConstant_MySQLNullConstant0.isLessThan(mySQLConstant0);
        assertEquals(1L, mySQLConstant0.getInt());
        assertTrue(mySQLConstant0.isSigned());
        assertEquals("1", mySQLConstant0.getTextRepresentation());
    }

    @Test
    public void test092() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        String string0 = mySQLConstant_MySQLNullConstant0.getTextRepresentation();
        assertEquals("NULL", string0);
    }

    @Test
    public void test093() throws Throwable {
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        MySQLConstant mySQLConstant1 = mySQLConstant0.castAs(mySQLCastOperation_CastType0);
        assertNull(mySQLConstant1.getType());
    }

    @Test
    public void test094() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(3L,
                (String) null);
        mySQLConstant_MySQLIntConstant0.getType();
        assertEquals(3L, mySQLConstant_MySQLIntConstant0.getInt());
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
    }

    @Test
    public void test095() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(3L,
                (String) null);
        mySQLConstant_MySQLIntConstant0.getTextRepresentation();
        assertTrue(mySQLConstant_MySQLIntConstant0.isSigned());
        assertEquals(3L, mySQLConstant_MySQLIntConstant0.getInt());
    }

    @Test
    public void test096() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(".1");
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.isEquals(mySQLConstant0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test097() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("");
        boolean boolean0 = mySQLConstant_MySQLTextConstant0.isSigned();
        assertFalse(boolean0);
    }

    @Test
    public void test098() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "l5IpU'*`");
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLTextConstant0.getExpectedValue();
        assertSame(mySQLConstant0, mySQLConstant_MySQLTextConstant0);
    }

    @Test
    public void test099() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                1.0);
        // Undeclared exception!
        try {
            mySQLConstant_MySQLDoubleConstant0.isLessThan(mySQLConstant0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test100() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstantNotAsBoolean(3L);
        assertTrue(mySQLConstant0.isSigned());
        assertEquals("3", mySQLConstant0.getTextRepresentation());
        assertEquals(3L, mySQLConstant0.getInt());
    }

    @Test
    public void test101() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        // Undeclared exception!
        try {
            mySQLConstant0.getString();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant", e);
        }
    }

    @Test
    public void test102() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        // Undeclared exception!
        try {
            mySQLConstant0.getInt();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant", e);
        }
    }

    @Test
    public void test103() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "DATA_TYPE");
        MySQLSchema.MySQLDataType mySQLSchema_MySQLDataType0 = mySQLConstant_MySQLTextConstant0.getType();
        assertEquals(MySQLSchema.MySQLDataType.VARCHAR, mySQLSchema_MySQLDataType0);
    }

    @Test
    public void test104() throws Throwable {
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant("");
        String string0 = mySQLConstant_MySQLTextConstant0.castAsString();
        assertEquals("", string0);
    }

    @Test
    public void test105() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-5.0));
        MySQLConstant.MySQLTextConstant mySQLConstant_MySQLTextConstant0 = new MySQLConstant.MySQLTextConstant(
                "w2Is!0\"B");
        // Undeclared exception!
        try {
            mySQLConstant_MySQLTextConstant0.isLessThan(mySQLConstant_MySQLDoubleConstant0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // -5.0
            //
        }
    }
}
