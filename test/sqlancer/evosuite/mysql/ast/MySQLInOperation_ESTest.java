/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:22:05 GMT 2025
 */

package sqlancer.evosuite.mysql.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.mysql.ast.MySQLAggregate;
import sqlancer.mysql.ast.MySQLBinaryOperation;
import sqlancer.mysql.ast.MySQLComputableFunction;
import sqlancer.mysql.ast.MySQLConstant;
import sqlancer.mysql.ast.MySQLExists;
import sqlancer.mysql.ast.MySQLExpression;
import sqlancer.mysql.ast.MySQLInOperation;
import sqlancer.mysql.ast.MySQLStringExpression;

public class MySQLInOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
        LinkedList<MySQLExists> linkedList0 = new LinkedList<MySQLExists>();
        LinkedList<MySQLExpression> linkedList1 = new LinkedList<MySQLExpression>(linkedList0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, linkedList1, true);
        boolean boolean0 = mySQLInOperation0.isTrue();
        assertTrue(boolean0);
    }

    @Test
    public void test01() throws Throwable {
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation((MySQLExpression) null, (List<MySQLExpression>) null,
                false);
        mySQLInOperation0.getListElements();
        assertFalse(mySQLInOperation0.isTrue());
    }

    @Test
    public void test02() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
        LinkedList<MySQLExists> linkedList0 = new LinkedList<MySQLExists>();
        LinkedList<MySQLExpression> linkedList1 = new LinkedList<MySQLExpression>(linkedList0);
        linkedList1.add((MySQLExpression) mySQLConstant0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, linkedList1, false);
        mySQLInOperation0.getListElements();
        assertFalse(mySQLInOperation0.isTrue());
    }

    @Test
    public void test03() throws Throwable {
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation((MySQLExpression) null, (List<MySQLExpression>) null,
                false);
        mySQLInOperation0.getExpr();
        assertFalse(mySQLInOperation0.isTrue());
    }

    @Test
    public void test04() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                1271.5236114915);
        MySQLStringExpression mySQLStringExpression0 = new MySQLStringExpression((String) null,
                mySQLConstant_MySQLDoubleConstant0);
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.OR;
        MySQLBinaryOperation mySQLBinaryOperation0 = new MySQLBinaryOperation(mySQLStringExpression0,
                mySQLStringExpression0, mySQLBinaryOperation_MySQLBinaryOperator0);
        List<MySQLExpression> list0 = List.of((MySQLExpression) mySQLBinaryOperation0,
                (MySQLExpression) mySQLStringExpression0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant_MySQLDoubleConstant0, list0, false);
        // Undeclared exception!
        try {
            mySQLInOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation((MySQLExpression) null, (List<MySQLExpression>) null,
                false);
        // Undeclared exception!
        try {
            mySQLInOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLInOperation", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.SUM;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(linkedList0, mySQLAggregate_MySQLAggregateFunction0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLAggregate0, linkedList0, false);
        // Undeclared exception!
        try {
            mySQLInOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // PQS not supported for this operator
            //
        }
    }

    @Test
    public void test07() throws Throwable {
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.GREATEST;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[0];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLComputableFunction0, linkedList0, true);
        // Undeclared exception!
        try {
            mySQLInOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 1 out of bounds for length 0
            //
            verifyException("sqlancer.mysql.ast.MySQLComputableFunction$MySQLFunction", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
        LinkedList<MySQLExists> linkedList0 = new LinkedList<MySQLExists>();
        LinkedList<MySQLExpression> linkedList1 = new LinkedList<MySQLExpression>(linkedList0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, linkedList1, true);
        MySQLInOperation mySQLInOperation1 = new MySQLInOperation(mySQLInOperation0, linkedList1, false);
        MySQLConstant mySQLConstant1 = mySQLInOperation1.getExpectedValue();
        assertEquals(1L, mySQLConstant1.getInt());
    }

    @Test
    public void test09() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        List<MySQLExpression> list0 = List.of((MySQLExpression) mySQLConstant_MySQLNullConstant0,
                (MySQLExpression) mySQLConstant_MySQLNullConstant0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, list0, false);
        mySQLInOperation0.getExpectedValue();
        assertFalse(mySQLInOperation0.isTrue());
    }

    @Test
    public void test10() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLConstant mySQLConstant1 = MySQLConstant.createBoolean(false);
        List<MySQLExpression> list0 = List.of((MySQLExpression) mySQLConstant1, (MySQLExpression) mySQLConstant0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, list0, false);
        MySQLConstant mySQLConstant2 = mySQLInOperation0.getExpectedValue();
        assertFalse(mySQLConstant2.asBooleanNotNull());
    }

    @Test
    public void test11() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLConstant mySQLConstant1 = MySQLConstant.createUnsignedIntConstant((-3009L));
        List<MySQLExpression> list0 = List.of((MySQLExpression) mySQLConstant1, (MySQLExpression) mySQLConstant1);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, list0, false);
        // Undeclared exception!
        try {
            mySQLInOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLInOperation", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
        LinkedList<MySQLExists> linkedList0 = new LinkedList<MySQLExists>();
        LinkedList<MySQLExpression> linkedList1 = new LinkedList<MySQLExpression>(linkedList0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, linkedList1, true);
        MySQLConstant mySQLConstant1 = mySQLInOperation0.getExpectedValue();
        assertEquals(0L, mySQLConstant1.getInt());
    }

    @Test
    public void test13() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createUnsignedIntConstant((-489L));
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, (List<MySQLExpression>) null, true);
        // Undeclared exception!
        try {
            mySQLInOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLInOperation", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        LinkedList<MySQLExists> linkedList0 = new LinkedList<MySQLExists>();
        LinkedList<MySQLExpression> linkedList1 = new LinkedList<MySQLExpression>(linkedList0);
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, linkedList1, true);
        mySQLInOperation0.getExpectedValue();
        assertTrue(mySQLInOperation0.isTrue());
    }

    @Test
    public void test15() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
        LinkedList<MySQLExists> linkedList0 = new LinkedList<MySQLExists>();
        LinkedList<MySQLExpression> linkedList1 = new LinkedList<MySQLExpression>(linkedList0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, linkedList1, false);
        boolean boolean0 = mySQLInOperation0.isTrue();
        assertFalse(boolean0);
    }

    @Test
    public void test16() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
        LinkedList<MySQLExists> linkedList0 = new LinkedList<MySQLExists>();
        LinkedList<MySQLExpression> linkedList1 = new LinkedList<MySQLExpression>(linkedList0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, linkedList1, false);
        mySQLInOperation0.getExpr();
        assertFalse(mySQLInOperation0.isTrue());
    }

    @Test
    public void test17() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
        LinkedList<MySQLExists> linkedList0 = new LinkedList<MySQLExists>();
        LinkedList<MySQLExpression> linkedList1 = new LinkedList<MySQLExpression>(linkedList0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant0, linkedList1, false);
        mySQLInOperation0.getListElements();
        assertFalse(mySQLInOperation0.isTrue());
    }
}
