/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:48:38 GMT 2025
 */

package sqlancer.evosuite.mysql.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.mysql.ast.MySQLAggregate;
import sqlancer.mysql.ast.MySQLConstant;
import sqlancer.mysql.ast.MySQLExpression;
import sqlancer.mysql.ast.MySQLJoin;
import sqlancer.mysql.ast.MySQLSelect;
import sqlancer.mysql.MySQLGlobalState;
import sqlancer.mysql.MySQLSchema;

public class MySQLAggregate_ESTest {

    @Test
    public void test0() throws Throwable {
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction
                .valueOf("COUNT_DISTINCT");
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        List<MySQLExpression> list0 = mySQLSelect0.getOrderByClauses();
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(list0, mySQLAggregate_MySQLAggregateFunction0);
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction1 = mySQLAggregate0.getFunc();
        assertSame(mySQLAggregate_MySQLAggregateFunction0, mySQLAggregate_MySQLAggregateFunction1);
    }

    @Test
    public void test1() throws Throwable {
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.MIN_DISTINCT;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(linkedList0, mySQLAggregate_MySQLAggregateFunction0);
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction1 = mySQLAggregate0.getFunc();
        assertSame(mySQLAggregate_MySQLAggregateFunction0, mySQLAggregate_MySQLAggregateFunction1);
    }

    @Test
    public void test2() throws Throwable {
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.SUM;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate((List<MySQLExpression>) null,
                mySQLAggregate_MySQLAggregateFunction0);
        List<MySQLExpression> list0 = mySQLAggregate0.getExprs();
        assertNull(list0);
    }

    @Test
    public void test3() throws Throwable {
        LinkedList<MySQLExpression> linkedList0 = new LinkedList<MySQLExpression>();
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(0L);
        linkedList0.add((MySQLExpression) mySQLConstant0);
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.MIN_DISTINCT;
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(linkedList0, mySQLAggregate_MySQLAggregateFunction0);
        List<MySQLExpression> list0 = mySQLAggregate0.getExprs();
        assertEquals(1, list0.size());
    }

    @Test
    public void test4() throws Throwable {
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.SUM;
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        LinkedList<MySQLSchema.MySQLTable> linkedList0 = new LinkedList<MySQLSchema.MySQLTable>();
        List<MySQLJoin> list0 = MySQLJoin.getRandomJoinClauses(linkedList0, (MySQLGlobalState) null);
        mySQLSelect0.setJoinClauses(list0);
        List<MySQLExpression> list1 = mySQLSelect0.getJoinList();
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(list1, mySQLAggregate_MySQLAggregateFunction0);
        List<MySQLExpression> list2 = mySQLAggregate0.getExprs();
        assertSame(list2, list1);
    }

    @Test
    public void test5() throws Throwable {
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.SUM_DISTINCT;
        String string0 = mySQLAggregate_MySQLAggregateFunction0.getName();
        assertEquals("SUM", string0);
    }

    @Test
    public void test6() throws Throwable {
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.SUM_DISTINCT;
        boolean boolean0 = mySQLAggregate_MySQLAggregateFunction0.isVariadic();
        assertFalse(boolean0);
    }

    @Test
    public void test7() throws Throwable {
        MySQLAggregate.MySQLAggregateFunction mySQLAggregate_MySQLAggregateFunction0 = MySQLAggregate.MySQLAggregateFunction.MIN_DISTINCT;
        String string0 = mySQLAggregate_MySQLAggregateFunction0.getOption();
        assertEquals("DISTINCT", string0);
    }

    @Test
    public void test8() throws Throwable {
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        List<MySQLExpression> list0 = mySQLSelect0.getOrderByClauses();
        MySQLAggregate mySQLAggregate0 = new MySQLAggregate(list0, (MySQLAggregate.MySQLAggregateFunction) null);
        mySQLAggregate0.getFunc();
    }
}
