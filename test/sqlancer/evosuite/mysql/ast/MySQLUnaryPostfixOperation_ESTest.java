/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:53:00 GMT 2025
 */

package sqlancer.evosuite.mysql.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.mysql.ast.MySQLBinaryOperation;
import sqlancer.mysql.ast.MySQLComputableFunction;
import sqlancer.mysql.ast.MySQLConstant;
import sqlancer.mysql.ast.MySQLExpression;
import sqlancer.mysql.ast.MySQLInOperation;
import sqlancer.mysql.ast.MySQLText;
import sqlancer.mysql.ast.MySQLUnaryPostfixOperation;

public class MySQLUnaryPostfixOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant((-1L), false);
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        boolean boolean0 = mySQLUnaryPostfixOperation0.isNegated();
        assertFalse(boolean0);
    }

    @Test
    public void test01() throws Throwable {
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation((MySQLExpression) null,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        mySQLUnaryPostfixOperation0.getExpression();
        assertTrue(mySQLUnaryPostfixOperation0.isNegated());
    }

    @Test
    public void test02() throws Throwable {
        MySQLBinaryOperation.MySQLBinaryOperator mySQLBinaryOperation_MySQLBinaryOperator0 = MySQLBinaryOperation.MySQLBinaryOperator.AND;
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstantNotAsBoolean(0L);
        MySQLConstant mySQLConstant1 = mySQLBinaryOperation_MySQLBinaryOperator0.apply(mySQLConstant0, mySQLConstant0);
        MySQLInOperation mySQLInOperation0 = new MySQLInOperation(mySQLConstant1, (List<MySQLExpression>) null, true);
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLInOperation0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            mySQLUnaryPostfixOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLInOperation", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation((MySQLExpression) null,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        // Undeclared exception!
        try {
            mySQLUnaryPostfixOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLUnaryPostfixOperation", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        MySQLText mySQLText0 = new MySQLText(":%");
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLText0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            mySQLUnaryPostfixOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // PQS not supported for this operator
            //
        }
    }

    @Test
    public void test05() throws Throwable {
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.IFNULL;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[0];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(
                mySQLComputableFunction0, mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            mySQLUnaryPostfixOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.mysql.ast.MySQLComputableFunction$MySQLFunction$4", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        mySQLUnaryPostfixOperation0.setNegate(true);
        assertTrue(mySQLUnaryPostfixOperation0.isNegated());
    }

    @Test
    public void test07() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        MySQLConstant mySQLConstant1 = mySQLUnaryPostfixOperation0.getExpectedValue();
        assertFalse(mySQLConstant1.asBooleanNotNull());
    }

    @Test
    public void test08() throws Throwable {
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(
                mySQLConstant_MySQLNullConstant0, mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        MySQLConstant mySQLConstant0 = mySQLUnaryPostfixOperation0.getExpectedValue();
        assertEquals(1L, mySQLConstant0.getInt());
    }

    @Test
    public void test09() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        MySQLConstant mySQLConstant1 = mySQLUnaryPostfixOperation0.getExpectedValue();
        assertEquals(1L, mySQLConstant1.getInt());
    }

    @Test
    public void test10() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        MySQLConstant mySQLConstant1 = mySQLUnaryPostfixOperation0.getExpectedValue();
        assertTrue(mySQLConstant1.asBooleanNotNull());
    }

    @Test
    public void test11() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createNullConstant();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        MySQLConstant mySQLConstant1 = mySQLUnaryPostfixOperation0.getExpectedValue();
        assertEquals(0L, mySQLConstant1.getInt());
    }

    @Test
    public void test12() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        MySQLConstant mySQLConstant1 = mySQLUnaryPostfixOperation0.getExpectedValue();
        assertEquals(1L, mySQLConstant1.getInt());
    }

    @Test
    public void test13() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_NULL;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        MySQLConstant mySQLConstant1 = mySQLUnaryPostfixOperation0.getExpectedValue();
        assertEquals(0L, mySQLConstant1.getInt());
    }

    @Test
    public void test14() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_TRUE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        boolean boolean0 = mySQLUnaryPostfixOperation0.isNegated();
        assertTrue(boolean0);
    }

    @Test
    public void test15() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        mySQLUnaryPostfixOperation0.getExpression();
        assertTrue(mySQLUnaryPostfixOperation0.isNegated());
    }

    @Test
    public void test16() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createTrue();
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(mySQLConstant0,
                mySQLUnaryPostfixOperation_UnaryPostfixOperator0, true);
        mySQLUnaryPostfixOperation0.getOperator();
        assertTrue(mySQLUnaryPostfixOperation0.isNegated());
    }

    @Test
    public void test17() throws Throwable {
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                0.0);
        MySQLUnaryPostfixOperation.UnaryPostfixOperator mySQLUnaryPostfixOperation_UnaryPostfixOperator0 = MySQLUnaryPostfixOperation.UnaryPostfixOperator.IS_FALSE;
        MySQLUnaryPostfixOperation mySQLUnaryPostfixOperation0 = new MySQLUnaryPostfixOperation(
                mySQLConstant_MySQLDoubleConstant0, mySQLUnaryPostfixOperation_UnaryPostfixOperator0, false);
        // Undeclared exception!
        try {
            mySQLUnaryPostfixOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }
}
