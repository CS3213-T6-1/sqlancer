/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:46:23 GMT 2025
 */

package sqlancer.evosuite.mysql.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.mysql.ast.MySQLBetweenOperation;
import sqlancer.mysql.ast.MySQLBinaryComparisonOperation;
import sqlancer.mysql.ast.MySQLCastOperation;
import sqlancer.mysql.ast.MySQLComputableFunction;
import sqlancer.mysql.ast.MySQLConstant;
import sqlancer.mysql.ast.MySQLExpression;
import sqlancer.mysql.ast.MySQLSelect;
import sqlancer.mysql.ast.MySQLText;

public class MySQLBinaryComparisonOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant((-2401L),
                "trigger");
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLIntConstant0.castAs(mySQLCastOperation_CastType0);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant_MySQLIntConstant0, mySQLConstant0,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        MySQLConstant mySQLConstant1 = mySQLBinaryComparisonOperation0.getExpectedValue();
        assertFalse(mySQLConstant1.asBooleanNotNull());
    }

    @Test
    public void test01() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(5L, false);
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLIntConstant0.castAs(mySQLCastOperation_CastType0);
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant_MySQLIntConstant0,
                mySQLConstant0, mySQLConstant0);
        MySQLConstant mySQLConstant1 = mySQLBetweenOperation0.getExpectedValue();
        assertEquals("1", mySQLConstant1.getTextRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LESS;
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(3L, "Key");
        MySQLCastOperation.CastType mySQLCastOperation_CastType0 = MySQLCastOperation.CastType.UNSIGNED;
        MySQLConstant mySQLConstant0 = mySQLConstant_MySQLIntConstant0.castAs(mySQLCastOperation_CastType0);
        MySQLConstant mySQLConstant1 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant0, mySQLConstant_MySQLIntConstant0);
        assertNotSame(mySQLConstant1, mySQLConstant0);
    }

    @Test
    public void test03() throws Throwable {
        MySQLConstant.MySQLIntConstant mySQLConstant_MySQLIntConstant0 = new MySQLConstant.MySQLIntConstant(0L, true);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.EQUALS;
        MySQLBetweenOperation mySQLBetweenOperation0 = new MySQLBetweenOperation(mySQLConstant_MySQLIntConstant0,
                mySQLConstant_MySQLIntConstant0, mySQLConstant_MySQLIntConstant0);
        MySQLConstant mySQLConstant0 = mySQLBetweenOperation0.getExpectedValue();
        MySQLConstant mySQLConstant1 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant_MySQLIntConstant0, mySQLConstant0);
        assertFalse(mySQLConstant1.asBooleanNotNull());
    }

    @Test
    public void test04() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                (MySQLExpression) null, (MySQLExpression) null,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        MySQLExpression mySQLExpression0 = mySQLBinaryComparisonOperation0.getRight();
        assertNull(mySQLExpression0);
    }

    @Test
    public void test05() throws Throwable {
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLSelect0, mySQLSelect0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator1 = mySQLBinaryComparisonOperation0
                .getOp();
        assertSame(mySQLBinaryComparisonOperation_BinaryComparisonOperator0,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator1);
    }

    @Test
    public void test06() throws Throwable {
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLSelect0, mySQLSelect0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        MySQLExpression mySQLExpression0 = mySQLBinaryComparisonOperation0.getLeft();
        assertSame(mySQLSelect0, mySQLExpression0);
    }

//    @Test
//    public void test07() throws Throwable {
//        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator
//                .getRandom();
//        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
//                (-3507.2945984138));
//        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
//                mySQLConstant_MySQLDoubleConstant0, mySQLConstant_MySQLDoubleConstant0,
//                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
//        MySQLConstant mySQLConstant0 = mySQLBinaryComparisonOperation0.getExpectedValue();
//        assertNull(mySQLConstant0);
//    }

    @Test
    public void test08() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createIntConstant(1001L);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant0, mySQLConstant0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        MySQLConstant mySQLConstant1 = mySQLBinaryComparisonOperation0.getExpectedValue();
        MySQLConstant mySQLConstant2 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant0, mySQLConstant1);
        assertTrue(mySQLConstant2.asBooleanNotNull());
        assertEquals("0", mySQLConstant1.getTextRepresentation());
    }

    @Test
    public void test09() throws Throwable {
        MySQLSelect mySQLSelect0 = new MySQLSelect();
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLSelect0, mySQLSelect0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLBinaryComparisonOperation$BinaryComparisonOperator$2", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        MySQLText mySQLText0 = new MySQLText("3.id]HVSyA");
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(mySQLText0,
                mySQLText0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // PQS not supported for this operator
            //
        }
    }

    @Test
    public void test11() throws Throwable {
        MySQLComputableFunction.MySQLFunction mySQLComputableFunction_MySQLFunction0 = MySQLComputableFunction.MySQLFunction.LEAST;
        MySQLExpression[] mySQLExpressionArray0 = new MySQLExpression[0];
        MySQLComputableFunction mySQLComputableFunction0 = new MySQLComputableFunction(
                mySQLComputableFunction_MySQLFunction0, mySQLExpressionArray0);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLComputableFunction0, mySQLComputableFunction0,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 1 out of bounds for length 0
            //
            verifyException("sqlancer.mysql.ast.MySQLComputableFunction$MySQLFunction", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(false);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant0, mySQLConstant_MySQLNullConstant0,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        MySQLConstant mySQLConstant1 = mySQLBinaryComparisonOperation0.getExpectedValue();
        assertFalse(mySQLConstant1.isSigned());
    }

    @Test
    public void test13() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLConstant mySQLConstant0 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0);
        assertFalse(mySQLConstant0.isString());
    }

    @Test
    public void test14() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        MySQLConstant mySQLConstant1 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant0, mySQLConstant0);
        MySQLConstant mySQLConstant2 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant1, mySQLConstant0);
        assertEquals(1L, mySQLConstant2.getInt());
    }

    @Test
    public void test15() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.GREATER_EQUALS;
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLConstant mySQLConstant0 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0);
        assertNotSame(mySQLConstant0, mySQLConstant_MySQLNullConstant0);
    }

    @Test
    public void test16() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLConstant mySQLConstant1 = MySQLConstant.createTrue();
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        MySQLConstant mySQLConstant2 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant0, mySQLConstant0);
        MySQLConstant mySQLConstant3 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant1, mySQLConstant2);
        assertTrue(mySQLConstant3.asBooleanNotNull());
        assertFalse(mySQLConstant2.asBooleanNotNull());
    }

    @Test
    public void test17() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.GREATER;
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLConstant mySQLConstant0 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0);
        assertNull(mySQLConstant0.getType());
    }

    @Test
    public void test18() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLConstant mySQLConstant0 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0);
        assertFalse(mySQLConstant0.isInt());
    }

    @Test
    public void test19() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createFalse();
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        MySQLConstant mySQLConstant1 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant0, mySQLConstant0);
        assertNotNull(mySQLConstant1);

        MySQLConstant mySQLConstant2 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant0, mySQLConstant1);
        assertNotSame(mySQLConstant2, mySQLConstant1);
        assertEquals("1", mySQLConstant2.getTextRepresentation());
    }

    @Test
    public void test20() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.NOT_EQUALS;
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLConstant mySQLConstant0 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0
                .getExpectedValue(mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0);
        assertNotSame(mySQLConstant0, mySQLConstant_MySQLNullConstant0);
    }

    @Test
    public void test21() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        String string0 = mySQLBinaryComparisonOperation_BinaryComparisonOperator0.getTextRepresentation();
        assertEquals("<=", string0);
    }

    @Test
    public void test22() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createStringConstant("");
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LESS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant0, mySQLConstant0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLTextConstant", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        MySQLConstant.MySQLDoubleConstant mySQLConstant_MySQLDoubleConstant0 = new MySQLConstant.MySQLDoubleConstant(
                (-1.0));
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant_MySQLDoubleConstant0, mySQLConstant_MySQLDoubleConstant0,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        // Undeclared exception!
        try {
            mySQLBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // not applicable for PQS evaluation!
            //
            verifyException("sqlancer.mysql.ast.MySQLConstant$MySQLNoPQSConstant", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LIKE;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                (MySQLExpression) null, (MySQLExpression) null,
                mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        MySQLExpression mySQLExpression0 = mySQLBinaryComparisonOperation0.getLeft();
        assertNull(mySQLExpression0);
    }

    @Test
    public void test25() throws Throwable {
        MySQLConstant mySQLConstant0 = MySQLConstant.createBoolean(true);
        MySQLBinaryComparisonOperation.BinaryComparisonOperator mySQLBinaryComparisonOperation_BinaryComparisonOperator0 = MySQLBinaryComparisonOperation.BinaryComparisonOperator.LESS_EQUALS;
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant0, mySQLConstant0, mySQLBinaryComparisonOperation_BinaryComparisonOperator0);
        MySQLExpression mySQLExpression0 = mySQLBinaryComparisonOperation0.getRight();
        assertSame(mySQLExpression0, mySQLConstant0);
    }

    @Test
    public void test26() throws Throwable {
        MySQLConstant.MySQLNullConstant mySQLConstant_MySQLNullConstant0 = new MySQLConstant.MySQLNullConstant();
        MySQLBinaryComparisonOperation mySQLBinaryComparisonOperation0 = new MySQLBinaryComparisonOperation(
                mySQLConstant_MySQLNullConstant0, mySQLConstant_MySQLNullConstant0,
                (MySQLBinaryComparisonOperation.BinaryComparisonOperator) null);
        mySQLBinaryComparisonOperation0.getOp();
    }
}
