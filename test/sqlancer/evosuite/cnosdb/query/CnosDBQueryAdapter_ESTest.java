/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 03:39:56 GMT 2025
 */

package sqlancer.evosuite.cnosdb.query;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.cnosdb.query.CnosDBOtherQuery;
import sqlancer.cnosdb.query.CnosDBSelectQuery;
import sqlancer.common.query.ExpectedErrors;

public class CnosDBQueryAdapter_ESTest {

    @Test
    public void test00() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery((String) null, expectedErrors0);
        String string0 = cnosDBSelectQuery0.getQueryString();
        assertNull(string0);
    }

    @Test
    public void test01() throws Throwable {
        String[] stringArray0 = new String[3];
        ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("Gfqv|<sg/GnA", expectedErrors0);
        String string0 = cnosDBSelectQuery0.getQueryString();
        assertEquals("Gfqv|<sg/GnA", string0);
    }

    @Test
    public void test02() throws Throwable {
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("", (ExpectedErrors) null);
        String string0 = cnosDBSelectQuery0.getQueryString();
        assertEquals("", string0);
    }

    @Test
    public void test03() throws Throwable {
        String[] stringArray0 = new String[5];
        ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery(stringArray0[0], expectedErrors0);
        String string0 = cnosDBSelectQuery0.getLogString();
        assertNull(string0);
    }

    @Test
    public void test04() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery(".t_d$ M>V", expectedErrors0);
        String string0 = cnosDBSelectQuery0.getLogString();
        assertEquals(".t_d$ M>V", string0);
    }

    @Test
    public void test05() throws Throwable {
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("", (ExpectedErrors) null);
        ExpectedErrors expectedErrors0 = cnosDBSelectQuery0.getExpectedErrors();
        assertNull(expectedErrors0);
    }

    @Test
    public void test06() throws Throwable {
        String[] stringArray0 = new String[9];
        ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
        CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery("12", expectedErrors0);
        boolean boolean0 = cnosDBOtherQuery0.couldAffectSchema();
        assertTrue(boolean0);
    }

    @Test
    public void test07() throws Throwable {
        String[] stringArray0 = new String[5];
        ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery(stringArray0[0], expectedErrors0);
        boolean boolean0 = cnosDBSelectQuery0.couldAffectSchema();
        assertFalse(boolean0);
    }

    @Test
    public void test08() throws Throwable {
        String[] stringArray0 = new String[3];
        ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("Gfqv|<sg/GnA", expectedErrors0);
        String string0 = cnosDBSelectQuery0.getUnterminatedQueryString();
        assertNull(string0);
    }

    @Test
    public void test09() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("T1%cZm", expectedErrors0);
        ExpectedErrors expectedErrors1 = cnosDBSelectQuery0.getExpectedErrors();
        assertSame(expectedErrors1, expectedErrors0);
    }

    @Test
    public void test10() throws Throwable {
        CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("", (ExpectedErrors) null);
        String string0 = cnosDBSelectQuery0.getLogString();
        assertEquals("", string0);
    }
}
