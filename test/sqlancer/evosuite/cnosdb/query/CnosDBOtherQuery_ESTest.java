/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:46:13 GMT 2025
 */

package sqlancer.evosuite.cnosdb.query;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import sqlancer.cnosdb.CnosDBGlobalState;
import sqlancer.cnosdb.query.CnosDBOtherQuery;
import sqlancer.common.query.ExpectedErrors;

public class CnosDBOtherQuery_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        String[] stringArray0 = new String[0];
        ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
        CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery("@+(L{ m}", expectedErrors0);
        CnosDBGlobalState cnosDBGlobalState0 = new CnosDBGlobalState();
        try {
            cnosDBOtherQuery0.execute(cnosDBGlobalState0, stringArray0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.query.ExpectedErrors", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery((String) null, (ExpectedErrors) null);
        boolean boolean0 = cnosDBOtherQuery0.couldAffectSchema();
        assertTrue(boolean0);
    }

    @Test
    public void test2() throws Throwable {
        CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery("", (ExpectedErrors) null);
        CnosDBGlobalState cnosDBGlobalState0 = new CnosDBGlobalState();
        try {
            cnosDBOtherQuery0.execute(cnosDBGlobalState0, (String[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cnosdb.query.CnosDBOtherQuery", e);
        }
    }
}
