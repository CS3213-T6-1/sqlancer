/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 01:51:35 GMT 2025
 */

package sqlancer.evosuite.cnosdb;

import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import org.junit.jupiter.api.Test;

import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.client.CnosDBClient;
import sqlancer.cnosdb.client.CnosDBConnection;
import sqlancer.cnosdb.CnosDBGlobalState;
import sqlancer.cnosdb.CnosDBSchema;

public class CnosDBSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        CnosDBConnection cnosDBConnection0 = new CnosDBConnection((CnosDBClient) null);
        try {
            CnosDBSchema.getTableColumns(cnosDBConnection0, "Zvan4<7i,}L");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cnosdb.CnosDBSchema", e);
        }
    }

    @Test
    public void test01() throws Throwable {
        CnosDBConnection cnosDBConnection0 = new CnosDBConnection((CnosDBClient) null);
        try {
            CnosDBSchema.fromConnection(cnosDBConnection0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cnosdb.CnosDBSchema", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
        CnosDBSchema cnosDBSchema0 = new CnosDBSchema(linkedList0, "sqlancer.cnosdb.CnosDBSchema$CnosDBColumn");
        String string0 = cnosDBSchema0.getDatabaseName();
        assertEquals("sqlancer.cnosdb.CnosDBSchema$CnosDBColumn", string0);
    }

    @Test
    public void test03() throws Throwable {
        LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
        CnosDBSchema cnosDBSchema0 = new CnosDBSchema(linkedList0, "");
        String string0 = cnosDBSchema0.getDatabaseName();
        assertEquals("", string0);
    }

    @Test
    public void test04() throws Throwable {
        LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
        CnosDBSchema cnosDBSchema0 = new CnosDBSchema(linkedList0, "boolean");
        // Undeclared exception!
        try {
            cnosDBSchema0.getRandomTableNonEmptyTables();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test05() throws Throwable {
        // Undeclared exception!
        try {
            CnosDBSchema.getColumnType((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cnosdb.CnosDBSchema", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        CnosDBSchema cnosDBSchema0 = null;
        try {
            cnosDBSchema0 = new CnosDBSchema((List<CnosDBSchema.CnosDBTable>) null, "bigint");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
        CnosDBSchema.CnosDBFieldColumn cnosDBSchema_CnosDBFieldColumn0 = new CnosDBSchema.CnosDBFieldColumn("",
                cnosDBSchema_CnosDBDataType0);
        CnosDBSchema.CnosDBTimeColumn cnosDBSchema_CnosDBTimeColumn0 = new CnosDBSchema.CnosDBTimeColumn();
        List<CnosDBSchema.CnosDBColumn> list0 = List.of((CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBFieldColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBFieldColumn0);
        CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("", list0);
        List<CnosDBSchema.CnosDBColumn> list1 = cnosDBSchema_CnosDBTable0.getRandomColumnsWithOnlyOneField();
        assertEquals(1, list1.size());
    }

    @Test
    public void test08() throws Throwable {
        CnosDBSchema.CnosDBTimeColumn cnosDBSchema_CnosDBTimeColumn0 = new CnosDBSchema.CnosDBTimeColumn();
        CnosDBSchema.CnosDBTagColumn cnosDBSchema_CnosDBTagColumn0 = new CnosDBSchema.CnosDBTagColumn("h$,I|2p|3d_");
        List<CnosDBSchema.CnosDBColumn> list0 = List.of((CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTagColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0);
        CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable(",y}z", list0);
        List<CnosDBSchema.CnosDBColumn> list1 = cnosDBSchema_CnosDBTable0.getRandomColumnsWithOnlyOneField();
        assertTrue(list1.isEmpty());
    }

    @Test
    public void test09() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
        CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = new CnosDBSchema.CnosDBColumn("`[",
                cnosDBSchema_CnosDBDataType0);
        List<CnosDBSchema.CnosDBColumn> list0 = List.of(cnosDBSchema_CnosDBColumn0, cnosDBSchema_CnosDBColumn0,
                cnosDBSchema_CnosDBColumn0);
        CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("`[", list0);
        // Undeclared exception!
        try {
            cnosDBSchema_CnosDBTable0.getRandomColumnsWithOnlyOneField();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test10() throws Throwable {
        // Undeclared exception!
        try {
            CnosDBSchema.getColumnType("H:D/GS");
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // H:D/GS
            //
        }
    }

    @Test
    public void test11() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("bigint unsigned");
        assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBSchema_CnosDBDataType0);
    }

    @Test
    public void test12() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("unsigned");
        assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBSchema_CnosDBDataType0);
    }

    @Test
    public void test13() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("timestamp(nanosecond)");
        CnosDBSchema.CnosDBFieldColumn cnosDBSchema_CnosDBFieldColumn0 = null;
        try {
            cnosDBSchema_CnosDBFieldColumn0 = new CnosDBSchema.CnosDBFieldColumn("timestamp(nanosecond)",
                    cnosDBSchema_CnosDBDataType0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test14() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("STRING");
        assertEquals(CnosDBSchema.CnosDBDataType.STRING, cnosDBSchema_CnosDBDataType0);
    }

    @Test
    public void test15() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("DOUBLE");
        assertEquals(CnosDBSchema.CnosDBDataType.DOUBLE, cnosDBSchema_CnosDBDataType0);
    }

    @Test
    public void test16() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("boolean");
        assertEquals(CnosDBSchema.CnosDBDataType.BOOLEAN, cnosDBSchema_CnosDBDataType0);
    }

    @Test
    public void test17() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("bigint");
        assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBSchema_CnosDBDataType0);
    }

    @Test
    public void test18() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType
                .getRandomTypeWithoutTimeStamp();
        assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBSchema_CnosDBDataType0);
    }

    @Test
    public void test19() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.getRandomType();
        assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBSchema_CnosDBDataType0);
    }

    @Test
    public void test20() throws Throwable {
        CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = CnosDBSchema.CnosDBColumn
                .createDummy("sqlancer.cnosdb.CnosDBSchema$CnosDBTagColumn");
        CnosDBSchema.CnosDBTimeColumn cnosDBSchema_CnosDBTimeColumn0 = new CnosDBSchema.CnosDBTimeColumn();
        List<CnosDBSchema.CnosDBColumn> list0 = List.of(cnosDBSchema_CnosDBColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0, cnosDBSchema_CnosDBColumn0);
        CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("boolean", list0);
        List<CnosDBSchema.CnosDBColumn> list1 = cnosDBSchema_CnosDBTable0.getRandomNonEmptyColumnSubset();
        assertEquals(2, list1.size());
    }

    @Test
    public void test21() throws Throwable {
        HashMap<CnosDBSchema.CnosDBColumn, CnosDBConstant> hashMap0 = new HashMap<CnosDBSchema.CnosDBColumn, CnosDBConstant>();
        CnosDBSchema.CnosDBRowValue cnosDBSchema_CnosDBRowValue0 = new CnosDBSchema.CnosDBRowValue(
                (CnosDBSchema.CnosDBTables) null, hashMap0);
    }

    @Test
    public void test22() throws Throwable {
        LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
        CnosDBSchema.CnosDBTables cnosDBSchema_CnosDBTables0 = new CnosDBSchema.CnosDBTables(linkedList0);
        CnosDBConnection cnosDBConnection0 = new CnosDBConnection((CnosDBClient) null);
        CnosDBSchema.CnosDBRowValue cnosDBSchema_CnosDBRowValue0 = cnosDBSchema_CnosDBTables0
                .getRandomRowValue(cnosDBConnection0);
        assertNull(cnosDBSchema_CnosDBRowValue0);
    }

    @Test
    public void test23() throws Throwable {
        LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
        CnosDBSchema.CnosDBTables cnosDBSchema_CnosDBTables0 = new CnosDBSchema.CnosDBTables(linkedList0);
        List<CnosDBSchema.CnosDBColumn> list0 = cnosDBSchema_CnosDBTables0.getRandomColumnsWithOnlyOneField();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test24() throws Throwable {
        LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
        CnosDBSchema cnosDBSchema0 = new CnosDBSchema(linkedList0, (String) null);
        String string0 = cnosDBSchema0.getDatabaseName();
        assertNull(string0);
    }

    @Test
    public void test25() throws Throwable {
        CnosDBSchema.CnosDBTimeColumn cnosDBSchema_CnosDBTimeColumn0 = new CnosDBSchema.CnosDBTimeColumn();
        List<CnosDBSchema.CnosDBColumn> list0 = List.of((CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0);
        CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("kuE.", list0);
        List<CnosDBSchema.CnosDBTable> list1 = List.of(cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0,
                cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0,
                cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0);
        CnosDBSchema cnosDBSchema0 = new CnosDBSchema(list1, (String) null);
        CnosDBSchema.CnosDBTables cnosDBSchema_CnosDBTables0 = cnosDBSchema0.getRandomTableNonEmptyTables();
        assertNotNull(cnosDBSchema_CnosDBTables0);
    }

    @Test
    public void test26() throws Throwable {
        CnosDBSchema.CnosDBTimeColumn cnosDBSchema_CnosDBTimeColumn0 = new CnosDBSchema.CnosDBTimeColumn();
        CnosDBSchema.CnosDBTagColumn cnosDBSchema_CnosDBTagColumn0 = new CnosDBSchema.CnosDBTagColumn("h$,I|2p|3d_");
        List<CnosDBSchema.CnosDBColumn> list0 = List.of((CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTagColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0,
                (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0);
        CnosDBGlobalState cnosDBGlobalState0 = new CnosDBGlobalState();
        CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("fL(#HQP", list0);
        long long0 = cnosDBSchema_CnosDBTable0.getNrRows(cnosDBGlobalState0);
        assertEquals(0L, long0);
    }
}
