/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 02:54:45 GMT 2025
 */

package sqlancer.evosuite.cnosdb.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.ast.CnosDBExpression;
import sqlancer.cnosdb.ast.CnosDBPostfixOperation;
import sqlancer.cnosdb.CnosDBSchema;

public class CnosDBPostfixOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator
                .getRandom();
        CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation((CnosDBExpression) null,
                cnosDBPostfixOperation_PostfixOperator0);
        CnosDBExpression cnosDBExpression0 = cnosDBPostfixOperation0.getExpression();
        assertNull(cnosDBExpression0);
    }

    @Test
    public void test01() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_TRUE;
        CnosDBPostfixOperation cnosDBPostfixOperation0 = (CnosDBPostfixOperation) CnosDBPostfixOperation
                .create((CnosDBExpression) null, cnosDBPostfixOperation_PostfixOperator0);
        assertEquals("IS TRUE", cnosDBPostfixOperation0.getOperatorTextRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        CnosDBPostfixOperation cnosDBPostfixOperation0 = null;
        try {
            cnosDBPostfixOperation0 = new CnosDBPostfixOperation((CnosDBExpression) null,
                    (CnosDBPostfixOperation.PostfixOperator) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cnosdb.ast.CnosDBPostfixOperation$PostfixOperator", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_FALSE;
        CnosDBSchema.CnosDBDataType[] cnosDBSchema_CnosDBDataTypeArray0 = cnosDBPostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(1, cnosDBSchema_CnosDBDataTypeArray0.length);
    }

    @Test
    public void test04() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
        CnosDBSchema.CnosDBDataType[] cnosDBSchema_CnosDBDataTypeArray0 = cnosDBPostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(1, cnosDBSchema_CnosDBDataTypeArray0.length);
    }

    @Test
    public void test05() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_TRUE;
        CnosDBSchema.CnosDBDataType[] cnosDBSchema_CnosDBDataTypeArray0 = cnosDBPostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(1, cnosDBSchema_CnosDBDataTypeArray0.length);
    }

    @Test
    public void test06() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_FALSE;
        CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation((CnosDBExpression) null,
                cnosDBPostfixOperation_PostfixOperator0);
        String string0 = cnosDBPostfixOperation0.getOperatorTextRepresentation();
        assertEquals("IS FALSE", string0);
    }

    @Test
    public void test07() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NOT_NULL;
        CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
        CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBConstant0,
                cnosDBPostfixOperation_PostfixOperator0);
        CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = (CnosDBConstant.BooleanConstant) cnosDBPostfixOperation0
                .getExpression();
        assertFalse(cnosDBConstant_BooleanConstant0.isString());
    }

    @Test
    public void test08() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_FALSE;
        CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation((CnosDBExpression) null,
                cnosDBPostfixOperation_PostfixOperator0);
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = cnosDBPostfixOperation0.getExpressionType();
        assertEquals(CnosDBSchema.CnosDBDataType.BOOLEAN, cnosDBSchema_CnosDBDataType0);
    }

    @Test
    public void test09() throws Throwable {
        // Undeclared exception!
        try {
            CnosDBPostfixOperation.create((CnosDBExpression) null, (CnosDBPostfixOperation.PostfixOperator) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cnosdb.ast.CnosDBPostfixOperation$PostfixOperator", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator
                .getRandom();
        String string0 = cnosDBPostfixOperation_PostfixOperator0.getTextRepresentation();
        assertEquals("IS_NULL", string0);
    }

    @Test
    public void test11() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_UNKNOWN;
        CnosDBSchema.CnosDBDataType[] cnosDBSchema_CnosDBDataTypeArray0 = cnosDBPostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(1, cnosDBSchema_CnosDBDataTypeArray0.length);
    }

    @Test
    public void test12() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NOT_NULL;
        CnosDBSchema.CnosDBDataType[] cnosDBSchema_CnosDBDataTypeArray0 = cnosDBPostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(6, cnosDBSchema_CnosDBDataTypeArray0.length);
    }

    @Test
    public void test13() throws Throwable {
        CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NULL;
        CnosDBSchema.CnosDBDataType[] cnosDBSchema_CnosDBDataTypeArray0 = cnosDBPostfixOperation_PostfixOperator0
                .getInputDataTypes();
        assertEquals(6, cnosDBSchema_CnosDBDataTypeArray0.length);
    }
}
