/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:26:18 GMT 2025
 */

package sqlancer.evosuite.cnosdb.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;

import org.junit.jupiter.api.Test;

import sqlancer.cnosdb.ast.CnosDBBinaryComparisonOperation;
import sqlancer.cnosdb.ast.CnosDBCastOperation;
import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.ast.CnosDBExpression;
import sqlancer.cnosdb.ast.CnosDBSelect;
import sqlancer.cnosdb.CnosDBCompoundDataType;
import sqlancer.cnosdb.CnosDBSchema;

public class CnosDBCastOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
        CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
        CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant_CnosDBNullConstant0,
                cnosDBCompoundDataType0);
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = cnosDBCastOperation0.getType();
        assertEquals(CnosDBSchema.CnosDBDataType.STRING, cnosDBSchema_CnosDBDataType1);
    }

    @Test
    public void test01() throws Throwable {
        CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(1225L);
        CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType
                .create((CnosDBSchema.CnosDBDataType) null);
        CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
        cnosDBCastOperation0.getExpressionType();
    }

    @Test
    public void test02() throws Throwable {
        CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0 = CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator.GREATER_EQUALS;
        CnosDBBinaryComparisonOperation cnosDBBinaryComparisonOperation0 = new CnosDBBinaryComparisonOperation(
                (CnosDBExpression) null, (CnosDBExpression) null,
                cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0);
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
        CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
        CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBBinaryComparisonOperation0,
                cnosDBCompoundDataType0);
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = cnosDBCastOperation0.getExpressionType();
        assertEquals(CnosDBSchema.CnosDBDataType.TIMESTAMP, cnosDBSchema_CnosDBDataType1);
    }

    @Test
    public void test03() throws Throwable {
        CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0 = CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator.GREATER_EQUALS;
        CnosDBBinaryComparisonOperation cnosDBBinaryComparisonOperation0 = new CnosDBBinaryComparisonOperation(
                (CnosDBExpression) null, (CnosDBExpression) null,
                cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0);
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
        CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
        CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBBinaryComparisonOperation0,
                cnosDBCompoundDataType0);
        CnosDBCompoundDataType cnosDBCompoundDataType1 = cnosDBCastOperation0.getCompoundType();
        assertSame(cnosDBCompoundDataType1, cnosDBCompoundDataType0);
    }

    @Test
    public void test04() throws Throwable {
        CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(true);
        CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0,
                (CnosDBCompoundDataType) null);
        // Undeclared exception!
        try {
            cnosDBCastOperation0.getType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cnosdb.ast.CnosDBCastOperation", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        // Undeclared exception!
        try {
            CnosDBCastOperation.canCastTo((CnosDBSchema.CnosDBDataType) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cnosdb.ast.CnosDBCastOperation", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
        List<CnosDBSchema.CnosDBDataType> list0 = CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
        assertTrue(list0.contains(cnosDBSchema_CnosDBDataType0));
    }

    @Test
    public void test07() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
        List<CnosDBSchema.CnosDBDataType> list0 = CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
        assertEquals(3, list0.size());
    }

    @Test
    public void test08() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
        List<CnosDBSchema.CnosDBDataType> list0 = CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test09() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
        List<CnosDBSchema.CnosDBDataType> list0 = CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
        assertEquals(6, list0.size());
    }

    @Test
    public void test10() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
        List<CnosDBSchema.CnosDBDataType> list0 = CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test11() throws Throwable {
        CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
        List<CnosDBSchema.CnosDBDataType> list0 = CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test12() throws Throwable {
        CnosDBCastOperation cnosDBCastOperation0 = null;
        try {
            cnosDBCastOperation0 = new CnosDBCastOperation((CnosDBExpression) null, (CnosDBCompoundDataType) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test13() throws Throwable {
        CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
        CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0,
                (CnosDBCompoundDataType) null);
        CnosDBCompoundDataType cnosDBCompoundDataType0 = cnosDBCastOperation0.getCompoundType();
        assertNull(cnosDBCompoundDataType0);
    }

    @Test
    public void test14() throws Throwable {
        CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
        CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBSelect0,
                (CnosDBCompoundDataType) null);
        CnosDBSelect cnosDBSelect1 = (CnosDBSelect) cnosDBCastOperation0.getExpression();
        assertEquals(CnosDBSelect.SelectType.ALL, cnosDBSelect1.getSelectOption());
    }

    @Test
    public void test15() throws Throwable {
        CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(1225L);
        CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType
                .create((CnosDBSchema.CnosDBDataType) null);
        CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
        cnosDBCastOperation0.getType();
    }

    @Test
    public void test16() throws Throwable {
        CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(true);
        CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0,
                (CnosDBCompoundDataType) null);
        // Undeclared exception!
        try {
            cnosDBCastOperation0.getExpressionType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.cnosdb.ast.CnosDBCastOperation", e);
        }
    }
}
