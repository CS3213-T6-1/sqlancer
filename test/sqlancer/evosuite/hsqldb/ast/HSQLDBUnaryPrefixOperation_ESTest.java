/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:08:06 GMT 2025
 */

package sqlancer.evosuite.hsqldb.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.hsqldb.ast.HSQLDBConstant;
import sqlancer.hsqldb.ast.HSQLDBExpression;
import sqlancer.hsqldb.ast.HSQLDBSelect;
import sqlancer.hsqldb.ast.HSQLDBUnaryPrefixOperation;
import sqlancer.hsqldb.HSQLDBSchema;

public class HSQLDBUnaryPrefixOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        HSQLDBExpression hSQLDBExpression0 = HSQLDBConstant.createBinaryConstant((-27L), 3704904);
        HSQLDBUnaryPrefixOperation hSQLDBUnaryPrefixOperation0 = new HSQLDBUnaryPrefixOperation(
                (HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator) null, hSQLDBExpression0);
        // Undeclared exception!
        try {
            hSQLDBUnaryPrefixOperation0.getOperatorRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.ast.HSQLDBUnaryPrefixOperation", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0 = HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator.UNARY_PLUS;
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0
                .getExpressionType();
        assertEquals(HSQLDBSchema.HSQLDBDataType.INTEGER, hSQLDBSchema_HSQLDBDataType0);
    }

    @Test
    public void test2() throws Throwable {
        HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0 = HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator.UNARY_MINUS;
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0
                .getExpressionType();
        assertEquals(HSQLDBSchema.HSQLDBDataType.INTEGER, hSQLDBSchema_HSQLDBDataType0);
    }

    @Test
    public void test3() throws Throwable {
        HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0 = HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator.NOT;
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0
                .getExpressionType();
        assertEquals(HSQLDBSchema.HSQLDBDataType.BOOLEAN, hSQLDBSchema_HSQLDBDataType0);
    }

    @Test
    public void test4() throws Throwable {
        HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0 = HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator.NOT;
        HSQLDBSelect hSQLDBSelect0 = new HSQLDBSelect();
        HSQLDBUnaryPrefixOperation hSQLDBUnaryPrefixOperation0 = new HSQLDBUnaryPrefixOperation(
                hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0, hSQLDBSelect0);
        String string0 = hSQLDBUnaryPrefixOperation0.getOperatorRepresentation();
        assertEquals("NOT", string0);
    }

    @Test
    public void test5() throws Throwable {
        HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0 = HSQLDBUnaryPrefixOperation.HSQLDBUnaryPrefixOperator.NOT;
        String string0 = hSQLDBUnaryPrefixOperation_HSQLDBUnaryPrefixOperator0.getTextRepresentation();
        assertEquals("NOT", string0);
    }
}
