/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:22:26 GMT 2025
 */

package sqlancer.evosuite.hsqldb;

import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import org.junit.jupiter.api.Test;
import sqlancer.hsqldb.ast.HSQLDBConstant;
import sqlancer.hsqldb.ast.HSQLDBExpression;
import sqlancer.hsqldb.ast.HSQLDBJoin;
import sqlancer.hsqldb.ast.HSQLDBSelect;
import sqlancer.hsqldb.ast.HSQLDBTableReference;
import sqlancer.hsqldb.HSQLDBSchema;
import sqlancer.hsqldb.HSQLDBToStringVisitor;

public class HSQLDBToStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("", linkedList0, true);
        HSQLDBTableReference hSQLDBTableReference0 = new HSQLDBTableReference(hSQLDBSchema_HSQLDBTable0);
        String string0 = HSQLDBToStringVisitor.asString(hSQLDBTableReference0);
        assertEquals("", string0);
    }

    @Test
    public void test01() throws Throwable {
        HSQLDBToStringVisitor hSQLDBToStringVisitor0 = new HSQLDBToStringVisitor();
        // Undeclared exception!
        try {
            hSQLDBToStringVisitor0.visitSpecific((HSQLDBExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.HSQLDBToStringVisitor", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        HSQLDBToStringVisitor hSQLDBToStringVisitor0 = new HSQLDBToStringVisitor();
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("GYNi2'", linkedList0, false);
        HSQLDBTableReference hSQLDBTableReference0 = new HSQLDBTableReference(hSQLDBSchema_HSQLDBTable0);
        HSQLDBJoin.JoinType hSQLDBJoin_JoinType0 = HSQLDBJoin.JoinType.RIGHT;
        HSQLDBJoin hSQLDBJoin0 = new HSQLDBJoin(hSQLDBTableReference0, hSQLDBTableReference0, hSQLDBJoin_JoinType0,
                hSQLDBTableReference0);
        hSQLDBToStringVisitor0.visitSpecific((HSQLDBExpression) hSQLDBJoin0);
        assertEquals("GYNi2' RIGHT  JOIN GYNi2' ON GYNi2'", hSQLDBToStringVisitor0.get());
    }

    @Test
    public void test03() throws Throwable {
        HSQLDBToStringVisitor hSQLDBToStringVisitor0 = new HSQLDBToStringVisitor();
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("GYNi2'", linkedList0, false);
        HSQLDBTableReference hSQLDBTableReference0 = new HSQLDBTableReference(hSQLDBSchema_HSQLDBTable0);
        // Undeclared exception!
        try {
            hSQLDBToStringVisitor0.visitSpecific((HSQLDBExpression) hSQLDBTableReference0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // class sqlancer.hsqldb.ast.HSQLDBTableReference
            //
        }
    }

    @Test
    public void test04() throws Throwable {
        HSQLDBSelect hSQLDBSelect0 = new HSQLDBSelect();
        HSQLDBToStringVisitor hSQLDBToStringVisitor0 = new HSQLDBToStringVisitor();
        // Undeclared exception!
        try {
            hSQLDBToStringVisitor0.visitSpecific((HSQLDBExpression) hSQLDBSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        HSQLDBSelect hSQLDBSelect0 = new HSQLDBSelect();
        hSQLDBSelect0.setDistinct(true);
        // Undeclared exception!
        try {
            HSQLDBToStringVisitor.asString(hSQLDBSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("", linkedList0, true);
        HSQLDBTableReference hSQLDBTableReference0 = new HSQLDBTableReference(hSQLDBSchema_HSQLDBTable0);
        HSQLDBJoin hSQLDBJoin0 = HSQLDBJoin.createLeftOuterJoin(hSQLDBTableReference0, hSQLDBTableReference0,
                hSQLDBTableReference0);
        String string0 = HSQLDBToStringVisitor.asString(hSQLDBJoin0);
        assertEquals(" LEFT  JOIN  ON ", string0);
    }

    @Test
    public void test07() throws Throwable {
        // Undeclared exception!
        try {
            HSQLDBToStringVisitor.asString((HSQLDBExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.HSQLDBToStringVisitor", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("", linkedList0, true);
        HSQLDBTableReference hSQLDBTableReference0 = new HSQLDBTableReference(hSQLDBSchema_HSQLDBTable0);
        HSQLDBJoin.OuterType hSQLDBJoin_OuterType0 = HSQLDBJoin.OuterType.LEFT;
        HSQLDBJoin hSQLDBJoin0 = HSQLDBJoin.createNaturalJoin(hSQLDBTableReference0, hSQLDBTableReference0,
                hSQLDBJoin_OuterType0);
        String string0 = HSQLDBToStringVisitor.asString(hSQLDBJoin0);
        assertEquals(" NATURAL LEFT JOIN ", string0);
    }

    @Test
    public void test09() throws Throwable {
        HSQLDBExpression hSQLDBExpression0 = HSQLDBConstant.createNullConstant();
        String string0 = HSQLDBToStringVisitor.asString(hSQLDBExpression0);
        assertNotNull(string0);
    }

    @Test
    public void test10() throws Throwable {
        HSQLDBToStringVisitor hSQLDBToStringVisitor0 = new HSQLDBToStringVisitor();
        HSQLDBConstant.HSQLDBDoubleConstant hSQLDBConstant_HSQLDBDoubleConstant0 = (HSQLDBConstant.HSQLDBDoubleConstant) HSQLDBConstant
                .createFloatConstant(1.0);
        hSQLDBToStringVisitor0.visitSpecific((HSQLDBExpression) hSQLDBConstant_HSQLDBDoubleConstant0);
        assertEquals("1.0", hSQLDBConstant_HSQLDBDoubleConstant0.toString());
    }
}
