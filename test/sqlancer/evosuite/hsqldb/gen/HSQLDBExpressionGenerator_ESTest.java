/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 18:20:04 GMT 2025
 */

package sqlancer.evosuite.hsqldb.gen;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.common.schema.AbstractTables;
import sqlancer.hsqldb.ast.HSQLDBConstant;
import sqlancer.hsqldb.ast.HSQLDBExpression;
import sqlancer.hsqldb.ast.HSQLDBJoin;
import sqlancer.hsqldb.ast.HSQLDBSelect;
import sqlancer.hsqldb.gen.HSQLDBExpressionGenerator;
import sqlancer.hsqldb.HSQLDBProvider;
import sqlancer.hsqldb.HSQLDBSchema;

public class HSQLDBExpressionGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    // @Test
    // public void test00() throws Throwable {
    // LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
    // HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("TYPES", linkedList0, true);
    // HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable1 = new HSQLDBSchema.HSQLDBTable("", linkedList0, true);
    // List<HSQLDBSchema.HSQLDBTable> list0 = List.of(hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable1,
    // hSQLDBSchema_HSQLDBTable1);
    // HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
    // HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
    // hSQLDBProvider_HSQLDBGlobalState0);
    // LinkedList<HSQLDBSchema.HSQLDBTable> linkedList1 = new LinkedList<HSQLDBSchema.HSQLDBTable>(list0);
    // AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 = new
    // AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>(
    // linkedList1);
    // hSQLDBExpressionGenerator0.setTablesAndColumns(abstractTables0);
    // HSQLDBSchema.HSQLDBCompositeDataType.getRandomWithoutNull();
    // List<HSQLDBJoin> list1 = hSQLDBExpressionGenerator0.getRandomJoinClauses();
    // assertFalse(list1.isEmpty());
    // }

    @Test
    public void test01() throws Throwable {
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                (HSQLDBProvider.HSQLDBGlobalState) null);
        LinkedList<HSQLDBSchema.HSQLDBTable> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBTable>();
        AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 = new AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>(
                linkedList0);
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator1 = hSQLDBExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        List<HSQLDBExpression> list0 = hSQLDBExpressionGenerator1.getTableRefs();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test02() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("]MHajehk1o", linkedList0,
                false);
        List<HSQLDBSchema.HSQLDBTable> list0 = List.of(hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0,
                hSQLDBSchema_HSQLDBTable0);
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 = new AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>(
                list0);
        hSQLDBExpressionGenerator0.setTablesAndColumns(abstractTables0);
        List<HSQLDBExpression> list1 = hSQLDBExpressionGenerator0.getTableRefs();
        assertFalse(list1.isEmpty());
    }

    // @Test
    // public void test03() throws Throwable {
    // HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
    // HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
    // hSQLDBProvider_HSQLDBGlobalState0);
    // HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = hSQLDBExpressionGenerator0
    // .getRandomType();
    // assertEquals(HSQLDBSchema.HSQLDBDataType.BINARY, hSQLDBSchema_HSQLDBCompositeDataType0.getType());
    // }

    @Test
    public void test04() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSelect hSQLDBSelect0 = new HSQLDBSelect();
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.BOOLEAN;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithType(hSQLDBSchema_HSQLDBDataType0);
        List<HSQLDBExpression> list0 = hSQLDBExpressionGenerator0
                .generateExpressions(hSQLDBSchema_HSQLDBCompositeDataType0, (-296));
        hSQLDBSelect0.setFromTables(list0);
        String string0 = hSQLDBExpressionGenerator0.generateUnoptimizedQueryString(hSQLDBSelect0,
                (HSQLDBExpression) hSQLDBSelect0);
        assertEquals("SELECT SUM(count) FROM (SELECT COUNT(*) as count FROM ) as res", string0);
    }

    @Test
    public void test05() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSelect hSQLDBSelect0 = new HSQLDBSelect();
        HSQLDBExpression hSQLDBExpression0 = HSQLDBConstant.createDateConstant(0L);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.CHAR;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = new HSQLDBSchema.HSQLDBCompositeDataType(
                hSQLDBSchema_HSQLDBDataType0, (-1031));
        List<HSQLDBExpression> list0 = hSQLDBExpressionGenerator0
                .generateExpressions(hSQLDBSchema_HSQLDBCompositeDataType0, (-1031), (-1031));
        hSQLDBSelect0.setFromTables(list0);
        String string0 = hSQLDBExpressionGenerator0.generateOptimizedQueryString(hSQLDBSelect0, hSQLDBExpression0,
                true);
        assertNotNull(string0);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test06() throws Throwable { HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new
     * HSQLDBExpressionGenerator( (HSQLDBProvider.HSQLDBGlobalState) null); HSQLDBSchema.HSQLDBColumn
     * hSQLDBSchema_HSQLDBColumn0 = mock(HSQLDBSchema.HSQLDBColumn.class, new ViolatedAssumptionAnswer());
     * List<HSQLDBSchema.HSQLDBColumn> list0 = List.of(hSQLDBSchema_HSQLDBColumn0, hSQLDBSchema_HSQLDBColumn0,
     * hSQLDBSchema_HSQLDBColumn0); HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new
     * HSQLDBSchema.HSQLDBTable("jdb^:duckdb:", list0, true); List<HSQLDBSchema.HSQLDBTable> list1 =
     * List.of(hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0);
     * AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 =
     * (AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>) mock( AbstractTables.class, new
     * ViolatedAssumptionAnswer()); doReturn(list0).when(abstractTables0).getColumns();
     * doReturn(list1).when(abstractTables0).getTables();
     * hSQLDBExpressionGenerator0.setTablesAndColumns(abstractTables0); List<HSQLDBExpression> list2 =
     * hSQLDBExpressionGenerator0.generateFetchColumns(false); assertFalse(list2.isEmpty()); }
     */

    @Test
    public void test07() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0
                    .setTablesAndColumns((AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    // @Test
    // public void test08() throws Throwable {
    // HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
    // LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
    // HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("&", linkedList0, false);
    // List<HSQLDBSchema.HSQLDBTable> list0 = List.of(hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0,
    // hSQLDBSchema_HSQLDBTable0);
    // HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
    // hSQLDBProvider_HSQLDBGlobalState0);
    // AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 = new
    // AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>(
    // list0);
    // HSQLDBExpressionGenerator hSQLDBExpressionGenerator1 = hSQLDBExpressionGenerator0
    // .setTablesAndColumns(abstractTables0);
    // HSQLDBSchema.HSQLDBCompositeDataType.getRandomWithoutNull();
    // // Undeclared exception!
    // try {
    // hSQLDBExpressionGenerator1.getRandomJoinClauses();
    // fail("Expecting exception: UnsupportedOperationException");
    //
    // } catch (UnsupportedOperationException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("java.util.ImmutableCollections", e);
    // }
    // }

    @Test
    public void test09() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.getRandomJoinClauses();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSelect hSQLDBSelect0 = new HSQLDBSelect();
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateUnoptimizedQueryString(hSQLDBSelect0, (HSQLDBExpression) hSQLDBSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable((String) null, linkedList0,
                true);
        List<HSQLDBSchema.HSQLDBTable> list0 = List.of(hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0,
                hSQLDBSchema_HSQLDBTable0);
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithoutNull();
        HSQLDBSchema.HSQLDBColumn hSQLDBSchema_HSQLDBColumn0 = new HSQLDBSchema.HSQLDBColumn((String) null,
                hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBCompositeDataType0);
        linkedList0.push(hSQLDBSchema_HSQLDBColumn0);
        AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 = new AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>(
                list0);
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator1 = hSQLDBExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator1.generateOrderBys();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.schema.AbstractTableColumn", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSelect hSQLDBSelect0 = hSQLDBExpressionGenerator0.generateSelect();
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateOptimizedQueryString(hSQLDBSelect0, (HSQLDBExpression) hSQLDBSelect0,
                    false);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateExpression((HSQLDBSchema.HSQLDBCompositeDataType) null, 5214);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.BINARY;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = new HSQLDBSchema.HSQLDBCompositeDataType(
                hSQLDBSchema_HSQLDBDataType0, (-1788));
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
            fail("Expecting exception: StringIndexOutOfBoundsException");

        } catch (StringIndexOutOfBoundsException e) {
            //
            // start 0, end -1788, length 2
            //
            verifyException("java.lang.AbstractStringBuilder", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                (HSQLDBProvider.HSQLDBGlobalState) null);
        hSQLDBExpressionGenerator0.setColumns((List<HSQLDBSchema.HSQLDBColumn>) null);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.DATE;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = new HSQLDBSchema.HSQLDBCompositeDataType(
                hSQLDBSchema_HSQLDBDataType0, 65);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateColumn(hSQLDBSchema_HSQLDBCompositeDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test16() throws Throwable { HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new
     * HSQLDBExpressionGenerator( (HSQLDBProvider.HSQLDBGlobalState) null); AbstractTables<HSQLDBSchema.HSQLDBTable,
     * HSQLDBSchema.HSQLDBColumn> abstractTables0 = (AbstractTables<HSQLDBSchema.HSQLDBTable,
     * HSQLDBSchema.HSQLDBColumn>) mock( AbstractTables.class, new ViolatedAssumptionAnswer()); doReturn((List)
     * null).when(abstractTables0).getColumns(); doReturn((List) null).when(abstractTables0).getTables();
     * hSQLDBExpressionGenerator0.setTablesAndColumns(abstractTables0); HSQLDBSchema.HSQLDBCompositeDataType
     * hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType .getRandomWithoutNull(); //
     * Undeclared exception! try {
     * hSQLDBExpressionGenerator0.canGenerateColumnOfType(hSQLDBSchema_HSQLDBCompositeDataType0);
     * fail("Expecting exception: NullPointerException");
     *
     * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
     * verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e); } }
     */

    @Test
    public void test17() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        List<HSQLDBExpression> list0 = hSQLDBExpressionGenerator0.generateFetchColumns(true);
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test18() throws Throwable {
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                (HSQLDBProvider.HSQLDBGlobalState) null);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateFetchColumns(false);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test19() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("Unknown type: ", linkedList0,
                false);
        List<HSQLDBSchema.HSQLDBTable> list0 = List.of(hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0,
                hSQLDBSchema_HSQLDBTable0);
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithoutNull();
        HSQLDBSchema.HSQLDBColumn hSQLDBSchema_HSQLDBColumn0 = new HSQLDBSchema.HSQLDBColumn("vbJYx XL",
                hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBCompositeDataType0);
        linkedList0.push(hSQLDBSchema_HSQLDBColumn0);
        AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 = new AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>(
                list0);
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator1 = hSQLDBExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        HSQLDBSelect hSQLDBSelect0 = hSQLDBExpressionGenerator1.generateSelect();
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator1.generateOptimizedQueryString(hSQLDBSelect0, (HSQLDBExpression) hSQLDBSelect0,
                    false);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("A", linkedList0, false);
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = hSQLDBExpressionGenerator0
                .getRandomType();
        HSQLDBSchema.HSQLDBColumn hSQLDBSchema_HSQLDBColumn0 = new HSQLDBSchema.HSQLDBColumn("A",
                hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBCompositeDataType0);
        linkedList0.push(hSQLDBSchema_HSQLDBColumn0);
        List<HSQLDBSchema.HSQLDBTable> list0 = List.of(hSQLDBSchema_HSQLDBTable0);
        AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 = new AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>(
                list0);
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator1 = hSQLDBExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        hSQLDBExpressionGenerator0.generateOrderBys();
        HSQLDBSelect hSQLDBSelect0 = hSQLDBExpressionGenerator1.generateSelect();
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateOptimizedQueryString(hSQLDBSelect0, (HSQLDBExpression) hSQLDBSelect0,
                    false);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateOptimizedQueryString((HSQLDBSelect) null, (HSQLDBExpression) null,
                    false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test22() throws Throwable { HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new
     * HSQLDBExpressionGenerator( (HSQLDBProvider.HSQLDBGlobalState) null); HSQLDBSchema.HSQLDBColumn
     * hSQLDBSchema_HSQLDBColumn0 = mock(HSQLDBSchema.HSQLDBColumn.class, new ViolatedAssumptionAnswer());
     * List<HSQLDBSchema.HSQLDBColumn> list0 = List.of(hSQLDBSchema_HSQLDBColumn0, hSQLDBSchema_HSQLDBColumn0,
     * hSQLDBSchema_HSQLDBColumn0); HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new
     * HSQLDBSchema.HSQLDBTable("jdb^:duckdb:", list0, true); List<HSQLDBSchema.HSQLDBTable> list1 =
     * List.of(hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0);
     * AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 =
     * (AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>) mock( AbstractTables.class, new
     * ViolatedAssumptionAnswer()); doReturn(list0).when(abstractTables0).getColumns();
     * doReturn(list1).when(abstractTables0).getTables();
     * hSQLDBExpressionGenerator0.setTablesAndColumns(abstractTables0); List<HSQLDBJoin> list2 =
     * hSQLDBExpressionGenerator0.getRandomJoinClauses(); assertEquals(0, list2.size()); }
     */

    @Test
    public void test23() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        List<HSQLDBExpression> list0 = hSQLDBExpressionGenerator0.generateOrderBys();
        assertTrue(list0.isEmpty());
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test24() throws Throwable { HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new
     * HSQLDBExpressionGenerator( (HSQLDBProvider.HSQLDBGlobalState) null); HSQLDBSchema.HSQLDBColumn
     * hSQLDBSchema_HSQLDBColumn0 = mock(HSQLDBSchema.HSQLDBColumn.class, new ViolatedAssumptionAnswer());
     * List<HSQLDBSchema.HSQLDBColumn> list0 = List.of(hSQLDBSchema_HSQLDBColumn0, hSQLDBSchema_HSQLDBColumn0,
     * hSQLDBSchema_HSQLDBColumn0); HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new
     * HSQLDBSchema.HSQLDBTable("jdb^:duckdb:", list0, true); HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 =
     * HSQLDBSchema.HSQLDBDataType.DOUBLE; HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 =
     * HSQLDBSchema.HSQLDBCompositeDataType .getRandomWithType(hSQLDBSchema_HSQLDBDataType0); HSQLDBSchema.HSQLDBColumn
     * hSQLDBSchema_HSQLDBColumn1 = new HSQLDBSchema.HSQLDBColumn("jdb^:duckdb:", hSQLDBSchema_HSQLDBTable0,
     * hSQLDBSchema_HSQLDBCompositeDataType0); List<HSQLDBSchema.HSQLDBColumn> list1 =
     * List.of(hSQLDBSchema_HSQLDBColumn1, hSQLDBSchema_HSQLDBColumn1, hSQLDBSchema_HSQLDBColumn1,
     * hSQLDBSchema_HSQLDBColumn1, hSQLDBSchema_HSQLDBColumn1, hSQLDBSchema_HSQLDBColumn1, hSQLDBSchema_HSQLDBColumn1,
     * hSQLDBSchema_HSQLDBColumn1, hSQLDBSchema_HSQLDBColumn1); List<HSQLDBSchema.HSQLDBTable> list2 =
     * List.of(hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0);
     * AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 =
     * (AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>) mock( AbstractTables.class, new
     * ViolatedAssumptionAnswer()); doReturn(list1).when(abstractTables0).getColumns();
     * doReturn(list2).when(abstractTables0).getTables();
     * hSQLDBExpressionGenerator0.setTablesAndColumns(abstractTables0); boolean boolean0 =
     * hSQLDBExpressionGenerator0.canGenerateColumnOfType(hSQLDBSchema_HSQLDBCompositeDataType0); assertTrue(boolean0);
     * }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test25() throws Throwable { HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new
     * HSQLDBExpressionGenerator( (HSQLDBProvider.HSQLDBGlobalState) null); HSQLDBSchema.HSQLDBColumn
     * hSQLDBSchema_HSQLDBColumn0 = mock(HSQLDBSchema.HSQLDBColumn.class, new ViolatedAssumptionAnswer());
     * doReturn((Object) null, (Object) null, (Object) null).when(hSQLDBSchema_HSQLDBColumn0).getType();
     * List<HSQLDBSchema.HSQLDBColumn> list0 = List.of(hSQLDBSchema_HSQLDBColumn0, hSQLDBSchema_HSQLDBColumn0,
     * hSQLDBSchema_HSQLDBColumn0); HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new
     * HSQLDBSchema.HSQLDBTable("jdb^:duckdb:", list0, true); HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 =
     * HSQLDBSchema.HSQLDBDataType.DOUBLE; HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 =
     * HSQLDBSchema.HSQLDBCompositeDataType .getRandomWithType(hSQLDBSchema_HSQLDBDataType0);
     * List<HSQLDBSchema.HSQLDBTable> list1 = List.of(hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBTable0,
     * hSQLDBSchema_HSQLDBTable0); AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 =
     * (AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>) mock( AbstractTables.class, new
     * ViolatedAssumptionAnswer()); doReturn(list0).when(abstractTables0).getColumns();
     * doReturn(list1).when(abstractTables0).getTables();
     * hSQLDBExpressionGenerator0.setTablesAndColumns(abstractTables0); boolean boolean0 =
     * hSQLDBExpressionGenerator0.canGenerateColumnOfType(hSQLDBSchema_HSQLDBCompositeDataType0); assertFalse(boolean0);
     * }
     */

    @Test
    public void test26() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("`%Y7;-]!e0}Fe 0D_",
                linkedList0, true);
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = hSQLDBExpressionGenerator0
                .getRandomType();
        HSQLDBSchema.HSQLDBColumn hSQLDBSchema_HSQLDBColumn0 = new HSQLDBSchema.HSQLDBColumn("`%Y7;-]!e0}Fe 0D_",
                hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBCompositeDataType0);
        linkedList0.push(hSQLDBSchema_HSQLDBColumn0);
        List<HSQLDBSchema.HSQLDBTable> list0 = List.of(hSQLDBSchema_HSQLDBTable0);
        AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 = new AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>(
                list0);
        hSQLDBExpressionGenerator0.setTablesAndColumns(abstractTables0);
        HSQLDBExpression hSQLDBExpression0 = hSQLDBExpressionGenerator0
                .generateColumn(hSQLDBSchema_HSQLDBCompositeDataType0);
        assertNotNull(hSQLDBExpression0);
    }

    @Test
    public void test27() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        LinkedList<HSQLDBSchema.HSQLDBColumn> linkedList0 = new LinkedList<HSQLDBSchema.HSQLDBColumn>();
        HSQLDBSchema.HSQLDBTable hSQLDBSchema_HSQLDBTable0 = new HSQLDBSchema.HSQLDBTable("h['#bvy\"A", linkedList0,
                true);
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithoutNull();
        HSQLDBSchema.HSQLDBColumn hSQLDBSchema_HSQLDBColumn0 = new HSQLDBSchema.HSQLDBColumn("h['#bvy\"A",
                hSQLDBSchema_HSQLDBTable0, hSQLDBSchema_HSQLDBCompositeDataType0);
        linkedList0.push(hSQLDBSchema_HSQLDBColumn0);
        List<HSQLDBSchema.HSQLDBTable> list0 = List.of(hSQLDBSchema_HSQLDBTable0);
        AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn> abstractTables0 = new AbstractTables<HSQLDBSchema.HSQLDBTable, HSQLDBSchema.HSQLDBColumn>(
                list0);
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator1 = hSQLDBExpressionGenerator0
                .setTablesAndColumns(abstractTables0);
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType1 = hSQLDBExpressionGenerator0
                .getRandomType();
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator1.generateColumn(hSQLDBSchema_HSQLDBCompositeDataType1);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test28() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.NULL;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = new HSQLDBSchema.HSQLDBCompositeDataType(
                hSQLDBSchema_HSQLDBDataType0, 5);
        HSQLDBExpression hSQLDBExpression0 = hSQLDBExpressionGenerator0
                .generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
        HSQLDBSelect hSQLDBSelect0 = hSQLDBExpressionGenerator0.generateSelect();
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateOptimizedQueryString(hSQLDBSelect0, hSQLDBExpression0, true);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.TIMESTAMP;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithType(hSQLDBSchema_HSQLDBDataType0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.DATE;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithType(hSQLDBSchema_HSQLDBDataType0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test31() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.TIME;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithType(hSQLDBSchema_HSQLDBDataType0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test32() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.VARCHAR;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithType(hSQLDBSchema_HSQLDBDataType0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test33() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.CHAR;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithType(hSQLDBSchema_HSQLDBDataType0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test34() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.DOUBLE;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
                .getRandomWithType(hSQLDBSchema_HSQLDBDataType0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test35() throws Throwable {
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                (HSQLDBProvider.HSQLDBGlobalState) null);
        HSQLDBSchema.HSQLDBDataType hSQLDBSchema_HSQLDBDataType0 = HSQLDBSchema.HSQLDBDataType.BOOLEAN;
        HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = new HSQLDBSchema.HSQLDBCompositeDataType(
                hSQLDBSchema_HSQLDBDataType0, 62);
        HSQLDBConstant.HSQLDBBooleanConstant hSQLDBConstant_HSQLDBBooleanConstant0 = (HSQLDBConstant.HSQLDBBooleanConstant) hSQLDBExpressionGenerator0
                .generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
        assertEquals("false", hSQLDBConstant_HSQLDBBooleanConstant0.toString());
    }

    // @Test
    // public void test36() throws Throwable {
    // HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
    // HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
    // hSQLDBProvider_HSQLDBGlobalState0);
    // HSQLDBSchema.HSQLDBCompositeDataType hSQLDBSchema_HSQLDBCompositeDataType0 = HSQLDBSchema.HSQLDBCompositeDataType
    // .getRandomWithoutNull();
    // HSQLDBConstant.HSQLDBIntConstant hSQLDBConstant_HSQLDBIntConstant0 = (HSQLDBConstant.HSQLDBIntConstant)
    // hSQLDBExpressionGenerator0
    // .generateConstant(hSQLDBSchema_HSQLDBCompositeDataType0);
    // assertEquals("1", hSQLDBConstant_HSQLDBIntConstant0.toString());
    // }

    // @Test
    // public void test37() throws Throwable {
    // BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = HSQLDBExpressionGenerator.HSQLDBBinaryLogicalOperator
    // .getRandom();
    // assertEquals(HSQLDBExpressionGenerator.HSQLDBBinaryLogicalOperator.AND, binaryOperatorNode_Operator0);
    // }

    @Test
    public void test38() throws Throwable {
        HSQLDBExpressionGenerator.HSQLDBBinaryLogicalOperator hSQLDBExpressionGenerator_HSQLDBBinaryLogicalOperator0 = HSQLDBExpressionGenerator.HSQLDBBinaryLogicalOperator.AND;
        String string0 = hSQLDBExpressionGenerator_HSQLDBBinaryLogicalOperator0.getTextRepresentation();
        assertEquals("AND", string0);
    }

    @Test
    public void test39() throws Throwable {
        HSQLDBExpressionGenerator.HSQLDBDBBinaryComparisonOperator hSQLDBExpressionGenerator_HSQLDBDBBinaryComparisonOperator0 = HSQLDBExpressionGenerator.HSQLDBDBBinaryComparisonOperator.SMALLER;
        String string0 = hSQLDBExpressionGenerator_HSQLDBDBBinaryComparisonOperator0.getTextRepresentation();
        assertEquals("<", string0);
    }

    // @Test
    // public void test40() throws Throwable {
    // BinaryOperatorNode.Operator binaryOperatorNode_Operator0 =
    // HSQLDBExpressionGenerator.HSQLDBDBBinaryComparisonOperator
    // .getRandom();
    // assertEquals("=", binaryOperatorNode_Operator0.getTextRepresentation());
    // }

    // @Test
    // public void test41() throws Throwable {
    // BinaryOperatorNode.Operator binaryOperatorNode_Operator0 =
    // HSQLDBExpressionGenerator.HSQLDBDBBinaryArithmeticOperator
    // .getRandom();
    // assertEquals(HSQLDBExpressionGenerator.HSQLDBDBBinaryArithmeticOperator.CONCAT, binaryOperatorNode_Operator0);
    // }

    @Test
    public void test42() throws Throwable {
        HSQLDBExpressionGenerator.HSQLDBDBBinaryArithmeticOperator hSQLDBExpressionGenerator_HSQLDBDBBinaryArithmeticOperator0 = HSQLDBExpressionGenerator.HSQLDBDBBinaryArithmeticOperator.RSHIFT;
        String string0 = hSQLDBExpressionGenerator_HSQLDBDBBinaryArithmeticOperator0.getTextRepresentation();
        assertEquals(">>", string0);
    }

    @Test
    public void test43() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBExpression hSQLDBExpression0 = hSQLDBExpressionGenerator0.isNull((HSQLDBExpression) null);
        assertNotNull(hSQLDBExpression0);
    }

    @Test
    public void test44() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateBooleanExpression();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test45() throws Throwable {
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                (HSQLDBProvider.HSQLDBGlobalState) null);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.getTableRefs();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test46() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generatePredicate();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }

    @Test
    public void test47() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        HSQLDBSelect hSQLDBSelect0 = hSQLDBExpressionGenerator0.generateSelect();
        HSQLDBExpression hSQLDBExpression0 = hSQLDBExpressionGenerator0
                .negatePredicate((HSQLDBExpression) hSQLDBSelect0);
        assertNotNull(hSQLDBExpression0);
    }

    @Test
    public void test48() throws Throwable {
        HSQLDBProvider.HSQLDBGlobalState hSQLDBProvider_HSQLDBGlobalState0 = new HSQLDBProvider.HSQLDBGlobalState();
        HSQLDBExpressionGenerator hSQLDBExpressionGenerator0 = new HSQLDBExpressionGenerator(
                hSQLDBProvider_HSQLDBGlobalState0);
        // Undeclared exception!
        try {
            hSQLDBExpressionGenerator0.generateUnoptimizedQueryString((HSQLDBSelect) null, (HSQLDBExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.hsqldb.gen.HSQLDBExpressionGenerator", e);
        }
    }
}
