/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:20:31 GMT 2025
 */

package sqlancer.evosuite.h2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.common.schema.AbstractTables;
import sqlancer.h2.ast.H2Constant;
import sqlancer.h2.ast.H2Expression;
import sqlancer.h2.ast.H2Join;
import sqlancer.h2.ast.H2Select;
import sqlancer.h2.H2ExpressionGenerator;
import sqlancer.h2.H2Provider;
import sqlancer.h2.H2Schema;

public class H2ExpressionGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        LinkedList<H2Schema.H2Table> linkedList0 = new LinkedList<H2Schema.H2Table>();
        AbstractTables<H2Schema.H2Table, H2Schema.H2Column> abstractTables0 = new AbstractTables<H2Schema.H2Table, H2Schema.H2Column>(
                linkedList0);
        h2ExpressionGenerator0.setTablesAndColumns(abstractTables0);
        List<H2Expression> list0 = h2ExpressionGenerator0.getTableRefs();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test01() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        LinkedList<H2Schema.H2Column> linkedList0 = new LinkedList<H2Schema.H2Column>();
        H2Schema.H2Table h2Schema_H2Table0 = new H2Schema.H2Table("", linkedList0);
        List<H2Schema.H2Table> list0 = List.of(h2Schema_H2Table0, h2Schema_H2Table0, h2Schema_H2Table0);
        AbstractTables<H2Schema.H2Table, H2Schema.H2Column> abstractTables0 = new AbstractTables<H2Schema.H2Table, H2Schema.H2Column>(
                list0);
        h2ExpressionGenerator0.setTablesAndColumns(abstractTables0);
        List<H2Expression> list1 = h2ExpressionGenerator0.getTableRefs();
        assertEquals(3, list1.size());
    }

    @Test
    public void test02() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        LinkedList<H2Schema.H2Table> linkedList0 = new LinkedList<H2Schema.H2Table>();
        AbstractTables<H2Schema.H2Table, H2Schema.H2Column> abstractTables0 = new AbstractTables<H2Schema.H2Table, H2Schema.H2Column>(
                linkedList0);
        h2ExpressionGenerator0.setTablesAndColumns(abstractTables0);
        List<H2Join> list0 = h2ExpressionGenerator0.getRandomJoinClauses();
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test03() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        H2Schema.H2Column[] h2Schema_H2ColumnArray0 = new H2Schema.H2Column[4];
        H2Schema.H2DataType h2Schema_H2DataType0 = H2Schema.H2DataType.INT;
        H2Schema.H2CompositeDataType h2Schema_H2CompositeDataType0 = new H2Schema.H2CompositeDataType(
                h2Schema_H2DataType0, 3, 3);
        H2Schema.H2Column h2Schema_H2Column0 = new H2Schema.H2Column("", h2Schema_H2CompositeDataType0);
        h2Schema_H2ColumnArray0[0] = h2Schema_H2Column0;
        h2Schema_H2ColumnArray0[1] = h2Schema_H2Column0;
        h2Schema_H2ColumnArray0[2] = h2Schema_H2ColumnArray0[0];
        h2Schema_H2ColumnArray0[3] = h2Schema_H2ColumnArray0[1];
        List<H2Schema.H2Column> list0 = List.of(h2Schema_H2ColumnArray0);
        h2ExpressionGenerator0.setColumns(list0);
        List<H2Expression> list1 = h2ExpressionGenerator0.generateFetchColumns(false);
        assertEquals(1, list1.size());
    }

    @Test
    public void test04() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.setTablesAndColumns((AbstractTables<H2Schema.H2Table, H2Schema.H2Column>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ExpressionGenerator", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        LinkedList<H2Schema.H2Column> linkedList0 = new LinkedList<H2Schema.H2Column>();
        h2ExpressionGenerator0.setColumns((List<H2Schema.H2Column>) linkedList0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateFetchColumns(true);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test06() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateExpression((-1803));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ExpressionGenerator", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        List<H2Schema.H2Column> list0 = List.of();
        h2ExpressionGenerator0.setColumns(list0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateColumn();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test08() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateFetchColumns(true);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateConstant();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ExpressionGenerator", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateConstant();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ExpressionGenerator", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        H2Constant.H2BoolConstant h2Constant_H2BoolConstant0 = (H2Constant.H2BoolConstant) h2ExpressionGenerator0
                .generateConstant();
        assertEquals("false", h2Constant_H2BoolConstant0.toString());
    }

    @Test
    public void test12() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateConstant();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ExpressionGenerator", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateConstant();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ExpressionGenerator", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        H2ExpressionGenerator.H2Function h2ExpressionGenerator_H2Function0 = H2ExpressionGenerator.H2Function.DECODE;
        int int0 = h2ExpressionGenerator_H2Function0.getNrArgs();
        assertEquals(3, int0);
    }

    @Test
    public void test15() throws Throwable {
        H2ExpressionGenerator.H2Function h2ExpressionGenerator_H2Function0 = H2ExpressionGenerator.H2Function.RAWTOHEX;
        int int0 = h2ExpressionGenerator_H2Function0.getNrArgs();
        assertEquals(1, int0);
    }

    @Test
    public void test16() throws Throwable {
        H2ExpressionGenerator.H2BinaryArithmeticOperator h2ExpressionGenerator_H2BinaryArithmeticOperator0 = H2ExpressionGenerator.H2BinaryArithmeticOperator.MULT;
        String string0 = h2ExpressionGenerator_H2BinaryArithmeticOperator0.getTextRepresentation();
        assertEquals("*", string0);
    }

    @Test
    public void test17() throws Throwable {
        H2ExpressionGenerator.H2BinaryArithmeticOperator.getRandom();
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        H2Constant.H2NullConstant h2Constant_H2NullConstant0 = (H2Constant.H2NullConstant) h2ExpressionGenerator0
                .generateConstant();
        assertEquals("NULL", h2Constant_H2NullConstant0.toString());
    }

    @Test
    public void test18() throws Throwable {
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator
                .getRandom();
        assertEquals("NOT", h2ExpressionGenerator_H2UnaryPrefixOperator0.getTextRepresentation());
    }

    @Test
    public void test19() throws Throwable {
        H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator.PLUS;
        String string0 = h2ExpressionGenerator_H2UnaryPrefixOperator0.getTextRepresentation();
        assertEquals("+", string0);
    }

    @Test
    public void test20() throws Throwable {
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = H2ExpressionGenerator.H2BinaryLogicalOperator
                .getRandom();
        assertEquals(H2ExpressionGenerator.H2BinaryLogicalOperator.AND, binaryOperatorNode_Operator0);
    }

    @Test
    public void test21() throws Throwable {
        H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator0 = H2ExpressionGenerator.H2BinaryLogicalOperator.AND;
        String string0 = h2ExpressionGenerator_H2BinaryLogicalOperator0.getTextRepresentation();
        assertEquals("AND", string0);
    }

    @Test
    public void test22() throws Throwable {
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = H2ExpressionGenerator.H2BinaryComparisonOperator
                .getRandom();
        String string0 = binaryOperatorNode_Operator0.getTextRepresentation();
        assertEquals("=", string0);
    }

    @Test
    public void test23() throws Throwable {
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator
                .getRandom();
        assertEquals("IS NULL", h2ExpressionGenerator_H2UnaryPostfixOperator0.getTextRepresentation());
    }

    @Test
    public void test24() throws Throwable {
        H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_TRUE;
        String string0 = h2ExpressionGenerator_H2UnaryPostfixOperator0.getTextRepresentation();
        assertEquals("IS TRUE", string0);
    }

    @Test
    public void test25() throws Throwable {
        H2ExpressionGenerator.H2Function h2ExpressionGenerator_H2Function0 = H2ExpressionGenerator.H2Function
                .getRandom();
        assertEquals(H2ExpressionGenerator.H2Function.ABS, h2ExpressionGenerator_H2Function0);
    }

    @Test
    public void test26() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateBooleanExpression();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ExpressionGenerator", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateColumn();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test28() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.getTableRefs();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ExpressionGenerator", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.getRandomJoinClauses();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ExpressionGenerator", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        H2Select h2Select0 = h2ExpressionGenerator0.generateSelect();
        H2Expression h2Expression0 = h2ExpressionGenerator0.isNull((H2Expression) h2Select0);
        assertNotNull(h2Expression0);
    }

    @Test
    public void test31() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        LinkedList<H2Schema.H2Table> linkedList0 = new LinkedList<H2Schema.H2Table>();
        AbstractTables<H2Schema.H2Table, H2Schema.H2Column> abstractTables0 = new AbstractTables<H2Schema.H2Table, H2Schema.H2Column>(
                linkedList0);
        h2ExpressionGenerator0.setTablesAndColumns(abstractTables0);
        // Undeclared exception!
        try {
            h2ExpressionGenerator0.generateColumn();
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test32() throws Throwable {
        H2Provider.H2GlobalState h2Provider_H2GlobalState0 = new H2Provider.H2GlobalState();
        H2ExpressionGenerator h2ExpressionGenerator0 = new H2ExpressionGenerator(h2Provider_H2GlobalState0);
        H2Select h2Select0 = new H2Select();
        H2Expression h2Expression0 = h2ExpressionGenerator0.negatePredicate((H2Expression) h2Select0);
        assertNotNull(h2Expression0);
    }
}
