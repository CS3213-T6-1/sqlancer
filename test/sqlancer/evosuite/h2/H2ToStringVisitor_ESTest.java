/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 17:59:17 GMT 2025
 */

package sqlancer.evosuite.h2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.ast.newast.NewBetweenOperatorNode;
import sqlancer.h2.ast.H2BetweenOperation;
import sqlancer.h2.ast.H2BinaryOperation;
import sqlancer.h2.ast.H2CastNode;
import sqlancer.h2.ast.H2ColumnReference;
import sqlancer.h2.ast.H2Constant;
import sqlancer.h2.ast.H2Expression;
import sqlancer.h2.ast.H2InOperation;
import sqlancer.h2.ast.H2Join;
import sqlancer.h2.ast.H2Select;
import sqlancer.h2.ast.H2TableReference;
import sqlancer.h2.ast.H2UnaryPostfixOperation;
import sqlancer.h2.H2ExpressionGenerator;
import sqlancer.h2.H2Schema;
import sqlancer.h2.H2ToStringVisitor;

public class H2ToStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        LinkedList<H2Schema.H2Column> linkedList0 = new LinkedList<H2Schema.H2Column>();
        H2Schema.H2Table h2Schema_H2Table0 = new H2Schema.H2Table("ORA_HASH", linkedList0);
        H2TableReference h2TableReference0 = new H2TableReference(h2Schema_H2Table0);
        H2Join h2Join0 = H2Join.createInnerJoin(h2TableReference0, h2TableReference0, h2TableReference0);
        h2ToStringVisitor0.visitSpecific((H2Expression) h2Join0);
        assertEquals("ORA_HASH INNER JOIN ORA_HASH ON ORA_HASH", h2ToStringVisitor0.get());
    }

    @Test
    public void test01() throws Throwable {
        LinkedList<H2Schema.H2Column> linkedList0 = new LinkedList<H2Schema.H2Column>();
        H2Schema.H2Table h2Schema_H2Table0 = new H2Schema.H2Table("", linkedList0);
        H2TableReference h2TableReference0 = new H2TableReference(h2Schema_H2Table0);
        String string0 = H2ToStringVisitor.asString(h2TableReference0);
        assertEquals("", string0);
    }

    @Test
    public void test02() throws Throwable {
        H2Select h2Select0 = new H2Select();
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visitSpecific((H2Expression) h2Select0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        H2ColumnReference h2ColumnReference0 = new H2ColumnReference((H2Schema.H2Column) null);
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visitSpecific((H2Expression) h2ColumnReference0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // class sqlancer.h2.ast.H2ColumnReference
            //
        }
    }

    @Test
    public void test04() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((H2Select) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ToStringVisitor", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        H2Select h2Select0 = new H2Select();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit(h2Select0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        H2Constant.H2NullConstant h2Constant_H2NullConstant0 = new H2Constant.H2NullConstant();
        H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.REGEXP;
        H2UnaryPostfixOperation h2UnaryPostfixOperation0 = new H2UnaryPostfixOperation(h2Constant_H2NullConstant0,
                h2ExpressionGenerator_H2BinaryComparisonOperator0);
        H2Schema.H2DataType h2Schema_H2DataType0 = H2Schema.H2DataType.INT;
        H2Schema.H2CompositeDataType h2Schema_H2CompositeDataType0 = new H2Schema.H2CompositeDataType(
                h2Schema_H2DataType0, 2142, 2142);
        H2CastNode h2CastNode0 = new H2CastNode(h2UnaryPostfixOperation0, h2Schema_H2CompositeDataType0);
        // Undeclared exception!
        try {
            H2ToStringVisitor.asString(h2CastNode0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 2142
            //
        }
    }

    @Test
    public void test07() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        H2Expression h2Expression0 = H2Constant.createBinaryConstant((-3944L));
        H2Schema.H2CompositeDataType h2Schema_H2CompositeDataType0 = H2Schema.H2CompositeDataType.getRandom();
        H2CastNode h2CastNode0 = new H2CastNode(h2Expression0, h2Schema_H2CompositeDataType0);
        H2InOperation h2InOperation0 = new H2InOperation(h2CastNode0, (List<H2Expression>) null, false);
        H2BetweenOperation h2BetweenOperation0 = new H2BetweenOperation(h2InOperation0, h2Expression0, h2Expression0,
                false);
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((NewBetweenOperatorNode<H2Expression>) h2BetweenOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        H2Constant.H2IntConstant h2Constant_H2IntConstant0 = new H2Constant.H2IntConstant((-1L));
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        H2Select h2Select0 = new H2Select();
        H2ExpressionGenerator.H2BinaryArithmeticOperator h2ExpressionGenerator_H2BinaryArithmeticOperator0 = H2ExpressionGenerator.H2BinaryArithmeticOperator.MULT;
        H2BinaryOperation h2BinaryOperation0 = new H2BinaryOperation(h2Select0, h2Constant_H2IntConstant0,
                h2ExpressionGenerator_H2BinaryArithmeticOperator0);
        H2BetweenOperation h2BetweenOperation0 = new H2BetweenOperation(h2Constant_H2IntConstant0,
                h2Constant_H2IntConstant0, h2BinaryOperation0, false);
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visit((NewBetweenOperatorNode<H2Expression>) h2BetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        H2ToStringVisitor h2ToStringVisitor0 = new H2ToStringVisitor();
        // Undeclared exception!
        try {
            h2ToStringVisitor0.visitSpecific((H2Expression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.h2.H2ToStringVisitor", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        LinkedList<H2Schema.H2Column> linkedList0 = new LinkedList<H2Schema.H2Column>();
        H2Schema.H2Table h2Schema_H2Table0 = new H2Schema.H2Table("", linkedList0);
        H2TableReference h2TableReference0 = new H2TableReference(h2Schema_H2Table0);
        H2Join h2Join0 = H2Join.createInnerJoin(h2TableReference0, h2TableReference0, h2TableReference0);
        String string0 = H2ToStringVisitor.asString(h2Join0);
        assertEquals(" INNER JOIN  ON ", string0);
    }

    @Test
    public void test11() throws Throwable {
        LinkedList<H2Schema.H2Column> linkedList0 = new LinkedList<H2Schema.H2Column>();
        H2Schema.H2Table h2Schema_H2Table0 = new H2Schema.H2Table("UIWVR!k-<&h|W", linkedList0);
        H2TableReference h2TableReference0 = new H2TableReference(h2Schema_H2Table0);
        H2Join h2Join0 = H2Join.createNaturalJoin(h2TableReference0, h2TableReference0);
        String string0 = H2ToStringVisitor.asString(h2Join0);
        assertEquals("UIWVR!k-<&h|W NATURAL JOIN UIWVR!k-<&h|W", string0);
    }

    // @Test
    // public void test12() throws Throwable {
    // H2Join h2Join0 = H2Join.createRightOuterJoin((H2TableReference) null, (H2TableReference) null,
    // (H2Expression) null);
    // // Undeclared exception!
    // try {
    // H2ToStringVisitor.asString(h2Join0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.h2.H2ToStringVisitor", e);
    // }
    // }

    @Test
    public void test13() throws Throwable {
        H2Select h2Select0 = new H2Select();
        // Undeclared exception!
        try {
            H2ToStringVisitor.asString(h2Select0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }
}
