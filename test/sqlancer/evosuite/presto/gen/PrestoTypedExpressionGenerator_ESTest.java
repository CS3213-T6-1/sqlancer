/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:11:53 GMT 2025
 */

package sqlancer.evosuite.presto.gen;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.presto.ast.PrestoAggregateFunction;
import sqlancer.presto.gen.PrestoTypedExpressionGenerator;
import sqlancer.presto.PrestoGlobalState;
import sqlancer.presto.PrestoSchema;

public class PrestoTypedExpressionGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandom();
        assertEquals("=", binaryOperatorNode_Operator0.getTextRepresentation());
    }

    @Test
    public void test01() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.NULL;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = new PrestoSchema.PrestoCompositeDataType(
                prestoSchema_PrestoDataType0, (-3245), 10);
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test02() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.ARRAY;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test03() throws Throwable {
        PrestoAggregateFunction prestoAggregateFunction0 = PrestoAggregateFunction.SUM_INTERVAL_DS;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoAggregateFunction0
                .getCompositeReturnType();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test04() throws Throwable {
        PrestoAggregateFunction prestoAggregateFunction0 = PrestoAggregateFunction.SUM_INTERVAL_YM;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoAggregateFunction0
                .getCompositeReturnType();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test05() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.TIMESTAMP_WITH_TIME_ZONE;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", binaryOperatorNode_Operator0.getTextRepresentation());
    }

    @Test
    public void test06() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.TIME_WITH_TIME_ZONE;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", binaryOperatorNode_Operator0.getTextRepresentation());
    }

    @Test
    public void test07() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.TIMESTAMP;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", binaryOperatorNode_Operator0.getTextRepresentation());
    }

    @Test
    public void test08() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.TIME;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", binaryOperatorNode_Operator0.getTextRepresentation());
    }

    @Test
    public void test09() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.DATE;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test10() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.JSON;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test11() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.VARBINARY;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test12() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.CHAR;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test13() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.VARCHAR;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test14() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.FLOAT;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test15() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.INT;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test16() throws Throwable {
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", binaryOperatorNode_Operator0.getTextRepresentation());
    }

    @Test
    public void test17() throws Throwable {
        PrestoTypedExpressionGenerator.PrestoLikeOperator prestoTypedExpressionGenerator_PrestoLikeOperator0 = PrestoTypedExpressionGenerator.PrestoLikeOperator
                .getRandom();
        String string0 = prestoTypedExpressionGenerator_PrestoLikeOperator0.getTextRepresentation();
        assertEquals("LIKE", string0);
    }

    @Test
    public void test18() throws Throwable {
        PrestoTypedExpressionGenerator.PrestoUnaryArithmeticOperator prestoTypedExpressionGenerator_PrestoUnaryArithmeticOperator0 = PrestoTypedExpressionGenerator.PrestoUnaryArithmeticOperator.MINUS;
        String string0 = prestoTypedExpressionGenerator_PrestoUnaryArithmeticOperator0.getTextRepresentation();
        assertEquals("-", string0);
    }

    @Test
    public void test19() throws Throwable {
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryTemporalOperator
                .getRandom();
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryTemporalOperator.ADD, binaryOperatorNode_Operator0);
    }

    @Test
    public void test20() throws Throwable {
        PrestoTypedExpressionGenerator.PrestoBinaryTemporalOperator prestoTypedExpressionGenerator_PrestoBinaryTemporalOperator0 = PrestoTypedExpressionGenerator.PrestoBinaryTemporalOperator.ADD;
        String string0 = prestoTypedExpressionGenerator_PrestoBinaryTemporalOperator0.getTextRepresentation();
        assertEquals("+", string0);
    }

    @Test
    public void test21() throws Throwable {
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryArithmeticOperator
                .getRandom();
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryArithmeticOperator.ADD, binaryOperatorNode_Operator0);
    }

    @Test
    public void test22() throws Throwable {
        PrestoTypedExpressionGenerator.PrestoBinaryArithmeticOperator prestoTypedExpressionGenerator_PrestoBinaryArithmeticOperator0 = PrestoTypedExpressionGenerator.PrestoBinaryArithmeticOperator.ADD;
        String string0 = prestoTypedExpressionGenerator_PrestoBinaryArithmeticOperator0.getTextRepresentation();
        assertEquals("+", string0);
    }

    @Test
    public void test23() throws Throwable {
        PrestoTypedExpressionGenerator.PrestBinaryStringOperator prestoTypedExpressionGenerator_PrestBinaryStringOperator0 = PrestoTypedExpressionGenerator.PrestBinaryStringOperator.CONCAT;
        String string0 = prestoTypedExpressionGenerator_PrestBinaryStringOperator0.getTextRepresentation();
        assertEquals("||", string0);
    }

    @Test
    public void test24() throws Throwable {
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestBinaryStringOperator
                .getRandom();
        assertEquals(PrestoTypedExpressionGenerator.PrestBinaryStringOperator.CONCAT, binaryOperatorNode_Operator0);
    }

    @Test
    public void test25() throws Throwable {
        PrestoTypedExpressionGenerator.PrestoBinaryLogicalOperator prestoTypedExpressionGenerator_PrestoBinaryLogicalOperator0 = PrestoTypedExpressionGenerator.PrestoBinaryLogicalOperator.OR;
        String string0 = prestoTypedExpressionGenerator_PrestoBinaryLogicalOperator0.getTextRepresentation();
        assertEquals("OR", string0);
    }

    @Test
    public void test26() throws Throwable {
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryLogicalOperator
                .getRandom();
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryLogicalOperator.AND, binaryOperatorNode_Operator0);
    }

    // @Test
    // public void test27() throws Throwable {
    // PrestoGlobalState prestoGlobalState0 = new PrestoGlobalState();
    // PrestoTypedExpressionGenerator prestoTypedExpressionGenerator0 = null;
    // try {
    // prestoTypedExpressionGenerator0 = new PrestoTypedExpressionGenerator(prestoGlobalState0);
    // fail("Expecting exception: NullPointerException");
    //
    // } catch (NullPointerException e) {
    // //
    // // no message in exception (getMessage() returned null)
    // //
    // verifyException("sqlancer.presto.gen.PrestoTypedExpressionGenerator", e);
    // }
    // }

    @Test
    public void test28() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.DECIMAL;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test29() throws Throwable {
        BinaryOperatorNode.Operator binaryOperatorNode_Operator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator
                .getRandomStringOperator();
        assertEquals(PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS,
                binaryOperatorNode_Operator0);
    }

    @Test
    public void test30() throws Throwable {
        PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator prestoTypedExpressionGenerator_PrestoBinaryComparisonOperator0 = PrestoTypedExpressionGenerator.PrestoBinaryComparisonOperator.EQUALS;
        String string0 = prestoTypedExpressionGenerator_PrestoBinaryComparisonOperator0.getTextRepresentation();
        assertEquals("=", string0);
    }
}
