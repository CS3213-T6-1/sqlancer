/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:41:32 GMT 2025
 */

package sqlancer.evosuite.presto;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.presto.PrestoOptions;
import sqlancer.presto.PrestoOracleFactory;

public class PrestoOptions_ESTest {

    @Test
    public void test0() throws Throwable {
        PrestoOptions prestoOptions0 = new PrestoOptions();
        prestoOptions0.oracles = null;
        prestoOptions0.getTestOracleFactory();
        assertTrue(prestoOptions0.testRowid);
        assertTrue(prestoOptions0.testNotNullConstraints);
        assertTrue(prestoOptions0.testIn);
        assertTrue(prestoOptions0.testIndexes);
        assertTrue(prestoOptions0.testTimestampConstants);
        assertTrue(prestoOptions0.testCollate);
        assertEquals(1, prestoOptions0.maxNumDeletes);
        assertTrue(prestoOptions0.testFloatConstants);
        assertTrue(prestoOptions0.testIntConstants);
        assertTrue(prestoOptions0.testCheckConstraints);
        assertTrue(prestoOptions0.testFunctions);
        assertTrue(prestoOptions0.testDateConstants);
        assertTrue(prestoOptions0.testCase);
        assertTrue(prestoOptions0.testBinaryComparisons);
        assertEquals(1, prestoOptions0.maxNumViews);
        assertEquals(5, prestoOptions0.maxNumUpdates);
        assertTrue(prestoOptions0.testStringConstants);
        assertTrue(prestoOptions0.testDefaultValues);
        assertTrue(prestoOptions0.testBinaryLogicals);
        assertTrue(prestoOptions0.testBooleanConstants);
        assertTrue(prestoOptions0.testCasts);
    }

    @Test
    public void test1() throws Throwable {
        PrestoOptions prestoOptions0 = new PrestoOptions();
        LinkedList<PrestoOracleFactory> linkedList0 = new LinkedList<PrestoOracleFactory>();
        prestoOptions0.oracles = (List<PrestoOracleFactory>) linkedList0;
        prestoOptions0.getTestOracleFactory();
        assertTrue(prestoOptions0.testBooleanConstants);
        assertTrue(prestoOptions0.testBinaryLogicals);
        assertTrue(prestoOptions0.testCollate);
        assertEquals(1, prestoOptions0.maxNumDeletes);
        assertTrue(prestoOptions0.testIn);
        assertTrue(prestoOptions0.testIndexes);
        assertEquals(5, prestoOptions0.maxNumUpdates);
        assertEquals(1, prestoOptions0.maxNumViews);
        assertTrue(prestoOptions0.testRowid);
        assertTrue(prestoOptions0.testDateConstants);
        assertTrue(prestoOptions0.testFloatConstants);
        assertTrue(prestoOptions0.testCheckConstraints);
        assertTrue(prestoOptions0.testStringConstants);
        assertTrue(prestoOptions0.testCasts);
        assertTrue(prestoOptions0.testIntConstants);
        assertTrue(prestoOptions0.testTimestampConstants);
        assertTrue(prestoOptions0.testDefaultValues);
        assertTrue(prestoOptions0.testNotNullConstraints);
        assertTrue(prestoOptions0.testCase);
        assertTrue(prestoOptions0.testFunctions);
        assertTrue(prestoOptions0.testBinaryComparisons);
    }

    @Test
    public void test2() throws Throwable {
        PrestoOptions prestoOptions0 = new PrestoOptions();
        LinkedList<PrestoOracleFactory> linkedList0 = new LinkedList<PrestoOracleFactory>();
        PrestoOracleFactory prestoOracleFactory0 = PrestoOracleFactory.GROUP_BY;
        linkedList0.add(prestoOracleFactory0);
        prestoOptions0.oracles = (List<PrestoOracleFactory>) linkedList0;
        prestoOptions0.getTestOracleFactory();
        assertEquals(1, prestoOptions0.maxNumViews);
        assertTrue(prestoOptions0.testDefaultValues);
        assertTrue(prestoOptions0.testStringConstants);
        assertEquals(1, prestoOptions0.maxNumDeletes);
        assertTrue(prestoOptions0.testCollate);
        assertTrue(prestoOptions0.testIn);
        assertTrue(prestoOptions0.testBinaryLogicals);
        assertTrue(prestoOptions0.testBinaryComparisons);
        assertTrue(prestoOptions0.testFloatConstants);
        assertTrue(prestoOptions0.testIntConstants);
        assertTrue(prestoOptions0.testTimestampConstants);
        assertTrue(prestoOptions0.testFunctions);
        assertTrue(prestoOptions0.testNotNullConstraints);
        assertTrue(prestoOptions0.testCase);
        assertEquals(5, prestoOptions0.maxNumUpdates);
        assertTrue(prestoOptions0.testRowid);
        assertTrue(prestoOptions0.testIndexes);
        assertTrue(prestoOptions0.testBooleanConstants);
        assertTrue(prestoOptions0.testCasts);
        assertTrue(prestoOptions0.testDateConstants);
        assertTrue(prestoOptions0.testCheckConstraints);
    }
}
