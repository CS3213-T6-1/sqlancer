/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:40:19 GMT 2025
 */

package sqlancer.evosuite.presto.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.presto.ast.PrestoMultiValuedComparisonOperator;
import sqlancer.presto.PrestoSchema;

public class PrestoMultiValuedComparisonOperator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PrestoMultiValuedComparisonOperator[] prestoMultiValuedComparisonOperatorArray0 = PrestoMultiValuedComparisonOperator
                .values();
        assertEquals(7, prestoMultiValuedComparisonOperatorArray0.length);
    }

    @Test
    public void test01() throws Throwable {
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .valueOf("GREATER");
        assertEquals(">", prestoMultiValuedComparisonOperator0.getStringRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        // Undeclared exception!
        try {
            PrestoMultiValuedComparisonOperator.getRandomForType((PrestoSchema.PrestoCompositeDataType) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.presto.ast.PrestoMultiValuedComparisonOperator", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.INTERVAL_DAY_TO_SECOND;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoMultiValuedComparisonOperator.EQUALS, prestoMultiValuedComparisonOperator0);
    }

    @Test
    public void test04() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.TIMESTAMP_WITH_TIME_ZONE;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoMultiValuedComparisonOperator.EQUALS, prestoMultiValuedComparisonOperator0);
    }

    @Test
    public void test05() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.TIME_WITH_TIME_ZONE;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", prestoMultiValuedComparisonOperator0.getStringRepresentation());
    }

    @Test
    public void test06() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.TIMESTAMP;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", prestoMultiValuedComparisonOperator0.getStringRepresentation());
    }

    @Test
    public void test07() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.TIME;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoMultiValuedComparisonOperator.EQUALS, prestoMultiValuedComparisonOperator0);
    }

    @Test
    public void test08() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.DATE;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoSchema_PrestoDataType0.get();
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", prestoMultiValuedComparisonOperator0.getStringRepresentation());
    }

    @Test
    public void test09() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.JSON;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoMultiValuedComparisonOperator.EQUALS, prestoMultiValuedComparisonOperator0);
    }

    @Test
    public void test10() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.VARBINARY;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoMultiValuedComparisonOperator.EQUALS, prestoMultiValuedComparisonOperator0);
    }

    @Test
    public void test11() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.CHAR;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoMultiValuedComparisonOperator.EQUALS, prestoMultiValuedComparisonOperator0);
    }

    @Test
    public void test12() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.VARCHAR;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoMultiValuedComparisonOperator.EQUALS, prestoMultiValuedComparisonOperator0);
    }

    @Test
    public void test13() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.DECIMAL;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", prestoMultiValuedComparisonOperator0.getStringRepresentation());
    }

    @Test
    public void test14() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.FLOAT;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", prestoMultiValuedComparisonOperator0.getStringRepresentation());
    }

    @Test
    public void test15() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.INT;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals("=", prestoMultiValuedComparisonOperator0.getStringRepresentation());
    }

    @Test
    public void test16() throws Throwable {
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandomForType(prestoSchema_PrestoCompositeDataType0);
        assertEquals(PrestoMultiValuedComparisonOperator.EQUALS, prestoMultiValuedComparisonOperator0);
    }

    @Test
    public void test17() throws Throwable {
        PrestoMultiValuedComparisonOperator prestoMultiValuedComparisonOperator0 = PrestoMultiValuedComparisonOperator
                .getRandom();
        String string0 = prestoMultiValuedComparisonOperator0.getStringRepresentation();
        assertEquals("=", string0);
    }
}
