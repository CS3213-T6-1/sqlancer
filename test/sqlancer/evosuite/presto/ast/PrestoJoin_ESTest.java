/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:17:51 GMT 2025
 */

package sqlancer.evosuite.presto.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.common.schema.AbstractTables;
import sqlancer.presto.ast.PrestoAggregateFunction;
import sqlancer.presto.ast.PrestoConditionalFunction;
import sqlancer.presto.ast.PrestoConstant;
import sqlancer.presto.ast.PrestoExpression;
import sqlancer.presto.ast.PrestoJoin;
import sqlancer.presto.ast.PrestoTableReference;
import sqlancer.presto.PrestoGlobalState;
import sqlancer.presto.PrestoSchema;

public class PrestoJoin_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PrestoTableReference prestoTableReference0 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        PrestoTableReference prestoTableReference1 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        PrestoAggregateFunction prestoAggregateFunction0 = PrestoAggregateFunction.APPROX_PERCENTILE_WEIGHT;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = prestoAggregateFunction0
                .getCompositeReturnType();
        PrestoExpression prestoExpression0 = PrestoConstant.generateConstant(prestoSchema_PrestoCompositeDataType0,
                true);
        PrestoJoin prestoJoin0 = PrestoJoin.createInnerJoin(prestoTableReference1, prestoTableReference0,
                prestoExpression0);
        assertEquals(PrestoJoin.JoinType.INNER, prestoJoin0.getJoinType());
    }

    @Test
    public void test01() throws Throwable {
        PrestoTableReference prestoTableReference0 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        PrestoTableReference prestoTableReference1 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        PrestoJoin prestoJoin0 = PrestoJoin.createRightOuterJoin(prestoTableReference1, prestoTableReference0,
                prestoTableReference0);
        assertEquals(PrestoJoin.JoinType.RIGHT, prestoJoin0.getJoinType());
    }

    @Test
    public void test02() throws Throwable {
        PrestoGlobalState prestoGlobalState0 = new PrestoGlobalState();
        LinkedList<PrestoSchema.PrestoColumn> linkedList0 = new LinkedList<PrestoSchema.PrestoColumn>();
        PrestoSchema.PrestoTable prestoSchema_PrestoTable0 = new PrestoSchema.PrestoTable("mTPhCbAmiquPYe", linkedList0,
                false);
        PrestoTableReference prestoTableReference0 = new PrestoTableReference(prestoSchema_PrestoTable0);
        PrestoTableReference prestoTableReference1 = new PrestoTableReference(prestoSchema_PrestoTable0);
        List<PrestoTableReference> list0 = List.of(prestoTableReference0, prestoTableReference1, prestoTableReference0,
                prestoTableReference1, prestoTableReference1, prestoTableReference0, prestoTableReference1,
                prestoTableReference1, prestoTableReference0);
        PrestoJoin.JoinType.getRandom();
        LinkedList<PrestoTableReference> linkedList1 = new LinkedList<PrestoTableReference>(list0);
        // Undeclared exception!
        try {
            PrestoJoin.getJoins(linkedList1, prestoGlobalState0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.presto.gen.PrestoTypedExpressionGenerator", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        LinkedList<PrestoSchema.PrestoColumn> linkedList0 = new LinkedList<PrestoSchema.PrestoColumn>();
        PrestoSchema.PrestoTable prestoSchema_PrestoTable0 = new PrestoSchema.PrestoTable("&8S1?2[28.uK~Kdq6s",
                linkedList0, true);
        PrestoTableReference prestoTableReference0 = new PrestoTableReference(prestoSchema_PrestoTable0);
        PrestoTableReference prestoTableReference1 = new PrestoTableReference(prestoSchema_PrestoTable0);
        PrestoJoin prestoJoin0 = PrestoJoin.createLeftOuterJoin(prestoTableReference0, prestoTableReference1,
                prestoTableReference0);
        assertEquals(PrestoJoin.JoinType.LEFT, prestoJoin0.getJoinType());
    }

    @Test
    public void test04() throws Throwable {
        PrestoJoin.JoinType prestoJoin_JoinType0 = PrestoJoin.JoinType.RIGHT;
        PrestoJoin prestoJoin0 = new PrestoJoin((PrestoTableReference) null, (PrestoTableReference) null,
                prestoJoin_JoinType0, (PrestoExpression) null);
        PrestoTableReference prestoTableReference0 = prestoJoin0.getRightTable();
        assertNull(prestoTableReference0);
    }

    @Test
    public void test05() throws Throwable {
        PrestoJoin prestoJoin0 = PrestoJoin.createLeftOuterJoin((PrestoTableReference) null,
                (PrestoTableReference) null, (PrestoExpression) null);
        PrestoExpression prestoExpression0 = prestoJoin0.getOnCondition();
        assertNull(prestoExpression0);
    }

    @Test
    public void test06() throws Throwable {
        PrestoJoin prestoJoin0 = PrestoJoin.createLeftOuterJoin((PrestoTableReference) null,
                (PrestoTableReference) null, (PrestoExpression) null);
        PrestoTableReference prestoTableReference0 = prestoJoin0.getLeftTable();
        assertNull(prestoTableReference0);
    }

    @Test
    public void test07() throws Throwable {
        PrestoGlobalState prestoGlobalState0 = new PrestoGlobalState();
        PrestoTableReference prestoTableReference0 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        List<PrestoTableReference> list0 = List.of(prestoTableReference0, prestoTableReference0, prestoTableReference0,
                prestoTableReference0, prestoTableReference0, prestoTableReference0, prestoTableReference0,
                prestoTableReference0, prestoTableReference0);
        PrestoJoin.JoinType.getRandom();
        // Undeclared exception!
        try {
            PrestoJoin.getJoins(list0, prestoGlobalState0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.ImmutableCollections", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        PrestoGlobalState prestoGlobalState0 = new PrestoGlobalState();
        PrestoTableReference prestoTableReference0 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        List<PrestoTableReference> list0 = List.of(prestoTableReference0, prestoTableReference0, prestoTableReference0,
                prestoTableReference0, prestoTableReference0, prestoTableReference0, prestoTableReference0,
                prestoTableReference0, prestoTableReference0);
        List<PrestoJoin> list1 = PrestoJoin.getJoins(list0, prestoGlobalState0);
        assertTrue(list1.isEmpty());
    }

    @Test
    public void test09() throws Throwable {
        PrestoGlobalState prestoGlobalState0 = new PrestoGlobalState();
        LinkedList<PrestoTableReference> linkedList0 = new LinkedList<PrestoTableReference>();
        List<PrestoJoin> list0 = PrestoJoin.getJoins(linkedList0, prestoGlobalState0);
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test10() throws Throwable {
        PrestoJoin.OuterType prestoJoin_OuterType0 = PrestoJoin.OuterType.getRandom();
        assertEquals(PrestoJoin.OuterType.FULL, prestoJoin_OuterType0);
    }

    @Test
    public void test11() throws Throwable {
        PrestoTableReference prestoTableReference0 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        PrestoJoin prestoJoin0 = PrestoJoin.createRightOuterJoin(prestoTableReference0, prestoTableReference0,
                prestoTableReference0);
        prestoJoin0.setOnClause((PrestoExpression) prestoTableReference0);
        assertNull(prestoJoin0.getOuterType());
    }

    @Test
    public void test12() throws Throwable {
        PrestoTableReference prestoTableReference0 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        PrestoJoin prestoJoin0 = PrestoJoin.createRightOuterJoin(prestoTableReference0, prestoTableReference0,
                prestoTableReference0);
        PrestoTableReference prestoTableReference1 = prestoJoin0.getLeftTable();
        assertSame(prestoTableReference0, prestoTableReference1);
    }

    @Test
    public void test13() throws Throwable {
        PrestoTableReference prestoTableReference0 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        PrestoJoin prestoJoin0 = PrestoJoin.createRightOuterJoin(prestoTableReference0, prestoTableReference0,
                prestoTableReference0);
        PrestoTableReference prestoTableReference1 = prestoJoin0.getRightTable();
        assertSame(prestoTableReference0, prestoTableReference1);
    }

    @Test
    public void test14() throws Throwable {
        LinkedList<PrestoSchema.PrestoTable> linkedList0 = new LinkedList<PrestoSchema.PrestoTable>();
        AbstractTables<PrestoSchema.PrestoTable, PrestoSchema.PrestoColumn> abstractTables0 = new AbstractTables<PrestoSchema.PrestoTable, PrestoSchema.PrestoColumn>(
                linkedList0);
        List<PrestoSchema.PrestoColumn> list0 = abstractTables0.getColumns();
        PrestoSchema.PrestoTable prestoSchema_PrestoTable0 = new PrestoSchema.PrestoTable(">6-H!.z>^Yj:ahd", list0,
                false);
        PrestoTableReference prestoTableReference0 = new PrestoTableReference(prestoSchema_PrestoTable0);
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.IF_TRUE;
        PrestoJoin prestoJoin0 = PrestoJoin.createInnerJoin(prestoTableReference0, prestoTableReference0,
                prestoConditionalFunction0);
        PrestoJoin.JoinType prestoJoin_JoinType0 = prestoJoin0.getJoinType();
        assertEquals(PrestoJoin.JoinType.INNER, prestoJoin_JoinType0);
    }

    @Test
    public void test15() throws Throwable {
        LinkedList<PrestoSchema.PrestoTable> linkedList0 = new LinkedList<PrestoSchema.PrestoTable>();
        AbstractTables<PrestoSchema.PrestoTable, PrestoSchema.PrestoColumn> abstractTables0 = new AbstractTables<PrestoSchema.PrestoTable, PrestoSchema.PrestoColumn>(
                linkedList0);
        List<PrestoSchema.PrestoColumn> list0 = abstractTables0.getColumns();
        PrestoSchema.PrestoTable prestoSchema_PrestoTable0 = new PrestoSchema.PrestoTable("fidj^N", list0, true);
        PrestoTableReference prestoTableReference0 = new PrestoTableReference(prestoSchema_PrestoTable0);
        PrestoJoin.JoinType prestoJoin_JoinType0 = PrestoJoin.JoinType.INNER;
        PrestoJoin prestoJoin0 = new PrestoJoin(prestoTableReference0, prestoTableReference0, prestoJoin_JoinType0,
                prestoTableReference0);
        PrestoExpression prestoExpression0 = prestoJoin0.getOnCondition();
        assertSame(prestoTableReference0, prestoExpression0);
    }

    @Test
    public void test16() throws Throwable {
        PrestoTableReference prestoTableReference0 = new PrestoTableReference((PrestoSchema.PrestoTable) null);
        PrestoJoin prestoJoin0 = PrestoJoin.createInnerJoin(prestoTableReference0, prestoTableReference0,
                prestoTableReference0);
        prestoJoin0.getOuterType();
    }
}
