/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:39:11 GMT 2025
 */

package sqlancer.evosuite.presto.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.presto.ast.PrestoConditionalFunction;
import sqlancer.presto.PrestoSchema;

public class PrestoConditionalFunction_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PrestoConditionalFunction[] prestoConditionalFunctionArray0 = PrestoConditionalFunction.values();
        assertEquals(4, prestoConditionalFunctionArray0.length);
    }

    @Test
    public void test01() throws Throwable {
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.COALESCE;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        PrestoSchema.PrestoDataType[] prestoSchema_PrestoDataTypeArray0 = prestoConditionalFunction0
                .getArgumentTypes(prestoSchema_PrestoCompositeDataType0);
        assertEquals(3, prestoSchema_PrestoDataTypeArray0.length);
    }

    @Test
    public void test02() throws Throwable {
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.IF_TRUE_FALSE;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        PrestoSchema.PrestoDataType[] prestoSchema_PrestoDataTypeArray0 = prestoConditionalFunction0
                .getArgumentTypes(prestoSchema_PrestoCompositeDataType0);
        assertEquals(3, prestoSchema_PrestoDataTypeArray0.length);
    }

    @Test
    public void test03() throws Throwable {
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.IF_TRUE_FALSE;
        boolean boolean0 = prestoConditionalFunction0.isCompatibleWithReturnType(prestoSchema_PrestoCompositeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test04() throws Throwable {
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.IF_TRUE;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        PrestoSchema.PrestoDataType[] prestoSchema_PrestoDataTypeArray0 = prestoConditionalFunction0
                .getArgumentTypes(prestoSchema_PrestoCompositeDataType0);
        assertEquals(2, prestoSchema_PrestoDataTypeArray0.length);
    }

    @Test
    public void test05() throws Throwable {
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.IF_TRUE;
        boolean boolean0 = prestoConditionalFunction0
                .isCompatibleWithReturnType((PrestoSchema.PrestoCompositeDataType) null);
        assertTrue(boolean0);
    }

    @Test
    public void test06() throws Throwable {
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.NULLIF;
        PrestoSchema.PrestoDataType[] prestoSchema_PrestoDataTypeArray0 = prestoConditionalFunction0
                .getArgumentTypes(prestoSchema_PrestoCompositeDataType0);
        assertEquals(2, prestoSchema_PrestoDataTypeArray0.length);
    }

    @Test
    public void test07() throws Throwable {
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.NULLIF;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        boolean boolean0 = prestoConditionalFunction0.isCompatibleWithReturnType(prestoSchema_PrestoCompositeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test08() throws Throwable {
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.COALESCE;
        int int0 = prestoConditionalFunction0.getNumberOfArguments();
        assertEquals((-1), int0);
    }

    @Test
    public void test09() throws Throwable {
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.COALESCE;
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.DECIMAL;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        boolean boolean0 = prestoConditionalFunction0.isCompatibleWithReturnType(prestoSchema_PrestoCompositeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test10() throws Throwable {
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.NULLIF;
        // Undeclared exception!
        try {
            prestoConditionalFunction0.getNumberOfArguments();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.presto.PrestoSchema$PrestoCompositeDataType", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        PrestoConditionalFunction prestoConditionalFunction0 = PrestoConditionalFunction.COALESCE;
        String string0 = prestoConditionalFunction0.getFunctionName();
        assertEquals("coalesce", string0);
    }
}
