/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 16:06:54 GMT 2025
 */

package sqlancer.evosuite.presto.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.presto.ast.PrestoComparisonFunction;
import sqlancer.presto.PrestoSchema;

public class PrestoComparisonFunction_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PrestoComparisonFunction[] prestoComparisonFunctionArray0 = PrestoComparisonFunction.values();
        assertEquals(2, prestoComparisonFunctionArray0.length);
    }

    @Test
    public void test01() throws Throwable {
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.GREATEST;
        // Undeclared exception!
        try {
            prestoComparisonFunction0.isCompatibleWithReturnType((PrestoSchema.PrestoCompositeDataType) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.presto.ast.PrestoComparisonFunction$1", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.LEAST;
        PrestoSchema.PrestoDataType[] prestoSchema_PrestoDataTypeArray0 = prestoComparisonFunction0
                .getArgumentTypes(prestoSchema_PrestoCompositeDataType0);
        assertEquals(3, prestoSchema_PrestoDataTypeArray0.length);
    }

    @Test
    public void test03() throws Throwable {
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.LEAST;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        boolean boolean0 = prestoComparisonFunction0.isCompatibleWithReturnType(prestoSchema_PrestoCompositeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test04() throws Throwable {
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.JSON;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.LEAST;
        boolean boolean0 = prestoComparisonFunction0.isCompatibleWithReturnType(prestoSchema_PrestoCompositeDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test05() throws Throwable {
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .getRandomWithoutNull();
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.GREATEST;
        boolean boolean0 = prestoComparisonFunction0.isCompatibleWithReturnType(prestoSchema_PrestoCompositeDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test06() throws Throwable {
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.GREATEST;
        PrestoSchema.PrestoDataType prestoSchema_PrestoDataType0 = PrestoSchema.PrestoDataType.JSON;
        PrestoSchema.PrestoCompositeDataType prestoSchema_PrestoCompositeDataType0 = PrestoSchema.PrestoCompositeDataType
                .fromDataType(prestoSchema_PrestoDataType0);
        boolean boolean0 = prestoComparisonFunction0.isCompatibleWithReturnType(prestoSchema_PrestoCompositeDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test07() throws Throwable {
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.LEAST;
        int int0 = prestoComparisonFunction0.getNumberOfArguments();
        assertEquals((-1), int0);
    }

    @Test
    public void test08() throws Throwable {
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.GREATEST;
        String string0 = prestoComparisonFunction0.getFunctionName();
        assertEquals("greatest", string0);
    }

    @Test
    public void test09() throws Throwable {
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.GREATEST;
        // Undeclared exception!
        try {
            prestoComparisonFunction0.getArgumentTypes((PrestoSchema.PrestoCompositeDataType) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.presto.ast.PrestoComparisonFunction$1", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        PrestoComparisonFunction prestoComparisonFunction0 = PrestoComparisonFunction.GREATEST;
        int int0 = prestoComparisonFunction0.getNumberOfArguments();
        assertEquals((-1), int0);
    }
}
