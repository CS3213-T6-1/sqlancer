/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 23:49:46 GMT 2025
 */

package sqlancer.evosuite.citus.gen;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;

import org.junit.jupiter.api.Test;

import sqlancer.citus.gen.CitusAlterTableGenerator;
import sqlancer.postgres.PostgresGlobalState;
import sqlancer.postgres.PostgresSchema;

public class CitusAlterTableGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
        LinkedList<PostgresSchema.PostgresIndex> linkedList1 = new LinkedList<PostgresSchema.PostgresIndex>();
        PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.STANDARD;
        PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable("~2", linkedList0,
                linkedList1, postgresSchema_PostgresTable_TableType0, null, true, true);
        PostgresGlobalState postgresGlobalState0 = new PostgresGlobalState();
        // Undeclared exception!
        try {
            CitusAlterTableGenerator.create(postgresSchema_PostgresTable0, postgresGlobalState0, true);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.gen.PostgresAlterTableGenerator", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test1() throws Throwable { LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new
     * LinkedList<PostgresSchema.PostgresColumn>(); LinkedList<PostgresSchema.PostgresIndex> linkedList1 = new
     * LinkedList<PostgresSchema.PostgresIndex>(); PostgresSchema.PostgresTable.TableType
     * postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.STANDARD;
     * PostgresSchema.PostgresStatisticsObject postgresSchema_PostgresStatisticsObject0 = mock(
     * PostgresSchema.PostgresStatisticsObject.class, new ViolatedAssumptionAnswer());
     * PostgresSchema.PostgresStatisticsObject postgresSchema_PostgresStatisticsObject1 = mock(
     * PostgresSchema.PostgresStatisticsObject.class, new ViolatedAssumptionAnswer());
     * List<PostgresSchema.PostgresStatisticsObject> list0 = List.of(postgresSchema_PostgresStatisticsObject0,
     * postgresSchema_PostgresStatisticsObject0, postgresSchema_PostgresStatisticsObject0,
     * postgresSchema_PostgresStatisticsObject0, postgresSchema_PostgresStatisticsObject0,
     * postgresSchema_PostgresStatisticsObject0, postgresSchema_PostgresStatisticsObject0,
     * postgresSchema_PostgresStatisticsObject1, postgresSchema_PostgresStatisticsObject0); PostgresSchema.PostgresTable
     * postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable("SYMBOL", linkedList0, linkedList1,
     * postgresSchema_PostgresTable_TableType0, list0, false, false); CitusGlobalState citusGlobalState0 = new
     * CitusGlobalState(); CitusAlterTableGenerator citusAlterTableGenerator0 = new
     * CitusAlterTableGenerator(postgresSchema_PostgresTable0, citusGlobalState0, false); }
     */

    @Test
    public void test2() throws Throwable {
        PostgresGlobalState postgresGlobalState0 = new PostgresGlobalState();
        // Undeclared exception!
        try {
            CitusAlterTableGenerator.create((PostgresSchema.PostgresTable) null, postgresGlobalState0, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.gen.PostgresAlterTableGenerator", e);
        }
    }
}
