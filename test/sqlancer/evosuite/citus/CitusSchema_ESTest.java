/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:47:06 GMT 2025
 */

package sqlancer.evosuite.citus;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;

import org.junit.jupiter.api.Test;

import sqlancer.StatisticsObject;
import sqlancer.citus.CitusSchema;
import sqlancer.postgres.PostgresSchema;
import sqlancer.SQLConnection;

public class CitusSchema_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        // Undeclared exception!
        try {
            CitusSchema.fromConnection((SQLConnection) null, "n9");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresSchema", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        CitusSchema citusSchema0 = null;
        try {
            citusSchema0 = new CitusSchema((List<CitusSchema.CitusTable>) null,
                    "SELECT table_name, column_to_column_name(logicalrelid, partkey) AS dist_col_name, colocationid FROM information_schema.tables LEFT OUTER JOIN pg_dist_partition ON logicalrelid=table_name::regclass WHERE table_schema='public' OR table_schema LIKE 'pg_temp_%';");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test2() throws Throwable { LinkedList<CitusSchema.CitusTable> linkedList0 = new
     * LinkedList<CitusSchema.CitusTable>(); String string0 = "3FG3!Z52Cb"; CitusSchema citusSchema0 = new
     * CitusSchema(linkedList0, "3FG3!Z52Cb"); citusSchema0.getFreeIndexName(); ResultSet resultSet0 =
     * mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn(false).when(resultSet0).next(); ResultSet
     * resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
     * doReturn(0).when(resultSet1).getInt(anyString()); doReturn("3FG3!Z52Cb", (String)
     * null).when(resultSet1).getString(anyString()); doReturn(true, false).when(resultSet1).next();
     * doReturn(false).when(resultSet1).wasNull(); PreparedStatement preparedStatement0 = mock(PreparedStatement.class,
     * new ViolatedAssumptionAnswer()); doReturn(resultSet0,
     * resultSet1).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class,
     * new ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
     * sQLConnection0.prepareStatement("i0"); Connection connection1 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(statement0, statement0).when(connection1).createStatement(); SQLConnection
     * sQLConnection1 = new SQLConnection(connection1); CitusSchema citusSchema1 =
     * CitusSchema.fromConnection(sQLConnection1, "81<*tB:xf!B3-4gC"); assertFalse(citusSchema1.equals((Object)
     * citusSchema0)); }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test3() throws Throwable { ResultSet resultSet0 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn(false).when(resultSet0).next(); ResultSet resultSet1 =
     * mock(ResultSet.class, new ViolatedAssumptionAnswer()); doReturn((-1982292595),
     * 34).when(resultSet1).getInt(anyString()); doReturn("i0", "3FG3!Z52Cb", "Q}8G^h?~g^qR",
     * "i0").when(resultSet1).getString(anyString());
     *  doReturn(true, true, false).when(resultSet1).next();
     *  doReturn(true, true).when(resultSet1).wasNull();
     *  PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
     *  doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
     *  Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
     *  doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
     *  SQLConnection sQLConnection0 = new SQLConnection(connection0);
     *  Statement statement0 = sQLConnection0.prepareStatement("i0");
     *  Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
     *  doReturn(statement0, statement0).when(connection1).createStatement();
     *  SQLConnection sQLConnection1 = new SQLConnection(connection1);
     *  CitusSchema citusSchema0 = CitusSchema.fromConnection(sQLConnection1, "mpF8f%3lA}1>`)Co");
     *  assertEquals("mpF8f%3lA}1>`)Co", citusSchema0.getDatabaseName()); }*/

    @Test
    public void test4() throws Throwable {
        LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("");
        PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.STANDARD;
        Integer integer0 = 19;
        CitusSchema.CitusTable citusSchema_CitusTable0 = new CitusSchema.CitusTable("", linkedList0,
                (List<PostgresSchema.PostgresIndex>) null, postgresSchema_PostgresTable_TableType0,
                null, true, true, postgresSchema_PostgresColumn0,
                integer0);
        citusSchema_CitusTable0.setDistributionColumn(postgresSchema_PostgresColumn0);
        assertTrue(citusSchema_CitusTable0.isView());
    }

    @Test
    public void test5() throws Throwable {
        LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("");
        PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.STANDARD;
        Integer integer0 = 19;
        CitusSchema.CitusTable citusSchema_CitusTable0 = new CitusSchema.CitusTable("", linkedList0,
                (List<PostgresSchema.PostgresIndex>) null, postgresSchema_PostgresTable_TableType0,
                null, true, true, postgresSchema_PostgresColumn0,
                integer0);
        Integer integer1 = citusSchema_CitusTable0.getColocationId();
        assertEquals(19, (int) integer1);
    }

    @Test
    public void test6() throws Throwable {
        LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
        PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.TEMPORARY;
        LinkedList<StatisticsObject> linkedList1 = new LinkedList<StatisticsObject>();
        PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable(
                ".)1*c/,,RZ+j@?I([", linkedList0, (List<PostgresSchema.PostgresIndex>) null,
                postgresSchema_PostgresTable_TableType0, linkedList1, false, false);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = new PostgresSchema.PostgresColumn(
                ".)1*c/,,RZ+j@?I([", postgresSchema_PostgresDataType0);
        Integer integer0 = 9;
        CitusSchema.CitusTable citusSchema_CitusTable0 = new CitusSchema.CitusTable(postgresSchema_PostgresTable0,
                postgresSchema_PostgresColumn0, integer0);
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn1 = citusSchema_CitusTable0.getDistributionColumn();
        assertSame(postgresSchema_PostgresColumn0, postgresSchema_PostgresColumn1);
    }

    @Test
    public void test7() throws Throwable {
        LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("");
        PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.STANDARD;
        Integer integer0 = 19;
        CitusSchema.CitusTable citusSchema_CitusTable0 = new CitusSchema.CitusTable("", linkedList0,
                (List<PostgresSchema.PostgresIndex>) null, postgresSchema_PostgresTable_TableType0,
                 null, true, true, postgresSchema_PostgresColumn0,
                integer0);
        citusSchema_CitusTable0.setColocationId(integer0);
        assertEquals(PostgresSchema.PostgresTable.TableType.STANDARD, citusSchema_CitusTable0.getTableType());
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test8() throws Throwable { LinkedList<CitusSchema.CitusTable> linkedList0 = new
     * LinkedList<CitusSchema.CitusTable>(); CitusSchema citusSchema0 = new CitusSchema(linkedList0, "3FG3!Z52Cb");
     * citusSchema0.getFreeIndexName(); ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
     * doReturn(false).when(resultSet0).next(); ResultSet resultSet1 = mock(ResultSet.class, new
     * ViolatedAssumptionAnswer()); doReturn(false).when(resultSet1).next(); PreparedStatement preparedStatement0 =
     * mock(PreparedStatement.class, new ViolatedAssumptionAnswer()); doReturn(resultSet0, resultSet1, (ResultSet)
     * null).when(preparedStatement0).executeQuery(anyString()); Connection connection0 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
     * SQLConnection sQLConnection0 = new SQLConnection(connection0); Statement statement0 =
     * sQLConnection0.prepareStatement("i0"); Connection connection1 = mock(Connection.class, new
     * ViolatedAssumptionAnswer()); doReturn(statement0, statement0, statement0).when(connection1).createStatement();
     * SQLConnection sQLConnection1 = new SQLConnection(connection1); CitusSchema.fromConnection(sQLConnection1,
     * "mpF8f%3lA}1>`)Co");
    // Undeclared exception!
        try
        {
            CitusSchema.fromConnection(sQLConnection1, (String) null);
            fail("Expecting exception: NullPointerException");

        }catch(NullPointerException e)

        {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresSchema", e);
        }
    }*/

}
