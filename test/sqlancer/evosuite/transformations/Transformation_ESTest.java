/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:30:47 GMT 2025
 */

package sqlancer.evosuite.transformations;

import static org.junit.jupiter.api.Assertions.*;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.transformations.Transformation;

public class Transformation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test00() throws Throwable { Transformation transformation0 = new Transformation("VR%=8v:MXG");
     * Boolean boolean0 = Boolean.TRUE; LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
     * linkedList0.addFirst(boolean0); linkedList0.add(boolean0); BiConsumer<Boolean, List<Boolean>> biConsumer0 =
     * (BiConsumer<Boolean, List<Boolean>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
     * transformation0.tryRemoveElms(boolean0, (List<Boolean>) linkedList0, biConsumer0); assertEquals(1L,
     * transformation0.getReduceSteps()); }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test01() throws Throwable { Transformation transformation0 = new Transformation("");
     * LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>(); Boolean boolean0 = Boolean.valueOf(""); Boolean
     * boolean1 = Boolean.valueOf(true); BiConsumer<LinkedList<Boolean>, Boolean> biConsumer0 =
     * (BiConsumer<LinkedList<Boolean>, Boolean>) mock( BiConsumer.class, new ViolatedAssumptionAnswer()); boolean
     * boolean2 = transformation0.tryReplace(linkedList0, boolean0, boolean1, biConsumer0); assertFalse(boolean2); }
     */

    @Test
    public void test02() throws Throwable {
        Transformation transformation0 = new Transformation("");
        transformation0.onStatementChanged();
        assertFalse(transformation0.changed());
    }

    @Test
    public void test03() throws Throwable {
        Transformation transformation0 = new Transformation("VR%=8v:MXG");
        transformation0.desc = "5L,?J";
        transformation0.desc = "5L,?J";
        transformation0.desc = null;
        String string0 = transformation0.toString();
        assertNull(string0);
    }

    @Test
    public void test04() throws Throwable {
        Transformation transformation0 = new Transformation("4IV!M/-e`tj");
        String string0 = transformation0.toString();
        assertEquals("4IV!M/-e`tj", string0);
        assertNotNull(string0);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test05() throws Throwable { Transformation transformation0 = new Transformation("4IV!M/-e`tj");
     * Boolean boolean0 = Boolean.TRUE; List<Boolean> list0 = List.of(boolean0); BiConsumer<Boolean, List<Boolean>>
     * biConsumer0 = (BiConsumer<Boolean, List<Boolean>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
     * transformation0.tryRemoveElms(boolean0, list0, biConsumer0); assertEquals(1L, transformation0.getReduceSteps());
     *
     * long long0 = Transformation.getReduceSteps(); assertEquals(1L, long0); }
     */

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test06() throws Throwable { Transformation transformation0 = new Transformation(""); Boolean
     * boolean0 = Boolean.TRUE; Supplier<Boolean> supplier0 = (Supplier<Boolean>) mock(Supplier.class, new
     * ViolatedAssumptionAnswer()); doReturn(boolean0).when(supplier0).get(); Transformation.setBugJudgement(supplier0);
     * boolean boolean1 = transformation0.bugStillTriggers(); assertTrue(boolean1); }
     */

    @Test
    public void test07() throws Throwable {
        Transformation transformation0 = new Transformation((String) null);
        LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
        Boolean boolean0 = Boolean.TRUE;
        // Undeclared exception!
        try {
            transformation0.tryReplace(linkedList0, boolean0, boolean0,
                    (BiConsumer<LinkedList<Boolean>, Boolean>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.transformations.Transformation", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        Transformation transformation0 = new Transformation();
        Boolean boolean0 = Boolean.TRUE;
        LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
        // Undeclared exception!
        try {
            transformation0.tryRemoveElms(boolean0, (List<Boolean>) linkedList0,
                    (BiConsumer<Boolean, List<Boolean>>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.transformations.Transformation", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        Transformation transformation0 = new Transformation();
        Boolean boolean0 = Boolean.FALSE;
        // Undeclared exception!
        try {
            transformation0.tryRemove(boolean0, boolean0, (BiConsumer<Boolean, Boolean>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.transformations.Transformation", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        Transformation transformation0 = new Transformation("");
        boolean boolean0 = transformation0.bugStillTriggers();
        assertFalse(boolean0);
    }

    @Test
    public void test11() throws Throwable {
        Transformation transformation0 = new Transformation("");
        transformation0.setStatementChangedCallBack((Consumer<String>) null);
        assertFalse(transformation0.changed());
    }

    @Test
    public void test12() throws Throwable {
        Transformation transformation0 = new Transformation("");
        boolean boolean0 = transformation0.changed();
        assertFalse(boolean0);
    }

    @Test
    public void test13() throws Throwable {
        Transformation transformation0 = new Transformation("4IV!M/-e`tj");
        boolean boolean0 = transformation0.init("4IV!M/-e`tj");
        assertFalse(transformation0.changed());
        assertTrue(boolean0);
        assertEquals("4IV!M/-e`tj", transformation0.toString());
    }

    @Test
    public void test14() throws Throwable {
        Transformation transformation0 = new Transformation("");
        String string0 = transformation0.toString();
        assertEquals("", string0);
    }

    @Test
    public void test15() throws Throwable {
        Transformation transformation0 = new Transformation("");
        transformation0.apply();
        assertFalse(transformation0.changed());
    }

    @Test
    public void test16() throws Throwable {
        long long0 = Transformation.getReduceSteps();
        assertEquals(0L, long0);
    }
}
