/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 17:13:36 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresAlias;
import sqlancer.postgres.ast.PostgresBinaryArithmeticOperation;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresFunction;
import sqlancer.postgres.ast.PostgresJoin;
import sqlancer.postgres.ast.PostgresLikeOperation;
import sqlancer.postgres.ast.PostgresPostfixOperation;
import sqlancer.postgres.ast.PostgresSelect;
import sqlancer.postgres.gen.PostgresExpressionGenerator;
import sqlancer.postgres.PostgresSchema;
import sqlancer.Randomly;

public class PostgresBinaryArithmeticOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant("");
        PostgresConstant.IntConstant postgresConstant_IntConstant0 = new PostgresConstant.IntConstant(2326L);
        PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator.MODULO;
        PostgresBinaryArithmeticOperation postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation(
                postgresConstant_IntConstant0, postgresConstant_StringConstant0,
                postgresBinaryArithmeticOperation_PostgresBinaryOperator0);
        PostgresConstant postgresConstant0 = postgresBinaryArithmeticOperation0.getExpectedValue();
        assertEquals("0", postgresConstant0.getTextRepresentation());
    }

    @Test
    public void test01() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(true);
        PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator.DIVISION;
        PostgresBinaryArithmeticOperation postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation(
                postgresConstant_BooleanConstant0, postgresConstant_BooleanConstant0,
                postgresBinaryArithmeticOperation_PostgresBinaryOperator0);
        PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator1 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator.MODULO;
        PostgresBinaryArithmeticOperation postgresBinaryArithmeticOperation1 = new PostgresBinaryArithmeticOperation(
                postgresBinaryArithmeticOperation0, postgresBinaryArithmeticOperation0,
                postgresBinaryArithmeticOperation_PostgresBinaryOperator1);
        PostgresConstant postgresConstant0 = postgresBinaryArithmeticOperation1.getExpectedValue();
        assertEquals("0", postgresConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant("|Q");
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator.MODULO;
        PostgresBinaryArithmeticOperation postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation(
                postgresConstant_StringConstant0, postgresConstant0,
                postgresBinaryArithmeticOperation_PostgresBinaryOperator0);
        PostgresConstant postgresConstant1 = postgresBinaryArithmeticOperation0.getExpectedValue();
        assertEquals((-1L), postgresConstant1.asInt());
    }

    @Test
    public void test03() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant("");
        PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator.DIVISION;
        PostgresBinaryArithmeticOperation postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation(
                postgresConstant_StringConstant0, postgresConstant_StringConstant0,
                postgresBinaryArithmeticOperation_PostgresBinaryOperator0);
        PostgresConstant postgresConstant0 = postgresBinaryArithmeticOperation0.getExpectedValue();
        assertEquals("1", postgresConstant0.getUnquotedTextRepresentation());
    }

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test04() throws Throwable { PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * .getRandom(); PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
 * "4~cRay?@{bn"); PostgresBinaryArithmeticOperation postgresBinaryArithmeticOperation0 = new
 * PostgresBinaryArithmeticOperation( postgresConstant_StringConstant0, postgresConstant_StringConstant0,
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0); PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator1 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.MULTIPLICATION; PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation1 = new PostgresBinaryArithmeticOperation( postgresConstant_StringConstant0,
 * postgresBinaryArithmeticOperation0, postgresBinaryArithmeticOperation_PostgresBinaryOperator1); PostgresConstant
 * postgresConstant0 = postgresBinaryArithmeticOperation1.getExpectedValue(); assertEquals("2",
 * postgresConstant0.getUnquotedTextRepresentation()); }
 *
 * @Test public void test05() throws Throwable { Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class,
 * new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT; PostgresExpression postgresExpression0 =
 * PostgresExpressionGenerator.generateConstant(randomly0, postgresSchema_PostgresDataType0);
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.SUBTRACTION; PostgresConstant.StringConstant
 * postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(""); PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresExpression0,
 * postgresConstant_StringConstant0, postgresBinaryArithmeticOperation_PostgresBinaryOperator0); PostgresConstant
 * postgresConstant0 = postgresBinaryArithmeticOperation0.getExpectedValue(); assertEquals("2",
 * postgresConstant0.getUnquotedTextRepresentation()); assertNotNull(postgresConstant0); }
 *
 * @Test public void test06() throws Throwable { Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class,
 * new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT; PostgresConstant.IntConstant
 * postgresConstant_IntConstant0 = (PostgresConstant.IntConstant) PostgresExpressionGenerator
 * .generateConstant(randomly0, postgresSchema_PostgresDataType0); PostgresPostfixOperation.PostfixOperator
 * postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_NULL;
 * PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(postgresConstant_IntConstant0,
 * postgresPostfixOperation_PostfixOperator0); PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 =
 * (PostgresConstant.BooleanConstant) postgresPostfixOperation0 .getExpectedValue();
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.ADDITION; PostgresConstant.IntConstant
 * postgresConstant_IntConstant1 = (PostgresConstant.IntConstant)
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 .apply(postgresConstant_IntConstant0,
 * postgresConstant_BooleanConstant0); assertEquals("1", postgresConstant_IntConstant1.getUnquotedTextRepresentation());
 * }
 *
 * @Test public void test07() throws Throwable { PostgresConstant postgresConstant0 =
 * PostgresConstant.createFloatConstant(0.0F); PostgresLikeOperation postgresLikeOperation0 = new
 * PostgresLikeOperation(postgresConstant0, postgresConstant0); PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.SUBTRACTION; PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresConstant0,
 * postgresLikeOperation0, postgresBinaryArithmeticOperation_PostgresBinaryOperator0); // Undeclared exception! try {
 * postgresBinaryArithmeticOperation0.getExpectedValue(); fail("Expecting exception: UnsupportedOperationException");
 *
 * } catch (UnsupportedOperationException e) { // // 0.0 // verifyException("sqlancer.postgres.ast.PostgresConstant",
 * e); } }
 *
 * @Test public void test08() throws Throwable { PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * .getRandom(); PostgresBinaryArithmeticOperation postgresBinaryArithmeticOperation0 = new
 * PostgresBinaryArithmeticOperation( (PostgresExpression) null, (PostgresExpression) null,
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0); // Undeclared exception! try {
 * postgresBinaryArithmeticOperation0.getExpectedValue(); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.postgres.ast.PostgresBinaryArithmeticOperation", e); } }
 *
 * @Test public void test09() throws Throwable { PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * .getRandom(); PostgresJoin.PostgresJoinType postgresJoin_PostgresJoinType0 = PostgresJoin.PostgresJoinType.CROSS;
 * PostgresJoin postgresJoin0 = new PostgresJoin((PostgresExpression) null, (PostgresExpression) null,
 * postgresJoin_PostgresJoinType0, (PostgresExpression) null); PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresJoin0, (PostgresExpression) null,
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0); // Undeclared exception! try {
 * postgresBinaryArithmeticOperation0.getExpectedValue(); fail("Expecting exception: AssertionError");
 *
 * } catch (AssertionError e) { // // no message in exception (getMessage() returned null) // } }
 *
 * @Test public void test10() throws Throwable { PostgresFunction.PostgresFunctionWithResult
 * postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
 * PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
 * PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0]; PostgresFunction postgresFunction0 = new
 * PostgresFunction(postgresFunction_PostgresFunctionWithResult0, postgresSchema_PostgresDataType0,
 * postgresExpressionArray0); PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.MODULO; PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresFunction0, postgresFunction0,
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0); // Undeclared exception! try {
 * postgresBinaryArithmeticOperation0.getExpectedValue(); fail("Expecting exception: ArrayIndexOutOfBoundsException");
 *
 * } catch (ArrayIndexOutOfBoundsException e) { // // Index 0 out of bounds for length 0 //
 * verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$2", e); } }
 *
 * @Test public void test11() throws Throwable { PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * .getRandom(); PostgresConstant.FloatConstant postgresConstant_FloatConstant0 = new
 * PostgresConstant.FloatConstant(1.0F); PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 =
 * new PostgresConstant.PostgresNullConstant(); PostgresConstant postgresConstant0 =
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 .apply(postgresConstant_FloatConstant0,
 * postgresConstant_PostgresNullConstant0); assertEquals("NULL", postgresConstant0.getTextRepresentation()); }
 *
 * @Test public void test12() throws Throwable { PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * .getRandom(); PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new
 * PostgresConstant.PostgresNullConstant(); PostgresAlias postgresAlias0 = new
 * PostgresAlias(postgresConstant_PostgresNullConstant0, ""); PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresConstant_PostgresNullConstant0,
 * postgresAlias0, postgresBinaryArithmeticOperation_PostgresBinaryOperator0); PostgresConstant postgresConstant0 =
 * postgresBinaryArithmeticOperation0.getExpectedValue(); assertNull(postgresConstant0); }
 *
 * @Test public void test13() throws Throwable { PostgresSelect postgresSelect0 = new PostgresSelect();
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.ADDITION; PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresSelect0, postgresSelect0,
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0); PostgresConstant postgresConstant0 =
 * postgresBinaryArithmeticOperation0.getExpectedValue(); assertNull(postgresConstant0); }
 *
 * @Test public void test14() throws Throwable { PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 =
 * new PostgresConstant.BooleanConstant(true); PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.SUBTRACTION; PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresConstant_BooleanConstant0,
 * postgresConstant_BooleanConstant0, postgresBinaryArithmeticOperation_PostgresBinaryOperator0); PostgresConstant
 * postgresConstant0 = PostgresConstant.createNullConstant(); PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation1 = new PostgresBinaryArithmeticOperation( postgresBinaryArithmeticOperation0,
 * postgresConstant0, postgresBinaryArithmeticOperation_PostgresBinaryOperator0); PostgresConstant postgresConstant1 =
 * postgresBinaryArithmeticOperation1.getExpectedValue(); assertNull(postgresConstant1.getExpressionType()); }
 *
 * @Test public void test15() throws Throwable { PostgresConstant postgresConstant0 =
 * PostgresConstant.createIntConstant(2964L); PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.DIVISION; PostgresConstant postgresConstant1 =
 * PostgresConstant.createBooleanConstant(false); PostgresConstant postgresConstant2 =
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 .apply(postgresConstant0, postgresConstant1);
 * assertEquals("-1", postgresConstant2.getUnquotedTextRepresentation()); }
 *
 * @Test public void test16() throws Throwable { PostgresConstant postgresConstant0 =
 * PostgresConstant.createNullConstant(); PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.MULTIPLICATION; PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresConstant0, postgresConstant0,
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0); PostgresConstant postgresConstant1 =
 * postgresBinaryArithmeticOperation0.getExpectedValue(); assertFalse(postgresConstant1.equals((Object)
 * postgresConstant0)); }
 *
 * @Test public void test17() throws Throwable { PostgresConstant postgresConstant0 =
 * PostgresConstant.createNullConstant(); PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.EXPONENTIATION; PostgresConstant postgresConstant1 =
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 .apply(postgresConstant0, postgresConstant0);
 * assertNull(postgresConstant1); }
 *
 * @Test public void test18() throws Throwable { PostgresConstant postgresConstant0 =
 * PostgresConstant.createIntConstant(2964L); PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.DIVISION; PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresConstant0, postgresConstant0,
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0); PostgresConstant postgresConstant1 =
 * postgresBinaryArithmeticOperation0.getExpectedValue(); assertNotNull(postgresConstant1); assertEquals(1L,
 * postgresConstant1.asInt()); }
 *
 * @Test public void test19() throws Throwable { PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.MULTIPLICATION; String string0 =
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0.getTextRepresentation(); assertEquals("*", string0); }
 *
 * @Test public void test20() throws Throwable { PostgresConstant postgresConstant0 =
 * PostgresConstant.createIntConstant(2964L); PostgresBinaryArithmeticOperation.PostgresBinaryOperator
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0 =
 * PostgresBinaryArithmeticOperation.PostgresBinaryOperator.DIVISION; PostgresBinaryArithmeticOperation
 * postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation( postgresConstant0, postgresConstant0,
 * postgresBinaryArithmeticOperation_PostgresBinaryOperator0); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = postgresBinaryArithmeticOperation0 .getExpressionType();
 * assertEquals(PostgresSchema.PostgresDataType.INT, postgresSchema_PostgresDataType0); } }
 */
