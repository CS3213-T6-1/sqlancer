/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 02:01:28 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresConcatOperation;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresOrderByTerm;

public class PostgresOrderByTerm_ESTest {

    @Test
    public void test0() throws Throwable {
        PostgresConstant.FloatConstant postgresConstant_FloatConstant0 = new PostgresConstant.FloatConstant((-1.0F));
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder.ASC;
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm(postgresConstant_FloatConstant0,
                postgresOrderByTerm_PostgresOrder0);
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder1 = postgresOrderByTerm0.getOrder();
        assertSame(postgresOrderByTerm_PostgresOrder0, postgresOrderByTerm_PostgresOrder1);
    }

    @Test
    public void test1() throws Throwable {
        PostgresConcatOperation postgresConcatOperation0 = new PostgresConcatOperation((PostgresExpression) null,
                (PostgresExpression) null);
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder.ASC;
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm(postgresConcatOperation0,
                postgresOrderByTerm_PostgresOrder0);
        PostgresConcatOperation postgresConcatOperation1 = (PostgresConcatOperation) postgresOrderByTerm0.getExpr();
        assertEquals("||", postgresConcatOperation1.getOperatorRepresentation());
    }

    @Test
    public void test2() throws Throwable {
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm((PostgresExpression) null,
                (PostgresOrderByTerm.PostgresOrder) null);
        // Undeclared exception!
        try {
            postgresOrderByTerm0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.postgres.ast.PostgresOrderByTerm@1
            //
        }
    }

    @Test
    public void test3() throws Throwable {
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder.ASC;
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm((PostgresExpression) null,
                postgresOrderByTerm_PostgresOrder0);
        postgresOrderByTerm0.getExpressionType();
    }

    @Test
    public void test4() throws Throwable {
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm((PostgresExpression) null,
                (PostgresOrderByTerm.PostgresOrder) null);
        postgresOrderByTerm0.getOrder();
    }

    @Test
    public void test5() throws Throwable {
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder.DESC;
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm((PostgresExpression) null,
                postgresOrderByTerm_PostgresOrder0);
        PostgresExpression postgresExpression0 = postgresOrderByTerm0.getExpr();
        assertNull(postgresExpression0);
    }

    @Test
    public void test6() throws Throwable {
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder
                .getRandomOrder();
        assertEquals(PostgresOrderByTerm.PostgresOrder.ASC, postgresOrderByTerm_PostgresOrder0);
    }
}
