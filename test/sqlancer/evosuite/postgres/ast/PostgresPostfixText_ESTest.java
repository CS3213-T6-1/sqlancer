/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:38:27 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.math.BigDecimal;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresConcatOperation;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresPostfixOperation;
import sqlancer.postgres.ast.PostgresPostfixText;
import sqlancer.postgres.ast.PostgresSelect;
import sqlancer.postgres.PostgresSchema;

public class PostgresPostfixText_ESTest {

    @Test
    public void test00() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        PostgresConstant.DecimalConstant postgresConstant_DecimalConstant0 = new PostgresConstant.DecimalConstant(
                bigDecimal0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText((PostgresExpression) null, (String) null,
                postgresConstant_DecimalConstant0, postgresSchema_PostgresDataType0);
        String string0 = postgresPostfixText0.getText();
        assertNull(string0);
    }

    @Test
    public void test01() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresConstant postgresConstant0 = PostgresConstant.createTextConstant("year");
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresSelect0, "", postgresConstant0,
                postgresSchema_PostgresDataType0);
        String string0 = postgresPostfixText0.getText();
        assertEquals("", string0);
    }

    @Test
    public void test02() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresConstant postgresConstant0 = PostgresConstant.createTextConstant("year");
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresSelect0, "", postgresConstant0,
                postgresSchema_PostgresDataType0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType1 = postgresPostfixText0.getExpressionType();
        assertSame(postgresSchema_PostgresDataType0, postgresSchema_PostgresDataType1);
    }

    @Test
    public void test03() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        PostgresConstant.DecimalConstant postgresConstant_DecimalConstant0 = new PostgresConstant.DecimalConstant(
                bigDecimal0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText((PostgresExpression) null, (String) null,
                postgresConstant_DecimalConstant0, postgresSchema_PostgresDataType0);
        PostgresExpression postgresExpression0 = postgresPostfixText0.getExpr();
        assertNull(postgresExpression0);
    }

    @Test
    public void test04() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresConcatOperation postgresConcatOperation0 = new PostgresConcatOperation(postgresConstant0,
                postgresConstant0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresConcatOperation0, "",
                postgresConstant0, postgresSchema_PostgresDataType0);
        PostgresConstant postgresConstant1 = postgresPostfixText0.getExpectedValue();
        assertFalse(postgresConstant1.isString());
    }

    @Test
    public void test05() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        PostgresConstant postgresConstant1 = PostgresConstant.createIntConstant(0L);
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresConstant0, "tq-*ZY",
                postgresConstant1, postgresSchema_PostgresDataType0);
        PostgresConstant postgresConstant2 = postgresPostfixText0.getExpectedValue();
        assertFalse(postgresConstant2.isNull());
    }

    @Test
    public void test06() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresConstant postgresConstant1 = PostgresConstant.createTrue();
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresConstant0, ":dt+3jV\"\"l!.BF",
                postgresConstant1, postgresSchema_PostgresDataType0);
        PostgresConstant postgresConstant2 = postgresPostfixText0.getExpectedValue();
        assertEquals("TRUE", postgresConstant2.getUnquotedTextRepresentation());
    }

    @Test
    public void test07() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresConstant postgresConstant0 = PostgresConstant.createTextConstant("year");
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresSelect0, "", postgresConstant0,
                postgresSchema_PostgresDataType0);
        PostgresConstant postgresConstant1 = postgresPostfixText0.getExpectedValue();
        assertFalse(postgresConstant1.isBoolean());
    }

    @Test
    public void test08() throws Throwable {
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_FALSE;
        PostgresExpression postgresExpression0 = PostgresPostfixOperation.create((PostgresExpression) null,
                postgresPostfixOperation_PostfixOperator0);
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresExpression0, "money",
                (PostgresConstant) null, (PostgresSchema.PostgresDataType) null);
        postgresPostfixText0.getExpressionType();
    }

    @Test
    public void test09() throws Throwable {
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_FALSE;
        PostgresExpression postgresExpression0 = PostgresPostfixOperation.create((PostgresExpression) null,
                postgresPostfixOperation_PostfixOperator0);
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresExpression0, "money",
                (PostgresConstant) null, (PostgresSchema.PostgresDataType) null);
        PostgresConstant postgresConstant0 = postgresPostfixText0.getExpectedValue();
        assertNull(postgresConstant0);
    }

    @Test
    public void test10() throws Throwable {
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_FALSE;
        PostgresExpression postgresExpression0 = PostgresPostfixOperation.create((PostgresExpression) null,
                postgresPostfixOperation_PostfixOperator0);
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresExpression0, "money",
                (PostgresConstant) null, (PostgresSchema.PostgresDataType) null);
        String string0 = postgresPostfixText0.getText();
        assertEquals("money", string0);
    }

    @Test
    public void test11() throws Throwable {
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_FALSE;
        PostgresExpression postgresExpression0 = PostgresPostfixOperation.create((PostgresExpression) null,
                postgresPostfixOperation_PostfixOperator0);
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresExpression0, "money",
                (PostgresConstant) null, (PostgresSchema.PostgresDataType) null);
        PostgresExpression postgresExpression1 = postgresPostfixText0.getExpr();
        assertSame(postgresExpression1, postgresExpression0);
    }
}
