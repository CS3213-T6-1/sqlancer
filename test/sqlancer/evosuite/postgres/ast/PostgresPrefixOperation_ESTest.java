/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:09:23 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import sqlancer.common.ast.JoinBase;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresFunction;
import sqlancer.postgres.ast.PostgresJoin;
import sqlancer.postgres.ast.PostgresLikeOperation;
import sqlancer.postgres.ast.PostgresPostfixOperation;
import sqlancer.postgres.ast.PostgresPostfixText;
import sqlancer.postgres.ast.PostgresPrefixOperation;
import sqlancer.postgres.PostgresSchema;

public class PostgresPrefixOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation((PostgresExpression) null,
                postgresPrefixOperation_PrefixOperator0);
        PostgresSchema.PostgresDataType[] postgresSchema_PostgresDataTypeArray0 = postgresPrefixOperation0
                .getInputDataTypes();
        assertEquals(1, postgresSchema_PostgresDataTypeArray0.length);
    }

    @Test
    public void test01() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation((PostgresExpression) null,
                postgresPrefixOperation_PrefixOperator0);
        PostgresExpression postgresExpression0 = postgresPrefixOperation0.getExpression();
        assertNull(postgresExpression0);
    }

    @Test
    public void test02() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                (String) null);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_PLUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant_StringConstant0,
                postgresPrefixOperation_PrefixOperator0);
        PostgresConstant postgresConstant0 = postgresPrefixOperation0.getExpectedValue();
        assertSame(postgresConstant0, postgresConstant_StringConstant0);
    }

    @Test
    public void test03() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(false);
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant0,
                (PostgresPrefixOperation.PrefixOperator) null);
        // Undeclared exception!
        try {
            postgresPrefixOperation0.getExpressionType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresConstant postgresConstant0 = PostgresConstant.createTrue();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresLikeOperation0,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresPrefixOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation((PostgresExpression) null,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresPrefixOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        JoinBase.JoinType postgresJoin_PostgresJoinType0 = JoinBase.JoinType.FULL;
        PostgresJoin postgresJoin0 = PostgresJoin.createJoin((PostgresExpression) null, (PostgresExpression) null,
                postgresJoin_PostgresJoinType0, (PostgresExpression) null);
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresJoin0,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresPrefixOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test07() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.DECIMAL;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresFunction0,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresPrefixOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$2", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.FLOAT;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText((PostgresExpression) null, "",
                (PostgresConstant) null, postgresSchema_PostgresDataType0);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_PLUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresPostfixText0,
                postgresPrefixOperation_PrefixOperator0);
        PostgresConstant postgresConstant0 = postgresPrefixOperation0.getExpectedValue();
        assertNull(postgresConstant0);
    }

    @Test
    public void test09() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresConstant postgresConstant0 = PostgresConstant.createIntConstant(1255L);
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant0,
                postgresPrefixOperation_PrefixOperator0);
        PostgresConstant postgresConstant1 = postgresPrefixOperation0.getExpectedValue();
        assertFalse(postgresConstant1.equals((Object) postgresConstant0));
    }

    @Test
    public void test10() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createDoubleConstant(0.0);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant0,
                postgresPrefixOperation_PrefixOperator0);
        PostgresConstant postgresConstant1 = postgresPrefixOperation0.getExpectedValue();
        assertNull(postgresConstant1);
    }

    @Test
    public void test11() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant0,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresPrefixOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createIntConstant((-9223372036854775808L));
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant0,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresPrefixOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test13() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(
                false);
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(
                postgresConstant_BooleanConstant0, postgresPrefixOperation_PrefixOperator0);
        PostgresConstant postgresConstant0 = postgresPrefixOperation0.getExpectedValue();
        assertNotNull(postgresConstant0);
        assertEquals("TRUE", postgresConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test14() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant0,
                postgresPrefixOperation_PrefixOperator0);
        PostgresConstant postgresConstant1 = postgresPrefixOperation0.getExpectedValue();
        assertFalse(postgresConstant1.isBoolean());
    }

    @Test
    public void test15() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
        PostgresExpression postgresExpression0 = PostgresPostfixOperation.create(postgresConstant0,
                postgresPostfixOperation_PostfixOperator0);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresExpression0,
                postgresPrefixOperation_PrefixOperator0);
        PostgresConstant postgresConstant1 = postgresPrefixOperation0.getExpectedValue();
        assertEquals("FALSE", postgresConstant1.getTextRepresentation());
        assertNotNull(postgresConstant1);
    }

    @Test
    public void test16() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_PLUS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = postgresPrefixOperation_PrefixOperator0
                .getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.INT, postgresSchema_PostgresDataType0);
    }

    @Test
    public void test17() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_PLUS;
        String string0 = postgresPrefixOperation_PrefixOperator0.getTextRepresentation();
        assertEquals("UNARY_PLUS", string0);
    }

    @Test
    public void test18() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(false);
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant0,
                (PostgresPrefixOperation.PrefixOperator) null);
        // Undeclared exception!
        try {
            postgresPrefixOperation0.getInputDataTypes();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation$PrefixOperator", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
        PostgresExpression postgresExpression0 = PostgresPostfixOperation.create(postgresConstant0,
                postgresPostfixOperation_PostfixOperator0);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresExpression0,
                postgresPrefixOperation_PrefixOperator0);
        String string0 = postgresPrefixOperation0.getTextRepresentation();
        assertEquals("NOT", string0);
    }

    @Test
    public void test20() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
        PostgresExpression postgresExpression0 = PostgresPostfixOperation.create(postgresConstant0,
                postgresPostfixOperation_PostfixOperator0);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresExpression0,
                postgresPrefixOperation_PrefixOperator0);
        PostgresExpression postgresExpression1 = postgresPrefixOperation0.getExpression();
        assertSame(postgresExpression1, postgresExpression0);
    }

    @Test
    public void test21() throws Throwable {
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = postgresPrefixOperation_PrefixOperator0
                .getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.INT, postgresSchema_PostgresDataType0);
    }

    @Test
    public void test22() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
        PostgresExpression postgresExpression0 = PostgresPostfixOperation.create(postgresConstant0,
                postgresPostfixOperation_PostfixOperator0);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresExpression0,
                postgresPrefixOperation_PrefixOperator0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = postgresPrefixOperation0.getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.BOOLEAN, postgresSchema_PostgresDataType0);
    }
}
