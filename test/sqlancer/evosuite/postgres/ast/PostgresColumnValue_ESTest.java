/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 22:15:24 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.math.BigDecimal;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresColumnValue;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.PostgresSchema;

public class PostgresColumnValue_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn
                .createDummy("UQa1Gnt[+4");
        PostgresConstant.DecimalConstant postgresConstant_DecimalConstant0 = new PostgresConstant.DecimalConstant(
                (BigDecimal) null);
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue(postgresSchema_PostgresColumn0,
                postgresConstant_DecimalConstant0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = postgresColumnValue0.getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.INT, postgresSchema_PostgresDataType0);
    }

    @Test
    public void test1() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = new PostgresSchema.PostgresColumn("UQa1Gnt[+4",
                postgresSchema_PostgresDataType0);
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue(postgresSchema_PostgresColumn0,
                (PostgresConstant) null);
        PostgresConstant postgresConstant0 = postgresColumnValue0.getExpectedValue();
        assertNull(postgresConstant0);
    }

    @Test
    public void test2() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = new PostgresSchema.PostgresColumn("C[mq",
                postgresSchema_PostgresDataType0);
        PostgresConstant postgresConstant0 = PostgresConstant.createTextConstant("C[mq");
        PostgresColumnValue postgresColumnValue0 = PostgresColumnValue.create(postgresSchema_PostgresColumn0,
                postgresConstant0);
        PostgresConstant postgresConstant1 = postgresColumnValue0.getExpectedValue();
        assertEquals("C[mq", postgresConstant1.asString());
    }

    @Test
    public void test3() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue((PostgresSchema.PostgresColumn) null,
                postgresConstant_PostgresNullConstant0);
        PostgresConstant postgresConstant0 = postgresColumnValue0.getExpectedValue();
        assertSame(postgresConstant_PostgresNullConstant0, postgresConstant0);
    }

    @Test
    public void test4() throws Throwable {
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn
                .createDummy("UQa1Gnt[+4");
        PostgresConstant postgresConstant0 = PostgresConstant.createIntConstant((-2939L));
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue(postgresSchema_PostgresColumn0,
                postgresConstant0);
        PostgresConstant postgresConstant1 = postgresColumnValue0.getExpectedValue();
        assertSame(postgresConstant1, postgresConstant0);
    }

    @Test
    public void test5() throws Throwable {
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn
                .createDummy("UQa1Gnt[+4");
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresColumnValue postgresColumnValue0 = PostgresColumnValue.create(postgresSchema_PostgresColumn0,
                postgresConstant0);
        PostgresConstant postgresConstant1 = postgresColumnValue0.getExpectedValue();
        assertFalse(postgresConstant1.isNull());
    }

    @Test
    public void test6() throws Throwable {
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue((PostgresSchema.PostgresColumn) null,
                (PostgresConstant) null);
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = postgresColumnValue0.getColumn();
        assertNull(postgresSchema_PostgresColumn0);
    }

    @Test
    public void test7() throws Throwable {
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue((PostgresSchema.PostgresColumn) null,
                (PostgresConstant) null);
        // Undeclared exception!
        try {
            postgresColumnValue0.getExpressionType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresColumnValue", e);
        }
    }

    @Test
    public void test8() throws Throwable {
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn
                .createDummy("UQa1Gnt[+4");
        PostgresConstant.DecimalConstant postgresConstant_DecimalConstant0 = new PostgresConstant.DecimalConstant(
                (BigDecimal) null);
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue(postgresSchema_PostgresColumn0,
                postgresConstant_DecimalConstant0);
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn1 = postgresColumnValue0.getColumn();
        assertSame(postgresSchema_PostgresColumn1, postgresSchema_PostgresColumn0);
    }

    @Test
    public void test9() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = new PostgresSchema.PostgresColumn("P/MRn6S@",
                (PostgresSchema.PostgresDataType) null);
        PostgresColumnValue postgresColumnValue0 = PostgresColumnValue.create(postgresSchema_PostgresColumn0,
                postgresConstant_PostgresNullConstant0);
        postgresColumnValue0.getExpressionType();
    }
}
