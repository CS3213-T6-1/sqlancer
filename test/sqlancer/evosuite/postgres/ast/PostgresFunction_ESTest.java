/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:44:40 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresBetweenOperation;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresFunction;
import sqlancer.postgres.ast.PostgresFunctionWithUnknownResult;
import sqlancer.postgres.ast.PostgresOrderByTerm;
import sqlancer.postgres.ast.PostgresPOSIXRegularExpression;
import sqlancer.postgres.PostgresSchema;

public class PostgresFunction_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresSchema.PostgresDataType[] postgresSchema_PostgresDataTypeArray0 = postgresFunction_PostgresFunctionWithResult0
                .getRandomTypes(3087);
        assertEquals(3087, postgresSchema_PostgresDataTypeArray0.length);
    }

    @Test
    public void test01() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresConstant postgresConstant0 = PostgresConstant.createTextConstant("t2M?u=.S49aO'crK]");
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[8];
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        postgresExpressionArray0[1] = (PostgresExpression) postgresConstant0;
        postgresExpressionArray0[2] = (PostgresExpression) postgresConstant0;
        postgresExpressionArray0[3] = (PostgresExpression) postgresConstant0;
        postgresExpressionArray0[4] = (PostgresExpression) postgresConstant0;
        postgresExpressionArray0[5] = (PostgresExpression) postgresConstant0;
        postgresExpressionArray0[6] = (PostgresExpression) postgresConstant0;
        postgresExpressionArray0[7] = (PostgresExpression) postgresConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresConstant postgresConstant1 = postgresFunction0.getExpectedValue();
        assertEquals("18", postgresConstant1.getTextRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[8];
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresExpression[] postgresExpressionArray1 = postgresFunction0.getArguments();
        assertEquals(8, postgresExpressionArray1.length);
    }

    @Test
    public void test03() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[2];
        PostgresConstant.IntConstant postgresConstant_IntConstant0 = new PostgresConstant.IntConstant((-1488L));
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_IntConstant0;
        PostgresConstant.BitConstant postgresConstant_BitConstant0 = new PostgresConstant.BitConstant((-1488L));
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresConstant_BitConstant0,
                postgresConstant_IntConstant0, postgresConstant_BitConstant0, false);
        postgresExpressionArray0[1] = (PostgresExpression) postgresBetweenOperation0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        // Undeclared exception!
        try {
            postgresFunction0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant$IntConstant", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[1];
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresConstantArray0);
        // Undeclared exception!
        try {
            postgresFunction0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[2];
        PostgresConstant postgresConstant0 = PostgresConstant.createTrue();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder.DESC;
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm(postgresExpressionArray0[0],
                postgresOrderByTerm_PostgresOrder0);
        postgresExpressionArray0[1] = (PostgresExpression) postgresOrderByTerm0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        // Undeclared exception!
        try {
            postgresFunction0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // sqlancer.postgres.ast.PostgresOrderByTerm@2
            //
        }
    }

    @Test
    public void test06() throws Throwable {
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[0];
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresConstantArray0);
        // Undeclared exception!
        try {
            postgresFunction0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$2", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.RPAD;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        PostgresFunction postgresFunction0 = null;
        try {
            postgresFunction0 = new PostgresFunction(postgresFunctionWithUnknownResult0,
                    postgresSchema_PostgresDataType0, (PostgresExpression[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction", e);
        }
    }

    @Test
    public void test08() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        PostgresFunction postgresFunction0 = null;
        try {
            postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                    postgresSchema_PostgresDataType0, (PostgresExpression[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        String string0 = postgresFunction_PostgresFunctionWithResult0.getName();
        assertEquals("abs", string0);
    }

    @Test
    public void test10() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresPOSIXRegularExpression.POSIXRegex postgresPOSIXRegularExpression_POSIXRegex0 = PostgresPOSIXRegularExpression.POSIXRegex.MATCH_CASE_SENSITIVE;
        PostgresPOSIXRegularExpression postgresPOSIXRegularExpression0 = new PostgresPOSIXRegularExpression(
                postgresConstant0, postgresConstant0, postgresPOSIXRegularExpression_POSIXRegex0);
        postgresExpressionArray0[0] = (PostgresExpression) postgresPOSIXRegularExpression0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresConstant postgresConstant1 = postgresFunction0.getExpectedValue();
        assertNull(postgresConstant1);
    }

    @Test
    public void test11() throws Throwable {
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.RANGE_MERGE;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunctionWithUnknownResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresConstant postgresConstant0 = postgresFunction0.getExpectedValue();
        assertNull(postgresConstant0);
    }

    @Test
    public void test12() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test13() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test14() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresConstant postgresConstant1 = postgresFunction0.getExpectedValue();
        assertNotNull(postgresConstant1);
        assertEquals(0L, postgresConstant1.asInt());
    }

    @Test
    public void test15() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_PostgresNullConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresConstant postgresConstant0 = postgresFunction0.getExpectedValue();
        assertNotNull(postgresConstant0);
        assertEquals(1L, postgresConstant0.asInt());
    }

    @Test
    public void test16() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test17() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test18() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[1];
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        postgresConstantArray0[0] = (PostgresConstant) postgresConstant_PostgresNullConstant0;
        PostgresConstant postgresConstant0 = postgresFunction_PostgresFunctionWithResult0.apply(postgresConstantArray0,
                postgresConstantArray0);
        assertEquals(0L, postgresConstant0.asInt());
    }

    @Test
    public void test19() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[2];
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "SUBTRACTION");
        postgresConstantArray0[0] = (PostgresConstant) postgresConstant_StringConstant0;
        PostgresConstant postgresConstant0 = PostgresConstant.createFloatConstant(46.0751F);
        postgresConstantArray0[1] = postgresConstant0;
        PostgresConstant postgresConstant1 = postgresFunction_PostgresFunctionWithResult0.apply(postgresConstantArray0,
                postgresConstantArray0);
        assertEquals("2", postgresConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test20() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.UPPER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test21() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.UPPER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test22() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.UPPER;
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[1];
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        postgresConstantArray0[0] = (PostgresConstant) postgresConstant_PostgresNullConstant0;
        PostgresConstant postgresConstant0 = postgresFunction_PostgresFunctionWithResult0.apply(postgresConstantArray0,
                postgresConstantArray0);
        assertEquals("NULL", postgresConstant0.getTextRepresentation());
    }

    @Test
    public void test23() throws Throwable {
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[2];
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "SUBTRACTION");
        postgresConstantArray0[0] = (PostgresConstant) postgresConstant_StringConstant0;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.UPPER;
        PostgresConstant postgresConstant0 = postgresFunction_PostgresFunctionWithResult0.apply(postgresConstantArray0,
                postgresConstantArray0);
        assertEquals("SUBTRACTION", postgresConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test24() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test25() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test26() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[1];
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        postgresConstantArray0[0] = postgresConstant0;
        PostgresConstant postgresConstant1 = postgresFunction_PostgresFunctionWithResult0.apply(postgresConstantArray0,
                postgresConstantArray0);
        assertFalse(postgresConstant1.equals((Object) postgresConstant0));
    }

    @Test
    public void test27() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(true);
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        // Undeclared exception!
        try {
            postgresFunction0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test28() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test29() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test30() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_PostgresNullConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresConstant postgresConstant0 = postgresFunction0.getExpectedValue();
        assertEquals("NULL", postgresConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test31() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[2];
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "SUBTRACTION");
        postgresConstantArray0[0] = (PostgresConstant) postgresConstant_StringConstant0;
        PostgresConstant postgresConstant0 = PostgresConstant.createFloatConstant(46.0751F);
        postgresConstantArray0[1] = postgresConstant0;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresConstantArray0);
        PostgresConstant postgresConstant1 = postgresFunction0.getExpectedValue();
        assertFalse(postgresConstant1.equals((Object) postgresConstant_StringConstant0));
    }

    @Test
    public void test32() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test33() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0
                .supportsReturnType(postgresSchema_PostgresDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test34() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_PostgresNullConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresConstant postgresConstant0 = postgresFunction0.getExpectedValue();
        assertFalse(postgresConstant0.isString());
    }

    @Test
    public void test35() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresConstant postgresConstant0 = PostgresConstant.createTrue();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresConstant postgresConstant1 = postgresFunction0.getExpectedValue();
        assertEquals(PostgresSchema.PostgresDataType.INT, postgresConstant1.getExpressionType());
    }

    @Test
    public void test36() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresSchema.PostgresDataType[] postgresSchema_PostgresDataTypeArray0 = postgresFunction_PostgresFunctionWithResult0
                .getInputTypesForReturnType(postgresSchema_PostgresDataType0, 3061);
        assertEquals(3061, postgresSchema_PostgresDataTypeArray0.length);
    }

    @Test
    public void test37() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0.isVariadic();
        assertTrue(boolean0);
    }

    @Test
    public void test38() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        String string0 = postgresFunction_PostgresFunctionWithResult0.toString();
        assertEquals("num_nulls", string0);
    }

    @Test
    public void test39() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        int int0 = postgresFunction_PostgresFunctionWithResult0.getNrArgs();
        assertEquals(1, int0);
    }

    @Test
    public void test40() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0.isVariadic();
        assertFalse(boolean0);
    }

    @Test
    public void test41() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0.checkArguments((PostgresExpression[]) null);
        assertTrue(boolean0);
    }

    @Test
    public void test42() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        boolean boolean0 = postgresFunction_PostgresFunctionWithResult0.isVariadic();
        assertTrue(boolean0);
    }

    @Test
    public void test43() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        PostgresSchema.PostgresDataType[] postgresSchema_PostgresDataTypeArray0 = postgresFunction_PostgresFunctionWithResult0
                .getInputTypesForReturnType(postgresSchema_PostgresDataType0, 0);
        assertEquals(0, postgresSchema_PostgresDataTypeArray0.length);
    }

    @Test
    public void test44() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        PostgresSchema.PostgresDataType[] postgresSchema_PostgresDataTypeArray0 = postgresFunction_PostgresFunctionWithResult0
                .getInputTypesForReturnType(postgresSchema_PostgresDataType0, 3088);
        assertEquals(1, postgresSchema_PostgresDataTypeArray0.length);
    }

    @Test
    public void test45() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresSchema.PostgresDataType[] postgresSchema_PostgresDataTypeArray0 = postgresFunction_PostgresFunctionWithResult0
                .getInputTypesForReturnType(postgresSchema_PostgresDataType0, 3074);
        assertEquals(1, postgresSchema_PostgresDataTypeArray0.length);
    }

    @Test
    public void test46() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresSchema.PostgresDataType[] postgresSchema_PostgresDataTypeArray0 = postgresFunction_PostgresFunctionWithResult0
                .getInputTypesForReturnType(postgresSchema_PostgresDataType0, 3079);
        assertEquals(1, postgresSchema_PostgresDataTypeArray0.length);
    }

    @Test
    public void test47() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.UPPER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        PostgresSchema.PostgresDataType[] postgresSchema_PostgresDataTypeArray0 = postgresFunction_PostgresFunctionWithResult0
                .getInputTypesForReturnType(postgresSchema_PostgresDataType0, 922);
        assertEquals(1, postgresSchema_PostgresDataTypeArray0.length);
    }

    @Test
    public void test48() throws Throwable {
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[0];
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresConstantArray0);
        String string0 = postgresFunction0.getFunctionName();
        assertEquals("num_nulls", string0);
    }

    @Test
    public void test49() throws Throwable {
        PostgresConstant[] postgresConstantArray0 = new PostgresConstant[0];
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresConstantArray0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType1 = postgresFunction0.getExpressionType();
        assertSame(postgresSchema_PostgresDataType1, postgresSchema_PostgresDataType0);
    }

    @Test
    public void test50() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresExpression[] postgresExpressionArray1 = postgresFunction0.getArguments();
        assertFalse(postgresExpressionArray1.equals((Object) postgresExpressionArray0));
    }
}
