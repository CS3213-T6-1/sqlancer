/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:21:12 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresSimilarTo;
import sqlancer.postgres.gen.PostgresExpressionGenerator;
import sqlancer.postgres.PostgresSchema;
import sqlancer.Randomly;

public class PostgresSimilarTo_ESTest {

    @Test
    public void test0() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(
                false);
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        Randomly randomly0 = new Randomly();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresExpression postgresExpression0 = PostgresExpressionGenerator.generateConstant(randomly0,
                postgresSchema_PostgresDataType0);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant_PostgresNullConstant0,
                postgresConstant_BooleanConstant0, postgresExpression0);
        assertEquals(PostgresSchema.PostgresDataType.BOOLEAN, postgresSimilarTo0.getExpressionType());
    }

    @Test
    public void test1() throws Throwable {
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo((PostgresExpression) null,
                (PostgresExpression) null, (PostgresExpression) null);
        PostgresExpression postgresExpression0 = postgresSimilarTo0.getString();
        assertNull(postgresExpression0);
    }

    @Test
    public void test2() throws Throwable {
        PostgresConstant.FloatConstant postgresConstant_FloatConstant0 = new PostgresConstant.FloatConstant(0.0F);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant_FloatConstant0,
                postgresConstant_FloatConstant0, postgresConstant_FloatConstant0);
        PostgresConstant.FloatConstant postgresConstant_FloatConstant1 = (PostgresConstant.FloatConstant) postgresSimilarTo0
                .getSimilarTo();
        assertFalse(postgresConstant_FloatConstant1.isString());
    }

    @Test
    public void test3() throws Throwable {
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo((PostgresExpression) null,
                (PostgresExpression) null, (PostgresExpression) null);
        PostgresExpression postgresExpression0 = postgresSimilarTo0.getEscapeCharacter();
        assertNull(postgresExpression0);
    }

    @Test
    public void test4() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        // Undeclared exception!
        try {
            postgresConstant_PostgresNullConstant0.getExpressionType();
            // fail("Expecting exception: IllegalArgumentException");
            // Unstable assertion
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    public void test5() throws Throwable {
        PostgresConstant.FloatConstant postgresConstant_FloatConstant0 = new PostgresConstant.FloatConstant(0.0F);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant_FloatConstant0,
                postgresConstant_FloatConstant0, postgresConstant_FloatConstant0);
        PostgresExpression postgresExpression0 = postgresSimilarTo0.getString();
        assertSame(postgresExpression0, postgresConstant_FloatConstant0);
    }

    @Test
    public void test6() throws Throwable {
        PostgresConstant.FloatConstant postgresConstant_FloatConstant0 = new PostgresConstant.FloatConstant(0.0F);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant_FloatConstant0,
                postgresConstant_FloatConstant0, postgresConstant_FloatConstant0);
        PostgresConstant postgresConstant0 = postgresSimilarTo0.getExpectedValue();
        assertNull(postgresConstant0);
    }

    @Test
    public void test7() throws Throwable {
        PostgresConstant.FloatConstant postgresConstant_FloatConstant0 = new PostgresConstant.FloatConstant(0.0F);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant_FloatConstant0,
                postgresConstant_FloatConstant0, postgresConstant_FloatConstant0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = postgresSimilarTo0.getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.BOOLEAN, postgresSchema_PostgresDataType0);
    }

    @Test
    public void test8() throws Throwable {
        PostgresConstant.FloatConstant postgresConstant_FloatConstant0 = new PostgresConstant.FloatConstant(0.0F);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant_FloatConstant0,
                postgresConstant_FloatConstant0, postgresConstant_FloatConstant0);
        PostgresConstant.FloatConstant postgresConstant_FloatConstant1 = (PostgresConstant.FloatConstant) postgresSimilarTo0
                .getEscapeCharacter();
        assertFalse(postgresConstant_FloatConstant1.isBoolean());
    }

    @Test
    public void test9() throws Throwable {
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo((PostgresExpression) null,
                (PostgresExpression) null, (PostgresExpression) null);
        PostgresExpression postgresExpression0 = postgresSimilarTo0.getSimilarTo();
        assertNull(postgresExpression0);
    }
}
