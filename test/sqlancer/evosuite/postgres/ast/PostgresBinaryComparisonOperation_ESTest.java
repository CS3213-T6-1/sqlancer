/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:45:02 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresBetweenOperation;
import sqlancer.postgres.ast.PostgresBinaryArithmeticOperation;
import sqlancer.postgres.ast.PostgresBinaryComparisonOperation;
import sqlancer.postgres.ast.PostgresBinaryLogicalOperation;
import sqlancer.postgres.ast.PostgresBinaryRangeOperation;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresFunction;
import sqlancer.postgres.ast.PostgresJoin;
import sqlancer.postgres.ast.PostgresLikeOperation;
import sqlancer.postgres.ast.PostgresSelect;
import sqlancer.postgres.PostgresSchema;

public class PostgresBinaryComparisonOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(
                false);
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresConstant0,
                postgresConstant0, postgresConstant_BooleanConstant0, false);
        PostgresConstant postgresConstant1 = postgresBetweenOperation0.getExpectedValue();
        assertEquals("TRUE", postgresConstant1.getTextRepresentation());
    }

    @Test
    public void test01() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator
                .getRandom();
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.OR;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresConstant0, postgresConstant0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        PostgresConstant postgresConstant1 = postgresBinaryLogicalOperation0.getExpectedValue();
        PostgresConstant postgresConstant2 = postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0
                .getExpectedValue(postgresConstant0, postgresConstant1);
        assertFalse(postgresConstant2.isInt());
    }

    @Test
    public void test02() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.IS_DISTINCT;
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(true);
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresLikeOperation0, postgresLikeOperation0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            postgresBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.LESS;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                (PostgresExpression) null, (PostgresExpression) null,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            postgresBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresBinaryComparisonOperation", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        PostgresJoin.PostgresJoinType postgresJoin_PostgresJoinType0 = PostgresJoin.PostgresJoinType.CROSS;
        PostgresJoin postgresJoin0 = new PostgresJoin((PostgresExpression) null, (PostgresExpression) null,
                postgresJoin_PostgresJoinType0, (PostgresExpression) null);
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.IS_DISTINCT;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresJoin0, postgresJoin0, postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            postgresBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test05() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator
                .getRandom();
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresFunction0, postgresFunction0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            postgresBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$1", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator
                .getRandom();
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresBinaryRangeOperation.PostgresBinaryRangeOperator postgresBinaryRangeOperation_PostgresBinaryRangeOperator0 = PostgresBinaryRangeOperation.PostgresBinaryRangeOperator.DIFFERENCE;
        PostgresBinaryRangeOperation postgresBinaryRangeOperation0 = new PostgresBinaryRangeOperation(
                postgresBinaryRangeOperation_PostgresBinaryRangeOperator0, postgresConstant0, postgresConstant0);
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresConstant0, postgresBinaryRangeOperation0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant1 = postgresBinaryComparisonOperation0.getExpectedValue();
        assertNull(postgresConstant1);
    }

    @Test
    public void test07() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.NOT_EQUALS;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresSelect0, postgresSelect0, postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant0 = postgresBinaryComparisonOperation0.getExpectedValue();
        assertNull(postgresConstant0);
    }

    @Test
    public void test08() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresConstant0,
                postgresConstant0, postgresConstant0, false);
        PostgresConstant postgresConstant1 = postgresBetweenOperation0.getExpectedValue();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.GREATER_EQUALS;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresConstant1, postgresConstant0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant2 = postgresBinaryComparisonOperation0.getExpectedValue();
        assertEquals("TRUE", postgresConstant1.getTextRepresentation());
        assertTrue(postgresConstant2.asBoolean());
    }

    @Test
    public void test09() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.GREATER_EQUALS;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresConstant0, postgresConstant0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant1 = postgresBinaryComparisonOperation0.getExpectedValue();
        assertNotSame(postgresConstant1, postgresConstant0);
    }

    @Test
    public void test10() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.GREATER_EQUALS;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresConstant_PostgresNullConstant0, postgresConstant_PostgresNullConstant0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant0 = postgresBinaryComparisonOperation0.getExpectedValue();
        assertEquals("NULL", postgresConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test11() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.NOT_EQUALS;
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(true);
        PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator.MULTIPLICATION;
        PostgresBinaryArithmeticOperation postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation(
                postgresConstant0, postgresConstant0, postgresBinaryArithmeticOperation_PostgresBinaryOperator0);
        PostgresConstant postgresConstant1 = postgresBinaryArithmeticOperation0.getExpectedValue();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator1 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.GREATER;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresBinaryArithmeticOperation0, postgresConstant1,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant2 = postgresBinaryComparisonOperation0.getExpectedValue();
        PostgresConstant postgresConstant3 = postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator1
                .getExpectedValue(postgresConstant2, postgresConstant0);
        assertEquals("FALSE", postgresConstant2.getUnquotedTextRepresentation());
        assertEquals("FALSE", postgresConstant3.getUnquotedTextRepresentation());
    }

    @Test
    public void test12() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(true);
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.GREATER;
        PostgresConstant postgresConstant1 = postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0
                .getExpectedValue(postgresConstant0, postgresConstant0);
        assertFalse(postgresConstant1.asBoolean());
    }

    @Test
    public void test13() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.GREATER;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresConstant_PostgresNullConstant0, postgresConstant_PostgresNullConstant0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant0 = postgresBinaryComparisonOperation0.getExpectedValue();
        assertNotNull(postgresConstant0);

        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator1 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.IS_NOT_DISTINCT;
        PostgresConstant postgresConstant1 = postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator1
                .getExpectedValue(postgresConstant_PostgresNullConstant0, postgresConstant0);
        assertEquals("TRUE", postgresConstant1.getTextRepresentation());
    }

    @Test
    public void test14() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.LESS_EQUALS;
        PostgresConstant.IntConstant postgresConstant_IntConstant0 = new PostgresConstant.IntConstant(1L);
        PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator.ADDITION;
        PostgresConstant postgresConstant0 = postgresBinaryArithmeticOperation_PostgresBinaryOperator0
                .apply(postgresConstant_IntConstant0, postgresConstant_IntConstant0);
        PostgresConstant postgresConstant1 = postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0
                .getExpectedValue(postgresConstant_IntConstant0, postgresConstant0);
        assertTrue(postgresConstant1.asBoolean());
    }

    @Test
    public void test15() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.LESS_EQUALS;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresConstant_PostgresNullConstant0, postgresConstant_PostgresNullConstant0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant0 = postgresBinaryComparisonOperation0.getExpectedValue();
        assertNotSame(postgresConstant0, postgresConstant_PostgresNullConstant0);
        assertNotNull(postgresConstant0);
    }

    @Test
    public void test16() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.NOT_EQUALS;
        PostgresConstant.IntConstant postgresConstant_IntConstant0 = new PostgresConstant.IntConstant(1L);
        PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator.ADDITION;
        PostgresConstant postgresConstant0 = postgresBinaryArithmeticOperation_PostgresBinaryOperator0
                .apply(postgresConstant_IntConstant0, postgresConstant_IntConstant0);
        PostgresConstant postgresConstant1 = postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0
                .getExpectedValue(postgresConstant_IntConstant0, postgresConstant0);
        assertEquals("TRUE", postgresConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test17() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.NOT_EQUALS;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresConstant_PostgresNullConstant0, postgresConstant_PostgresNullConstant0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant0 = postgresBinaryComparisonOperation0.getExpectedValue();
        assertNotNull(postgresConstant0);
        assertNotSame(postgresConstant0, postgresConstant_PostgresNullConstant0);
    }

    @Test
    public void test18() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.IS_NOT_DISTINCT;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresConstant_PostgresNullConstant0, postgresConstant_PostgresNullConstant0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation1 = new PostgresBinaryComparisonOperation(
                postgresBinaryComparisonOperation0, postgresConstant_PostgresNullConstant0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresConstant postgresConstant0 = postgresBinaryComparisonOperation1.getExpectedValue();
        assertNotNull(postgresConstant0);
        assertEquals("FALSE", postgresConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test19() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.IS_DISTINCT;
        PostgresConstant postgresConstant0 = PostgresConstant.createTrue();
        PostgresConstant postgresConstant1 = postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0
                .getExpectedValue(postgresConstant0, postgresConstant0);
        PostgresConstant postgresConstant2 = postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0
                .getExpectedValue(postgresConstant1, postgresConstant0);
        assertEquals("TRUE", postgresConstant2.getUnquotedTextRepresentation());
        assertEquals("FALSE", postgresConstant1.getUnquotedTextRepresentation());
    }

    @Test
    public void test20() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.GREATER_EQUALS;
        String string0 = postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0.getTextRepresentation();
        assertEquals(">=", string0);
    }

    @Test
    public void test21() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(true);
        PostgresBinaryArithmeticOperation.PostgresBinaryOperator postgresBinaryArithmeticOperation_PostgresBinaryOperator0 = PostgresBinaryArithmeticOperation.PostgresBinaryOperator.MULTIPLICATION;
        PostgresExpression postgresExpression0 = PostgresConstant.createInetConstant((String) null);
        PostgresBinaryArithmeticOperation postgresBinaryArithmeticOperation0 = new PostgresBinaryArithmeticOperation(
                postgresConstant0, postgresConstant0, postgresBinaryArithmeticOperation_PostgresBinaryOperator0);
        PostgresConstant postgresConstant1 = postgresBinaryArithmeticOperation0.getExpectedValue();
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.LESS;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                postgresConstant1, postgresExpression0,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        // Undeclared exception!
        try {
            postgresBinaryComparisonOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant$IntConstant", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0 = PostgresBinaryComparisonOperation.PostgresBinaryComparisonOperator.IS_NOT_DISTINCT;
        PostgresBinaryComparisonOperation postgresBinaryComparisonOperation0 = new PostgresBinaryComparisonOperation(
                (PostgresExpression) null, (PostgresExpression) null,
                postgresBinaryComparisonOperation_PostgresBinaryComparisonOperator0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = postgresBinaryComparisonOperation0
                .getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.BOOLEAN, postgresSchema_PostgresDataType0);
    }
}
