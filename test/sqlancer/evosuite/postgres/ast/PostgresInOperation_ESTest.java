/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 23:48:36 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresFunction;
import sqlancer.postgres.ast.PostgresInOperation;
import sqlancer.postgres.ast.PostgresLikeOperation;
import sqlancer.postgres.ast.PostgresPOSIXRegularExpression;
import sqlancer.postgres.ast.PostgresSelect;
import sqlancer.postgres.ast.PostgresTableReference;
import sqlancer.postgres.PostgresSchema;
import sqlancer.Randomly;

public class PostgresInOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[6];
        List<PostgresExpression> list0 = Randomly.nonEmptySubset(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresExpressionArray0[0], list0, true);
        boolean boolean0 = postgresInOperation0.isTrue();
        assertTrue(boolean0);
    }

    @Test
    public void test01() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(
                false);
        PostgresPOSIXRegularExpression.POSIXRegex postgresPOSIXRegularExpression_POSIXRegex0 = PostgresPOSIXRegularExpression.POSIXRegex.MATCH_CASE_INSENSITIVE;
        PostgresPOSIXRegularExpression postgresPOSIXRegularExpression0 = new PostgresPOSIXRegularExpression(
                postgresConstant_BooleanConstant0, postgresConstant_BooleanConstant0,
                postgresPOSIXRegularExpression_POSIXRegex0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresPOSIXRegularExpression0,
                (List<PostgresExpression>) null, false);
        postgresInOperation0.getListElements();
        assertFalse(postgresInOperation0.isTrue());
    }

    @Test
    public void test02() throws Throwable {
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[6];
        List<PostgresExpression> list0 = Randomly.subset(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresExpressionArray0[1], list0, false);
        postgresInOperation0.getListElements();
        assertFalse(postgresInOperation0.isTrue());
    }

    @Test
    public void test03() throws Throwable {
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[6];
        List<PostgresExpression> list0 = Randomly.nonEmptySubset(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresExpressionArray0[0], list0, true);
        postgresInOperation0.getListElements();
        assertTrue(postgresInOperation0.isTrue());
    }

    @Test
    public void test04() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(
                false);
        List<PostgresExpression> list0 = List.of();
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant_BooleanConstant0, list0,
                false);
        postgresInOperation0.getExpr();
        assertFalse(postgresInOperation0.isTrue());
    }

    @Test
    public void test05() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createIntConstant((-2756L));
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresLikeOperation0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant0, list0, true);
        // Undeclared exception!
        try {
            postgresInOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // -2756
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test06() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant("$C");
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_StringConstant0;
        List<PostgresExpression> list0 = List.of(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant_StringConstant0, list0,
                false);
        PostgresInOperation postgresInOperation1 = new PostgresInOperation(postgresInOperation0,
                (List<PostgresExpression>) null, false);
        // Undeclared exception!
        try {
            postgresInOperation1.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresInOperation", e);
        }
    }

    @Test
    public void test07() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(
                false);
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresConstant_BooleanConstant0);
        PostgresConstant postgresConstant0 = PostgresConstant.createFloatConstant(657.75F);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant0, list0, false);
        // Undeclared exception!
        try {
            postgresInOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // 657.75
            //
        }
    }

    @Test
    public void test08() throws Throwable {
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        List<PostgresExpression> list0 = List.of(postgresExpressionArray0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.FLOAT;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresFunction0, list0, true);
        // Undeclared exception!
        try {
            postgresInOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$2", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(true);
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[6];
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_BooleanConstant0;
        List<PostgresExpression> list0 = Randomly.subset(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresExpressionArray0[0], list0, true);
        PostgresConstant postgresConstant0 = postgresInOperation0.getExpectedValue();
        assertEquals("FALSE", postgresConstant0.getTextRepresentation());
    }

    @Test
    public void test10() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(true);
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[6];
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_BooleanConstant0;
        postgresExpressionArray0[1] = (PostgresExpression) postgresConstant_BooleanConstant0;
        postgresExpressionArray0[2] = (PostgresExpression) postgresConstant_BooleanConstant0;
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        postgresExpressionArray0[3] = (PostgresExpression) postgresConstant0;
        postgresExpressionArray0[4] = (PostgresExpression) postgresConstant_BooleanConstant0;
        postgresExpressionArray0[5] = (PostgresExpression) postgresConstant_BooleanConstant0;
        List<PostgresExpression> list0 = List.of(postgresExpressionArray0);
        List<PostgresExpression> list1 = Randomly.subset(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresExpressionArray0[0], list1, true);
        PostgresInOperation postgresInOperation1 = new PostgresInOperation(postgresInOperation0, list0, false);
        postgresInOperation1.getExpectedValue();
        assertFalse(postgresInOperation1.isTrue());
    }

    @Test
    public void test11() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(true);
        PostgresTableReference postgresTableReference0 = new PostgresTableReference(
                (PostgresSchema.PostgresTable) null);
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresTableReference0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant_BooleanConstant0, list0,
                true);
        PostgresConstant postgresConstant0 = postgresInOperation0.getExpectedValue();
        assertNull(postgresConstant0);
        assertTrue(postgresInOperation0.isTrue());
    }

    @Test
    public void test12() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(true);
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[6];
        postgresExpressionArray0[1] = (PostgresExpression) postgresConstant_BooleanConstant0;
        List<PostgresExpression> list0 = Randomly.subset(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresExpressionArray0[1], list0, false);
        PostgresConstant postgresConstant0 = postgresInOperation0.getExpectedValue();
        assertEquals("TRUE", postgresConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test13() throws Throwable {
        LinkedList<PostgresExpression> linkedList0 = new LinkedList<PostgresExpression>();
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant_PostgresNullConstant0,
                linkedList0, true);
        postgresInOperation0.getExpectedValue();
        assertTrue(postgresInOperation0.isTrue());
    }

    @Test
    public void test14() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresSelect0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresSelect0, list0, false);
        postgresInOperation0.getExpectedValue();
        assertFalse(postgresInOperation0.isTrue());
    }

    @Test
    public void test15() throws Throwable {
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[6];
        List<PostgresExpression> list0 = Randomly.nonEmptySubset(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresExpressionArray0[0], list0, true);
        postgresInOperation0.getExpr();
        assertTrue(postgresInOperation0.isTrue());
    }

    @Test
    public void test16() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(
                false);
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresConstant_BooleanConstant0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant_BooleanConstant0, list0,
                false);
        boolean boolean0 = postgresInOperation0.isTrue();
        assertFalse(boolean0);
    }

    @Test
    public void test17() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(true);
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[6];
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_BooleanConstant0;
        postgresExpressionArray0[1] = (PostgresExpression) postgresConstant_BooleanConstant0;
        postgresExpressionArray0[2] = (PostgresExpression) postgresConstant_BooleanConstant0;
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        postgresExpressionArray0[3] = (PostgresExpression) postgresConstant0;
        postgresExpressionArray0[4] = (PostgresExpression) postgresConstant_BooleanConstant0;
        postgresExpressionArray0[5] = (PostgresExpression) postgresConstant_BooleanConstant0;
        List<PostgresExpression> list0 = List.of(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresExpressionArray0[1], list0, false);
        postgresInOperation0.getExpressionType();
        assertFalse(postgresInOperation0.isTrue());
    }

    @Test
    public void test18() throws Throwable {
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(
                false);
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresConstant_BooleanConstant0,
                (PostgresExpression) postgresConstant_BooleanConstant0,
                (PostgresExpression) postgresConstant_BooleanConstant0,
                (PostgresExpression) postgresConstant_BooleanConstant0,
                (PostgresExpression) postgresConstant_BooleanConstant0,
                (PostgresExpression) postgresConstant_BooleanConstant0,
                (PostgresExpression) postgresConstant_BooleanConstant0,
                (PostgresExpression) postgresConstant_BooleanConstant0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant_BooleanConstant0, list0,
                false);
        PostgresConstant postgresConstant0 = postgresInOperation0.getExpectedValue();
        assertNotNull(postgresConstant0);
        assertEquals("FALSE", postgresConstant0.getTextRepresentation());
    }
}
