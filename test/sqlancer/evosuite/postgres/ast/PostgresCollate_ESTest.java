/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:33:12 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.math.BigDecimal;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresCollate;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresJoin;
import sqlancer.postgres.PostgresSchema;

public class PostgresCollate_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresConstant_PostgresNullConstant0, "ElK(^G");
        postgresCollate0.getExpressionType();
    }

    @Test
    public void test1() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant("");
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresConstant_StringConstant0, (String) null);
        PostgresConstant.StringConstant postgresConstant_StringConstant1 = (PostgresConstant.StringConstant) postgresCollate0
                .getExpr();
        assertTrue(postgresConstant_StringConstant1.isString());
    }

    @Test
    public void test2() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant("");
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresConstant_StringConstant0, (String) null);
        String string0 = postgresCollate0.getCollate();
        assertNull(string0);
    }

    @Test
    public void test3() throws Throwable {
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        PostgresConstant.DecimalConstant postgresConstant_DecimalConstant0 = new PostgresConstant.DecimalConstant(
                bigDecimal0);
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresConstant_DecimalConstant0, "");
        String string0 = postgresCollate0.getCollate();
        assertEquals("", string0);
    }

    @Test
    public void test4() throws Throwable {
        PostgresCollate postgresCollate0 = new PostgresCollate((PostgresExpression) null, "IbFO-uMi5h");
        // Undeclared exception!
        try {
            postgresCollate0.getExpressionType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresCollate", e);
        }
    }

    @Test
    public void test5() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresJoin.PostgresJoinType postgresJoin_PostgresJoinType0 = PostgresJoin.PostgresJoinType.CROSS;
        PostgresJoin postgresJoin0 = new PostgresJoin(postgresConstant_PostgresNullConstant0,
                postgresConstant_PostgresNullConstant0, postgresJoin_PostgresJoinType0);
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresJoin0, "");
        // Undeclared exception!
        try {
            postgresCollate0.getExpressionType();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test6() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant("");
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresConstant_StringConstant0, (String) null);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = postgresCollate0.getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.TEXT, postgresSchema_PostgresDataType0);
    }

    @Test
    public void test7() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant("");
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresConstant_StringConstant0, (String) null);
        PostgresConstant postgresConstant0 = postgresCollate0.getExpectedValue();
        assertNull(postgresConstant0);
    }

    @Test
    public void test8() throws Throwable {
        PostgresCollate postgresCollate0 = new PostgresCollate((PostgresExpression) null, (String) null);
        PostgresExpression postgresExpression0 = postgresCollate0.getExpr();
        assertNull(postgresExpression0);
    }

    @Test
    public void test9() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createTrue();
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresConstant0, "time_ops");
        String string0 = postgresCollate0.getCollate();
        assertEquals("time_ops", string0);
    }
}
