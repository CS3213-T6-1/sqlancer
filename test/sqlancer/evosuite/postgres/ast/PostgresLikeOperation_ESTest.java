/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 15:23:45 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import sqlancer.common.ast.JoinBase;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresJoin;
import sqlancer.postgres.ast.PostgresLikeOperation;
import sqlancer.postgres.ast.PostgresPrefixOperation;
import sqlancer.postgres.ast.PostgresSelect;
import sqlancer.postgres.PostgresSchema;

public class PostgresLikeOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "J8F\"@]c`>od");
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant_StringConstant0,
                postgresConstant_StringConstant0);
        PostgresLikeOperation postgresLikeOperation1 = new PostgresLikeOperation(postgresConstant_StringConstant0,
                postgresLikeOperation0);
        // Undeclared exception!
        try {
            postgresLikeOperation1.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test01() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "J8F\"@]c`>od");
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant_StringConstant0,
                postgresConstant_StringConstant0);
        PostgresConstant postgresConstant0 = postgresLikeOperation0.getExpectedValue();
        PostgresConstant postgresConstant1 = postgresLikeOperation0.getExpectedValue();
        PostgresLikeOperation postgresLikeOperation1 = new PostgresLikeOperation(postgresConstant1, postgresConstant0);
        // Undeclared exception!
        try {
            postgresLikeOperation1.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test02() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(
                postgresConstant_PostgresNullConstant0, postgresPrefixOperation_PrefixOperator0);
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresPrefixOperation0,
                postgresConstant_PostgresNullConstant0);
        // Undeclared exception!
        try {
            postgresLikeOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test03() throws Throwable {
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation((PostgresExpression) null,
                (PostgresExpression) null);
        // Undeclared exception!
        try {
            postgresLikeOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresLikeOperation", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        JoinBase.JoinType postgresJoin_PostgresJoinType0 = JoinBase.JoinType.RIGHT;
        PostgresJoin postgresJoin0 = new PostgresJoin(postgresConstant0, postgresConstant0,
                postgresJoin_PostgresJoinType0, postgresConstant0);
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresJoin0);
        // Undeclared exception!
        try {
            postgresLikeOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test05() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresConstant postgresConstant1 = PostgresConstant.createNullConstant();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant1);
        PostgresConstant postgresConstant2 = postgresLikeOperation0.getExpectedValue();
        assertFalse(postgresConstant2.isInt());
    }

    @Test
    public void test06() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresSelect0);
        PostgresConstant postgresConstant1 = postgresLikeOperation0.getExpectedValue();
        assertNull(postgresConstant1);
    }

    @Test
    public void test07() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        PostgresConstant postgresConstant1 = postgresLikeOperation0.getExpectedValue();
        assertEquals("NULL", postgresConstant1.getTextRepresentation());
    }

    @Test
    public void test08() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresSelect0, postgresSelect0);
        PostgresConstant postgresConstant0 = postgresLikeOperation0.getExpectedValue();
        assertNull(postgresConstant0);
    }

    @Test
    public void test09() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        String string0 = postgresLikeOperation0.getOperatorRepresentation();
        assertEquals("LIKE", string0);
    }

    @Test
    public void test10() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = postgresLikeOperation0.getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.BOOLEAN, postgresSchema_PostgresDataType0);
    }
}
