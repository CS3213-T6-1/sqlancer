/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 00:20:20 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresBinaryRangeOperation;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresPostfixText;
import sqlancer.postgres.PostgresSchema;

public class PostgresBinaryRangeOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        PostgresBinaryRangeOperation postgresBinaryRangeOperation0 = null;
        try {
            postgresBinaryRangeOperation0 = new PostgresBinaryRangeOperation(
                    (PostgresBinaryRangeOperation.PostgresBinaryRangeOperator) null, (PostgresExpression) null,
                    (PostgresExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresBinaryRangeOperation", e);
        }
    }

    @Test
    public void test1() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresConstant0, "PQ", postgresConstant0,
                postgresSchema_PostgresDataType0);
        PostgresBinaryRangeOperation postgresBinaryRangeOperation0 = null;
        try {
            postgresBinaryRangeOperation0 = new PostgresBinaryRangeOperation(
                    (PostgresBinaryRangeOperation.PostgresBinaryRangeComparisonOperator) null, postgresPostfixText0,
                    postgresConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresBinaryRangeOperation", e);
        }
    }

    @Test
    public void test2() throws Throwable {
        PostgresBinaryRangeOperation.PostgresBinaryRangeComparisonOperator postgresBinaryRangeOperation_PostgresBinaryRangeComparisonOperator0 = PostgresBinaryRangeOperation.PostgresBinaryRangeComparisonOperator.STRICT_LEFT_OF;
        String string0 = postgresBinaryRangeOperation_PostgresBinaryRangeComparisonOperator0.getTextRepresentation();
        assertEquals("<<", string0);
    }

    @Test
    public void test3() throws Throwable {
        PostgresBinaryRangeOperation.PostgresBinaryRangeOperator postgresBinaryRangeOperation_PostgresBinaryRangeOperator0 = PostgresBinaryRangeOperation.PostgresBinaryRangeOperator.UNION;
        String string0 = postgresBinaryRangeOperation_PostgresBinaryRangeOperator0.getTextRepresentation();
        assertEquals("+", string0);
    }

    @Test
    public void test4() throws Throwable {
        PostgresBinaryRangeOperation.PostgresBinaryRangeComparisonOperator postgresBinaryRangeOperation_PostgresBinaryRangeComparisonOperator0 = PostgresBinaryRangeOperation.PostgresBinaryRangeComparisonOperator
                .getRandom();
        assertEquals("@>", postgresBinaryRangeOperation_PostgresBinaryRangeComparisonOperator0.getTextRepresentation());
    }

    @Test
    public void test5() throws Throwable {
        PostgresBinaryRangeOperation.PostgresBinaryRangeComparisonOperator postgresBinaryRangeOperation_PostgresBinaryRangeComparisonOperator0 = PostgresBinaryRangeOperation.PostgresBinaryRangeComparisonOperator.NOT_RIGHT_OF;
        PostgresBinaryRangeOperation postgresBinaryRangeOperation0 = new PostgresBinaryRangeOperation(
                postgresBinaryRangeOperation_PostgresBinaryRangeComparisonOperator0, (PostgresExpression) null,
                (PostgresExpression) null);
        assertEquals("&<", postgresBinaryRangeOperation0.getOperatorRepresentation());
    }

    @Test
    public void test6() throws Throwable {
        PostgresBinaryRangeOperation.PostgresBinaryRangeOperator postgresBinaryRangeOperation_PostgresBinaryRangeOperator0 = PostgresBinaryRangeOperation.PostgresBinaryRangeOperator
                .getRandom();
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresBinaryRangeOperation postgresBinaryRangeOperation0 = new PostgresBinaryRangeOperation(
                postgresBinaryRangeOperation_PostgresBinaryRangeOperator0, postgresConstant_PostgresNullConstant0,
                postgresConstant_PostgresNullConstant0);
        String string0 = postgresBinaryRangeOperation0.getOperatorRepresentation();
        assertEquals("+", string0);
    }

    @Test
    public void test7() throws Throwable {
        PostgresBinaryRangeOperation.PostgresBinaryRangeOperator postgresBinaryRangeOperation_PostgresBinaryRangeOperator0 = PostgresBinaryRangeOperation.PostgresBinaryRangeOperator
                .getRandom();
        PostgresBinaryRangeOperation postgresBinaryRangeOperation0 = new PostgresBinaryRangeOperation(
                postgresBinaryRangeOperation_PostgresBinaryRangeOperator0, (PostgresExpression) null,
                (PostgresExpression) null);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = postgresBinaryRangeOperation0
                .getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.BOOLEAN, postgresSchema_PostgresDataType0);
    }
}
