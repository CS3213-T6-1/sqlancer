/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 21:10:56 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresFunctionWithUnknownResult;
import sqlancer.postgres.gen.PostgresExpressionGenerator;
import sqlancer.postgres.PostgresSchema;

public class PostgresFunctionWithUnknownResult_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresFunctionWithUnknownResult[] postgresFunctionWithUnknownResultArray0 = PostgresFunctionWithUnknownResult
                .values();
        assertEquals(89, postgresFunctionWithUnknownResultArray0.length);
    }

    @Test
    public void test01() throws Throwable {
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult
                .valueOf("INITCAP");
        assertEquals(PostgresFunctionWithUnknownResult.INITCAP, postgresFunctionWithUnknownResult0);
    }

    @Test
    public void test02() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.DECIMAL;
        List<PostgresFunctionWithUnknownResult> list0 = PostgresFunctionWithUnknownResult
                .getSupportedFunctions(postgresSchema_PostgresDataType0);
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test03() throws Throwable {
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.HOSTMASK;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        // Undeclared exception!
        try {
            postgresFunctionWithUnknownResult0.getArguments(postgresSchema_PostgresDataType0,
                    (PostgresExpressionGenerator) null, 2345);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresFunctionWithUnknownResult", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.TRUNC;
        boolean boolean0 = postgresFunctionWithUnknownResult0
                .isCompatibleWithReturnType(postgresSchema_PostgresDataType0);
        assertTrue(boolean0);
    }

    @Test
    public void test05() throws Throwable {
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.REVERSE;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        boolean boolean0 = postgresFunctionWithUnknownResult0
                .isCompatibleWithReturnType(postgresSchema_PostgresDataType0);
        assertFalse(boolean0);
    }

    @Test
    public void test06() throws Throwable {
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.ATAND;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresExpression[] postgresExpressionArray0 = postgresFunctionWithUnknownResult0
                .getArguments(postgresSchema_PostgresDataType0, (PostgresExpressionGenerator) null, 2367);
        assertEquals(0, postgresExpressionArray0.length);
    }

    @Test
    public void test07() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        List<PostgresFunctionWithUnknownResult> list0 = PostgresFunctionWithUnknownResult
                .getSupportedFunctions(postgresSchema_PostgresDataType0);
        assertEquals(36, list0.size());
    }

    @Test
    public void test08() throws Throwable {
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.TO_CHAR;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        // Undeclared exception!
        try {
            postgresFunctionWithUnknownResult0.getArguments(postgresSchema_PostgresDataType0,
                    (PostgresExpressionGenerator) null, (-1068));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresFunctionWithUnknownResult", e);
        }
    }

    @Test
    public void test09() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.FLOAT;
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.CONVERT_FROM;
        // Undeclared exception!
        try {
            postgresFunctionWithUnknownResult0.getArguments(postgresSchema_PostgresDataType0,
                    (PostgresExpressionGenerator) null, 77);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresFunctionWithUnknownResult", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.INET_SAME_FAMILY;
        String string0 = postgresFunctionWithUnknownResult0.getName();
        assertEquals("inet_same_family", string0);
    }
}
