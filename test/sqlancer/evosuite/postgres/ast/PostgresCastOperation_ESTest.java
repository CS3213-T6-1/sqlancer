/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 17:23:48 GMT 2025
 */

package sqlancer.evosuite.postgres.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresCastOperation;
import sqlancer.postgres.ast.PostgresColumnReference;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresFunction;
import sqlancer.postgres.ast.PostgresJoin;
import sqlancer.postgres.ast.PostgresLikeOperation;
import sqlancer.postgres.ast.PostgresPrefixOperation;
import sqlancer.postgres.ast.PostgresSelect;
import sqlancer.postgres.PostgresCompoundDataType;
import sqlancer.postgres.PostgresSchema;

public class PostgresCastOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("");
        PostgresColumnReference postgresColumnReference0 = new PostgresColumnReference(postgresSchema_PostgresColumn0);
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create((PostgresSchema.PostgresDataType) null, 1);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresColumnReference0,
                postgresCompoundDataType0);
        postgresCastOperation0.getType();
    }

    @Test
    public void test01() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0);
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "Q3HciH6 Y=HDI^PJu=");
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_StringConstant0,
                postgresCompoundDataType0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType1 = postgresCastOperation0.getType();
        assertEquals(PostgresSchema.PostgresDataType.BIT, postgresSchema_PostgresDataType1);
    }

    @Test
    public void test02() throws Throwable {
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("");
        PostgresColumnReference postgresColumnReference0 = new PostgresColumnReference(postgresSchema_PostgresColumn0);
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create((PostgresSchema.PostgresDataType) null, 1);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresColumnReference0,
                postgresCompoundDataType0);
        postgresCastOperation0.getExpressionType();
    }

    @Test
    public void test03() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0);
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "Q3HciH6 Y=HDI^PJu=");
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_StringConstant0,
                postgresCompoundDataType0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType1 = postgresCastOperation0.getExpressionType();
        assertEquals(PostgresSchema.PostgresDataType.BIT, postgresSchema_PostgresDataType1);
    }

    @Test
    public void test04() throws Throwable {
        PostgresConstant.IntConstant postgresConstant_IntConstant0 = new PostgresConstant.IntConstant(0L);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_IntConstant0,
                postgresCompoundDataType0);
        PostgresConstant postgresConstant0 = postgresCastOperation0.getExpectedValue();
        assertEquals("0", postgresConstant0.getUnquotedTextRepresentation());
    }

    @Test
    public void test05() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0, 74);
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_PostgresNullConstant0,
                postgresCompoundDataType0);
        PostgresConstant postgresConstant0 = postgresCastOperation0.getExpectedValue();
        assertNotSame(postgresConstant_PostgresNullConstant0, postgresConstant0);
    }

    @Test
    public void test06() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(true);
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_BooleanConstant0,
                postgresCompoundDataType0);
        PostgresConstant postgresConstant0 = postgresCastOperation0.getExpectedValue();
        assertEquals(PostgresSchema.PostgresDataType.BOOLEAN, postgresConstant0.getExpressionType());
    }

    @Test
    public void test07() throws Throwable {
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "Q3HciH6 Y=HDI^PJu=");
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0, 0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_StringConstant0,
                postgresCompoundDataType0);
        PostgresConstant postgresConstant0 = postgresCastOperation0.getExpectedValue();
        assertFalse(postgresConstant0.isNull());
    }

    @Test
    public void test08() throws Throwable {
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("");
        PostgresColumnReference postgresColumnReference0 = new PostgresColumnReference(postgresSchema_PostgresColumn0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0, 1);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresColumnReference0,
                postgresCompoundDataType0);
        PostgresCompoundDataType postgresCompoundDataType1 = postgresCastOperation0.getCompoundType();
        assertEquals(PostgresSchema.PostgresDataType.RANGE, postgresCompoundDataType1.getDataType());
    }

    @Test
    public void test09() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(
                postgresConstant_PostgresNullConstant0, postgresPrefixOperation_PrefixOperator0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresPrefixOperation0,
                (PostgresCompoundDataType) null);
        // Undeclared exception!
        try {
            postgresCastOperation0.getExpectedValue();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        PostgresConstant.FloatConstant postgresConstant_FloatConstant0 = new PostgresConstant.FloatConstant(0.0F);
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant_FloatConstant0,
                postgresConstant_FloatConstant0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresLikeOperation0,
                (PostgresCompoundDataType) null);
        // Undeclared exception!
        try {
            postgresCastOperation0.getExpectedValue();
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 0.0
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant0,
                (PostgresCompoundDataType) null);
        // Undeclared exception!
        try {
            postgresCastOperation0.getExpectedValue();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresCastOperation", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        PostgresJoin.PostgresJoinType postgresJoin_PostgresJoinType0 = PostgresJoin.PostgresJoinType.RIGHT;
        PostgresJoin postgresJoin0 = new PostgresJoin((PostgresExpression) null, (PostgresExpression) null,
                postgresJoin_PostgresJoinType0, (PostgresExpression) null);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresJoin0,
                (PostgresCompoundDataType) null);
        // Undeclared exception!
        try {
            postgresCastOperation0.getExpectedValue();
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test13() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0);
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresFunction0,
                postgresCompoundDataType0);
        // Undeclared exception!
        try {
            postgresCastOperation0.getExpectedValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$2", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        PostgresConstant.IntConstant postgresConstant_IntConstant0 = new PostgresConstant.IntConstant(934L);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_IntConstant0,
                postgresCompoundDataType0);
        PostgresCastOperation postgresCastOperation1 = new PostgresCastOperation(postgresCastOperation0,
                postgresCompoundDataType0);
        PostgresConstant postgresConstant0 = postgresCastOperation1.getExpectedValue();
        assertNull(postgresConstant0);
    }

    @Test
    public void test15() throws Throwable {
        PostgresCastOperation postgresCastOperation0 = null;
        try {
            postgresCastOperation0 = new PostgresCastOperation((PostgresExpression) null,
                    (PostgresCompoundDataType) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test16() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_PostgresNullConstant0,
                (PostgresCompoundDataType) null);
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant1 = (PostgresConstant.PostgresNullConstant) postgresCastOperation0
                .getExpression();
        assertEquals("NULL", postgresConstant_PostgresNullConstant1.getTextRepresentation());
    }

    @Test
    public void test17() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createIntConstant((-3368L));
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant0,
                (PostgresCompoundDataType) null);
        // Undeclared exception!
        try {
            postgresCastOperation0.getType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresCastOperation", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant0,
                (PostgresCompoundDataType) null);
        PostgresCompoundDataType postgresCompoundDataType0 = postgresCastOperation0.getCompoundType();
        assertNull(postgresCompoundDataType0);
    }

    @Test
    public void test19() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresSelect0,
                (PostgresCompoundDataType) null);
        // Undeclared exception!
        try {
            postgresCastOperation0.getExpressionType();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresCastOperation", e);
        }
    }
}
