/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 19:23:33 GMT 2025
 */

package sqlancer.evosuite.postgres;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresAggregate;
import sqlancer.postgres.ast.PostgresBetweenOperation;
import sqlancer.postgres.ast.PostgresBinaryBitOperation;
import sqlancer.postgres.ast.PostgresBinaryLogicalOperation;
import sqlancer.postgres.ast.PostgresBinaryRangeOperation;
import sqlancer.postgres.ast.PostgresCastOperation;
import sqlancer.postgres.ast.PostgresCollate;
import sqlancer.postgres.ast.PostgresColumnReference;
import sqlancer.postgres.ast.PostgresColumnValue;
import sqlancer.postgres.ast.PostgresConcatOperation;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresFunction;
import sqlancer.postgres.ast.PostgresInOperation;
import sqlancer.postgres.ast.PostgresLikeOperation;
import sqlancer.postgres.ast.PostgresOrderByTerm;
import sqlancer.postgres.ast.PostgresPOSIXRegularExpression;
import sqlancer.postgres.ast.PostgresPostfixOperation;
import sqlancer.postgres.ast.PostgresPostfixText;
import sqlancer.postgres.ast.PostgresPrefixOperation;
import sqlancer.postgres.ast.PostgresSelect;
import sqlancer.postgres.ast.PostgresSimilarTo;
import sqlancer.postgres.ast.PostgresTableReference;
import sqlancer.postgres.PostgresCompoundDataType;
import sqlancer.postgres.PostgresProvider;
import sqlancer.postgres.PostgresSchema;
import sqlancer.postgres.PostgresToStringVisitor;
import sqlancer.Randomly;

public class PostgresToStringVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresConstant.BitConstant postgresConstant_BitConstant0 = new PostgresConstant.BitConstant((-3516L));
        PostgresConcatOperation postgresConcatOperation0 = new PostgresConcatOperation(postgresConstant_BitConstant0,
                postgresConstant_BitConstant0);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant_BitConstant0,
                postgresConcatOperation0, postgresConstant_BitConstant0);
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresConcatOperation0,
                (PostgresExpression) postgresSimilarTo0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresSimilarTo0, list0, true);
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder.ASC;
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm(postgresInOperation0,
                postgresOrderByTerm_PostgresOrder0);
        postgresToStringVisitor0.visit(postgresOrderByTerm0);
        assertEquals(
                "((B'1111111111111111111111111111111111111111111111111111001001000100' SIMILAR TO ((B'1111111111111111111111111111111111111111111111111111001001000100')||(B'1111111111111111111111111111111111111111111111111111001001000100'))B'1111111111111111111111111111111111111111111111111111001001000100')) IN (((B'1111111111111111111111111111111111111111111111111111001001000100')||(B'1111111111111111111111111111111111111111111111111111001001000100')), (B'1111111111111111111111111111111111111111111111111111001001000100' SIMILAR TO ((B'1111111111111111111111111111111111111111111111111111001001000100')||(B'1111111111111111111111111111111111111111111111111111001001000100'))B'1111111111111111111111111111111111111111111111111111001001000100')) ASC",
                postgresToStringVisitor0.get());
    }

    @Test
    public void test01() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresExpression postgresExpression0 = PostgresConstant.createBitConstant(3L);
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresExpression0, "");
        postgresToStringVisitor0.visit(postgresCollate0);
        assertEquals("(B'11' COLLATE \"\")", postgresToStringVisitor0.get());
    }

    // @Test
    // public void test02() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresSchema.PostgresColumn[] postgresSchema_PostgresColumnArray0 = new PostgresSchema.PostgresColumn[0];
    // List<PostgresSchema.PostgresColumn> list0 = Randomly.subset((-18), postgresSchema_PostgresColumnArray0);
    // LinkedList<PostgresSchema.PostgresIndex> linkedList0 = new LinkedList<PostgresSchema.PostgresIndex>();
    // PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 =
    // PostgresSchema.PostgresTable.TableType.STANDARD;
    // PostgresSchema.PostgresStatisticsObject[] postgresSchema_PostgresStatisticsObjectArray0 = new
    // PostgresSchema.PostgresStatisticsObject[5];
    // List<PostgresSchema.PostgresStatisticsObject> list1 = Randomly.subset(3,
    // postgresSchema_PostgresStatisticsObjectArray0);
    // PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable("FALSE", list0,
    // linkedList0, postgresSchema_PostgresTable_TableType0, list1, true, true);
    // PostgresTableReference postgresTableReference0 = new PostgresTableReference(postgresSchema_PostgresTable0);
    // postgresToStringVisitor0.visit(postgresTableReference0);
    // assertEquals("FALSE", postgresToStringVisitor0.get());
    // }

    @Test
    public void test03() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresExpression postgresExpression0 = PostgresConstant.createBitConstant(3L);
        PostgresConcatOperation postgresConcatOperation0 = new PostgresConcatOperation(postgresExpression0,
                postgresExpression0);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConcatOperation0,
                postgresPrefixOperation_PrefixOperator0);
        postgresToStringVisitor0.visit(postgresPrefixOperation0);
        assertEquals("- (((B'11')||(B'11')))", postgresToStringVisitor0.get());
    }

    @Test
    public void test04() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = new PostgresSchema.PostgresColumn(">R",
                postgresSchema_PostgresDataType0);
        PostgresColumnReference postgresColumnReference0 = new PostgresColumnReference(postgresSchema_PostgresColumn0);
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresColumnReference0, ">R",
                (PostgresConstant) null, postgresSchema_PostgresDataType0);
        postgresToStringVisitor0.visit(postgresPostfixText0);
        assertEquals(">R", postgresPostfixText0.getText());
    }

    @Test
    public void test05() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresExpression postgresExpression0 = PostgresConstant.createInetConstant("");
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresExpression0, postgresExpression0,
                postgresExpression0);
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder.DESC;
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm(postgresSimilarTo0,
                postgresOrderByTerm_PostgresOrder0);
        PostgresPOSIXRegularExpression.POSIXRegex postgresPOSIXRegularExpression_POSIXRegex0 = PostgresPOSIXRegularExpression.POSIXRegex.MATCH_CASE_INSENSITIVE;
        PostgresPOSIXRegularExpression postgresPOSIXRegularExpression0 = new PostgresPOSIXRegularExpression(
                postgresOrderByTerm0, postgresSimilarTo0, postgresPOSIXRegularExpression_POSIXRegex0);
        postgresToStringVisitor0.visit(postgresPOSIXRegularExpression0);
        assertEquals("('' SIMILAR TO '''') DESC~*('' SIMILAR TO '''')", postgresToStringVisitor0.get());
    }

    @Test
    public void test06() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresExpression postgresExpression0 = PostgresConstant.createBitConstant(3L);
        PostgresConcatOperation postgresConcatOperation0 = new PostgresConcatOperation(postgresExpression0,
                postgresExpression0);
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresExpression0, "");
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresCollate0,
                postgresConcatOperation0);
        postgresToStringVisitor0.visit(postgresLikeOperation0);
        assertEquals("(((B'11' COLLATE \"\"))LIKE(((B'11')||(B'11'))))", postgresToStringVisitor0.get());
    }

    // @Test
    // public void test07() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("F");
    // PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
    // PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue(postgresSchema_PostgresColumn0,
    // postgresConstant0);
    // postgresToStringVisitor0.visit(postgresColumnValue0);
    // assertEquals(PostgresSchema.PostgresDataType.INT, postgresColumnValue0.getExpressionType());
    // }

    @Test
    public void test08() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresBinaryRangeOperation.PostgresBinaryRangeComparisonOperator postgresBinaryRangeOperation_PostgresBinaryRangeComparisonOperator0 = PostgresBinaryRangeOperation.PostgresBinaryRangeComparisonOperator.NOT_RIGHT_OF;
        PostgresExpression postgresExpression0 = PostgresConstant.createInetConstant("Explain failed: ");
        PostgresBinaryRangeOperation postgresBinaryRangeOperation0 = new PostgresBinaryRangeOperation(
                postgresBinaryRangeOperation_PostgresBinaryRangeComparisonOperator0, postgresExpression0,
                postgresExpression0);
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresBinaryRangeOperation0, "");
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_UNKNOWN;
        PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(postgresCollate0,
                postgresPostfixOperation_PostfixOperator0);
        postgresToStringVisitor0.visit(postgresPostfixOperation0);
        assertEquals("(((('Explain failed: ')&<('Explain failed: ')) COLLATE \"\")) IS UNKNOWN",
                postgresToStringVisitor0.get());
    }

    @Test
    public void test09() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_UNKNOWN;
        PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(postgresConstant0,
                postgresPostfixOperation_PostfixOperator0);
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.AND;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresConstant0, postgresPostfixOperation0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresPostfixOperation0,
                (PostgresExpression) postgresPostfixOperation0, (PostgresExpression) postgresPostfixOperation0,
                (PostgresExpression) postgresBinaryLogicalOperation0, (PostgresExpression) postgresConstant0,
                (PostgresExpression) postgresBinaryLogicalOperation0,
                (PostgresExpression) postgresBinaryLogicalOperation0, (PostgresExpression) postgresConstant0);
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.COUNT;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate(list0,
                postgresAggregate_PostgresAggregateFunction0);
        postgresToStringVisitor0.visit(postgresAggregate0);
        assertEquals(
                "COUNT((FALSE) IS UNKNOWN, (FALSE) IS UNKNOWN, (FALSE) IS UNKNOWN, ((FALSE)AND((FALSE) IS UNKNOWN)), FALSE, ((FALSE)AND((FALSE) IS UNKNOWN)), ((FALSE)AND((FALSE) IS UNKNOWN)), FALSE)",
                postgresToStringVisitor0.get());
    }

    @Test
    public void test10() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue((PostgresSchema.PostgresColumn) null,
                postgresConstant0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visitSpecific((PostgresExpression) postgresColumnValue0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test11() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visitSpecific((PostgresExpression) postgresSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test12() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visitSpecific((PostgresExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test13() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresSimilarTo) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresSelect0, postgresSelect0, postgresSelect0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresSimilarTo0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo((PostgresExpression) null,
                (PostgresExpression) null, (PostgresExpression) null);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresSimilarTo0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test16() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresSelect.PostgresSubquery) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresPrefixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresSelect0,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresPrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresPostfixText) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        PostgresConstant postgresConstant0 = PostgresConstant.createDecimalConstant(bigDecimal0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText((PostgresExpression) null, "DECIMAL",
                postgresConstant0, postgresSchema_PostgresDataType0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresPostfixText0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test22() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresPostfixOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_NOT_NULL;
        PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation((PostgresExpression) null,
                postgresPostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresPostfixOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test24() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresPOSIXRegularExpression) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresPOSIXRegularExpression.POSIXRegex postgresPOSIXRegularExpression_POSIXRegex0 = PostgresPOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_INSENSITIVE;
        PostgresPOSIXRegularExpression postgresPOSIXRegularExpression0 = new PostgresPOSIXRegularExpression(
                (PostgresExpression) null, (PostgresExpression) null, postgresPOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresPOSIXRegularExpression0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test26() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresOrderByTerm) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder.DESC;
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm((PostgresExpression) null,
                postgresOrderByTerm_PostgresOrder0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresOrderByTerm0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test28() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresLikeOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test29() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresSelect0, postgresSelect0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresLikeOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresInOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test31() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        List<PostgresExpression> list0 = postgresSelect0.getOrderByClauses();
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresSelect0, list0, false);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test32() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresInOperation postgresInOperation0 = new PostgresInOperation((PostgresExpression) null,
                (List<PostgresExpression>) null, true);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresInOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test33() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresFunction) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test34() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.DECIMAL;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        postgresExpressionArray0[0] = (PostgresExpression) postgresSelect0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test35() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresConstant) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test36() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresColumnReference) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test37() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresCollate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test38() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresCollate postgresCollate0 = new PostgresCollate((PostgresExpression) null, "$( EQig");
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresCollate0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test39() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresCastOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test40() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_FALSE;
        PostgresExpression postgresExpression0 = PostgresPostfixOperation.create((PostgresExpression) null,
                postgresPostfixOperation_PostfixOperator0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresExpression0,
                (PostgresCompoundDataType) null);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresCastOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test41() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresBinaryLogicalOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test42() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.OR;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                (PostgresExpression) null, (PostgresExpression) null,
                postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresBinaryLogicalOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test43() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresBetweenOperation) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test44() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresSelect0,
                postgresSelect0, postgresSelect0, false);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test45() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation((PostgresExpression) null,
                (PostgresExpression) null, (PostgresExpression) null, false);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresBetweenOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test46() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresAggregate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test47() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        postgresExpressionArray0[0] = (PostgresExpression) postgresSelect0;
        List<PostgresExpression> list0 = Randomly.nonEmptySubset(postgresExpressionArray0);
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.COUNT;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate(list0,
                postgresAggregate_PostgresAggregateFunction0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresAggregate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test48() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresExpression postgresExpression0 = PostgresConstant.createInetConstant("");
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresExpression0, postgresExpression0,
                postgresExpression0);
        postgresToStringVisitor0.visit(postgresSimilarTo0);
        assertEquals("('' SIMILAR TO '''')", postgresToStringVisitor0.get());
    }

    @Test
    public void test49() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresConstant.InetConstant postgresConstant_InetConstant0 = new PostgresConstant.InetConstant("");
        PostgresConcatOperation postgresConcatOperation0 = new PostgresConcatOperation(postgresConstant_InetConstant0,
                postgresConstant_InetConstant0);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant_InetConstant0,
                postgresConcatOperation0, postgresConstant_InetConstant0);
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresSimilarTo0,
                (PostgresExpression) postgresConstant_InetConstant0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresSimilarTo0, list0, false);
        postgresToStringVisitor0.visit(postgresInOperation0);
        assertEquals("(('' SIMILAR TO (('')||(''))'')) NOT IN (('' SIMILAR TO (('')||(''))''), '')",
                postgresToStringVisitor0.get());
    }

    @Test
    public void test50() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSelect.SelectType postgresSelect_SelectType0 = PostgresSelect.SelectType.DISTINCT;
        postgresSelect0.setSelectType(postgresSelect_SelectType0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test51() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresSelect0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test52() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresConstant.InetConstant postgresConstant_InetConstant0 = new PostgresConstant.InetConstant("F");
        postgresToStringVisitor0.visit((PostgresConstant) postgresConstant_InetConstant0);
        assertFalse(postgresConstant_InetConstant0.isBoolean());
    }

    @Test
    public void test53() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createTrue();
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant0, postgresConstant0,
                postgresConstant0);
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.AND;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresSimilarTo0, postgresConstant0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        postgresToStringVisitor0.visit(postgresBinaryLogicalOperation0);
        assertEquals("(((TRUE SIMILAR TO TRUETRUE))AND(TRUE))", postgresToStringVisitor0.get());
    }

    @Test
    public void test54() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresBinaryBitOperation.PostgresBinaryBitOperator postgresBinaryBitOperation_PostgresBinaryBitOperator0 = PostgresBinaryBitOperation.PostgresBinaryBitOperator.BITWISE_XOR;
        PostgresConstant postgresConstant0 = PostgresConstant.createDoubleConstant((-3552.081268745543));
        PostgresBinaryBitOperation postgresBinaryBitOperation0 = new PostgresBinaryBitOperation(
                postgresBinaryBitOperation_PostgresBinaryBitOperator0, postgresConstant0, postgresConstant0);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresBinaryBitOperation0,
                postgresBinaryBitOperation0, (PostgresExpression) null);
        postgresToStringVisitor0.visit(postgresSimilarTo0);
        assertEquals(
                "(((-3552.081268745543)#(-3552.081268745543)) SIMILAR TO ((-3552.081268745543)#(-3552.081268745543)))",
                postgresToStringVisitor0.get());
    }

    // @Test
    // public void test55() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant.FloatConstant postgresConstant_FloatConstant0 = new PostgresConstant.FloatConstant(1352.7F);
    // List<PostgresExpression> list0 = List.of();
    // PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant_FloatConstant0, list0,
    // false);
    // postgresToStringVisitor0.visitSpecific((PostgresExpression) postgresInOperation0);
    // assertEquals("(1352.7) NOT IN ()", postgresToStringVisitor0.get());
    // }

    @Test
    public void test56() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresExpression postgresExpression0 = PostgresConstant.createInetConstant("");
        PostgresSelect postgresSelect0 = new PostgresSelect();
        List<PostgresExpression> list0 = postgresSelect0.getJoinList();
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresExpression0, list0, true);
        postgresToStringVisitor0.visit(postgresInOperation0);
        String string0 = postgresToStringVisitor0.get();
        assertEquals("('') IN ()", string0);
    }

    @Test
    public void test57() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(
                false);
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(
                postgresConstant_BooleanConstant0, postgresConstant_BooleanConstant0, postgresConstant_BooleanConstant0,
                false);
        postgresToStringVisitor0.visit(postgresBetweenOperation0);
        assertEquals("(FALSE) BETWEEN (FALSE) AND (FALSE)", postgresToStringVisitor0.get());
    }

    @Test
    public void test58() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresProvider.generateOnlyKnown = true;
        PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = new PostgresConstant.BooleanConstant(true);
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(
                postgresConstant_BooleanConstant0, postgresConstant_BooleanConstant0, postgresConstant_BooleanConstant0,
                true);
        postgresToStringVisitor0.visit(postgresBetweenOperation0);
        assertEquals("(TRUE) BETWEEN SYMMETRIC (TRUE) AND (TRUE)", postgresToStringVisitor0.get());
    }

//    @Test
//    public void test59() throws Throwable {
//        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
//        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
//        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
//        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
//                .create(postgresSchema_PostgresDataType0);
//        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant0,
//                postgresCompoundDataType0);
//        postgresToStringVisitor0.visit(postgresCastOperation0);
//        assertEquals("(FALSE)::INET", postgresToStringVisitor0.get());
//    }

    // @Test
    // public void test60() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant.InetConstant postgresConstant_InetConstant0 = new PostgresConstant.InetConstant("");
    // PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 =
    // PostgresPostfixOperation.PostfixOperator.IS_UNKNOWN;
    // PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(
    // postgresConstant_InetConstant0, postgresPostfixOperation_PostfixOperator0);
    // PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
    // PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
    // .create(postgresSchema_PostgresDataType0);
    // PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresPostfixOperation0,
    // postgresCompoundDataType0);
    // postgresToStringVisitor0.visit(postgresCastOperation0);
    // assertEquals("(('') IS UNKNOWN)::BIT", postgresToStringVisitor0.get());
    // }

    // @Test
    // public void test61() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant.InetConstant postgresConstant_InetConstant0 = new PostgresConstant.InetConstant("");
    // PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
    // PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
    // .create(postgresSchema_PostgresDataType0);
    // PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_InetConstant0,
    // postgresCompoundDataType0);
    // postgresToStringVisitor0.visit(postgresCastOperation0);
    // assertEquals("('')::int4range", postgresToStringVisitor0.get());
    // }

    // @Test
    // public void test62() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant.InetConstant postgresConstant_InetConstant0 = new PostgresConstant.InetConstant("F");
    // PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
    // PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
    // .create(postgresSchema_PostgresDataType0);
    // PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_InetConstant0,
    // postgresCompoundDataType0);
    // postgresToStringVisitor0.visit(postgresCastOperation0);
    // assertEquals("('F')::FLOAT", postgresToStringVisitor0.get());
    // }
    //
    // @Test
    // public void test63() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
    // PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 =
    // PostgresPostfixOperation.PostfixOperator.IS_UNKNOWN;
    // PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(postgresConstant0,
    // postgresPostfixOperation_PostfixOperator0);
    // PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.FLOAT;
    // PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
    // .create(postgresSchema_PostgresDataType0);
    // PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresPostfixOperation0,
    // postgresCompoundDataType0);
    // postgresToStringVisitor0.visit(postgresCastOperation0);
    // assertEquals("((FALSE) IS UNKNOWN)::REAL", postgresToStringVisitor0.get());
    // }
    //
    // @Test
    // public void test64() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
    // PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.DECIMAL;
    // PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
    // .create(postgresSchema_PostgresDataType0);
    // PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant0,
    // postgresCompoundDataType0);
    // postgresToStringVisitor0.visit(postgresCastOperation0);
    // assertEquals("(FALSE)::DECIMAL", postgresToStringVisitor0.get());
    // }
    //
    // @Test
    // public void test65() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
    // PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
    // PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
    // .create(postgresSchema_PostgresDataType0, 1453);
    // PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant0,
    // postgresCompoundDataType0);
    // postgresToStringVisitor0.visit(postgresCastOperation0);
    // assertEquals("(FALSE)::VARCHAR(1453)", postgresToStringVisitor0.get());
    // }
    //
    // @Test
    // public void test66() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
    // PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
    // PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
    // .create(postgresSchema_PostgresDataType0);
    // PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant0,
    // postgresCompoundDataType0);
    // postgresToStringVisitor0.visit(postgresCastOperation0);
    // assertEquals("(NULL)::BOOLEAN", postgresToStringVisitor0.get());
    // }
    //
    // @Test
    // public void test67() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant.InetConstant postgresConstant_InetConstant0 = new PostgresConstant.InetConstant("");
    // PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 =
    // PostgresPostfixOperation.PostfixOperator.IS_NULL;
    // PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(
    // postgresConstant_InetConstant0, postgresPostfixOperation_PostfixOperator0);
    // PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
    // PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
    // .create(postgresSchema_PostgresDataType0);
    // PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresPostfixOperation0,
    // postgresCompoundDataType0);
    // postgresToStringVisitor0.visit(postgresCastOperation0);
    // assertEquals("(('') IS NULL)::MONEY", postgresToStringVisitor0.get());
    // }
    //
    // @Test
    // public void test68() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // PostgresConstant.InetConstant postgresConstant_InetConstant0 = new PostgresConstant.InetConstant("");
    // PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
    // PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
    // .create(postgresSchema_PostgresDataType0);
    // PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_InetConstant0,
    // postgresCompoundDataType0);
    // postgresToStringVisitor0.visit(postgresCastOperation0);
    // assertEquals("('')::INT", postgresToStringVisitor0.get());
    // }

    @Test
    public void test69() throws Throwable {
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.DECIMAL;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[9];
        PostgresConstant postgresConstant0 = PostgresConstant.createTrue();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresFunction0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test70() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NULLS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        postgresToStringVisitor0.visit(postgresFunction0);
        assertEquals("num_nulls()", postgresToStringVisitor0.get());
    }

    @Test
    public void test71() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSelect.SelectType postgresSelect_SelectType0 = PostgresSelect.SelectType.DISTINCT;
        postgresSelect0.setSelectType(postgresSelect_SelectType0);
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0);
        PostgresExpression postgresExpression0 = PostgresConstant.createBitConstant(0L);
        postgresSelect0.setDistinctOnClause(postgresExpression0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresSelect0,
                postgresCompoundDataType0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresCastOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test72() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSelect.SelectType postgresSelect_SelectType0 = PostgresSelect.SelectType.DISTINCT;
        postgresSelect0.setSelectType(postgresSelect_SelectType0);
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.OR;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresSelect0, postgresSelect0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresBinaryLogicalOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    // @Test
    // public void test73() throws Throwable {
    // LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
    // PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 =
    // PostgresSchema.PostgresTable.TableType.STANDARD;
    // PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable("", linkedList0,
    // (List<PostgresSchema.PostgresIndex>) null, postgresSchema_PostgresTable_TableType0,
    // (List<PostgresSchema.PostgresStatisticsObject>) null, false, false);
    // PostgresSelect.PostgresFromTable postgresSelect_PostgresFromTable0 = new PostgresSelect.PostgresFromTable(
    // postgresSchema_PostgresTable0, false);
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // postgresToStringVisitor0.visit(postgresSelect_PostgresFromTable0);
    // assertEquals("", postgresToStringVisitor0.get());
    // }

    // @Test
    // public void test74() throws Throwable {
    // PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
    // LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
    // PostgresSchema.PostgresIndex[] postgresSchema_PostgresIndexArray0 = new PostgresSchema.PostgresIndex[1];
    // List<PostgresSchema.PostgresIndex> list0 = Randomly.subset((-2157), postgresSchema_PostgresIndexArray0);
    // PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 =
    // PostgresSchema.PostgresTable.TableType.TEMPORARY;
    // PostgresSchema.PostgresStatisticsObject[] postgresSchema_PostgresStatisticsObjectArray0 = new
    // PostgresSchema.PostgresStatisticsObject[5];
    // List<PostgresSchema.PostgresStatisticsObject> list1 = Randomly.subset((-2157),
    // postgresSchema_PostgresStatisticsObjectArray0);
    // PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable((String) null,
    // linkedList0, list0, postgresSchema_PostgresTable_TableType0, list1, true, true);
    // PostgresSelect.PostgresFromTable postgresSelect_PostgresFromTable0 = new PostgresSelect.PostgresFromTable(
    // postgresSchema_PostgresTable0, true);
    // postgresToStringVisitor0.visit(postgresSelect_PostgresFromTable0);
    // assertEquals("ONLY null", postgresToStringVisitor0.get());
    // }

    @Test
    public void test75() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect.PostgresFromTable postgresSelect_PostgresFromTable0 = new PostgresSelect.PostgresFromTable(
                (PostgresSchema.PostgresTable) null, false);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresSelect_PostgresFromTable0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test76() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation((PostgresExpression) null,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresPrefixOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test77() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresSelect0, "B8(A_Hb:14dh");
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresCollate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test78() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit((PostgresColumnValue) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test79() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresPOSIXRegularExpression.POSIXRegex postgresPOSIXRegularExpression_POSIXRegex0 = PostgresPOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_SENSITIVE;
        PostgresPOSIXRegularExpression postgresPOSIXRegularExpression0 = new PostgresPOSIXRegularExpression(
                postgresSelect0, postgresSelect0, postgresPOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresPOSIXRegularExpression0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test80() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSelect.PostgresSubquery postgresSelect_PostgresSubquery0 = new PostgresSelect.PostgresSubquery(
                postgresSelect0, "");
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresSelect_PostgresSubquery0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test81() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        String string0 = postgresToStringVisitor0.get();
        assertEquals("", string0);
    }

    @Test
    public void test82() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_NOT_NULL;
        PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(postgresSelect0,
                postgresPostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresPostfixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test83() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresTableReference postgresTableReference0 = new PostgresTableReference(
                (PostgresSchema.PostgresTable) null);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresTableReference0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test84() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresSelect0, "", (PostgresConstant) null,
                postgresSchema_PostgresDataType0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresPostfixText0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test85() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("");
        PostgresColumnReference postgresColumnReference0 = new PostgresColumnReference(postgresSchema_PostgresColumn0);
        postgresToStringVisitor0.visit(postgresColumnReference0);
        assertEquals("", postgresToStringVisitor0.get());
    }

    @Test
    public void test86() throws Throwable {
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresOrderByTerm.PostgresOrder postgresOrderByTerm_PostgresOrder0 = PostgresOrderByTerm.PostgresOrder.ASC;
        PostgresOrderByTerm postgresOrderByTerm0 = new PostgresOrderByTerm(postgresSelect0,
                postgresOrderByTerm_PostgresOrder0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresOrderByTerm0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test87() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation((PostgresExpression) null,
                (PostgresExpression) null);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresLikeOperation0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test88() throws Throwable {
        PostgresToStringVisitor postgresToStringVisitor0 = new PostgresToStringVisitor();
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        List<PostgresExpression> list0 = Randomly.nonEmptySubset(postgresExpressionArray0);
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.COUNT;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate(list0,
                postgresAggregate_PostgresAggregateFunction0);
        // Undeclared exception!
        try {
            postgresToStringVisitor0.visit(postgresAggregate0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }
}
