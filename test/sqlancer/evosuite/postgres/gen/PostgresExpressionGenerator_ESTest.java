/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 20:51:10 GMT 2025
 */

package sqlancer.evosuite.postgres.gen;

import static org.junit.jupiter.api.Assertions.*;
import java.util.function.Supplier;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.citus.CitusGlobalState;
import sqlancer.postgres.ast.PostgresCastOperation;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.gen.PostgresExpressionGenerator;
import sqlancer.postgres.PostgresGlobalState;
import sqlancer.postgres.PostgresSchema;
import sqlancer.Randomly;

public class PostgresExpressionGenerator_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        // Undeclared exception!
        try {
            PostgresExpressionGenerator.generateConstant((Randomly) null, postgresSchema_PostgresDataType0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.gen.PostgresExpressionGenerator", e);
        }
    }

/*
 * Test disabled because it contains mock() function calls that are not implemented
 *
 * @Test public void test01() throws Throwable { CitusGlobalState citusGlobalState0 = new CitusGlobalState(); //
 * Undeclared exception! try { PostgresExpressionGenerator.createSubquery(citusGlobalState0, "@{4\"vPJ#(T",
 * (PostgresSchema.PostgresTables) null); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.postgres.gen.PostgresExpressionGenerator", e); } }
 *
 * @Test public void test02() throws Throwable { Randomly randomly0 = new Randomly(); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.FLOAT; PostgresExpression postgresExpression0 =
 * PostgresExpressionGenerator.generateConstant(randomly0, postgresSchema_PostgresDataType0);
 * assertEquals(PostgresSchema.PostgresDataType.FLOAT, postgresExpression0.getExpressionType()); }
 *
 * @Test public void test03() throws Throwable { CitusGlobalState citusGlobalState0 = new CitusGlobalState();
 * PostgresExpressionGenerator postgresExpressionGenerator0 = null; try { postgresExpressionGenerator0 = new
 * PostgresExpressionGenerator(citusGlobalState0); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.postgres.gen.PostgresExpressionGenerator", e); } }
 *
 * @Test public void test04() throws Throwable { Randomly randomly0 = new Randomly(); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET; PostgresConstant.InetConstant
 * postgresConstant_InetConstant0 = (PostgresConstant.InetConstant) PostgresExpressionGenerator
 * .generateConstant(randomly0, postgresSchema_PostgresDataType0);
 * assertNull(postgresConstant_InetConstant0.getUnquotedTextRepresentation()); }
 *
 * @Test public void test05() throws Throwable { Randomly randomly0 = new Randomly(); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT; PostgresConstant.BitConstant
 * postgresConstant_BitConstant0 = (PostgresConstant.BitConstant) PostgresExpressionGenerator
 * .generateConstant(randomly0, postgresSchema_PostgresDataType0);
 * assertFalse(postgresConstant_BitConstant0.isBoolean()); }
 *
 * @Test public void test06() throws Throwable { Randomly randomly0 = new Randomly(); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE; PostgresConstant.RangeConstant
 * postgresConstant_RangeConstant0 = (PostgresConstant.RangeConstant) PostgresExpressionGenerator
 * .generateConstant(randomly0, postgresSchema_PostgresDataType0);
 * assertNull(postgresConstant_RangeConstant0.getUnquotedTextRepresentation()); }
 *
 * @Test public void test07() throws Throwable { Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class,
 * new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL; PostgresConstant.DoubleConstant
 * postgresConstant_DoubleConstant0 = (PostgresConstant.DoubleConstant) PostgresExpressionGenerator
 * .generateConstant(randomly0, postgresSchema_PostgresDataType0);
 * assertFalse(postgresConstant_DoubleConstant0.isString()); }
 *
 * @Test public void test08() throws Throwable { Randomly randomly0 = new Randomly((Supplier<String>) null);
 * PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.DECIMAL;
 * PostgresConstant.DecimalConstant postgresConstant_DecimalConstant0 = (PostgresConstant.DecimalConstant)
 * PostgresExpressionGenerator .generateConstant(randomly0, postgresSchema_PostgresDataType0);
 * assertFalse(postgresConstant_DecimalConstant0.isBoolean()); }
 *
 * @Test public void test09() throws Throwable { Randomly randomly0 = new Randomly(); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT; PostgresConstant.StringConstant
 * postgresConstant_StringConstant0 = (PostgresConstant.StringConstant) PostgresExpressionGenerator
 * .generateConstant(randomly0, postgresSchema_PostgresDataType0);
 * assertFalse(postgresConstant_StringConstant0.isBoolean()); }
 *
 * @Test public void test10() throws Throwable { Randomly randomly0 = new Randomly(255L);
 * PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
 * PostgresConstant.BooleanConstant postgresConstant_BooleanConstant0 = (PostgresConstant.BooleanConstant)
 * PostgresExpressionGenerator .generateConstant(randomly0, postgresSchema_PostgresDataType0); assertEquals("FALSE",
 * postgresConstant_BooleanConstant0.getTextRepresentation()); }
 *
 * @Test public void test11() throws Throwable { Randomly randomly0 = new Randomly(); Randomly.smallNumber();
 * PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
 * PostgresExpression postgresExpression0 = PostgresExpressionGenerator.generateConstant(randomly0,
 * postgresSchema_PostgresDataType0); assertNull(postgresExpression0.getExpressionType()); }
 *
 * @Test public void test12() throws Throwable { Randomly randomly0 = new Randomly(); PostgresSchema.PostgresDataType
 * postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY; PostgresCastOperation
 * postgresCastOperation0 = (PostgresCastOperation) PostgresExpressionGenerator .generateConstant(randomly0,
 * postgresSchema_PostgresDataType0); assertEquals(PostgresSchema.PostgresDataType.MONEY,
 * postgresCastOperation0.getType()); }
 *
 * @Test public void test13() throws Throwable { PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 =
 * PostgresSchema.PostgresDataType.BOOLEAN; PostgresGlobalState postgresGlobalState0 = new PostgresGlobalState(); //
 * Undeclared exception! try { PostgresExpressionGenerator.generateExpression(postgresGlobalState0,
 * postgresSchema_PostgresDataType0); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.postgres.gen.PostgresExpressionGenerator", e); } }
 *
 * @Test public void test14() throws Throwable { LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new
 * LinkedList<PostgresSchema.PostgresColumn>(); PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 =
 * PostgresSchema.PostgresDataType.BOOLEAN; CitusGlobalState citusGlobalState0 = new CitusGlobalState(); // Undeclared
 * exception! try { PostgresExpressionGenerator.generateExpression((PostgresGlobalState) citusGlobalState0,
 * (List<PostgresSchema.PostgresColumn>) linkedList0, postgresSchema_PostgresDataType0);
 * fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.postgres.gen.PostgresExpressionGenerator", e); } }
 *
 * @Test public void test15() throws Throwable { LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new
 * LinkedList<PostgresSchema.PostgresColumn>(); // Undeclared exception! try {
 * PostgresExpressionGenerator.generateExpression((PostgresGlobalState) null, (List<PostgresSchema.PostgresColumn>)
 * linkedList0); fail("Expecting exception: NullPointerException");
 *
 * } catch (NullPointerException e) { // // no message in exception (getMessage() returned null) //
 * verifyException("sqlancer.postgres.gen.PostgresExpressionGenerator", e); } } }
 */
