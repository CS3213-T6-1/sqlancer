/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 23:00:27 GMT 2025
 */

package sqlancer.evosuite.postgres.gen;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import sqlancer.citus.CitusGlobalState;
import sqlancer.common.query.ExpectedErrors;
import sqlancer.postgres.gen.PostgresCommon;
import sqlancer.postgres.PostgresGlobalState;
import sqlancer.postgres.PostgresSchema;

public class PostgresCommon_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        StringBuilder stringBuilder0 = new StringBuilder();
        CitusGlobalState citusGlobalState0 = new CitusGlobalState();
        List<String> list0 = citusGlobalState0.getCollates();
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, true, true,
                list0);
        assertFalse(boolean0);
    }

    @Test
    public void test01() throws Throwable {
        List<String> list0 = PostgresCommon.getCommonTableErrors();
        StringBuilder stringBuilder0 = new StringBuilder();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, true, true,
                list0);
        assertFalse(boolean0);
    }

    @Test
    public void test02() throws Throwable {
        List<String> list0 = PostgresCommon.getCommonTableErrors();
        StringBuilder stringBuilder0 = new StringBuilder();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INT;
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, false, false,
                list0);
        assertEquals("smallint", stringBuilder0.toString());
        assertFalse(boolean0);
    }

    @Test
    public void test03() throws Throwable {
        // Undeclared exception!
        try {
            PostgresCommon.addCommonTableErrors((ExpectedErrors) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.gen.PostgresCommon", e);
        }
    }

    @Test
    public void test04() throws Throwable {
        // Undeclared exception!
        try {
            PostgresCommon.addCommonInsertUpdateErrors((ExpectedErrors) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.gen.PostgresCommon", e);
        }
    }

//    @Test
//    public void test05() throws Throwable {
//        StringBuilder stringBuilder0 = new StringBuilder();
//        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("");
//        List<PostgresSchema.PostgresColumn> list0 = List.of(postgresSchema_PostgresColumn0,
//                postgresSchema_PostgresColumn0);
//        LinkedList<PostgresSchema.PostgresIndex> linkedList0 = new LinkedList<PostgresSchema.PostgresIndex>();
//        LinkedList<PostgresSchema.PostgresStatisticsObject> linkedList1 = new LinkedList<PostgresSchema.PostgresStatisticsObject>();
//        PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.STANDARD;
//        PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable("", list0,
//                linkedList0, postgresSchema_PostgresTable_TableType0, linkedList1, false, false);
//        postgresSchema_PostgresTable0.getRandomColumn();
//        postgresSchema_PostgresTable0.getRandomNonEmptyColumnSubset();
//        ExpectedErrors expectedErrors0 = new ExpectedErrors();
//        CitusGlobalState citusGlobalState0 = new CitusGlobalState();
//        PostgresCommon.addTableConstraint(stringBuilder0, postgresSchema_PostgresTable0, citusGlobalState0,
//                expectedErrors0);
//        // Undeclared exception!
//        try {
//            PostgresCommon.addTableConstraint(stringBuilder0, postgresSchema_PostgresTable0, citusGlobalState0,
//                    expectedErrors0);
//            fail("Expecting exception: NullPointerException");
//
//        } catch (NullPointerException e) {
//            //
//            // no message in exception (getMessage() returned null)
//            //
//            verifyException("sqlancer.postgres.gen.PostgresExpressionGenerator", e);
//        }
//    }

//    @Test
//    public void test06() throws Throwable {
//        StringBuilder stringBuilder0 = new StringBuilder();
//        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("");
//        List<PostgresSchema.PostgresColumn> list0 = List.of(postgresSchema_PostgresColumn0,
//                postgresSchema_PostgresColumn0);
//        LinkedList<PostgresSchema.PostgresIndex> linkedList0 = new LinkedList<PostgresSchema.PostgresIndex>();
//        LinkedList<PostgresSchema.PostgresStatisticsObject> linkedList1 = new LinkedList<PostgresSchema.PostgresStatisticsObject>();
//        PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.STANDARD;
//        PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable("", list0,
//                linkedList0, postgresSchema_PostgresTable_TableType0, linkedList1, false, false);
//        postgresSchema_PostgresTable0.getRandomNonEmptyColumnSubset();
//        ExpectedErrors expectedErrors0 = new ExpectedErrors();
//        CitusGlobalState citusGlobalState0 = new CitusGlobalState();
//        PostgresCommon.addTableConstraint(stringBuilder0, postgresSchema_PostgresTable0, citusGlobalState0,
//                expectedErrors0);
//        // Undeclared exception!
//        try {
//            PostgresCommon.addTableConstraint(stringBuilder0, postgresSchema_PostgresTable0, citusGlobalState0,
//                    expectedErrors0);
//            fail("Expecting exception: AssertionError");
//
//        } catch (AssertionError e) {
//            //
//            // null
//            //
//        }
//    }

//    @Test
//    public void test07() throws Throwable {
//        StringBuilder stringBuilder0 = new StringBuilder();
//        ExpectedErrors expectedErrors0 = new ExpectedErrors();
//        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn
//                .createDummy("boolean");
//        List<PostgresSchema.PostgresColumn> list0 = List.of(postgresSchema_PostgresColumn0);
//        LinkedList<PostgresSchema.PostgresIndex> linkedList0 = new LinkedList<PostgresSchema.PostgresIndex>();
//        LinkedList<PostgresSchema.PostgresStatisticsObject> linkedList1 = new LinkedList<PostgresSchema.PostgresStatisticsObject>();
//        PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.STANDARD;
//        PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable("boolean", list0,
//                linkedList0, postgresSchema_PostgresTable_TableType0, linkedList1, true, true);
//        PostgresGlobalState postgresGlobalState0 = new PostgresGlobalState();
//        // Undeclared exception!
//        try {
//            PostgresCommon.addTableConstraint(stringBuilder0, postgresSchema_PostgresTable0, postgresGlobalState0,
//                    expectedErrors0);
//            fail("Expecting exception: NullPointerException");
//
//        } catch (NullPointerException e) {
//            //
//            // no message in exception (getMessage() returned null)
//            //
//            verifyException("sqlancer.postgres.gen.PostgresExpressionGenerator", e);
//        }
//    }

    @Test
    public void test08() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        PostgresGlobalState postgresGlobalState0 = new PostgresGlobalState();
        // Undeclared exception!
        try {
            PostgresCommon.addTableConstraints(true, (StringBuilder) null, (PostgresSchema.PostgresTable) null,
                    postgresGlobalState0, expectedErrors0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test09() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        // Undeclared exception!
        try {
            PostgresCommon.addTableConstraints(false, (StringBuilder) null, (PostgresSchema.PostgresTable) null,
                    (PostgresGlobalState) null, expectedErrors0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.gen.PostgresCommon", e);
        }
    }

    @Test
    public void test10() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        PostgresGlobalState postgresGlobalState0 = new PostgresGlobalState();
        PostgresCommon.generateWith((StringBuilder) null, postgresGlobalState0, expectedErrors0);
        assertEquals('s', PostgresGlobalState.STABLE);
    }

    @Test
    public void test11() throws Throwable {
        StringBuilder stringBuilder0 = new StringBuilder();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        List<String> list0 = PostgresCommon.getCommonTableErrors();
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, false, false,
                list0);
        assertEquals("name", stringBuilder0.toString());
        assertFalse(boolean0);
    }

    @Test
    public void test12() throws Throwable {
        StringBuilder stringBuilder0 = new StringBuilder();
        List<String> list0 = PostgresCommon.getGroupingErrors();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.INET;
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, false, false,
                list0);
        assertFalse(boolean0);
    }

    @Test
    public void test13() throws Throwable {
        StringBuilder stringBuilder0 = new StringBuilder();
        List<String> list0 = PostgresCommon.getGroupingErrors();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, false, false,
                list0);
        assertFalse(boolean0);
    }

    @Test
    public void test14() throws Throwable {
        List<String> list0 = PostgresCommon.getCommonRangeExpressionErrors();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        // Undeclared exception!
        try {
            PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, (StringBuilder) null, true, true, list0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.gen.PostgresCommon", e);
        }
    }

    @Test
    public void test15() throws Throwable {
        StringBuilder stringBuilder0 = new StringBuilder();
        List<String> list0 = PostgresCommon.getGroupingErrors();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.FLOAT;
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, true, true,
                list0);
        assertFalse(boolean0);
    }

    @Test
    public void test16() throws Throwable {
        List<String> list0 = PostgresCommon.getCommonRangeExpressionErrors();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.DECIMAL;
        // Undeclared exception!
        try {
            PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, (StringBuilder) null, true, true, list0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.gen.PostgresCommon", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        List<String> list0 = PostgresCommon.getCommonRangeExpressionErrors();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        // Undeclared exception!
        try {
            PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, (StringBuilder) null, false, false, list0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.gen.PostgresCommon", e);
        }
    }

    @Test
    public void test18() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        PostgresCommon.addGroupingErrors(expectedErrors0);
    }

    @Test
    public void test19() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        PostgresCommon.addCommonRangeExpressionErrors(expectedErrors0);
    }

    @Test
    public void test20() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        PostgresCommon.addCommonExpressionErrors(expectedErrors0);
    }

    @Test
    public void test21() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        PostgresCommon.addCommonTableErrors(expectedErrors0);
    }

    @Test
    public void test22() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        PostgresCommon.addCommonInsertUpdateErrors(expectedErrors0);
    }

    @Test
    public void test23() throws Throwable {
        List<Pattern> list0 = PostgresCommon.getCommonExpressionRegexErrors();
        assertFalse(list0.isEmpty());
    }

    @Test
    public void test24() throws Throwable {
        List<String> list0 = PostgresCommon.getGroupingErrors();
        StringBuilder stringBuilder0 = new StringBuilder(2);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, true, false,
                list0);
        assertFalse(boolean0);
    }

    @Test
    public void test25() throws Throwable {
        ExpectedErrors expectedErrors0 = new ExpectedErrors();
        PostgresCommon.addCommonFetchErrors(expectedErrors0);
    }

    @Test
    public void test26() throws Throwable {
        List<String> list0 = PostgresCommon.getCommonExpressionErrors();
        assertEquals(54, list0.size());
    }

    @Test
    public void test27() throws Throwable {
        List<String> list0 = PostgresCommon.getCommonInsertUpdateErrors();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.DECIMAL;
        StringBuilder stringBuilder0 = new StringBuilder(2105);
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, true, false,
                list0);
        assertFalse(boolean0);
    }

    @Test
    public void test28() throws Throwable {
        List<String> list0 = PostgresCommon.getCommonTableErrors();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
        StringBuilder stringBuilder0 = new StringBuilder();
        boolean boolean0 = PostgresCommon.appendDataType(postgresSchema_PostgresDataType0, stringBuilder0, false, false,
                list0);
        assertEquals("boolean", stringBuilder0.toString());
        assertFalse(boolean0);
    }

    @Test
    public void test29() throws Throwable {
        List<String> list0 = PostgresCommon.getCommonFetchErrors();
        assertEquals(7, list0.size());
    }
}
