/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 16:11:21 GMT 2025
 */

package sqlancer.evosuite.postgres;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import sqlancer.postgres.ast.PostgresAggregate;
import sqlancer.postgres.ast.PostgresBetweenOperation;
import sqlancer.postgres.ast.PostgresBinaryLogicalOperation;
import sqlancer.postgres.ast.PostgresCastOperation;
import sqlancer.postgres.ast.PostgresCollate;
import sqlancer.postgres.ast.PostgresColumnReference;
import sqlancer.postgres.ast.PostgresColumnValue;
import sqlancer.postgres.ast.PostgresConcatOperation;
import sqlancer.postgres.ast.PostgresConstant;
import sqlancer.postgres.ast.PostgresExpression;
import sqlancer.postgres.ast.PostgresFunction;
import sqlancer.postgres.ast.PostgresFunctionWithUnknownResult;
import sqlancer.postgres.ast.PostgresInOperation;
import sqlancer.postgres.ast.PostgresLikeOperation;
import sqlancer.postgres.ast.PostgresOrderByTerm;
import sqlancer.postgres.ast.PostgresPOSIXRegularExpression;
import sqlancer.postgres.ast.PostgresPostfixOperation;
import sqlancer.postgres.ast.PostgresPostfixText;
import sqlancer.postgres.ast.PostgresPrefixOperation;
import sqlancer.postgres.ast.PostgresSelect;
import sqlancer.postgres.ast.PostgresSimilarTo;
import sqlancer.postgres.ast.PostgresTableReference;
import sqlancer.postgres.PostgresCompoundDataType;
import sqlancer.postgres.PostgresExpectedValueVisitor;
import sqlancer.postgres.PostgresSchema;
import sqlancer.Randomly;

public class PostgresExpectedValueVisitor_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.AND;
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "sqlancer");
        PostgresConstant postgresConstant0 = postgresBinaryLogicalOperation_BinaryLogicalOperator0
                .apply(postgresConstant_StringConstant0, postgresConstant_StringConstant0);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant0,
                postgresPrefixOperation_PrefixOperator0);
        postgresExpectedValueVisitor0.visit(postgresPrefixOperation0);
        assertEquals("- (FALSE) -- null\nFALSE -- FALSE\n", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test01() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant.IntConstant postgresConstant_IntConstant0 = new PostgresConstant.IntConstant(0L);
        postgresExpectedValueVisitor0.visit((PostgresConstant) postgresConstant_IntConstant0);
        assertEquals("0 -- 0\n", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test02() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "sqlancer");
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_StringConstant0,
                postgresCompoundDataType0);
        postgresExpectedValueVisitor0.visit(postgresCastOperation0);
        assertEquals("('sqlancer')::VARCHAR -- 'sqlancer'\n'sqlancer' -- 'sqlancer'\n",
                postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test03() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        postgresExpectedValueVisitor0.visit((PostgresTableReference) null);
        assertEquals("", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test04() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresExpression postgresExpression0 = PostgresConstant.createBitConstant((-1135L));
        postgresSelect0.setWhereClause(postgresExpression0);
        postgresExpectedValueVisitor0.visit(postgresSelect0);
        assertEquals(
                "B'1111111111111111111111111111111111111111111111111111101110010001' -- B'1111111111111111111111111111111111111111111111111111101110010001'\n",
                postgresExpectedValueVisitor0.get());
    }

    // @Test
    // public void test05() throws Throwable {
    // PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
    // LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
    // PostgresSchema.PostgresIndex[] postgresSchema_PostgresIndexArray0 = new PostgresSchema.PostgresIndex[2];
    // List<PostgresSchema.PostgresIndex> list0 = Randomly.subset(postgresSchema_PostgresIndexArray0);
    // PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 =
    // PostgresSchema.PostgresTable.TableType.TEMPORARY;
    // List<PostgresSchema.PostgresStatisticsObject> list1 = List.of();
    // PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable("MQ4[",
    // linkedList0, list0, postgresSchema_PostgresTable_TableType0, list1, false, false);
    // PostgresSelect.PostgresFromTable postgresSelect_PostgresFromTable0 = new PostgresSelect.PostgresFromTable(
    // postgresSchema_PostgresTable0, true);
    // postgresExpectedValueVisitor0.visit(postgresSelect_PostgresFromTable0);
    // assertEquals("ONLY MQ4[ -- null\n", postgresExpectedValueVisitor0.get());
    // }

    @Test
    public void test06() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresExpression postgresExpression0 = PostgresConstant.createBitConstant(0L);
        PostgresConstant postgresConstant0 = PostgresConstant.createFloatConstant(0L);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresExpression0, (String) null,
                postgresConstant0, postgresSchema_PostgresDataType0);
        postgresExpectedValueVisitor0.visit(postgresPostfixText0);
        assertEquals("B'0'null -- 0.0\nB'0' -- B'0'\n", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test07() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant.BitConstant postgresConstant_BitConstant0 = new PostgresConstant.BitConstant((-398L));
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresConstant_BitConstant0,
                postgresPrefixOperation_PrefixOperator0);
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresPrefixOperation0,
                postgresPrefixOperation0);
        postgresExpectedValueVisitor0.visit(postgresLikeOperation0);
        assertEquals(
                "((- (B'1111111111111111111111111111111111111111111111111111111001110010'))LIKE(- (B'1111111111111111111111111111111111111111111111111111111001110010'))) -- null\n- (B'1111111111111111111111111111111111111111111111111111111001110010') -- null\nB'1111111111111111111111111111111111111111111111111111111001110010' -- B'1111111111111111111111111111111111111111111111111111111001110010'\n- (B'1111111111111111111111111111111111111111111111111111111001110010') -- null\nB'1111111111111111111111111111111111111111111111111111111001110010' -- B'1111111111111111111111111111111111111111111111111111111001110010'\n",
                postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test08() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn
                .createDummy((String) null);
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue(postgresSchema_PostgresColumn0,
                (PostgresConstant) null);
        postgresExpectedValueVisitor0.visit(postgresColumnValue0);
        assertEquals("null -- null\n", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test09() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn
                .createDummy((String) null);
        PostgresColumnReference postgresColumnReference0 = new PostgresColumnReference(postgresSchema_PostgresColumn0);
        postgresExpectedValueVisitor0.visit(postgresColumnReference0);
        assertEquals("null -- null\n", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test10() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresConstant0, "$yF3t=U");
        postgresExpectedValueVisitor0.visit(postgresCollate0);
        assertEquals("(FALSE COLLATE \"$yF3t=U\") -- null\nFALSE -- FALSE\n", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test11() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(true);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant0, postgresConstant0,
                postgresConstant0);
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresConstant0,
                postgresConstant0, postgresSimilarTo0, true);
        postgresExpectedValueVisitor0.visit(postgresBetweenOperation0);
        assertEquals(
                "(TRUE) BETWEEN SYMMETRIC (TRUE) AND ((TRUE SIMILAR TO TRUETRUE)) -- null\nTRUE -- TRUE\nTRUE -- TRUE\n(TRUE SIMILAR TO TRUETRUE) -- null\nTRUE -- TRUE\nTRUE -- TRUE\nTRUE -- TRUE\n",
                postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test12() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_FALSE;
        PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(
                postgresConstant_PostgresNullConstant0, postgresPostfixOperation_PostfixOperator0);
        postgresExpectedValueVisitor0.visit(postgresPostfixOperation0);
        postgresExpectedValueVisitor0.get();
        assertEquals("(NULL) IS FALSE -- FALSE\nNULL -- NULL\n", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test13() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.UPPER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[2];
        PostgresConstant postgresConstant0 = PostgresConstant.createTrue();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        BigDecimal bigDecimal0 = BigDecimal.ZERO;
        PostgresConstant.DecimalConstant postgresConstant_DecimalConstant0 = new PostgresConstant.DecimalConstant(
                bigDecimal0);
        postgresExpressionArray0[1] = (PostgresExpression) postgresConstant_DecimalConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresFunction0,
                postgresFunction0, postgresConstant0, true);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresBetweenOperation0,
                postgresExpressionArray0[1], postgresExpressionArray0[1]);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresSimilarTo0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test14() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        LinkedList<PostgresExpression> linkedList0 = new LinkedList<PostgresExpression>();
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.BOOL_OR;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate(linkedList0,
                postgresAggregate_PostgresAggregateFunction0);
        linkedList0.add((PostgresExpression) postgresAggregate0);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresAggregate0, postgresAggregate0,
                postgresAggregate0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresSimilarTo0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test15() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createTextConstant((String) null);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant0, postgresConstant0,
                postgresConstant0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresSimilarTo0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant$StringConstant", e);
        }
    }

    @Test
    public void test16() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresSelect0, postgresSelect0, postgresSelect0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresSimilarTo0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test17() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresSimilarTo) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test18() throws Throwable {
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresConstant postgresConstant0 = PostgresConstant.createDoubleConstant(237.0558735655961);
        LinkedList<PostgresExpression> linkedList0 = new LinkedList<PostgresExpression>();
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant0, linkedList0, true);
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.UPPER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresFunction0, postgresInOperation0,
                postgresInOperation0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresSimilarTo0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$4", e);
        }
    }

    @Test
    public void test19() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresSelect) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresExpectedValueVisitor", e);
        }
    }

    @Test
    public void test20() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect.PostgresSubquery postgresSelect_PostgresSubquery0 = new PostgresSelect.PostgresSubquery(
                (PostgresSelect) null, "' ORDER BY column_na+e");
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresSelect_PostgresSubquery0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test21() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSelect.PostgresSubquery postgresSelect_PostgresSubquery0 = new PostgresSelect.PostgresSubquery(
                postgresSelect0, "doris");
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresSelect_PostgresSubquery0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test22() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect.PostgresFromTable postgresSelect_PostgresFromTable0 = new PostgresSelect.PostgresFromTable(
                (PostgresSchema.PostgresTable) null, true);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresSelect_PostgresFromTable0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test23() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(
                postgresConstant_PostgresNullConstant0, postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPrefixOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test24() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant.DoubleConstant postgresConstant_DoubleConstant0 = new PostgresConstant.DoubleConstant(
                (-2879.97857));
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant_DoubleConstant0,
                postgresConstant_DoubleConstant0);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresLikeOperation0,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPrefixOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // -2879.97857
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test25() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresColumnReference postgresColumnReference0 = new PostgresColumnReference(
                (PostgresSchema.PostgresColumn) null);
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresColumnReference0,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPrefixOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test26() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.NOT;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(postgresSelect0,
                postgresPrefixOperation_PrefixOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPrefixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test27() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "pg_jit_available");
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresSelect0, "pg_jit_available",
                postgresConstant_StringConstant0, postgresSchema_PostgresDataType0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPostfixText0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test28() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresPostfixText) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test29() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createFloatConstant(63.7971F);
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_TRUE;
        PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(postgresConstant0,
                postgresPostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPostfixOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPostfixOperation$PostfixOperator$5", e);
        }
    }

    @Test
    public void test30() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_NOT_NULL;
        PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(postgresSelect0,
                postgresPostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPostfixOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test31() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresPostfixOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test32() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        LinkedList<PostgresExpression> linkedList0 = new LinkedList<PostgresExpression>();
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.BOOL_OR;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate(linkedList0,
                postgresAggregate_PostgresAggregateFunction0);
        linkedList0.add((PostgresExpression) postgresAggregate0);
        PostgresPOSIXRegularExpression.POSIXRegex postgresPOSIXRegularExpression_POSIXRegex0 = PostgresPOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_SENSITIVE;
        PostgresPOSIXRegularExpression postgresPOSIXRegularExpression0 = new PostgresPOSIXRegularExpression(
                postgresAggregate0, postgresAggregate0, postgresPOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPOSIXRegularExpression0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test33() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect.PostgresSubquery postgresSelect_PostgresSubquery0 = new PostgresSelect.PostgresSubquery(
                (PostgresSelect) null, "l=]UO|!#^u v_");
        PostgresPOSIXRegularExpression.POSIXRegex postgresPOSIXRegularExpression_POSIXRegex0 = PostgresPOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_INSENSITIVE;
        PostgresPOSIXRegularExpression postgresPOSIXRegularExpression0 = new PostgresPOSIXRegularExpression(
                postgresSelect_PostgresSubquery0, (PostgresExpression) null,
                postgresPOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPOSIXRegularExpression0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test34() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresPOSIXRegularExpression.POSIXRegex postgresPOSIXRegularExpression_POSIXRegex0 = PostgresPOSIXRegularExpression.POSIXRegex.MATCH_CASE_INSENSITIVE;
        PostgresPOSIXRegularExpression postgresPOSIXRegularExpression0 = new PostgresPOSIXRegularExpression(
                postgresSelect0, postgresSelect0, postgresPOSIXRegularExpression_POSIXRegex0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPOSIXRegularExpression0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test35() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresPOSIXRegularExpression) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test36() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresConstant postgresConstant1 = PostgresConstant.createTextConstant((String) null);
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant1);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresLikeOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant$StringConstant", e);
        }
    }

    @Test
    public void test37() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresSelect0,
                (PostgresExpression) null);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresLikeOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test38() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresLikeOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test39() throws Throwable {
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BIT;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresFunction0, postgresFunction0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresLikeOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$1", e);
        }
    }

    @Test
    public void test40() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        PostgresConstant.DecimalConstant postgresConstant_DecimalConstant0 = new PostgresConstant.DecimalConstant(
                bigDecimal0);
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant_DecimalConstant0,
                postgresConstant_DecimalConstant0);
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresLikeOperation0,
                postgresConstant_DecimalConstant0, postgresLikeOperation0, false);
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_DecimalConstant0;
        List<PostgresExpression> list0 = Randomly.nonEmptySubset(postgresExpressionArray0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresBetweenOperation0, list0, false);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresInOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // 1
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test41() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createTrue();
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant0,
                (List<PostgresExpression>) null, true);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresInOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.visitor.ToStringVisitor", e);
        }
    }

    @Test
    public void test42() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        List<PostgresExpression> list0 = postgresSelect0.getGroupByExpressions();
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresSelect0, list0, false);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresInOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test43() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresInOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test44() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LOWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresFunction0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // FALSE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test45() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        LinkedList<PostgresExpression> linkedList0 = new LinkedList<PostgresExpression>();
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.BOOL_OR;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate(linkedList0,
                postgresAggregate_PostgresAggregateFunction0);
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.NUM_NONNULLS;
        linkedList0.add((PostgresExpression) postgresAggregate0);
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[6];
        postgresExpressionArray0[0] = (PostgresExpression) postgresAggregate0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresFunction0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test46() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.ABS;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresConstant postgresConstant0 = PostgresConstant.createDoubleConstant(1743.297160671708);
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresFunction0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$1", e);
        }
    }

    @Test
    public void test47() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.POWER;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresSelect postgresSelect0 = new PostgresSelect();
        postgresExpressionArray0[0] = (PostgresExpression) postgresSelect0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunctionWithUnknownResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresFunction0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test48() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresFunction) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test49() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.TEXT;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresFunction0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$3", e);
        }
    }

    @Test
    public void test50() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                (String) null);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresConstant) postgresConstant_StringConstant0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant$StringConstant", e);
        }
    }

    @Test
    public void test51() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresConstant) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test52() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresColumnValue postgresColumnValue0 = new PostgresColumnValue((PostgresSchema.PostgresColumn) null,
                (PostgresConstant) null);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresColumnValue0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test53() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresColumnReference) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test54() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createIntConstant(136L);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant0,
                (PostgresCompoundDataType) null);
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresCastOperation0, "");
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresCollate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test55() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresSelect0, "pLk2ZwZa");
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresCollate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test56() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresCollate) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test57() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_PostgresNullConstant0,
                (PostgresCompoundDataType) null);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresCastOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test58() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.REAL;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0, 8);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresSelect0,
                postgresCompoundDataType0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresCastOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test59() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createFloatConstant((-1757.8947F));
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.OR;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresLikeOperation0, postgresConstant0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresBinaryLogicalOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // -1757.8947
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test60() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createDecimalConstant((BigDecimal) null);
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.OR;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresConstant0, postgresConstant0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresBinaryLogicalOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresBinaryLogicalOperation$BinaryLogicalOperator$2", e);
        }
    }

    @Test
    public void test61() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.OR;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresSelect0, postgresSelect0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresBinaryLogicalOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test62() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresBinaryLogicalOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test63() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.RANGE;
        PostgresFunction.PostgresFunctionWithResult postgresFunction_PostgresFunctionWithResult0 = PostgresFunction.PostgresFunctionWithResult.LENGTH;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunction_PostgresFunctionWithResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.OR;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresFunction0, postgresFunction0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresBinaryLogicalOperation0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.postgres.ast.PostgresFunction$PostgresFunctionWithResult$3", e);
        }
    }

    @Test
    public void test64() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.OR;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresLikeOperation0, postgresConstant0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(
                postgresBinaryLogicalOperation0, postgresLikeOperation0, postgresConstant0, false);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresBetweenOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // FALSE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test65() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresExpression postgresExpression0 = PostgresConstant.createBitConstant(1588L);
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresExpression0,
                postgresExpression0, postgresExpression0, false);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresBetweenOperation0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException(
                    "sqlancer.postgres.ast.PostgresBinaryComparisonOperation$PostgresBinaryComparisonOperator$6", e);
        }
    }

    @Test
    public void test66() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresSelect0,
                postgresSelect0, postgresSelect0, false);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresBetweenOperation0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test67() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresBetweenOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test68() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        LinkedList<PostgresExpression> linkedList0 = new LinkedList<PostgresExpression>();
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.BOOL_OR;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate(linkedList0,
                postgresAggregate_PostgresAggregateFunction0);
        linkedList0.add((PostgresExpression) postgresAggregate0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresAggregate0);
            fail("Expecting exception: StackOverflowError");

        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test69() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.BIT_OR;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate((List<PostgresExpression>) null,
                postgresAggregate_PostgresAggregateFunction0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresAggregate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test70() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresSelect0,
                (PostgresExpression) postgresSelect0, (PostgresExpression) postgresSelect0,
                (PostgresExpression) postgresSelect0, (PostgresExpression) postgresSelect0);
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.BOOL_OR;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate(list0,
                postgresAggregate_PostgresAggregateFunction0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresAggregate0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.common.ast.SelectBase", e);
        }
    }

    @Test
    public void test71() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresAggregate) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test72() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresPrefixOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test73() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresCastOperation) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test74() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresSelect.PostgresSubquery) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test75() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.AND;
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                "sPYI<vn0D\"");
        PostgresConstant postgresConstant0 = postgresBinaryLogicalOperation_BinaryLogicalOperator0
                .apply(postgresConstant_StringConstant0, postgresConstant_StringConstant0);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresConstant0,
                postgresConstant_StringConstant0, postgresConstant_StringConstant0);
        postgresExpectedValueVisitor0.visit(postgresSimilarTo0);
        assertEquals(
                "(FALSE SIMILAR TO 'sPYI<vn0D\"''sPYI<vn0D\"') -- null\nFALSE -- FALSE\n'sPYI<vn0D\"' -- 'sPYI<vn0D\"'\n'sPYI<vn0D\"' -- 'sPYI<vn0D\"'\n",
                postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test76() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.LEFT;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[0];
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunctionWithUnknownResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        PostgresSimilarTo postgresSimilarTo0 = new PostgresSimilarTo(postgresFunction0, postgresFunction0,
                (PostgresExpression) null);
        postgresExpectedValueVisitor0.visit(postgresSimilarTo0);
        assertEquals("(left() SIMILAR TO left()) -- null\nleft() -- null\nleft() -- null\n",
                postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test77() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresConstant0,
                (PostgresExpression) postgresConstant0, (PostgresExpression) postgresConstant0,
                (PostgresExpression) postgresConstant0, (PostgresExpression) postgresConstant0,
                (PostgresExpression) postgresConstant0, (PostgresExpression) postgresConstant0,
                (PostgresExpression) postgresConstant0);
        PostgresInOperation postgresInOperation0 = new PostgresInOperation(postgresConstant0, list0, true);
        postgresExpectedValueVisitor0.visit(postgresInOperation0);
        assertEquals(
                "(FALSE) IN (FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE) -- TRUE\nFALSE -- FALSE\nFALSE -- FALSE\nFALSE -- FALSE\nFALSE -- FALSE\nFALSE -- FALSE\nFALSE -- FALSE\nFALSE -- FALSE\nFALSE -- FALSE\nFALSE -- FALSE\n",
                postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test78() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.DECIMAL;
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.LEFT;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[2];
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant_PostgresNullConstant0;
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(
                postgresConstant_PostgresNullConstant0, postgresPrefixOperation_PrefixOperator0);
        postgresExpressionArray0[1] = (PostgresExpression) postgresPrefixOperation0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunctionWithUnknownResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresFunction0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test79() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant.StringConstant postgresConstant_StringConstant0 = new PostgresConstant.StringConstant(
                (String) null);
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.FLOAT;
        PostgresPostfixText postgresPostfixText0 = new PostgresPostfixText(postgresConstant0, "",
                postgresConstant_StringConstant0, postgresSchema_PostgresDataType0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPostfixText0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant$StringConstant", e);
        }
    }

    @Test
    public void test80() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createRange(1529L, false, 1529L, false);
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        PostgresCollate postgresCollate0 = new PostgresCollate(postgresLikeOperation0, "");
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresCollate0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // '(1529,1529)'::int4range
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test81() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        String string0 = postgresExpectedValueVisitor0.get();
        assertEquals("", string0);
    }

    @Test
    public void test82() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        postgresExpectedValueVisitor0.visit((PostgresOrderByTerm) null);
        assertEquals("", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test83() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresSelect.PostgresFromTable) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test84() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(true);
        PostgresPOSIXRegularExpression.POSIXRegex postgresPOSIXRegularExpression_POSIXRegex0 = PostgresPOSIXRegularExpression.POSIXRegex.NOT_MATCH_CASE_INSENSITIVE;
        PostgresPOSIXRegularExpression postgresPOSIXRegularExpression0 = new PostgresPOSIXRegularExpression(
                postgresConstant0, postgresConstant0, postgresPOSIXRegularExpression_POSIXRegex0);
        postgresExpectedValueVisitor0.visit(postgresPOSIXRegularExpression0);
        assertEquals("TRUE!~*TRUE -- null\nTRUE -- TRUE\nTRUE -- TRUE\n", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test85() throws Throwable {
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresPrefixOperation.PrefixOperator postgresPrefixOperation_PrefixOperator0 = PostgresPrefixOperation.PrefixOperator.UNARY_MINUS;
        PostgresPrefixOperation postgresPrefixOperation0 = new PostgresPrefixOperation(
                postgresConstant_PostgresNullConstant0, postgresPrefixOperation_PrefixOperator0);
        PostgresBetweenOperation postgresBetweenOperation0 = new PostgresBetweenOperation(postgresPrefixOperation0,
                postgresConstant_PostgresNullConstant0, postgresPrefixOperation0, true);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresBetweenOperation0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.ast.PostgresPrefixOperation$PrefixOperator$3", e);
        }
    }

    @Test
    public void test86() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresColumnReference postgresColumnReference0 = new PostgresColumnReference(
                (PostgresSchema.PostgresColumn) null);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresColumnReference0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.postgres.PostgresToStringVisitor", e);
        }
    }

    @Test
    public void test87() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(true);
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        PostgresConcatOperation postgresConcatOperation0 = new PostgresConcatOperation(postgresLikeOperation0,
                postgresLikeOperation0);
        PostgresPostfixOperation.PostfixOperator postgresPostfixOperation_PostfixOperator0 = PostgresPostfixOperation.PostfixOperator.IS_UNKNOWN;
        PostgresPostfixOperation postgresPostfixOperation0 = new PostgresPostfixOperation(postgresConcatOperation0,
                postgresPostfixOperation_PostfixOperator0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresPostfixOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // TRUE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test88() throws Throwable {
        PostgresConstant postgresConstant0 = PostgresConstant.createFalse();
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresLikeOperation postgresLikeOperation0 = new PostgresLikeOperation(postgresConstant0, postgresConstant0);
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresLikeOperation0);
            fail("Expecting exception: UnsupportedOperationException");

        } catch (UnsupportedOperationException e) {
            //
            // FALSE
            //
            verifyException("sqlancer.postgres.ast.PostgresConstant", e);
        }
    }

    @Test
    public void test89() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit((PostgresColumnValue) null);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test90() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresSelect postgresSelect0 = new PostgresSelect();
        // Undeclared exception!
        try {
            postgresExpectedValueVisitor0.visit(postgresSelect0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // null
            //
        }
    }

    @Test
    public void test91() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant postgresConstant0 = PostgresConstant.createBooleanConstant(true);
        PostgresBinaryLogicalOperation.BinaryLogicalOperator postgresBinaryLogicalOperation_BinaryLogicalOperator0 = PostgresBinaryLogicalOperation.BinaryLogicalOperator.OR;
        PostgresBinaryLogicalOperation postgresBinaryLogicalOperation0 = new PostgresBinaryLogicalOperation(
                postgresConstant0, postgresConstant0, postgresBinaryLogicalOperation_BinaryLogicalOperator0);
        postgresExpectedValueVisitor0.visit(postgresBinaryLogicalOperation0);
        assertEquals("((TRUE)OR(TRUE)) -- TRUE\nTRUE -- TRUE\nTRUE -- TRUE\n", postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test92() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresConstant.PostgresNullConstant postgresConstant_PostgresNullConstant0 = new PostgresConstant.PostgresNullConstant();
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        PostgresCompoundDataType postgresCompoundDataType0 = PostgresCompoundDataType
                .create(postgresSchema_PostgresDataType0);
        PostgresCastOperation postgresCastOperation0 = new PostgresCastOperation(postgresConstant_PostgresNullConstant0,
                postgresCompoundDataType0);
        List<PostgresExpression> list0 = List.of((PostgresExpression) postgresConstant_PostgresNullConstant0,
                (PostgresExpression) postgresConstant_PostgresNullConstant0,
                (PostgresExpression) postgresConstant_PostgresNullConstant0,
                (PostgresExpression) postgresCastOperation0, (PostgresExpression) postgresCastOperation0,
                (PostgresExpression) postgresConstant_PostgresNullConstant0);
        PostgresAggregate.PostgresAggregateFunction postgresAggregate_PostgresAggregateFunction0 = PostgresAggregate.PostgresAggregateFunction.COUNT;
        PostgresAggregate postgresAggregate0 = new PostgresAggregate(list0,
                postgresAggregate_PostgresAggregateFunction0);
        postgresExpectedValueVisitor0.visit(postgresAggregate0);
        assertEquals(
                "COUNT(NULL, NULL, NULL, (NULL)::MONEY, (NULL)::MONEY, NULL) -- null\nNULL -- NULL\nNULL -- NULL\nNULL -- NULL\n(NULL)::MONEY -- NULL\nNULL -- NULL\n(NULL)::MONEY -- NULL\nNULL -- NULL\nNULL -- NULL\n",
                postgresExpectedValueVisitor0.get());
    }

    @Test
    public void test93() throws Throwable {
        PostgresExpectedValueVisitor postgresExpectedValueVisitor0 = new PostgresExpectedValueVisitor();
        PostgresFunctionWithUnknownResult postgresFunctionWithUnknownResult0 = PostgresFunctionWithUnknownResult.LOG;
        PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.MONEY;
        PostgresExpression[] postgresExpressionArray0 = new PostgresExpression[1];
        PostgresConstant postgresConstant0 = PostgresConstant.createNullConstant();
        postgresExpressionArray0[0] = (PostgresExpression) postgresConstant0;
        PostgresFunction postgresFunction0 = new PostgresFunction(postgresFunctionWithUnknownResult0,
                postgresSchema_PostgresDataType0, postgresExpressionArray0);
        postgresExpectedValueVisitor0.visit(postgresFunction0);
        assertEquals("log(NULL) -- null\nNULL -- NULL\n", postgresExpectedValueVisitor0.get());
    }
}
