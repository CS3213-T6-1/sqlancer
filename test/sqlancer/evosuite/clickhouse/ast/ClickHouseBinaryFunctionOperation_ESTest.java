/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 03:28:47 GMT 2025
 */

package sqlancer.evosuite.clickhouse.ast;

import static org.junit.jupiter.api.Assertions.*;
import java.math.BigInteger;
import org.junit.jupiter.api.Test;
import sqlancer.clickhouse.ast.ClickHouseAggregate;
import sqlancer.clickhouse.ast.ClickHouseBinaryArithmeticOperation;
import sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation;
import sqlancer.clickhouse.ast.ClickHouseExpression;
import sqlancer.clickhouse.ast.ClickHouseTableReference;
import sqlancer.clickhouse.ast.constant.ClickHouseNullConstant;
import sqlancer.clickhouse.ast.constant.ClickHouseUInt128Constant;
import sqlancer.clickhouse.ClickHouseSchema;

public class ClickHouseBinaryFunctionOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test00() throws Throwable {
        ClickHouseNullConstant clickHouseNullConstant0 = new ClickHouseNullConstant();
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MIN2;
        ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = ClickHouseBinaryFunctionOperation.create(
                clickHouseNullConstant0, clickHouseNullConstant0,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
        ClickHouseBinaryFunctionOperation.create(clickHouseBinaryFunctionOperation0, clickHouseNullConstant0,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
    }

    @Test
    public void test01() throws Throwable {
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.INT_DIV;
        ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(
                (ClickHouseSchema.ClickHouseTable) null, "");
        ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.CROSS;
        ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin(
                (ClickHouseTableReference) null, clickHouseTableReference0,
                clickHouseExpression_ClickHouseJoin_JoinType0);
        ClickHouseAggregate clickHouseAggregate0 = new ClickHouseAggregate((ClickHouseExpression) null,
                (ClickHouseAggregate.ClickHouseAggregateFunction) null);
        ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation(
                clickHouseExpression_ClickHouseJoin0, clickHouseAggregate0,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
        assertEquals("intDiv", clickHouseBinaryFunctionOperation0.getOperatorRepresentation());
    }

    @Test
    public void test02() throws Throwable {
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.LCM;
        ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation(
                (ClickHouseExpression) null, (ClickHouseExpression) null,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
        ClickHouseExpression clickHouseExpression0 = clickHouseBinaryFunctionOperation0.getRight();
        assertNull(clickHouseExpression0);
    }

    @Test
    public void test03() throws Throwable {
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MAX2;
        ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation(
                (ClickHouseExpression) null, (ClickHouseExpression) null,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
        ClickHouseExpression clickHouseExpression0 = clickHouseBinaryFunctionOperation0.getLeft();
        assertNull(clickHouseExpression0);
    }

    @Test
    public void test04() throws Throwable {
        ClickHouseNullConstant clickHouseNullConstant0 = new ClickHouseNullConstant();
        ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = ClickHouseBinaryFunctionOperation.create(
                clickHouseNullConstant0, clickHouseNullConstant0,
                (ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator) null);
        // Undeclared exception!
        try {
            clickHouseBinaryFunctionOperation0.getOperatorRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation", e);
        }
    }

    @Test
    public void test05() throws Throwable {
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.INT_DIV;
        String string0 = clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0.getTextRepresentation();
        assertEquals("intDiv", string0);
    }

    @Test
    public void test06() throws Throwable {
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator
                .getRandom();
        assertEquals(ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.INT_DIV,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
    }

    @Test
    public void test07() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        ClickHouseUInt128Constant clickHouseUInt128Constant0 = new ClickHouseUInt128Constant(bigInteger0);
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MODULO;
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(
                clickHouseUInt128Constant0, clickHouseUInt128Constant0,
                clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.POW;
        ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = ClickHouseBinaryFunctionOperation.create(
                clickHouseBinaryArithmeticOperation0, clickHouseBinaryArithmeticOperation0,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
        clickHouseBinaryFunctionOperation0.getRight();
    }

    @Test
    public void test08() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        ClickHouseUInt128Constant clickHouseUInt128Constant0 = new ClickHouseUInt128Constant(bigInteger0);
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MODULO;
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(
                clickHouseUInt128Constant0, clickHouseUInt128Constant0,
                clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.POW;
        ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = ClickHouseBinaryFunctionOperation.create(
                clickHouseBinaryArithmeticOperation0, clickHouseBinaryArithmeticOperation0,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
        clickHouseBinaryFunctionOperation0.getLeft();
    }

    @Test
    public void test09() throws Throwable {
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MIN2;
        ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = ClickHouseBinaryFunctionOperation.create(
                (ClickHouseExpression) null, (ClickHouseExpression) null,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
        String string0 = clickHouseBinaryFunctionOperation0.getOperatorRepresentation();
        assertEquals("min2", string0);
    }

    @Test
    public void test10() throws Throwable {
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.LCM;
        ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation(
                (ClickHouseExpression) null, (ClickHouseExpression) null,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
        ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator1 = clickHouseBinaryFunctionOperation0
                .getOperator();
        assertEquals(ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.LCM,
                clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator1);
    }
}
