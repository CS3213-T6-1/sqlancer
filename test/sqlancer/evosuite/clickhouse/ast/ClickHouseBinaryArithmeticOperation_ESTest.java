/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 12 02:20:25 GMT 2025
 */

package sqlancer.evosuite.clickhouse.ast;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import sqlancer.clickhouse.ast.ClickHouseBinaryArithmeticOperation;
import sqlancer.clickhouse.ast.ClickHouseExpression;
import sqlancer.clickhouse.ast.ClickHouseSelect;
import sqlancer.clickhouse.ast.constant.ClickHouseInt32Constant;

public class ClickHouseBinaryArithmeticOperation_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test0() throws Throwable {
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MODULO;
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(
                (ClickHouseExpression) null, (ClickHouseExpression) null,
                clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
        ClickHouseExpression clickHouseExpression0 = clickHouseBinaryArithmeticOperation0.getRight();
        assertNull(clickHouseExpression0);
    }

    @Test
    public void test1() throws Throwable {
        ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MINUS;
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(
                clickHouseSelect0, clickHouseSelect0,
                clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator1 = clickHouseBinaryArithmeticOperation0
                .getOperator();
        assertEquals(ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MINUS,
                clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator1);
    }

    @Test
    public void test2() throws Throwable {
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MODULO;
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(
                (ClickHouseExpression) null, (ClickHouseExpression) null,
                clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
        ClickHouseExpression clickHouseExpression0 = clickHouseBinaryArithmeticOperation0.getLeft();
        assertNull(clickHouseExpression0);
    }

    @Test
    public void test3() throws Throwable {
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MULT;
        String string0 = clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0
                .getTextRepresentation();
        assertEquals("*", string0);
    }

    @Test
    public void test4() throws Throwable {
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator
                .getRandom();
        assertEquals("+",
                clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0.getTextRepresentation());
    }

    @Test
    public void test5() throws Throwable {
        ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MINUS;
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = ClickHouseBinaryArithmeticOperation
                .create(clickHouseSelect0, clickHouseSelect0,
                        clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
        String string0 = clickHouseBinaryArithmeticOperation0.getOperatorRepresentation();
        assertEquals("-", string0);
    }

    @Test
    public void test6() throws Throwable {
        ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(
                clickHouseSelect0, clickHouseSelect0,
                (ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator) null);
        // Undeclared exception!
        try {
            clickHouseBinaryArithmeticOperation0.getOperatorRepresentation();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.clickhouse.ast.ClickHouseBinaryArithmeticOperation", e);
        }
    }

    @Test
    public void test7() throws Throwable {
        ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MULT;
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(
                clickHouseSelect0, clickHouseSelect0,
                clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
        ClickHouseExpression clickHouseExpression0 = clickHouseBinaryArithmeticOperation0.getRight();
        assertSame(clickHouseSelect0, clickHouseExpression0);
    }

    @Test
    public void test8() throws Throwable {
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(
                (ClickHouseExpression) null, (ClickHouseExpression) null,
                (ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator) null);
        clickHouseBinaryArithmeticOperation0.getOperator();
    }

    @Test
    public void test9() throws Throwable {
        ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MINUS;
        ClickHouseInt32Constant clickHouseInt32Constant0 = new ClickHouseInt32Constant(0L);
        ClickHouseExpression.ClickHouseExist clickHouseExpression_ClickHouseExist0 = new ClickHouseExpression.ClickHouseExist(
                clickHouseInt32Constant0);
        ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
        ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = ClickHouseBinaryArithmeticOperation
                .create(clickHouseExpression_ClickHouseExist0, clickHouseSelect0,
                        clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
        clickHouseBinaryArithmeticOperation0.getLeft();
    }
}
