/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 11 23:23:53 GMT 2025
 */

package sqlancer.evosuite;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigInteger;
import java.util.function.Supplier;
import java.util.LinkedList;
import java.util.List;

import org.junit.jupiter.api.Test;
import sqlancer.MainOptions;
import sqlancer.Randomly;

public class Randomly_ESTest {

    private void verifyException(String s, Exception e) {
    }

    @Test
    public void test000() throws Throwable {
        Randomly randomly0 = new Randomly();
        randomly0.getChar();
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = BigInteger.TEN;
        BigInteger bigInteger2 = randomly0.getBigInteger(bigInteger0, bigInteger1);
        assertEquals((byte) 4, bigInteger2.byteValue());
    }

    @Test
    public void test001() throws Throwable {
        Randomly randomly0 = new Randomly(0L);
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = new BigInteger(byteArray0);
        BigInteger bigInteger2 = randomly0.getBigInteger(bigInteger0, bigInteger1);
        assertSame(bigInteger2, bigInteger0);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test002() throws Throwable { Randomly.StringGenerationStrategy[]
     * randomly_StringGenerationStrategyArray0 = Randomly.StringGenerationStrategy .values(); Supplier<String> supplier0
     * = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new
     * Randomly(supplier0); randomly0.getString(); List<Object> list0 = Randomly.subset(3, (Object[])
     * randomly_StringGenerationStrategyArray0); List<Object> list1 = Randomly.nonEmptySubsetPotentialDuplicates(list0);
     * int int0 = randomly0.getPositiveIntegerInt(); assertEquals(4, int0);
     *
     * List<Object> list2 = Randomly.nonEmptySubsetPotentialDuplicates(list0); assertNotSame(list2, list1);
     *
     * randomly0.getRandomBigDecimal(); int int1 = randomly0.getPositiveIntegerInt(); assertEquals(4, int1); }
     */

    @Test
    public void test003() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getNonZeroInteger();
        assertEquals((-1L), long0);

        randomly0.getAlphabeticChar();
        long long1 = randomly0.getPositiveInteger();
        assertEquals(25L, long1);

        long long2 = randomly0.getNonZeroInteger();
        assertEquals((-1L), long2);
    }

    @Test
    public void test004() throws Throwable {
        Randomly randomly0 = new Randomly();
        String string0 = randomly0.getChar();
        assertEquals("3", string0);

        Object[] objectArray0 = new Object[9];
        List<Object> list0 = Randomly.subset(objectArray0);
        List<Object> list1 = Randomly.nonEmptySubset(list0);
        assertEquals(2, list1.size());
    }

    @Test
    public void test005() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        List<Object> list0 = Randomly.subset((List<Object>) linkedList0);
        assertTrue(list0.isEmpty());
    }

    @Test
    public void test006() throws Throwable {
        Randomly randomly0 = new Randomly();
        randomly0.getChar();
        Randomly[] randomlyArray0 = new Randomly[9];
        List<Object> list0 = Randomly.nonEmptySubset((Object[]) randomlyArray0);
        List<Object> list1 = Randomly.subset(list0);
        assertEquals(5, list0.size());
        assertEquals(1, list1.size());
    }

    @Test
    public void test007() throws Throwable {
        Randomly randomly0 = new Randomly();
        MainOptions mainOptions0 = new MainOptions();
        Randomly.StringGenerationStrategy randomly_StringGenerationStrategy0 = mainOptions0
                .getRandomStringGenerationStrategy();
        randomly_StringGenerationStrategy0.transformCachedString(randomly0, "?");
        LinkedList<Randomly> linkedList0 = new LinkedList<Randomly>();
        List<Randomly> list0 = Randomly.nonEmptySubsetLeast((List<Randomly>) linkedList0, (-1));
        assertFalse(list0.contains(randomly0));
    }

    @Test
    public void test008() throws Throwable {
        Randomly randomly0 = new Randomly();
        Object[] objectArray0 = new Object[8];
        randomly0.getRandomBigDecimal();
        Randomly.subset(objectArray0);
        Randomly[] randomlyArray0 = new Randomly[8];
        List<Randomly> list0 = Randomly.subset(randomlyArray0);
        List<Randomly> list1 = Randomly.nonEmptySubsetLeast(list0, 1);
        assertNotSame(list1, list0);
        assertTrue(list1.equals((Object) list0));
    }

    @Test
    public void test009() throws Throwable {
        Randomly[] randomlyArray0 = new Randomly[5];
        List<Object> list0 = Randomly.subset((Object[]) randomlyArray0);
        Randomly.nonEmptySubset(list0, 0);
        assertTrue(list0.isEmpty());
        assertEquals(0, list0.size());
    }

    @Test
    public void test010() throws Throwable {
        long long0 = Randomly.getPositiveOrZeroNonCachedInteger();
        assertEquals(0L, long0);

        double double0 = Randomly.getUncachedDouble();
        assertEquals(0.1, double0, 0.01);
    }

    @Test
    public void test011() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getNonZeroInteger();
        assertEquals((-1L), long0);

        String string0 = randomly0.getString();
        assertEquals("2", string0);
    }

    @Test
    public void test012() throws Throwable {
        Randomly randomly0 = new Randomly(2364L);
        long long0 = randomly0.getSeed();
        assertEquals(2364L, long0);
    }

    @Test
    public void test013() throws Throwable {
        Randomly randomly0 = new Randomly((-1674L));
        long long0 = randomly0.getSeed();
        assertEquals((-1674L), long0);
    }

    @Test
    public void test014() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getNonZeroInteger();
        assertEquals((-1L), long0);

        long long1 = Randomly.getPositiveOrZeroNonCachedInteger();
        assertEquals(1L, long1);
    }

    @Test
    public void test015() throws Throwable {
        Randomly randomly0 = new Randomly((Supplier<String>) null);
        String string0 = randomly0.getChar();
        assertEquals("3", string0);

        double double0 = Randomly.getPercentage();
        assertEquals(0.8, double0, 0.01);
    }

    @Test
    public void test016() throws Throwable {
        long long0 = Randomly.getNotCachedInteger(0, 0);
        assertEquals(0L, long0);
    }

    @Test
    public void test017() throws Throwable {
        long long0 = Randomly.getNotCachedInteger(2073, 2073);
        assertEquals(2073L, long0);
    }

    @Test
    public void test018() throws Throwable {
        long long0 = Randomly.getNotCachedInteger((-1674), (-1674));
        assertEquals((-1674L), long0);
    }

    @Test
    public void test019() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getPositiveIntegerNotNull();
        assertEquals(2L, long0);

        long long1 = Randomly.getNonCachedInteger();
        assertEquals(6L, long1);
    }

    @Test
    public void test020() throws Throwable {
        Randomly randomly0 = new Randomly(0L);
        long long0 = randomly0.getLong(0L, 0);
        assertEquals(0L, long0);
    }

    @Test
    public void test021() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getLong((-1689L), (-1689L));
        assertEquals((-1689L), long0);
    }

    @Test
    public void test022() throws Throwable {
        Randomly randomly0 = new Randomly();
        int int0 = randomly0.getInteger(0, 0);
        assertEquals(0, int0);
    }

    @Test
    public void test023() throws Throwable {
        Randomly randomly0 = new Randomly();
        int int0 = randomly0.getInteger((-1878), 0);
        assertEquals((-1878), int0);
    }

    @Test
    public void test024() throws Throwable {
        Randomly randomly0 = new Randomly();
        byte[] byteArray0 = new byte[5];
        byteArray0[3] = (byte) (-61);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = randomly0.getBigInteger(bigInteger0, bigInteger0);
        assertSame(bigInteger1, bigInteger0);
    }

    @Test
    public void test025() throws Throwable {
        Randomly randomly0 = new Randomly();
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) (-60);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = randomly0.getBigInteger(bigInteger0, bigInteger0);
        assertSame(bigInteger1, bigInteger0);
    }

    @Test
    public void test026() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) linkedList0;
        LinkedList linkedList1 = (LinkedList) Randomly.fromOptions(objectArray0);
        assertEquals(0, linkedList1.size());
    }

    @Test
    public void test027() throws Throwable {
        Randomly[] randomlyArray0 = new Randomly[5];
        List<Object> list0 = Randomly.nonEmptySubset((Object[]) randomlyArray0);
        Randomly.fromList(list0);
        assertEquals(1, list0.size());
    }

    @Test
    public void test028() throws Throwable {
        Randomly randomly0 = new Randomly();
        randomly0.getChar();
        int int0 = randomly0.getPositiveIntegerInt();
        assertEquals(4, int0);

        long long0 = randomly0.getPositiveIntegerNotNull();
        assertEquals(5L, long0);

        Object[] objectArray0 = new Object[9];
        objectArray0[3] = (Object) randomly0;
        List<Object> list0 = Randomly.nonEmptySubset(objectArray0);
        Object object0 = Randomly.fromList(list0);
        assertNotNull(object0);
        assertEquals(7, list0.size());
    }

    @Test
    public void test029() throws Throwable {
        Object[] objectArray0 = new Object[0];
        List<Object> list0 = Randomly.subset(0, objectArray0);
        List<Object> list1 = Randomly.extractNrRandomColumns(list0, 0);
        assertNotSame(list1, list0);
    }

    @Test
    public void test030() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.subset((Object[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Objects", e);
        }
    }

    @Test
    public void test031() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.subset(1203, (Object[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections", e);
        }
    }

    @Test
    public void test032() throws Throwable {
        Randomly.StringGenerationStrategy[] randomly_StringGenerationStrategyArray0 = Randomly.StringGenerationStrategy
                .values();
        // Undeclared exception!
        try {
            Randomly.subset(921, (Object[]) randomly_StringGenerationStrategyArray0);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test033() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.nonEmptySubsetPotentialDuplicates((List<Object>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test034() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            Randomly.nonEmptySubsetPotentialDuplicates((List<Object>) linkedList0);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 0, Size: 0
            //
            verifyException("java.util.LinkedList", e);
        }
    }

    @Test
    public void test035() throws Throwable {
        List<Object> list0 = List.of();
        // Undeclared exception!
        try {
            Randomly.nonEmptySubsetPotentialDuplicates(list0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test036() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.nonEmptySubsetLeast((List<Object>) null, (-2319));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test037() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            Randomly.nonEmptySubsetLeast((List<Object>) linkedList0, 4044);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // 4044 1
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test038() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.nonEmptySubset((Object[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test039() throws Throwable {
        Object[] objectArray0 = new Object[0];
        // Undeclared exception!
        try {
            Randomly.nonEmptySubset(objectArray0);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test040() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.nonEmptySubset((List<Long>) null, (-1138));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test041() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.nonEmptySubset((List<Object>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test042() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.initialize((MainOptions) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test043() throws Throwable {
        Randomly randomly0 = new Randomly();
        // Undeclared exception!
        try {
            randomly0.getBigInteger((BigInteger) null, (BigInteger) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test044() throws Throwable {
        Randomly randomly0 = new Randomly();
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = BigInteger.TWO;
        // Undeclared exception!
        try {
            randomly0.getBigInteger(bigInteger0, bigInteger1);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // 10 2
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test045() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.fromOptions((Object[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test046() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        // Undeclared exception!
        try {
            Randomly.fromOptions(integerArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // Index 0 out of bounds for length 0
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test047() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            Randomly.fromList((List<Object>) linkedList0);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 0, Size: 0
            //
            verifyException("java.util.LinkedList", e);
        }
    }

    @Test
    public void test048() throws Throwable {
        List<Integer> list0 = List.of();
        // Undeclared exception!
        try {
            Randomly.fromList(list0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test049() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.extractNrRandomColumns((List<Object>) null, 0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test
    public void test050() throws Throwable {
        Randomly randomly0 = new Randomly();
        // Undeclared exception!
        try {
            randomly0.getLong(100000, 0L);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // 100000 0
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test051() throws Throwable {
        Randomly randomly0 = new Randomly();
        // Undeclared exception!
        try {
            randomly0.getInteger(1000, 4);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // 1000 4
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test052() throws Throwable {
        Randomly randomly0 = new Randomly(0L);
        randomly0.getRandomBigDecimal();
        boolean boolean0 = Randomly.getBooleanWithRatherLowProbability();
        assertTrue(boolean0);
    }

    @Test
    public void test053() throws Throwable {
        boolean boolean0 = Randomly.getBooleanWithRatherLowProbability();
        assertFalse(boolean0);
    }

    @Test
    public void test054() throws Throwable {
        Randomly randomly0 = new Randomly();
        double double0 = randomly0.getDouble();
        randomly0.getRandomBigDecimal();
        Object[] objectArray0 = new Object[1];
        List<Object> list0 = Randomly.subset(objectArray0);
        assertEquals(1, list0.size());

        long long0 = randomly0.getNonZeroInteger();
        assertEquals(7L, long0);

        double double1 = randomly0.getDouble();
        assertEquals(double1, double0, 0.01);
        assertEquals(0.1, double1, 0.01);
    }

    @Test
    public void test055() throws Throwable {
        Randomly randomly0 = new Randomly();
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = BigInteger.TWO;
        BigInteger bigInteger2 = randomly0.getBigInteger(bigInteger0, bigInteger1);
        assertNotSame(bigInteger2, bigInteger0);
        assertEquals((short) 0, bigInteger2.shortValue());

        double double0 = randomly0.getDouble();
        assertEquals(0.0, double0, 0.01);
    }

    @Test
    public void test056() throws Throwable {
        Randomly randomly0 = new Randomly();
        randomly0.getNonZeroInteger();
        long long0 = randomly0.getInteger();
        assertEquals((-1L), long0);
    }

    @Test
    public void test057() throws Throwable {
        Randomly randomly0 = new Randomly(0L);
        randomly0.getRandomBigDecimal();
        long long0 = randomly0.getInteger();
        assertEquals((-1L), long0);
    }

    @Test
    public void test058() throws Throwable {
        Randomly randomly0 = new Randomly();
        randomly0.getChar();
        Object[] objectArray0 = new Object[9];
        List<Object> list0 = Randomly.subset(objectArray0);
        List<Object> list1 = Randomly.extractNrRandomColumns(list0, 3);
        assertEquals(4, list0.size());
        assertFalse(list1.equals((Object) list0));
    }

    @Test
    public void test059() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            Randomly.extractNrRandomColumns((List<Object>) linkedList0, (-3529));
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test060() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            Randomly.nonEmptySubset((List<Object>) linkedList0, 794);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 794
            //
        }
    }

    @Test
    public void test061() throws Throwable {
        boolean boolean0 = Randomly.getBoolean();
        assertFalse(boolean0);
    }

    @Test
    public void test062() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.fromList((List<Long>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test063() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.subset((List<Object>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test064() throws Throwable {
        // Undeclared exception!
        try {
            Randomly.getNotCachedInteger((-223), (-1908874352));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // -223 -1908874352
            //
            verifyException("sqlancer.Randomly", e);
        }
    }

    @Test
    public void test065() throws Throwable {
        Randomly randomly0 = new Randomly();
        BigInteger bigInteger0 = BigInteger.TWO;
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) 5;
        BigInteger bigInteger1 = new BigInteger(byteArray0);
        BigInteger bigInteger2 = randomly0.getBigInteger(bigInteger1, bigInteger0);
        assertEquals((short) 0, bigInteger2.shortValue());
        assertNotSame(bigInteger2, bigInteger1);
    }

    @Test
    public void test066() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getLong(100000, 100000);
        assertEquals(100000L, long0);
    }

    @Test
    public void test067() throws Throwable {
        Randomly randomly0 = new Randomly();
        int int0 = randomly0.getInteger(100000, 100000);
        assertEquals(100000, int0);
    }

    @Test
    public void test068() throws Throwable {
        Randomly randomly0 = new Randomly();
        Randomly.getNonCachedInteger();
        double double0 = randomly0.getFiniteDouble();
        assertEquals(0.0, double0, 0.01);
    }

    @Test
    public void test069() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getNonZeroInteger();
        assertEquals((-1L), long0);

        long long1 = randomly0.getPositiveInteger();
        assertEquals(2L, long1);
    }

    @Test
    public void test070() throws Throwable {
        Randomly randomly0 = new Randomly();
        double double0 = randomly0.getDouble();
        assertEquals(0.1, double0, 0.01);

        long long0 = randomly0.getPositiveInteger();
        assertEquals(1L, long0);
    }

    @Test
    public void test071() throws Throwable {
        Randomly randomly0 = new Randomly();
        randomly0.getPositiveInteger();
        long long0 = randomly0.getNonZeroInteger();
        assertEquals(5L, long0);
    }

    @Test
    public void test072() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = Randomly.getPositiveOrZeroNonCachedInteger();
        assertEquals(0L, long0);

        long long1 = randomly0.getNonZeroInteger();
        assertEquals(9223372036854775807L, long1);
    }

    @Test
    public void test073() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getPositiveIntegerNotNull();
        assertEquals(2L, long0);

        Randomly.StringGenerationStrategy randomly_StringGenerationStrategy0 = Randomly.StringGenerationStrategy.ALPHANUMERIC_SPECIALCHAR;
        String string0 = randomly_StringGenerationStrategy0.getString(randomly0);
        assertEquals("344", string0);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test074() throws Throwable { Supplier<String> supplier0 = (Supplier<String>)
     * mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); String
     * string0 = randomly0.getAlphabeticChar(); assertEquals("D", string0); }
     */

    @Test
    public void test075() throws Throwable {
        Randomly randomly0 = new Randomly();
        Randomly.getNonCachedInteger();
        String string0 = randomly0.getChar();
        assertEquals("T", string0);
    }

    @Test
    public void test076() throws Throwable {
        boolean boolean0 = Randomly.getBooleanWithSmallProbability();
        assertFalse(boolean0);
    }

    @Test
    public void test077() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            Randomly.nonEmptySubsetLeast((List<Object>) linkedList0, 1);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test078() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            Randomly.nonEmptySubsetLeast((List<Object>) linkedList0, (-12));
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test079() throws Throwable {
        Long[] longArray0 = new Long[7];
        List<Long> list0 = Randomly.nonEmptySubset(longArray0);
        List<Long> list1 = Randomly.nonEmptySubset(list0, 1);
        assertFalse(list1.isEmpty());
        assertEquals(1, list0.size());
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test080() throws Throwable { Supplier<String> supplier0 = (Supplier<String>)
     * mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); double
     * double0 = randomly0.getFiniteDouble(); assertEquals(0.1, double0, 0.01);
     *
     * randomly0.getInteger(); Randomly.StringGenerationStrategy[] randomly_StringGenerationStrategyArray0 =
     * Randomly.StringGenerationStrategy .values(); long long0 = randomly0.getNonZeroInteger(); assertEquals(6L, long0);
     *
     * long long1 = randomly0.getNonZeroInteger(); assertEquals(6L, long1);
     *
     * List<Object> list0 = Randomly.nonEmptySubset((Object[]) randomly_StringGenerationStrategyArray0); assertEquals(3,
     * list0.size());
     *
     * double double1 = randomly0.getFiniteDouble(); assertEquals(0.1, double1, 0.01); }
     */

    @Test
    public void test081() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getNonZeroInteger();
        assertEquals((-1L), long0);

        randomly0.getPositiveIntegerInt();
        int int0 = randomly0.getPositiveIntegerInt();
        assertEquals(2, int0);

        int int1 = randomly0.getPositiveIntegerInt();
        assertEquals(3, int1);

        randomly0.getDouble();
        long long1 = randomly0.getNonZeroInteger();
        assertEquals(12L, long1);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test082() throws Throwable { Supplier<String> supplier0 = (Supplier<String>)
     * mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); double
     * double0 = randomly0.getFiniteDouble(); assertEquals(0.1, double0, 0.01);
     *
     * randomly0.getInteger(); long long0 = randomly0.getNonZeroInteger(); assertEquals(6L, long0);
     *
     * long long1 = randomly0.getNonZeroInteger(); assertEquals(6L, long1);
     *
     * double double1 = randomly0.getDouble(); assertEquals(0.1, double1, 0.01); }
     */

    @Test
    public void test083() throws Throwable {
        Randomly randomly0 = new Randomly();
        int int0 = randomly0.getPositiveIntegerInt();
        assertEquals(0, int0);

        int int1 = randomly0.getPositiveIntegerInt();
        assertEquals(0, int1);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test084() throws Throwable { Supplier<String> supplier0 = (Supplier<String>)
     * mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); double
     * double0 = randomly0.getFiniteDouble(); assertEquals(0.1, double0, 0.01);
     *
     * long long0 = randomly0.getNonZeroInteger(); assertEquals(4L, long0); }
     */

    @Test
    public void test085() throws Throwable {
        Randomly randomly0 = new Randomly();
        Randomly.StringGenerationStrategy randomly_StringGenerationStrategy0 = Randomly.StringGenerationStrategy.NUMERIC;
        String string0 = randomly_StringGenerationStrategy0.getString(randomly0);
        assertEquals("", string0);
    }

    @Test
    public void test086() throws Throwable {
        Randomly randomly0 = new Randomly();
        Randomly.StringGenerationStrategy randomly_StringGenerationStrategy0 = Randomly.StringGenerationStrategy.ALPHANUMERIC;
        String string0 = randomly_StringGenerationStrategy0.getString(randomly0);
        assertEquals("", string0);
    }

    @Test
    public void test087() throws Throwable {
        Randomly randomly0 = new Randomly((-3846L));
        long long0 = randomly0.getPositiveIntegerNotNull();
        assertEquals(2L, long0);

        Object[] objectArray0 = new Object[1];
        Randomly.fromOptions(objectArray0);
        randomly0.getAlphabeticChar();
        long long1 = randomly0.getNonZeroInteger();
        assertEquals(53L, long1);
    }

    @Test
    public void test088() throws Throwable {
        Randomly.StringGenerationStrategy[] randomly_StringGenerationStrategyArray0 = Randomly.StringGenerationStrategy
                .values();
        // Undeclared exception!
        try {
            Randomly.subset((-156), (Object[]) randomly_StringGenerationStrategyArray0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test089() throws Throwable { Supplier<String> supplier0 = (Supplier<String>)
     * mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); byte[]
     * byteArray0 = randomly0.getBytes(); assertEquals(0, byteArray0.length); }
     */

    @Test
    public void test090() throws Throwable {
        Randomly randomly0 = new Randomly();
        randomly0.getRandomBigDecimal();
        long long0 = randomly0.getPositiveIntegerNotNull();
        assertEquals(1L, long0);

        randomly0.getPositiveIntegerNotNull();
        long long1 = randomly0.getNonZeroInteger();
        assertEquals(7L, long1);

        long long2 = randomly0.getPositiveInteger();
        assertEquals(7L, long2);
    }

    @Test
    public void test091() throws Throwable {
        double double0 = Randomly.getUncachedDouble();
        assertEquals(0.0, double0, 0.01);
    }

    @Test
    public void test092() throws Throwable {
        Randomly randomly0 = new Randomly();
        randomly0.getPositiveInteger();
        randomly0.getAlphabeticChar();
        randomly0.getAlphabeticChar();
        randomly0.getAlphabeticChar();
        randomly0.getAlphabeticChar();
        randomly0.getAlphabeticChar();
        MainOptions mainOptions0 = MainOptions.DEFAULT_OPTIONS;
        Randomly.StringGenerationStrategy randomly_StringGenerationStrategy0 = mainOptions0
                .getRandomStringGenerationStrategy();
        String string0 = randomly_StringGenerationStrategy0.getString(randomly0);
        assertEquals("tuv", string0);

        String string1 = randomly_StringGenerationStrategy0.getString(randomly0);
        assertEquals("wxxyzz!!", string1);

        String string2 = randomly0.getAlphabeticChar();
        assertEquals("B", string2);
    }

    /*
     * Test disabled because it contains mock() function calls that are not implemented
     *
     * @Test public void test093() throws Throwable { Supplier<String> supplier0 = (Supplier<String>)
     * mock(Supplier.class, new ViolatedAssumptionAnswer()); Randomly randomly0 = new Randomly(supplier0); long long0 =
     * randomly0.getInteger(); long long1 = randomly0.getNonZeroInteger(); assertTrue(long1 == long0); assertEquals(1L,
     * long1); }
     */

    @Test
    public void test094() throws Throwable {
        double double0 = Randomly.getPercentage();
        assertEquals(0.0, double0, 0.01);
    }

    @Test
    public void test095() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        // Undeclared exception!
        try {
            Randomly.nonEmptySubset((List<String>) linkedList0);
            fail("Expecting exception: AssertionError");

        } catch (AssertionError e) {
            //
            // [] 1
            //
        }
    }

    @Test
    public void test096() throws Throwable {
        Randomly randomly0 = new Randomly();
        long long0 = randomly0.getSeed();
        assertEquals(0L, long0);
    }

    @Test
    public void test097() throws Throwable {
        MainOptions mainOptions0 = MainOptions.DEFAULT_OPTIONS;
        Randomly.initialize(mainOptions0);
        assertEquals((-1), mainOptions0.getTimeoutSeconds());
    }

    @Test
    public void test098() throws Throwable {
        int int0 = Randomly.smallNumber();
        assertEquals(0, int0);
    }

    @Test
    public void test099() throws Throwable {
        long long0 = Randomly.getPositiveOrZeroNonCachedInteger();
        assertEquals(0L, long0);

        boolean boolean0 = Randomly.getBooleanWithSmallProbability();
        assertTrue(boolean0);
    }

    @Test
    public void test100() throws Throwable {
        Randomly.StringGenerationStrategy[] randomly_StringGenerationStrategyArray0 = Randomly.StringGenerationStrategy
                .values();
        List<Object> list0 = Randomly.subset((Object[]) randomly_StringGenerationStrategyArray0);
        // Undeclared exception!
        try {
            Randomly.extractNrRandomColumns(list0, 3);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
        }
    }
}
